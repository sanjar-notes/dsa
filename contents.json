{
  "paths": [
    {
      "type": "file",
      "value": "README.md"
    },
    {
      "type": "dir",
      "name": "home",
      "children": [
        {
          "type": "file",
          "value": "home/1_motivation.md"
        },
        {
          "type": "file",
          "value": "home/2_resources.md"
        },
        {
          "type": "file",
          "value": "home/3_roadmap.md"
        },
        {
          "type": "dir",
          "name": "4_resource_itineraries",
          "children": [
            {
              "type": "dir",
              "name": "1_CN_Intro_to_Cpp",
              "children": [
                {
                  "type": "dir",
                  "name": "1._Flowcharts",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/0_index.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/1._Intro_to_flowcharts.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/2._Decision_Making.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/3._Loops.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/4._Largest_of_N_numbers.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/5._Assignments.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/Conclusion.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "10._Multidimensional_Arrays",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/10._Multidimensional_Arrays/0_index.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/10._Multidimensional_Arrays/Assignments.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "2._C++,_W2H",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/2._C++,_W2H/1._About_C++.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/2._C++,_W2H/2._Why_learn_C++.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/2._C++,_W2H/3._C++_Setup.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "3._main,_Variables_and_Operators",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/0_index.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/1._First_Program.md"
                    },
                    {
                      "type": "dir",
                      "name": "2._Variables_and_data_types",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/2._Variables_and_data_types/0_index.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/2._Variables_and_data_types/2.1_Type_Aliases.md"
                        },
                        {
                          "type": "dir",
                          "name": "2.2_Automatic_Type_Deductions",
                          "children": [
                            {
                              "type": "dir",
                              "name": "1._auto",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/2._Variables_and_data_types/2.2_Automatic_Type_Deductions/1._auto/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/2._Variables_and_data_types/2.2_Automatic_Type_Deductions/2._decltype.md"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/4._How_is_the_data_stored.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/5._How_are_negative_numbers_stored.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/6._Operators.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "4._Conditionals_and_while_loops",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/0_index.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/1._Conditionals.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/2._Farenheit_to_Celsius.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/3._Patterns.md"
                    },
                    {
                      "type": "dir",
                      "name": "4._Pratice_problems",
                      "children": [
                        {
                          "type": "dir",
                          "name": "1._Patterns_1",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/1._Pattern1.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/2._Square_Patterns.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/3._Triangle_Patterns.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/4._Character_Pattern.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/5._Interesting_Alphabets.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "2._Patterns_2",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2/1._Mirror_Triangles.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2/2._Isosceles_Triangle.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2/3._More_Patterns.md"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "5._For_loop_and_bitwise_ops",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/1._Bitwise_Operator.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/2._Increment_Operators.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/3.0_For_loop.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/3.1_For_each_loop.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/4._Break_and_continue.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/5._Scope_of_variables.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/6._cin_vs_cin.get().md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/7._Assignments.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "6._Functions",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/6._Functions/0_index.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/6._Functions/1._What_are_functions.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/6._Functions/2._How_function_calling_works.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/6._Functions/3._Scope_of_variables_w.r.t_functions.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/6._Functions/4._Call_by_Value.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "7._Arrays",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/0_index.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/1._Why_arrays.md"
                    },
                    {
                      "type": "dir",
                      "name": "2._More_On_Arrays",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/2._More_On_Arrays/0_index.md"
                        }
                      ]
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/3._Arrays_and_memory.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/4._Arrays_as_function_parameters.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/5._Assignments.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "8._Searching_and_Sorting",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/0_index.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/1.Linear_Search.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/2._Binary_Search.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/3._Merging_two_sorted_arrays.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/4._Bubble_Sort.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/5._Insertion_Sort.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/6._Selection_Sort.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/Analyzing_sorting_algorithms.md"
                    },
                    {
                      "type": "dir",
                      "name": "Assignments",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/Assignments/0_index.md"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/9._Stringsx.md"
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/Home.md"
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/notebook.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "2_CN_Data_Structures_and_OOP",
              "children": [
                {
                  "type": "dir",
                  "name": "1._Memory_and_Pointers",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/0_index.md"
                    },
                    {
                      "type": "dir",
                      "name": "1._Pointers",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/0_index.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/1._Pointer_Intro.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/2._Pointer_Arithmetic.md"
                        },
                        {
                          "type": "dir",
                          "name": "3._Arrays_and_Pointers",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/3._Arrays_and_Pointers/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/3._Arrays_and_Pointers/Assignment_questions.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/3._Arrays_and_Pointers/questionnaire1&2&3.md"
                            }
                          ]
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/4._Characters_and_Pointers.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/5._Function_and_Pointers.md"
                        },
                        {
                          "type": "dir",
                          "name": "6._Nested_pointer",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/6._Nested_pointer/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/6._Nested_pointer/questionnaire4&5&6.md"
                            }
                          ]
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/7._Address_Typecasting.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/8._References_and_Pass_by_Reference.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "2._Dynamic_Memory_Allocation",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/2._Dynamic_Memory_Allocation/1._Dynamic_Allocation.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/2._Dynamic_Memory_Allocation/2._Dynamic_Memory_Allocation_of_2D_arrays.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/2._Dynamic_Memory_Allocation/questionnaire1.md"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "2._Time_and_Space_Analysis",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/0_index.md"
                    },
                    {
                      "type": "dir",
                      "name": "1._Time",
                      "children": [
                        {
                          "type": "dir",
                          "name": "1._Order_Complexity_Analysis",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/1._Order_Complexity_Analysis/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/2._Linear_Search_Time_Complexity.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/3._Insertion_Sort.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/4._Selection_Sort.md"
                        },
                        {
                          "type": "dir",
                          "name": "5._Time_complexity_for_recursive_algorithms",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/5._Time_complexity_for_recursive_algorithms/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/6._Fibonacci_is_bad.md"
                        }
                      ]
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/2._Space.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/exerciseques.md"
                    },
                    {
                      "type": "dir",
                      "name": "zAssignments",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/zAssignments/0_index.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/zAssignments/after_assignments.md"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "3._Binary_Search_Trees",
                  "children": [
                    {
                      "type": "dir",
                      "name": "Quizzes&Exercises",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Binary_Search_Trees/Quizzes&Exercises/Exercises.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "zAssignments",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Binary_Search_Trees/zAssignments/Assignments.md"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "3._Recursion",
                  "children": [
                    {
                      "type": "dir",
                      "name": "1._Recursion_Basics",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/0_index.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/1._Intro_to_Recursion.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/2._Recursion_and_PMI.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/3._Fibonacci_Number.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/4._Recursion_with_Arrays.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/5._Approach_for_recursive_problems.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/questionnare2.md"
                        },
                        {
                          "type": "dir",
                          "name": "zAssignments",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/zAssignments/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/zAssignments/after_assignments.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/zAssignments/lect_assignments.md"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "2._Recursion_Practice",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/2._Recursion_Practice/assignments.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "3._Applications_of_Recursion",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/0_index.md"
                        },
                        {
                          "type": "dir",
                          "name": "1._Recursion_and_Strings",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/1._Recursion_and_Strings/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/1._Recursion_and_Strings/assignments.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/1._Recursion_and_Strings/ms_and_qs.md"
                            }
                          ]
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/2._Merge_Sort.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/3._Quick_Sort.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/4._Strings.md"
                        },
                        {
                          "type": "dir",
                          "name": "zAssignments",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/zAssignments/0_index.md"
                            },
                            {
                              "type": "dir",
                              "name": "1._Subsequences_of_Strings",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/zAssignments/1._Subsequences_of_Strings/0_index.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/zAssignments/1._Subsequences_of_Strings/lectureCodes.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "2._Printing_subsequence",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/zAssignments/2._Printing_subsequence/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/zAssignments/after_assignments.md"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/Test1.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "4._OOP_Basics",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/0_index.md"
                    },
                    {
                      "type": "dir",
                      "name": "1._Intro_and_syntax",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/0_index.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/1._Principles_of_OOP.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/2._Classes.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/3._Objects.md"
                        },
                        {
                          "type": "dir",
                          "name": "4._Functions(in_class)",
                          "children": [
                            {
                              "type": "dir",
                              "name": "1._Getters_and_Setters",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/4._Functions(in_class)/1._Getters_and_Setters/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/4._Functions(in_class)/2._Core_member_functions.md"
                            }
                          ]
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/5._this_keyword.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/exercise_ques.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "2._Special_Functions",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/0_index.md"
                        },
                        {
                          "type": "dir",
                          "name": "1._Constructor_-_idea_and_syntax",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/0_index.md"
                            },
                            {
                              "type": "dir",
                              "name": "1._The_Copy_constructor",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/1._The_Copy_constructor/0_index.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/1._The_Copy_constructor/1._Shallow_and_Deep_copy.md"
                                }
                              ]
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/2._Feature_-_Delegating_constructors.md"
                            }
                          ]
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/2._Destructor.md"
                        },
                        {
                          "type": "dir",
                          "name": "3._Special_functions_details",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/3._Special_functions_details/0_index.md"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "3._Member_constraints",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/3._Member_constraints/0_index.md"
                        },
                        {
                          "type": "dir",
                          "name": "1._const",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/3._Member_constraints/1._const/1._const_fields_-_Intialization_List.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/3._Member_constraints/1._const/2._const_member_functions.md"
                            }
                          ]
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/3._Member_constraints/2._static.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "4._Operator_overloading",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/0_index.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/1._Binary_operator.md"
                        },
                        {
                          "type": "dir",
                          "name": "2._Unary_post",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/2._Unary_post/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/3._Unary_pre.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/exercises.md"
                        },
                        {
                          "type": "dir",
                          "name": "zAssignment_-_Polynomial_class",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/zAssignment_-_Polynomial_class/0_index.md"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/5._Separate_Compilation.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/6._Approach_for_writing_a_class.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "5._Data_Structures",
                  "children": [
                    {
                      "type": "dir",
                      "name": "1._Linear_Data_Structures",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/1._Vector_aka_Dynamic_Array.md"
                        },
                        {
                          "type": "dir",
                          "name": "2._Linked_List",
                          "children": [
                            {
                              "type": "dir",
                              "name": "1._Linked_List_Basics",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/0_index.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/1._What_are_data_structures_and_why_are_they_important.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/2._What_is_a_linked_list.md"
                                },
                                {
                                  "type": "dir",
                                  "name": "3._Basic_Operations_on_LL",
                                  "children": [
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/1._Length_of_LL_(recursive).md"
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/2._Insert_node_at_the_ith_position.md"
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/3._Delete_Node.md"
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/4._Delete_Node_recursive.md"
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/5._Insert_Node_recursive.md"
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/6._Print_the_Linked_List.md"
                                    }
                                  ]
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/8._Variations_of_LL.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/Exercises.md"
                                },
                                {
                                  "type": "dir",
                                  "name": "zAssignments",
                                  "children": [
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/0_index.md"
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/1._Linear_Search_in_LL.md"
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/2._AppendLastNToFirst.md"
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/3._Eliminate_dupicates_from_the_array.md"
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/4._Print_LL_in_reverse.md"
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/5._Palindrome_Linked_List.md"
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/Assignments.md"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "2._Popular_LL_problems",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/0_index.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/1._Midpoint_of_the_LL.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/2._Merging_two_sorted_LLs.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/3._Merge_Sort_on_LL.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/4._Reverse_LL(recursive).md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/5._Reverse_LL_using_2_pointers.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/6._Reverse_LL_recursive_-_easiest.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/7._Reverse_LL_Iterative.md"
                                },
                                {
                                  "type": "dir",
                                  "name": "zAssignments",
                                  "children": [
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/zAssignments/Assignments.md"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "3._Stack",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/1._Introduction_to_Stacks.md"
                            },
                            {
                              "type": "dir",
                              "name": "2._Stack_using_arrays",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/2._Stack_using_arrays/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "3._Stack_using_dynamic_arrays",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/3._Stack_using_dynamic_arrays/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "4._Templates",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/4._Templates/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "5._Stacks_with_templates",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/5._Stacks_with_templates/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "6._Stack_using_LL",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/6._Stack_using_LL/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "7._Inbuilt_stack_STL",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/7._Inbuilt_stack_STL/0_index.md"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "4._Queue",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/0_index.md"
                            },
                            {
                              "type": "dir",
                              "name": "1._Queue_Introduction",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/1._Queue_Introduction/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "2._Queue_using_Array_-_Code",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/2._Queue_using_Array_-_Code/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "3._Queue_using_Dynamic_Array_-_Code",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/3._Queue_using_Dynamic_Array_-_Code/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/3._zNamespaces.md"
                            },
                            {
                              "type": "dir",
                              "name": "4._Queue_using_LL",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/4._Queue_using_LL/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "5._Inbuilt_queue_STL",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/5._Inbuilt_queue_STL/0_index.md"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "zTest_2",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/zTest_2/Test2.md"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "2._Trees",
                      "children": [
                        {
                          "type": "dir",
                          "name": "1._Generic_Trees",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/1._Introduction_to_trees.md"
                            },
                            {
                              "type": "dir",
                              "name": "2._Coding_a_tree",
                              "children": [
                                {
                                  "type": "dir",
                                  "name": "1._TreeNode_class",
                                  "children": [
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/1._TreeNode_class/0_index.md"
                                    }
                                  ]
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/2._Destructor.md"
                                },
                                {
                                  "type": "dir",
                                  "name": "3._IO_for_trees",
                                  "children": [
                                    {
                                      "type": "dir",
                                      "name": "1._Take_input_and_print_recursive",
                                      "children": [
                                        {
                                          "type": "file",
                                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees/1._Take_input_and_print_recursive/0_index.md"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees/2._Take_input_levelwise.md"
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees/3._Output_level_wise.md"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "3._Tree_params",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/1._Number_of_nodes.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/2._Height_of_a_tree_Exercise.md"
                                },
                                {
                                  "type": "dir",
                                  "name": "3._Depth_of_a_Node",
                                  "children": [
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/3._Depth_of_a_Node/0_index.md"
                                    }
                                  ]
                                },
                                {
                                  "type": "dir",
                                  "name": "4._Number_of_leaf_nodes",
                                  "children": [
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/4._Number_of_leaf_nodes/0_index.md"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "4._Tree_Traversals",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/4._Tree_Traversals/0_index.md"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "2_.Binary_trees",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/1._Intro_to_Binary_trees.md"
                            },
                            {
                              "type": "dir",
                              "name": "2._Coding_a_Binary_Tree",
                              "children": [
                                {
                                  "type": "dir",
                                  "name": "2._Input",
                                  "children": [
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/2._Coding_a_Binary_Tree/2._Input/0_index.md"
                                    }
                                  ]
                                },
                                {
                                  "type": "dir",
                                  "name": "3._Printing_a_tree",
                                  "children": [
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/2._Coding_a_Binary_Tree/3._Printing_a_tree/0_index.md"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "3._Params",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/3._Params/1._Count_nodes.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/3._Params/2._Diameter_of_a_BInary_tree.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "4._Traversals",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/4._Traversals/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "5._Construction_from_traversal",
                              "children": [
                                {
                                  "type": "dir",
                                  "name": "1._Pre_and_In",
                                  "children": [
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal/1._Pre_and_In/0_index.md"
                                    }
                                  ]
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal/2._Post_and_In.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal/3._Level_and_In.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "zAssignments",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/zAssignments/0_index.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/zAssignments/Assignments.md"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "3._Binary_Search_Trees",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/1._Intro_to_BST.md"
                            },
                            {
                              "type": "dir",
                              "name": "2._Coding_BST__-_BST_Node_class",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/2._Coding_BST__-_BST_Node_class/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/3._Search_Operation_in_BST.md"
                            },
                            {
                              "type": "dir",
                              "name": "4._Common_BST_questions",
                              "children": [
                                {
                                  "type": "dir",
                                  "name": "1._Check_if_BST",
                                  "children": [
                                    {
                                      "type": "dir",
                                      "name": "1._Check_BST_1",
                                      "children": [
                                        {
                                          "type": "file",
                                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST/1._Check_BST_1/0_index.md"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST/2._Check_BST_2.md"
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST/3._Check_BST_3.md"
                                    }
                                  ]
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/2._Construct_BST_from_sorted_array.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/3._BST_to_sorted_LL.md"
                                },
                                {
                                  "type": "dir",
                                  "name": "4._Find_Path",
                                  "children": [
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/4._Find_Path/0_index.md"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "5._Variations_of_BST",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/5._Variations_of_BST/0_index.md"
                                },
                                {
                                  "type": "dir",
                                  "name": "1._AVL_trees",
                                  "children": [
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/5._Variations_of_BST/1._AVL_trees/0_index.md"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "3._Auxilary_Data_Structures",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/0_index.md"
                        },
                        {
                          "type": "dir",
                          "name": "1._Priority_Queue_and_Heap",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/1._Intro_to_priority_queue.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/2._Intro_to_Heap.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/3._The_two_kinds_of_heaps.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/4._Complete_Binary_Trees.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/5._Heap_-_Insertion_and_Deletion.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/7._In-place_heap.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/8._STL_priority_queue.md"
                            },
                            {
                              "type": "dir",
                              "name": "9._Practice_Problems",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/9._Practice_Problems/1._K_sorted_array.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/9._Practice_Problems/2._K_smallest_elements.md"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "2._Hashmaps",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/1._Intro_to_hashMaps.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/2._Bucket_Array_and_hash_functions.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/3._Collision_Handling.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/4._Time_complexity_and_time_factor.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/5._Coding_a_hashMap.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/7._Question_-_Infinite_Stream.md"
                            },
                            {
                              "type": "dir",
                              "name": "8._STL_map_and_set",
                              "children": [
                                {
                                  "type": "dir",
                                  "name": "1._map_and_unordered_map",
                                  "children": [
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set/1._map_and_unordered_map/0_index.md"
                                    }
                                  ]
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set/2._set_and_unordered_set.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set/3._Iterators_-_C++_Feature.md"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "3._Tries",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/1._Introduction_to_Tries.md"
                            },
                            {
                              "type": "dir",
                              "name": "2._Coding_a_Trie",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/2._Coding_a_Trie/1._TrieNode_class.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/2._Coding_a_Trie/2._Trie_basic_API.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "3._Types_of_Tries",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/3._Types_of_Tries/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/4._Huffman_Encoding.md"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "4._Graphs",
                      "children": [
                        {
                          "type": "dir",
                          "name": "1._Graphs_-_Basics",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/1._Intro_to_graphs.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/2._Graph_Terminology.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/3._Graph_varieties.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/4._Coding_a_Graph.md"
                            },
                            {
                              "type": "dir",
                              "name": "5._Basic_Traversals",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/5._Basic_Traversals/1._DFS.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/5._Basic_Traversals/2._BFS.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "6._Basic_path_operations",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/6._Basic_path_operations/1._Has_Path.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/6._Basic_path_operations/2._Get_Path.md"
                                }
                              ]
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/7._Problem_-_get_connected_components.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "2._Graphs_2",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/1._Intro_to_MST.md"
                            },
                            {
                              "type": "dir",
                              "name": "2._Cycle_Detection",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/2._Cycle_Detection/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "2._MST_algorithms",
                              "children": [
                                {
                                  "type": "dir",
                                  "name": "1._Kruskal's_Algo_Complexity",
                                  "children": [
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/2._MST_algorithms/1._Kruskal's_Algo_Complexity/0._Sorting_w.r.t_a_data_member_of_a_class.md"
                                    },
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/2._MST_algorithms/1._Kruskal's_Algo_Complexity/0_index.md"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/5._Prim's_Algorithm.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/6._Dijkstra's_Algorithm.md"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "5._C++_STL",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/5._C++_STL/0_index.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/5._C++_STL/1._pair.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/5._C++_STL/2._tuple.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/5._C++_STL/3._Bitset.md"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "6._Algorithm_Design",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/0._Brute_force.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/0_index.md"
                    },
                    {
                      "type": "dir",
                      "name": "3._Design_Techniques",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/1._Divide_and_Conquer.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/2._Greedy.md"
                        },
                        {
                          "type": "dir",
                          "name": "3._Dynamic_Programming",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/0_index.md"
                            },
                            {
                              "type": "dir",
                              "name": "1._Fibonacci_-_1",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/1._Fibonacci_-_1/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/2._Fibonacci_-_2.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/3._Min_Steps_to_1.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/4._DP_summary.md"
                            },
                            {
                              "type": "dir",
                              "name": "5._Practice_Problems",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/0_index.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/1._Min_Cost_Path.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/2._Largest_Common_Subsequence.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/3._Edit_Distance.md"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/4._NP_Completeness.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "7._C++_Continued",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/0_index.md"
                    },
                    {
                      "type": "dir",
                      "name": "1._Macros_and_Global_Variables",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/1._Macros_and_Global_Variables/0_index.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/1._Macros_and_Global_Variables/questionnaire5_6_7.md"
                        }
                      ]
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/2._Inline_and_Default_Arguments.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/3._const_and_constexpr.md"
                    },
                    {
                      "type": "dir",
                      "name": "4._Exception_Handling",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/4._Exception_Handling/0_index.md"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "8._OOP_Continued",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/0_index.md"
                    },
                    {
                      "type": "dir",
                      "name": "1._Relations_between_classes",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/0_index.md"
                        },
                        {
                          "type": "dir",
                          "name": "1._Inheritance",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/1_Inheritance_-_Concept.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/2_Access_specifiers_in_inheritance.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/3_Syntax.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/4_Overriding,_Overloading,_Delegation.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/5_1_Types_of_Inheritance_(specifier).md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/5_2_Types_of_Inheritance_(level).md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/5_Types_of_Inheritance.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/6_Hybrid_Inheritance.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/7_Liskov_Substitution_Principle 1.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/7_Liskov_Substitution_Principle.md"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "Codes",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/Codes/DFS.cpp.md"
                    }
                  ]
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/Home.md"
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/notebook.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "3_CN_Competitive_programming",
              "children": [
                {
                  "type": "dir",
                  "name": "1._CP_-_intro_and_tools",
                  "children": [
                    {
                      "type": "dir",
                      "name": "1._Intro_to_Competitive_Programming",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/1._What_is_CP.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/2._Why_CP.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/3._Various_Types_of_Errors.md"
                        },
                        {
                          "type": "dir",
                          "name": "4._How_to_approach_a_problem_in_a_competitive_programming_contest",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/a._Reading_problem_statements.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/b._IO_Format.md"
                            },
                            {
                              "type": "dir",
                              "name": "c._Constraints",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/c._Constraints/0_index.md"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "2._Time_and_Space_Complexity",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/2._Time_and_Space_Complexity/0_index.md"
                        },
                        {
                          "type": "dir",
                          "name": "Problems",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/2._Time_and_Space_Complexity/Problems/1._Kadane's_Algorithm.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/2._Time_and_Space_Complexity/Problems/2._LeftRight_Sum.md"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "3._IO_Techniques",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/0_index.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/1._Console_streams.md"
                        },
                        {
                          "type": "dir",
                          "name": "2._C++_File_streams",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/1._Writing_to_a_file.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/2._Reading_from_a_file.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/3._Serialization.md"
                            }
                          ]
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/3._General_tricks.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "4._Language_Tools",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/0_index.md"
                        },
                        {
                          "type": "dir",
                          "name": "1._STL_-_Data_Structures",
                          "children": [
                            {
                              "type": "dir",
                              "name": "0._Conveniences",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/0._Conveniences/1._pair.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/0._Conveniences/2._tuple.md"
                                }
                              ]
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/0_index.md"
                            },
                            {
                              "type": "dir",
                              "name": "1._Physical_Data_Structures",
                              "children": [
                                {
                                  "type": "dir",
                                  "name": "1._Vector",
                                  "children": [
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/1._Physical_Data_Structures/1._Vector/0_index.md"
                                    }
                                  ]
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/1._Physical_Data_Structures/2._List.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "2._ADTs",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/2._String.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/4._Stack.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/5._Queue.md"
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/6._Map.md"
                                },
                                {
                                  "type": "dir",
                                  "name": "7._Set",
                                  "children": [
                                    {
                                      "type": "file",
                                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/7._Set/0_index.md"
                                    }
                                  ]
                                },
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/8._Prioirty_Queue.md"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "2._Functions",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/1._Sorting.md"
                            },
                            {
                              "type": "dir",
                              "name": "2._Searching",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/2._Searching/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/3._Math_functions.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/4._Utility_functions.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "3._Hussain_Set",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/3._Hussain_Set/0_index.md"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "10._TreesX",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/0_index.md"
                    },
                    {
                      "type": "dir",
                      "name": "1._Tries",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/1._Tries/0_index.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/1._Tries/1._Tries_and_XOR.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/1._Tries/2._Maximum_XOR_value_of_subarray.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "2._Segment_Tree",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/1._Introduction_To_Segment_Tree.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/2._Building_a_segment_tree.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/3._Update_on_a_segment_tree.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/4._Query_on_a_Segment_Tree.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/5._Size_of_a_segment_tree.md"
                        },
                        {
                          "type": "dir",
                          "name": "Assignments",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/Assignments/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "zAssignments",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/zAssignments/0_index.md"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/3._Fenwick_Tree.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "11._Number_Theory",
                  "children": [
                    {
                      "type": "dir",
                      "name": "1._Modulo_Arithmetic",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/1._Modulo_Arithmetic/0_index.md"
                        },
                        {
                          "type": "dir",
                          "name": "1._Modulo_operation",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/1._Modulo_Arithmetic/1._Modulo_operation/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/1._Modulo_Arithmetic/2._Modulo_properties.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/1._Modulo_Arithmetic/3._Modulo_properties_continued.md"
                        },
                        {
                          "type": "dir",
                          "name": "4._Exercise_-_number_of_Binary_Trees",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/1._Modulo_Arithmetic/4._Exercise_-_number_of_Binary_Trees/0_index.md"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "2._Prime_generator_and_GCD",
                      "children": [
                        {
                          "type": "dir",
                          "name": "1._Primes",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/1._Primes/1._Find_prime_numbers_between_1_and_N.md"
                            },
                            {
                              "type": "dir",
                              "name": "2._Sieve_of_Eratosthenes",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/1._Primes/2._Sieve_of_Eratosthenes/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/1._Primes/3._Complexity_of_Sieve_of_Eratosthenes.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "2._Euclid's_Algo",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/1._GCD_-_Euclid's_Algorithm.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/2._Complexity_of_Euclid's_GCD_algorithm.md"
                            },
                            {
                              "type": "dir",
                              "name": "3._Diophantine_Equations",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/3._Diophantine_Equations/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "4._Extended_Euclidean_Algorithm",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/4._Extended_Euclidean_Algorithm/0_index.md"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/3._Multiplicative_Modulo_Inverse.md"
                        },
                        {
                          "type": "dir",
                          "name": "4._Applications_Of_NT_-_1",
                          "children": [
                            {
                              "type": "dir",
                              "name": "1._Sachin_and_Varun",
                              "children": [
                                {
                                  "type": "file",
                                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/4._Applications_Of_NT_-_1/1._Sachin_and_Varun/0_index.md"
                                }
                              ]
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/4._Applications_Of_NT_-_1/2._Advanced_GCD.md"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "3._Totient_Function",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/3._Totient_Function/1._Euler's_Totient_Function.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/3._Totient_Function/2._LCM_Sum.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "4._Solving_equations_using_NT",
                      "children": [
                        {
                          "type": "dir",
                          "name": "1._Optimized_Power_Function",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/1._Optimized_Power_Function/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "2._Modular_exponentiation",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/2._Modular_exponentiation/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "3._Matrix_Exponentiation",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/3._Matrix_Exponentiation/0_index.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/3._Matrix_Exponentiation/1._Matrix_Exponentiation_-_More_Recurrence_Relation.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/3._Matrix_Exponentiation/2._Matrix_Expo_Fibonacci_Sum.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "4._Fermat's_Little_Theorem",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/4._Fermat's_Little_Theorem/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/5._Wilson's_Theorem.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/6._Income_on_the_Nth_day.md"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "12._Game_Theory",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/1._Intro_to_Game_Theory.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/2._Game_of_Nim.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/3._Proof_of_Nim_Formula.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/4._Grundy_Numbers.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/5._Sprague-Grundy_Theorem.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/6._MinMax_Algorithm.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "13._Computational_Geometry",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/0_index.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/1._Intro_to_Computational_Geometry.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/2._Distance_betwn_point_and_line.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/3._Area_of_a_polygon.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/4._Intersection_of_two_lines.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/5._Convex_Hull.md"
                    }
                  ]
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/14._FFT.md"
                },
                {
                  "type": "dir",
                  "name": "15._HLD",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/15._HLD/0_index.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/15._HLD/1._Intro_to_HLD.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/15._HLD/2._Basics_of_HLD.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/15._HLD/3._Importance_of_HLD.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/15._HLD/4._Complexity_of_operations.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "2._Unconventional_use_of_Searching_And_Sorting",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/0_index.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/1._Aggressive_Cows.md"
                    },
                    {
                      "type": "dir",
                      "name": "2._Inversion_Count",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/2._Inversion_Count/0_index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "3._chef",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/3._chef/0_index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "4._Variation",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/4._Variation/0_index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "5._Murder",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/5._Murder/0_index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "6._Momos_Market",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/6._Momos_Market/type.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "7._Distribute_Candies",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/7._Distribute_Candies/distribute_candies.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "8._Taj_Mahal_Entry",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/8._Taj_Mahal_Entry/0_index.md"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "3._RecursionX",
                  "children": [
                    {
                      "type": "dir",
                      "name": "1._BackTracking",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/1._BackTracking/0_index.md"
                        },
                        {
                          "type": "dir",
                          "name": "1._N_Queens_Problem_-_Exercise",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/1._BackTracking/1._N_Queens_Problem_-_Exercise/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "2._Rat_And_Maze_problem",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/1._BackTracking/2._Rat_And_Maze_problem/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "3._Sudoku_Puzzle",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/1._BackTracking/3._Sudoku_Puzzle/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "4._Crossword_Problem",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/1._BackTracking/4._Crossword_Problem/0_index.md"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/1._Find_Power_of_number.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/2._Sorting_the_Skills.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/3._Collecing_the_balls.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/4._Sudoku_Solver.md"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "4._Bit_Manipulation",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/0_index.md"
                    },
                    {
                      "type": "dir",
                      "name": "1._Shift_Operators",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/1._Shift_Operators/0_index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "2._Remaining_Bitwise_Operators",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/2._Remaining_Bitwise_Operators/0_index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "3._ith_bit",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/3._ith_bit/0_index.md"
                        }
                      ]
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/4._Flipping_a_specific_bit.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/5._Check_if_oddeven.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/6._Check_if_number_is_power_of_2.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/7._First_Set_bit.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/8._Clear_all_bits_from_the_LSB.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "5._Adhoc_Problems",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/0_index.md"
                    },
                    {
                      "type": "dir",
                      "name": "1._Equalize_CodeForces",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/1._Equalize_CodeForces/0_index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "2._Rectangular_Area",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/2._Rectangular_Area/0_index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "3._Light_up_the_bulbs",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/3._Light_up_the_bulbs/0_index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "4._Circular_List_of_students",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/4._Circular_List_of_students/0_index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "5._Interesting_Sequences",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/5._Interesting_Sequences/0_index.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "6._Winning_Strategy",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/6._Winning_Strategy/0_index.md"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "6._Dynamic_ProgrammingX",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/0_index.md"
                    },
                    {
                      "type": "dir",
                      "name": "1._Classic_problems",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/0_index.md"
                        },
                        {
                          "type": "dir",
                          "name": "1._DP_Basics_-_Fibonacci_Number",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/1._DP_Basics_-_Fibonacci_Number/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "2._AlphaCode",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/2._AlphaCode/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "3._Longest_Increasing_subsequence",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/3._Longest_Increasing_subsequence/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "4._Largest_Bitonic_Subsequence",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/4._Largest_Bitonic_Subsequence/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "5._Coin_change_and_stair_case",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/5._Coin_change_and_stair_case/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "6._Minimum_Cost",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/6._Minimum_Cost/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "7._Magic_Grid",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/7._Magic_Grid/0_index.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "Assignments_1",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/1._Loot_Houses_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/2._Maximum_Square_Matrix_With_All_Zeros_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/3._Count_BSTs_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/4._Boredom_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/5._Minimum_Number_of_Chocolates_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/6._Minimum_Count_-_80.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "Assignments_2",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/1._Hasan_and_Trip_-_40.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/2._Vanya_and_GCD_-_40.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/3._Adjacent_Bit_Counts_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/4._Roy_and_Coin_Boxes_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/5._Jon_Snow_and_his_favourite_number_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/6._Alyona_and_Spreadsheet_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/7._Angry_Children_-_80.md"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "2._Practice_Problems",
                      "children": [
                        {
                          "type": "dir",
                          "name": "Assignment_1",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/1._LCS_-_Problem_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/2._Edit_Distance_-_Problem_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/3._Balika_Vadhu-_Problem_-_120.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/4._Knapsnack_-_Problem_-_120.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/5._PARTY_-_Problem_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/6._Subset_Sum_-_Problem_-_40.md"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "Assignment_2",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/1._Miser_Man_-_40.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/2._Trader_Profit_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/3._Charlie_and_Pilots_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/4._Square_Brackets_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/5._Distinct_Subsequences_-_120.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/6._Smallest_Super-Sequence_-_80.md"
                            },
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/7._Shortest_Subsequence_-_80.md"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "3._DP_&_Bitmasking",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/0_index.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/1._What_is_bitmasking.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/2._More_about_Bitmasking.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/3._Dynamic_Programming_with_Bitmasking.md"
                        },
                        {
                          "type": "dir",
                          "name": "4._Code_Memoization_and_Recursion",
                          "children": [
                            {
                              "type": "file",
                              "value": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/4._Code_Memoization_and_Recursion/0_index.md"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "7._Greedy_Method",
                  "children": [
                    {
                      "type": "dir",
                      "name": "1._Introduction_to_Greedy_technique",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/1._Introduction_to_Greedy_technique/0_index.md"
                        }
                      ]
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/2._Minimum_Absolute_difference_in_an_array.md"
                    },
                    {
                      "type": "dir",
                      "name": "Assignment_1",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_1/1._Min._Absolute_Difference_In_Array_-_40.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_1/2._Nikunj_and_Donuts_-_40.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_1/3._Activity_Selection_-_80.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_1/4._Fractional_Knapsack_-_40.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_1/5._Weighted_Job_Scheduling_-_80.md"
                        }
                      ]
                    },
                    {
                      "type": "dir",
                      "name": "Assignment_2",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_2/1._Perimeter_with_conditions_-_40.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_2/2._Problem_discussion_-_40.md"
                        },
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_2/3._Winning_Lottery_-_40.md"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "8._GraphsX",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/1._Connected_Components.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/2._Permutation_Swaps.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/3._Connected_Horses.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/4._Strongly_connected_components.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/5._Bottom_of_the_graph.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/6._Bipartite_Graph.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/7._Fill_Matrix.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "9._String_Algorithms",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/9._String_Algorithms/1._Pattern_Matching_Basics.md"
                    },
                    {
                      "type": "dir",
                      "name": "2._KMP_algorithm",
                      "children": [
                        {
                          "type": "file",
                          "value": "home/4_resource_itineraries/3_CN_Competitive_programming/9._String_Algorithms/2._KMP_algorithm/0_index.md"
                        }
                      ]
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/9._String_Algorithms/3._Z-algorithm_for_pattern_matching.md"
                    }
                  ]
                },
                {
                  "type": "dir",
                  "name": "Home",
                  "children": [
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/Home/0_index.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/Home/3._Resources.md"
                    },
                    {
                      "type": "file",
                      "value": "home/4_resource_itineraries/3_CN_Competitive_programming/Home/cpbook.net.md"
                    }
                  ]
                },
                {
                  "type": "file",
                  "value": "home/4_resource_itineraries/3_CN_Competitive_programming/notebook.md"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "value": "home/5_projects.md"
        },
        {
          "type": "file",
          "value": "home/6_setup.md"
        }
      ]
    }
  ],
  "contents": [
    {
      "path": "README.md",
      "url": "README.html",
      "content": "There are 3 notebooks:\n1. **Introduction to C++** - For beginners\n2. **Data Structures with C++** - covers basic algorithms also - search, sort\n3. **Competitive Programming tips** - C++ is used\n\nTo use these notes: View here on GitHub or clone the repo (and open with Markdown friendly editor).\n\nThese notes were created while doing a course from CodingNinjas.com.\n",
      "html": "<p>There are 3 notebooks:</p>\n<ol>\n<li><strong>Introduction to C++</strong> - For beginners</li>\n<li><strong>Data Structures with C++</strong> - covers basic algorithms also - search, sort</li>\n<li><strong>Competitive Programming tips</strong> - C++ is used</li>\n</ol>\n<p>To use these notes: View here on GitHub or clone the repo (and open with Markdown friendly editor).</p>\n<p>These notes were created while doing a course from <a href=\"http://CodingNinjas.com\">CodingNinjas.com</a>.</p>\n",
      "id": 0
    },
    {
      "path": "home/1_motivation.md",
      "url": "home/1_motivation.html",
      "content": "",
      "html": "",
      "id": 1
    },
    {
      "path": "home/2_resources.md",
      "url": "home/2_resources.html",
      "content": "",
      "html": "",
      "id": 2
    },
    {
      "path": "home/3_roadmap.md",
      "url": "home/3_roadmap.html",
      "content": "",
      "html": "",
      "id": 3
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/0_index.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/0_index.html",
      "content": "# 1. Flowcharts\nCreated Wednesday 16 October 2019\n\nHow to solve a problem?\nA:\n\n1. Analyze the problem. Restatement is a part of this if possible/feasible.\n2. Break down the problem into smaller steps.\n3. Write down the solution on paper.\n4. Verify the solution, using random examples. If you get stuck change the solution. \n5. Write code, this is just a formality.\n\n**Done.**\n\n\n",
      "html": "<h1 id=\"1.-flowcharts\">1. Flowcharts <a class=\"heading-anchor-permalink\" href=\"#1.-flowcharts\">#</a></h1>\n<p>Created Wednesday 16 October 2019</p>\n<p>How to solve a problem?\nA:</p>\n<ol>\n<li>Analyze the problem. Restatement is a part of this if possible/feasible.</li>\n<li>Break down the problem into smaller steps.</li>\n<li>Write down the solution on paper.</li>\n<li>Verify the solution, using random examples. If you get stuck change the solution.</li>\n<li>Write code, this is just a formality.</li>\n</ol>\n<p><strong>Done.</strong></p>\n",
      "id": 4
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/1._Intro_to_flowcharts.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/1._Intro_to_flowcharts.html",
      "content": "# 1. Intro to flowcharts\n\nCreated Wednesday 16 October 2019\n\n**What is a flowchart?**\n\n- Diagrammatic representation illustrating the solution to a given problem.\n- Allows you to break down any process into smaller steps and display them in a visually pleasing way.\n\n**Advantages of flowcharts?**\n\n- Helps in communicating the solution to someone who uses a different programming language/ technology.\n- Maintainer's purpose, i.e for *design docs, *for preserving the logic of the program, for a later time.\n\n---\n\n**Flowchart components:**\nThere are **6** flowchart components:\n\n- **Terminator**: Indicates the Start and End of the flowchart.\n- **Input/Output: **Used for reading and printing.\n- **Process: **Represents a process, like assignment or other operation(s).\n- **Decision: **Returns either True or False. One of the vertex is used for showing what happens when it is evaluated to be true, another vertex for false. The fourth vertex for re-entry.\n- **Arrow:** Shows where to go next.\n- **Connector: ** Used when function calls are involved.\n\n\\*Start and End are both Terminator components of the flowchart.\n**Shapes of the components:**\n![](/assets/1._Intro_to_flowcharts-image-1.png)\n",
      "html": "<h1 id=\"1.-intro-to-flowcharts\">1. Intro to flowcharts <a class=\"heading-anchor-permalink\" href=\"#1.-intro-to-flowcharts\">#</a></h1>\n<p>Created Wednesday 16 October 2019</p>\n<p><strong>What is a flowchart?</strong></p>\n<ul>\n<li>Diagrammatic representation illustrating the solution to a given problem.</li>\n<li>Allows you to break down any process into smaller steps and display them in a visually pleasing way.</li>\n</ul>\n<p><strong>Advantages of flowcharts?</strong></p>\n<ul>\n<li>Helps in communicating the solution to someone who uses a different programming language/ technology.</li>\n<li>Maintainer’s purpose, i.e for *design docs, *for preserving the logic of the program, for a later time.</li>\n</ul>\n<hr>\n<p><strong>Flowchart components:</strong>\nThere are <strong>6</strong> flowchart components:</p>\n<ul>\n<li><strong>Terminator</strong>: Indicates the Start and End of the flowchart.</li>\n<li>**Input/Output: **Used for reading and printing.</li>\n<li>**Process: **Represents a process, like assignment or other operation(s).</li>\n<li>**Decision: **Returns either True or False. One of the vertex is used for showing what happens when it is evaluated to be true, another vertex for false. The fourth vertex for re-entry.</li>\n<li><strong>Arrow:</strong> Shows where to go next.</li>\n<li>**Connector: ** Used when function calls are involved.</li>\n</ul>\n<p>*Start and End are both Terminator components of the flowchart.\n<strong>Shapes of the components:</strong>\n<img src=\"/assets/1._Intro_to_flowcharts-image-1.png\" alt=\"\"></p>\n",
      "id": 5
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/2._Decision_Making.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/2._Decision_Making.html",
      "content": "# 2. Decision Making\n\nCreated Wednesday 16 October 2019\n\nThe diamond shape box is called the decision component. We should make sure that it returns either true or false, nothing else.\n![](/assets/2._Decision_Making-image-1.png)\n",
      "html": "<h1 id=\"2.-decision-making\">2. Decision Making <a class=\"heading-anchor-permalink\" href=\"#2.-decision-making\">#</a></h1>\n<p>Created Wednesday 16 October 2019</p>\n<p>The diamond shape box is called the decision component. We should make sure that it returns either true or false, nothing else.\n<img src=\"/assets/2._Decision_Making-image-1.png\" alt=\"\"></p>\n",
      "id": 6
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/3._Loops.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/3._Loops.html",
      "content": "# 3. Loops\n\nCreated Wednesday 16 October 2019\n\nWhen we have to do a thing for some known number of times or until an event occurs, we use the concept of loop.\nBasically, we just take the arrow to a previously executed component.\n\ne.g print all numbers from 1 to N. Assume N>=1.\nHow will a human do this, he'll start counting from 1 and then writing all numbers, while checking if currentNum<=N.\n**This is exactly what a computer does.**\n\nIn terms of a flowchart, this happens:\n![](/assets/3._Loops-image-1.jpg)\n\nP2: Print all the even number between 1 and N (both inclusive)\n![](/assets/3._Loops-image-2.jpg)\n",
      "html": "<h1 id=\"3.-loops\">3. Loops <a class=\"heading-anchor-permalink\" href=\"#3.-loops\">#</a></h1>\n<p>Created Wednesday 16 October 2019</p>\n<p>When we have to do a thing for some known number of times or until an event occurs, we use the concept of loop.\nBasically, we just take the arrow to a previously executed component.</p>\n<p>e.g print all numbers from 1 to N. Assume N&gt;=1.\nHow will a human do this, he’ll start counting from 1 and then writing all numbers, while checking if currentNum&lt;=N.\n<strong>This is exactly what a computer does.</strong></p>\n<p>In terms of a flowchart, this happens:\n<img src=\"/assets/3._Loops-image-1.jpg\" alt=\"\"></p>\n<p>P2: Print all the even number between 1 and N (both inclusive)\n<img src=\"/assets/3._Loops-image-2.jpg\" alt=\"\"></p>\n",
      "id": 7
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/4._Largest_of_N_numbers.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/4._Largest_of_N_numbers.html",
      "content": "# 4. Largest of N numbers\n\nCreated Thursday 17 October 2019\n\nProblem: finding the maximum value for a given number of integers.\nA:![](/assets/4._Largest_of_N_numbers-image-1.jpg)\nQ) Check if number is prime.\nA:![](/assets/4._Largest_of_N_numbers-image-2.jpg) t\nTo further minimize number of calculations, we check the number till sqrt(N). Because it's the largest factor N can have.\n",
      "html": "<h1 id=\"4.-largest-of-n-numbers\">4. Largest of N numbers <a class=\"heading-anchor-permalink\" href=\"#4.-largest-of-n-numbers\">#</a></h1>\n<p>Created Thursday 17 October 2019</p>\n<p>Problem: finding the maximum value for a given number of integers.\nA:<img src=\"/assets/4._Largest_of_N_numbers-image-1.jpg\" alt=\"\">\nQ) Check if number is prime.\nA:<img src=\"/assets/4._Largest_of_N_numbers-image-2.jpg\" alt=\"\"> t\nTo further minimize number of calculations, we check the number till sqrt(N). Because it’s the largest factor N can have.</p>\n",
      "id": 8
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/5._Assignments.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/5._Assignments.html",
      "content": "# 5. Assignments\n\nCreated Thursday 17 October 2019\n\nQ0) Check if the given sides are of a valid triangle.\nA: Input, length of the three sides a, b, c.\nFor every triangle, \"Sum of any two sides is always greater than the 3rd side\".\nWe need three conditions, i.e a + b > c and b + c > a and c+a > b.\n![](/assets/5._Assignments-image-1.jpg)\n\nQ1) Classify triangle as Equilateral, Isosceles or Scalene.\nA:![](/assets/5._Assignments-image-2.jpg)\nQ2) Print the sum of all even numbers from 1 to N, both inclusive.\nA:![](/assets/5._Assignments-image-3.jpg)\nQ3) GCD of two numbers a and b.\nA:![](/assets/5._Assignments-image-4.jpg)\nQ4) Draw a flowchart to take a number N input from from user and print all the prime numbers which lies in between 2 to N (both inclusive).\nA:![](/assets/5._Assignments-image-5.jpg)\n[../attach_ments/print_primes.drawio](./attach_ments/print_primes.drawio)\nQ5) Print all numbers between 1 and N (both inclusive) which are a part of the fibonacci series.\nA: Question can be restated as printing the fibonacci numbers until we reach or exceed N.\n![](/assets/5._Assignments-image-6.jpg)\nQ6) Check if a number is a fibonacci number or not.\nA: This can be restated as traversing the fibonacci numbers until the given number is reached or exceeded.\nIf we reach it exactly, return True. If we exceed it return false.\n![](/assets/5._Assignments-image-7.jpg)\n",
      "html": "<h1 id=\"5.-assignments\">5. Assignments <a class=\"heading-anchor-permalink\" href=\"#5.-assignments\">#</a></h1>\n<p>Created Thursday 17 October 2019</p>\n<p>Q0) Check if the given sides are of a valid triangle.\nA: Input, length of the three sides a, b, c.\nFor every triangle, “Sum of any two sides is always greater than the 3rd side”.\nWe need three conditions, i.e a + b &gt; c and b + c &gt; a and c+a &gt; b.\n<img src=\"/assets/5._Assignments-image-1.jpg\" alt=\"\"></p>\n<p>Q1) Classify triangle as Equilateral, Isosceles or Scalene.\nA:<img src=\"/assets/5._Assignments-image-2.jpg\" alt=\"\">\nQ2) Print the sum of all even numbers from 1 to N, both inclusive.\nA:<img src=\"/assets/5._Assignments-image-3.jpg\" alt=\"\">\nQ3) GCD of two numbers a and b.\nA:<img src=\"/assets/5._Assignments-image-4.jpg\" alt=\"\">\nQ4) Draw a flowchart to take a number N input from from user and print all the prime numbers which lies in between 2 to N (both inclusive).\nA:<img src=\"/assets/5._Assignments-image-5.jpg\" alt=\"\">\n<a href=\"./attach_ments/print_primes.drawio\">…/attach_ments/print_primes.drawio</a>\nQ5) Print all numbers between 1 and N (both inclusive) which are a part of the fibonacci series.\nA: Question can be restated as printing the fibonacci numbers until we reach or exceed N.\n<img src=\"/assets/5._Assignments-image-6.jpg\" alt=\"\">\nQ6) Check if a number is a fibonacci number or not.\nA: This can be restated as traversing the fibonacci numbers until the given number is reached or exceeded.\nIf we reach it exactly, return True. If we exceed it return false.\n<img src=\"/assets/5._Assignments-image-7.jpg\" alt=\"\"></p>\n",
      "id": 9
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/Conclusion.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/1._Flowcharts/Conclusion.html",
      "content": "# Conclusion\nCreated Thursday 17 October 2019\n\nFlowcharts are great, they are much more powerful than I had imagined. Remember them.\n\n",
      "html": "<h1 id=\"conclusion\">Conclusion <a class=\"heading-anchor-permalink\" href=\"#conclusion\">#</a></h1>\n<p>Created Thursday 17 October 2019</p>\n<p>Flowcharts are great, they are much more powerful than I had imagined. Remember them.</p>\n",
      "id": 10
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/10._Multidimensional_Arrays/0_index.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/10._Multidimensional_Arrays/0_index.html",
      "content": "# 10. Multidimensional Arrays\nCreated Saturday 21 December 2019\n\n**2D arrays: **<http://www.cplusplus.com/doc/tutorial/arrays/>\nWhen declaring a function which takes in a 2D array. It is very important to pass the number of columns in the array. This is important in cpp, as it is a basic requirement for going to the desired location.\nArrays are stored in cpp in row-major form. i.e arr[i][j] = *(arr+c*i+j). Where c = number of columns, i = row number and j = column number. \ne.g void f(x[][const int], int row, int column); When calling a function, no mention of the 'c' value is required. \n\n* To print the values, just print using two loops.\n* During declaration and/or initialization, we can initialize the starting rows(and there elements, exactly as int x[10] = {1} means all 9 places to the right of x[0] are 0). **But **we have to provide every max_number, only the first one is optional. e. int x[][4][5] is valid but int x[4][5][] is invalid.\n* Do take care that the column number(in the definition) is the the same as the number of columns in the real array.\n\ne.g x[][const c1][const c2][]...[const cn]\n\t\n\n",
      "html": "<h1 id=\"10.-multidimensional-arrays\">10. Multidimensional Arrays <a class=\"heading-anchor-permalink\" href=\"#10.-multidimensional-arrays\">#</a></h1>\n<p>Created Saturday 21 December 2019</p>\n<p>**2D arrays: **<a href=\"http://www.cplusplus.com/doc/tutorial/arrays/\">http://www.cplusplus.com/doc/tutorial/arrays/</a>\nWhen declaring a function which takes in a 2D array. It is very important to pass the number of columns in the array. This is important in cpp, as it is a basic requirement for going to the desired location.\nArrays are stored in cpp in row-major form. i.e arr[i][j] = <em>(arr+c</em>i+j). Where c = number of columns, i = row number and j = column number.\ne.g void f(x[][const int], int row, int column); When calling a function, no mention of the ‘c’ value is required.</p>\n<ul>\n<li>To print the values, just print using two loops.</li>\n<li>During declaration and/or initialization, we can initialize the starting rows(and there elements, exactly as int x[10] = {1} means all 9 places to the right of x[0] are 0). **But **we have to provide every max_number, only the first one is optional. e. int x[][4][5] is valid but int x[4][5][] is invalid.</li>\n<li>Do take care that the column number(in the definition) is the the same as the number of columns in the real array.</li>\n</ul>\n<p>e.g x[][const c1][const c2][]…[const cn]</p>\n",
      "id": 11
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/10._Multidimensional_Arrays/Assignments.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/10._Multidimensional_Arrays/Assignments.html",
      "content": "# Assignments\nCreated Saturday 21 December 2019\n\nThe remove duplicate and compress strings algos can be done in a single scan.\n**The idea: A writing head, borrowed from COA.**\nFor remove duplicate:\nMake a left and a rigth pointer, the left will indicate the current (which has not yet been written).\nFind a diffrent letter(it could be EOS), just write the *left to wr\nleft =right, coz we are done with the currnt letter, let's start with the different letter found(EOS case has been handled).\n Move wr by 1, for a fresh writing.\nThe next iteration begins, if we had reached EOS, we stop, else we continue;\n\nFor compression(in 1 go):\nmake a count variable.\nSet left = head, right = head, wr = head;\nLook for a number or change of character. add count.\nIf count > 2;\nJust write *wr = *left, wr ++;\n*wr = count+48, wr++; \nIf count < 1, i.e we found an a different chararacter\n*wr = *left;\n\t\nleft = right; we are done with the present  charcter let's look at the difference.\n**The catch, as we have already noted down everything neatly of the previous part, so no need to think of that now. So no number checking.**\n**As and when we catch EOS as difference, we do the needful for the present char+number or char. The EOS is taken care of in the while loop. No worries.**\n\n\n* Lessons learnt, do the problem in a go.\n* Don't process in steps, as we have to keep track of everything we did, which is painstaking and costly too. \n* Use what is efficient and working, rather than going for ideals.\n* Make a special case seem a general case by including it in the condition, but after the current process.\n\n\n\n\n\n",
      "html": "<h1 id=\"assignments\">Assignments <a class=\"heading-anchor-permalink\" href=\"#assignments\">#</a></h1>\n<p>Created Saturday 21 December 2019</p>\n<p>The remove duplicate and compress strings algos can be done in a single scan.\n<strong>The idea: A writing head, borrowed from COA.</strong>\nFor remove duplicate:\nMake a left and a rigth pointer, the left will indicate the current (which has not yet been written).\nFind a diffrent letter(it could be EOS), just write the *left to wr\nleft =right, coz we are done with the currnt letter, let’s start with the different letter found(EOS case has been handled).\nMove wr by 1, for a fresh writing.\nThe next iteration begins, if we had reached EOS, we stop, else we continue;</p>\n<p>For compression(in 1 go):\nmake a count variable.\nSet left = head, right = head, wr = head;\nLook for a number or change of character. add count.\nIf count &gt; 2;\nJust write *wr = *left, wr ++;\n*wr = count+48, wr++;\nIf count &lt; 1, i.e we found an a different chararacter\n*wr = *left;</p>\n<p>left = right; we are done with the present  charcter let’s look at the difference.\n<strong>The catch, as we have already noted down everything neatly of the previous part, so no need to think of that now. So no number checking.</strong>\n<strong>As and when we catch EOS as difference, we do the needful for the present char+number or char. The EOS is taken care of in the while loop. No worries.</strong></p>\n<ul>\n<li>Lessons learnt, do the problem in a go.</li>\n<li>Don’t process in steps, as we have to keep track of everything we did, which is painstaking and costly too.</li>\n<li>Use what is efficient and working, rather than going for ideals.</li>\n<li>Make a special case seem a general case by including it in the condition, but after the current process.</li>\n</ul>\n",
      "id": 12
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/2._C++,_W2H/1._About_C++.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/2._C++,_W2H/1._About_C++.html",
      "content": "# 1. About C++\nCreated Sunday 07 November 2021\n\n#### History of C++\n\n* C++ is a general purpose programming language.\n* It was created by Bjarne Stroustrup in 1985\n\n\n#### Why C++\nIt is used if the software needs to be:\n\n* Reliable\n* Fast\n* Less energy consuming\n* Hardware oriented\n\nExamples of use:\n\n1. Cars - conventional cars, self-driving cars\n2. Cameras\n3. Phones, smartwatches.\n4. Networking devices\n5. Graphics\n\n\n",
      "html": "<h1 id=\"1.-about-c%2B%2B\">1. About C++ <a class=\"heading-anchor-permalink\" href=\"#1.-about-c%2B%2B\">#</a></h1>\n<p>Created Sunday 07 November 2021</p>\n<h4 id=\"history-of-c%2B%2B\">History of C++ <a class=\"heading-anchor-permalink\" href=\"#history-of-c%2B%2B\">#</a></h4>\n<ul>\n<li>C++ is a general purpose programming language.</li>\n<li>It was created by Bjarne Stroustrup in 1985</li>\n</ul>\n<h4 id=\"why-c%2B%2B\">Why C++ <a class=\"heading-anchor-permalink\" href=\"#why-c%2B%2B\">#</a></h4>\n<p>It is used if the software needs to be:</p>\n<ul>\n<li>Reliable</li>\n<li>Fast</li>\n<li>Less energy consuming</li>\n<li>Hardware oriented</li>\n</ul>\n<p>Examples of use:</p>\n<ol>\n<li>Cars - conventional cars, self-driving cars</li>\n<li>Cameras</li>\n<li>Phones, smartwatches.</li>\n<li>Networking devices</li>\n<li>Graphics</li>\n</ol>\n",
      "id": 13
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/2._C++,_W2H/2._Why_learn_C++.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/2._C++,_W2H/2._Why_learn_C++.html",
      "content": "# 2. Why learn C++\nCreated Sunday 07 November 2021\n\n#### Why learn C++?\n\n* It's really useful across all domains (parts of it).\n* It's a language with lot of features. Therefore:\n\t* Learn different paradigms of programming.\n\t* Learn about low level (near hardware) stuff.\n\t* Learn about data structures and how they are implemented.\n* Other languages are made for doing specific stuff, but C++ offers every kind of abstraction, from low level stuff to very abstract features.\n\n\n",
      "html": "<h1 id=\"2.-why-learn-c%2B%2B\">2. Why learn C++ <a class=\"heading-anchor-permalink\" href=\"#2.-why-learn-c%2B%2B\">#</a></h1>\n<p>Created Sunday 07 November 2021</p>\n<h4 id=\"why-learn-c%2B%2B%3F\">Why learn C++? <a class=\"heading-anchor-permalink\" href=\"#why-learn-c%2B%2B%3F\">#</a></h4>\n<ul>\n<li>It’s really useful across all domains (parts of it).</li>\n<li>It’s a language with lot of features. Therefore:\n<ul>\n<li>Learn different paradigms of programming.</li>\n<li>Learn about low level (near hardware) stuff.</li>\n<li>Learn about data structures and how they are implemented.</li>\n</ul>\n</li>\n<li>Other languages are made for doing specific stuff, but C++ offers every kind of abstraction, from low level stuff to very abstract features.</li>\n</ul>\n",
      "id": 14
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/2._C++,_W2H/3._C++_Setup.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/2._C++,_W2H/3._C++_Setup.html",
      "content": "# 3. C++ Setup\nCreated Thursday 08 April 2021\n\n\n* C++ is a compiled language. Simply said, C++ code needs to be translated to *machine code* and then run.\n\n\n#### Simple setup\n\n* Install an editor (*Visual Studio Code*, for example). To write code with.\n* Install the *Code Runner*(enable run in integrated terminal)\n* Install ``g++``\n* Click the play button to run the program.\n\n\nTip: Or simple use an online compiler 🤗️.\n\n",
      "html": "<h1 id=\"3.-c%2B%2B-setup\">3. C++ Setup <a class=\"heading-anchor-permalink\" href=\"#3.-c%2B%2B-setup\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<ul>\n<li>C++ is a compiled language. Simply said, C++ code needs to be translated to <em>machine code</em> and then run.</li>\n</ul>\n<h4 id=\"simple-setup\">Simple setup <a class=\"heading-anchor-permalink\" href=\"#simple-setup\">#</a></h4>\n<ul>\n<li>Install an editor (<em>Visual Studio Code</em>, for example). To write code with.</li>\n<li>Install the <em>Code Runner</em>(enable run in integrated terminal)</li>\n<li>Install <code>g++</code></li>\n<li>Click the play button to run the program.</li>\n</ul>\n<p>Tip: Or simple use an online compiler 🤗️.</p>\n",
      "id": 15
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/0_index.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/0_index.html",
      "content": "# 3. main, Variables and Operators\nCreated Thursday 17 October 2019\n\n[Official Notes](./3._main,_Variables_and_Operators/0000000000000025 (1).pdf) this lecture.\n\n",
      "html": "<h1 id=\"3.-main%2C-variables-and-operators\">3. main, Variables and Operators <a class=\"heading-anchor-permalink\" href=\"#3.-main%2C-variables-and-operators\">#</a></h1>\n<p>Created Thursday 17 October 2019</p>\n<p>[Official Notes](./3._main,_Variables_and_Operators/0000000000000025 (1).pdf) this lecture.</p>\n",
      "id": 16
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/1._First_Program.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/1._First_Program.html",
      "content": "# 1. First Program\nCreated Thursday 17 October 2019\n\nAny program needs a start block. It is the **main(){** function in C++. The end is **}**.\nPrinting is one of the most fundamental thing in coding. Rather making basic abstractions like print, scan, we will use some standard things, like **cout**.\n\n* cout <<_output, means that we are pushing the output into cout. So, it is called the insertion operator. For using the cout, we need a file called iostream.\n* namespaces are used because different classes in the same program may have functions which are named the same. Hence we use the namespace to indicate the class from which we are using the class.\t<http://www.cplusplus.com/doc/tutorial/namespaces/>\n* Variables and data types, input output using std:cout and std:cin.\n\n\n",
      "html": "<h1 id=\"1.-first-program\">1. First Program <a class=\"heading-anchor-permalink\" href=\"#1.-first-program\">#</a></h1>\n<p>Created Thursday 17 October 2019</p>\n<p>Any program needs a start block. It is the <strong>main(){</strong> function in C++. The end is <strong>}</strong>.\nPrinting is one of the most fundamental thing in coding. Rather making basic abstractions like print, scan, we will use some standard things, like <strong>cout</strong>.</p>\n<ul>\n<li>cout &lt;&lt;_output, means that we are pushing the output into cout. So, it is called the insertion operator. For using the cout, we need a file called iostream.</li>\n<li>namespaces are used because different classes in the same program may have functions which are named the same. Hence we use the namespace to indicate the class from which we are using the class.\t<a href=\"http://www.cplusplus.com/doc/tutorial/namespaces/\">http://www.cplusplus.com/doc/tutorial/namespaces/</a></li>\n<li>Variables and data types, input output using std:cout and std:cin.</li>\n</ul>\n",
      "id": 17
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/2._Variables_and_data_types/0_index.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/2._Variables_and_data_types/0_index.html",
      "content": "# 2. Variables and data types\nCreated Thursday 17 October 2019\n\n\n* Data types helps us define both size and type of the data type.\n* The compiler takes care of the type of data, you don't have to provide the type to cout.\n\n\n",
      "html": "<h1 id=\"2.-variables-and-data-types\">2. Variables and data types <a class=\"heading-anchor-permalink\" href=\"#2.-variables-and-data-types\">#</a></h1>\n<p>Created Thursday 17 October 2019</p>\n<ul>\n<li>Data types helps us define both size and type of the data type.</li>\n<li>The compiler takes care of the type of data, you don’t have to provide the type to cout.</li>\n</ul>\n",
      "id": 18
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/2._Variables_and_data_types/2.1_Type_Aliases.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/2._Variables_and_data_types/2.1_Type_Aliases.html",
      "content": "# 2.1 Type Aliases\nCreated Monday 18 May 2020\n\nThere are two ways to create type aliases:\n\n1. **typedef**\n```c++\ntypedef int powder;\t// alias at last\n```\n2. **using** keyword\n```c++\nusing powder = int; // # alias at the proper place, like a declaration\n```\nBoth are equivalent, **using** is more intuitive;\nNote:\n\n1. Remember that for pointers aliases(i.e the aliases for pointer type, apply for all the variables in a list declaration) - **This is pretty intuitive (HOW IT should have been).**\n```c++\nusing pint = int*;\npint a, b, c; // same as int*a; int*b; int*c;\n/*\nint* a, b , c; // Wrong interpretation\n*/\n```\n\n\n2. Replacing does not always, work - i.e semantics matter. **Beware **of** const**\n```c++\ntypedef char *pstring;\nconst pstring x = 0; // cstr is a constant pointer to char\n\n// direct replacement\nconst char * x; // wrong here\n\nchar const * p; // correct - we want to make the alias as a constant\n```\n",
      "html": "<h1 id=\"2.1-type-aliases\">2.1 Type Aliases <a class=\"heading-anchor-permalink\" href=\"#2.1-type-aliases\">#</a></h1>\n<p>Created Monday 18 May 2020</p>\n<p>There are two ways to create type aliases:</p>\n<ol>\n<li><strong>typedef</strong></li>\n</ol>\n<pre><code class=\"language-c++\">typedef int powder;\t// alias at last\n</code></pre>\n<ol start=\"2\">\n<li><strong>using</strong> keyword</li>\n</ol>\n<pre><code class=\"language-c++\">using powder = int; // # alias at the proper place, like a declaration\n</code></pre>\n<p>Both are equivalent, <strong>using</strong> is more intuitive;\nNote:</p>\n<ol>\n<li>Remember that for pointers aliases(i.e the aliases for pointer type, apply for all the variables in a list declaration) - <strong>This is pretty intuitive (HOW IT should have been).</strong></li>\n</ol>\n<pre><code class=\"language-c++\">using pint = int*;\npint a, b, c; // same as int*a; int*b; int*c;\n/*\nint* a, b , c; // Wrong interpretation\n*/\n</code></pre>\n<ol start=\"2\">\n<li>Replacing does not always, work - i.e semantics matter. <strong>Beware <strong>of</strong> const</strong></li>\n</ol>\n<pre><code class=\"language-c++\">typedef char *pstring;\nconst pstring x = 0; // cstr is a constant pointer to char\n\n// direct replacement\nconst char * x; // wrong here\n\nchar const * p; // correct - we want to make the alias as a constant\n</code></pre>\n",
      "id": 19
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/2._Variables_and_data_types/2.2_Automatic_Type_Deductions/1._auto/0_index.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/2._Variables_and_data_types/2.2_Automatic_Type_Deductions/1._auto/0_index.html",
      "content": "# 1. auto\n\nCreated Monday 18 May 2020\n\n1. Letting the compiler deduce the type;\n\n```c++\nauto x = 2;\ncout << x;\t// works - uses predefined rules for int, in this case\n```\n\n2. Auto is homogeneous. 1. If used in a declaration list, **will** make all the variables the same\n   `c++\nauto x = 2, y = 'c'; // cannot be different\n`\n   ![](/assets/1._auto-image-1.png)\n\n3. Auto can be used for **functions too** but they shouldn't return different types of values(e.g can return an int, or a string etc), **this is the same error. **Python does it though.\n\n```c++\nauto p(int x)\n{\n  if(x==1)\n      return 1; // returns int\n  return \"two\";\t// return string\n}\n```\n\n![](/assets/1._auto-image-2.png)\n\n3. auto ignores top-level **consts, **except in references. It just drops them. i.e we will need to do **const auto or auto const.**\n",
      "html": "<h1 id=\"1.-auto\">1. auto <a class=\"heading-anchor-permalink\" href=\"#1.-auto\">#</a></h1>\n<p>Created Monday 18 May 2020</p>\n<ol>\n<li>Letting the compiler deduce the type;</li>\n</ol>\n<pre><code class=\"language-c++\">auto x = 2;\ncout &lt;&lt; x;\t// works - uses predefined rules for int, in this case\n</code></pre>\n<ol start=\"2\">\n<li>\n<p>Auto is homogeneous. 1. If used in a declaration list, <strong>will</strong> make all the variables the same\n<code>c++ auto x = 2, y = 'c'; // cannot be different</code>\n<img src=\"/assets/1._auto-image-1.png\" alt=\"\"></p>\n</li>\n<li>\n<p>Auto can be used for <strong>functions too</strong> but they shouldn’t return different types of values(e.g can return an int, or a string etc), **this is the same error. **Python does it though.</p>\n</li>\n</ol>\n<pre><code class=\"language-c++\">auto p(int x)\n{\n  if(x==1)\n      return 1; // returns int\n  return &quot;two&quot;;\t// return string\n}\n</code></pre>\n<p><img src=\"/assets/1._auto-image-2.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>auto ignores top-level **consts, **except in references. It just drops them. i.e we will need to do <strong>const auto or auto const.</strong></li>\n</ol>\n",
      "id": 20
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/2._Variables_and_data_types/2.2_Automatic_Type_Deductions/2._decltype.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/2._Variables_and_data_types/2.2_Automatic_Type_Deductions/2._decltype.html",
      "content": "# 2. decltype\nCreated Monday 18 May 2020\n\n\n* Very simple, this is like a copy constructor. But it does not initialize values, it initializes only the **data type**.\n* **decltype** does **not **call the function, while **auto **would need to do that.\n* It can be used with literals, too. Good for experimenting, without an ide.\n\n\n\n\n\n",
      "html": "<h1 id=\"2.-decltype\">2. decltype <a class=\"heading-anchor-permalink\" href=\"#2.-decltype\">#</a></h1>\n<p>Created Monday 18 May 2020</p>\n<ul>\n<li>Very simple, this is like a copy constructor. But it does not initialize values, it initializes only the <strong>data type</strong>.</li>\n<li><strong>decltype</strong> does **not **call the function, while **auto **would need to do that.</li>\n<li>It can be used with literals, too. Good for experimenting, without an ide.</li>\n</ul>\n",
      "id": 21
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/4._How_is_the_data_stored.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/4._How_is_the_data_stored.html",
      "content": "# 4. How is the data stored\nCreated Thursday 17 October 2019\n\nHow are float stored?\nFor the decimal equivalent, we store the mantissa and the corresponding exponent.\n**Typecasting:**\n\n* The least significant bytes are just copied to the memory location. This is observable when the new type is of lesser size than the original variable.\n\ne.g1 int x = 19920; char p = x; // the compiler will just copy the last byte of the integer as the value of the char. \ne.g2 char a = 'c'; int x = a; // here the byte for the char is copied as the least significant byte of the integer. The remaining 3 bytes in the left are kept zero.   \n\n* float to int, here the decimal is **dropped(truncated)**, whether it be positive or negative.\n\n\n",
      "html": "<h1 id=\"4.-how-is-the-data-stored\">4. How is the data stored <a class=\"heading-anchor-permalink\" href=\"#4.-how-is-the-data-stored\">#</a></h1>\n<p>Created Thursday 17 October 2019</p>\n<p>How are float stored?\nFor the decimal equivalent, we store the mantissa and the corresponding exponent.\n<strong>Typecasting:</strong></p>\n<ul>\n<li>The least significant bytes are just copied to the memory location. This is observable when the new type is of lesser size than the original variable.</li>\n</ul>\n<p>e.g1 int x = 19920; char p = x; // the compiler will just copy the last byte of the integer as the value of the char.\ne.g2 char a = ‘c’; int x = a; // here the byte for the char is copied as the least significant byte of the integer. The remaining 3 bytes in the left are kept zero.</p>\n<ul>\n<li>float to int, here the decimal is <strong>dropped(truncated)</strong>, whether it be positive or negative.</li>\n</ul>\n",
      "id": 22
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/5._How_are_negative_numbers_stored.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/5._How_are_negative_numbers_stored.html",
      "content": "# 5. How are negative numbers stored\n\nCreated Thursday 17 October 2019\n\n- Range of storing the numbers is (-2^31, 2^31 - 1) for int in a typical compiler.\n- They are stored using the 2's complement for integers.\n- The number with the biggest magnitude, which in int is 2^31, is represented differently, i.e 1 followed by 31 zeros. This is the non unique zero for the case.\n\nSome experiments(always remember these):\n\n- if char is initialized/assigned an int value, only the last byte gets copied. With a warning, if int > 255.\n- if unsigned int is initialized/assigned to an unsigned value, the whole negative number is stored in the 2's complement. Then the 2's complement tag is removed. i.e the whole number is considered as the unsigned value, without the sign bit.\n- **IEEE 754, **1985 - using the sign bit as the primary basis for float representation.\n\n---\n\n![](/assets/5._How_are_negative_numbers_stored-image-1.jpg)\n\n---\n\n![](/assets/5._How_are_negative_numbers_stored-image-2.jpg)\n\n---\n",
      "html": "<h1 id=\"5.-how-are-negative-numbers-stored\">5. How are negative numbers stored <a class=\"heading-anchor-permalink\" href=\"#5.-how-are-negative-numbers-stored\">#</a></h1>\n<p>Created Thursday 17 October 2019</p>\n<ul>\n<li>Range of storing the numbers is (-2^31, 2^31 - 1) for int in a typical compiler.</li>\n<li>They are stored using the 2’s complement for integers.</li>\n<li>The number with the biggest magnitude, which in int is 2^31, is represented differently, i.e 1 followed by 31 zeros. This is the non unique zero for the case.</li>\n</ul>\n<p>Some experiments(always remember these):</p>\n<ul>\n<li>if char is initialized/assigned an int value, only the last byte gets copied. With a warning, if int &gt; 255.</li>\n<li>if unsigned int is initialized/assigned to an unsigned value, the whole negative number is stored in the 2’s complement. Then the 2’s complement tag is removed. i.e the whole number is considered as the unsigned value, without the sign bit.</li>\n<li>**IEEE 754, **1985 - using the sign bit as the primary basis for float representation.</li>\n</ul>\n<hr>\n<p><img src=\"/assets/5._How_are_negative_numbers_stored-image-1.jpg\" alt=\"\"></p>\n<hr>\n<p><img src=\"/assets/5._How_are_negative_numbers_stored-image-2.jpg\" alt=\"\"></p>\n<hr>\n",
      "id": 23
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/6._Operators.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/3._main,_Variables_and_Operators/6._Operators.html",
      "content": "# 6. Operators\nCreated Friday 18 October 2019\n\n\n* int/int gives an int, not a float.\n* any operation using a float/double gives a float/double.\n* Remember, = is also an operator just like =,-,* etc. if we write (a=2) where 'a' has been previously been defined/declared, then assignment occurs, and then the left hand value is the result of the expression, which is two in this case.\n\nTypes of operators:\n\n* **Arithmetic operator:**\n\t* +\n\t* -\n\t* *\n\t* /\n\t* % can be used only when both operands are int.\n* **Relational operator:**\n\t* ==\n\t* !=\n\t* <\n\t* >\n\t* <=\n\t* >=\n* **Logical operator:**\n\t* &&\n\t* ||\n\t* !\n\t* there's no logical XOR in C++. We can do bitwise to achieve the same.\n\n<https://en.wikipedia.org/wiki/Short-circuit_evaluation>\n\n* Easy and quick: <http://www.cplusplus.com/doc/tutorial/operators/> \n\n\n",
      "html": "<h1 id=\"6.-operators\">6. Operators <a class=\"heading-anchor-permalink\" href=\"#6.-operators\">#</a></h1>\n<p>Created Friday 18 October 2019</p>\n<ul>\n<li>int/int gives an int, not a float.</li>\n<li>any operation using a float/double gives a float/double.</li>\n<li>Remember, = is also an operator just like =,-,* etc. if we write (a=2) where ‘a’ has been previously been defined/declared, then assignment occurs, and then the left hand value is the result of the expression, which is two in this case.</li>\n</ul>\n<p>Types of operators:</p>\n<ul>\n<li><strong>Arithmetic operator:</strong>\n<ul>\n<li>\n<ul>\n<li></li>\n</ul>\n</li>\n<li>\n<ul>\n<li></li>\n</ul>\n</li>\n<li>\n<ul>\n<li></li>\n</ul>\n</li>\n<li>/</li>\n<li>% can be used only when both operands are int.</li>\n</ul>\n</li>\n<li><strong>Relational operator:</strong>\n<ul>\n<li>==</li>\n<li>!=</li>\n<li>&lt;</li>\n<li>\n<blockquote></blockquote>\n</li>\n<li>&lt;=</li>\n<li>\n<blockquote>\n<p>=</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><strong>Logical operator:</strong>\n<ul>\n<li>&amp;&amp;</li>\n<li>||</li>\n<li>!</li>\n<li>there’s no logical XOR in C++. We can do bitwise to achieve the same.</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://en.wikipedia.org/wiki/Short-circuit_evaluation\">https://en.wikipedia.org/wiki/Short-circuit_evaluation</a></p>\n<ul>\n<li>Easy and quick: <a href=\"http://www.cplusplus.com/doc/tutorial/operators/\">http://www.cplusplus.com/doc/tutorial/operators/</a></li>\n</ul>\n",
      "id": 24
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/0_index.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/0_index.html",
      "content": "# 4. Conditionals and while loops\nCreated Friday 18 October 2019\n\n\n* Only zero means false, all other values are treated as true on C++.\n* Undertstanding the don't care condition in the ladder and nested if else loops.\n\n\n",
      "html": "<h1 id=\"4.-conditionals-and-while-loops\">4. Conditionals and while loops <a class=\"heading-anchor-permalink\" href=\"#4.-conditionals-and-while-loops\">#</a></h1>\n<p>Created Friday 18 October 2019</p>\n<ul>\n<li>Only zero means false, all other values are treated as true on C++.</li>\n<li>Undertstanding the don’t care condition in the ladder and nested if else loops.</li>\n</ul>\n",
      "id": 25
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/1._Conditionals.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/1._Conditionals.html",
      "content": "# 1. Conditionals\nCreated Friday 18 October 2019\n\n* if\n* if else\n* if else if ladder.\n* if else if nested.\n* if if if \n* if if if else\n\n\nThis is a loop which runs until the condition is true.\nChecking if prime is really a tricky problem, accepted.\n\n",
      "html": "<h1 id=\"1.-conditionals\">1. Conditionals <a class=\"heading-anchor-permalink\" href=\"#1.-conditionals\">#</a></h1>\n<p>Created Friday 18 October 2019</p>\n<ul>\n<li>if</li>\n<li>if else</li>\n<li>if else if ladder.</li>\n<li>if else if nested.</li>\n<li>if if if</li>\n<li>if if if else</li>\n</ul>\n<p>This is a loop which runs until the condition is true.\nChecking if prime is really a tricky problem, accepted.</p>\n",
      "id": 26
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/2._Farenheit_to_Celsius.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/2._Farenheit_to_Celsius.html",
      "content": "# 2. Farenheit to Celsius\n\nCreated Friday 18 October 2019\n\nQ) Given three values - Start Fahrenheit Value (S), End Fahrenheit value (E) and Step Size (W), you need to convert all Fahrenheit values from Start to End at the gap of W, into their corresponding Celsius values and print the table.\n**Input Format** :\n3 integers - S, E and W respectively\n**Output Format** :\nFahrenheit to Celsius conversion table. One line for every Fahrenheit and corresponding Celsius value. On Fahrenheit value and its corresponding Celsius value should be separate by tab (\"\\t\").\n\n---\n\n**Sample Input** :\n0\n100\n20\n**Sample Output** :\n0 -17\n20 -6\n40 4\n60 15\n80 26\n100 37\n![](/assets/2._Farenheit_to_Celsius-image-1.jpg)\n",
      "html": "<h1 id=\"2.-farenheit-to-celsius\">2. Farenheit to Celsius <a class=\"heading-anchor-permalink\" href=\"#2.-farenheit-to-celsius\">#</a></h1>\n<p>Created Friday 18 October 2019</p>\n<p>Q) Given three values - Start Fahrenheit Value (S), End Fahrenheit value (E) and Step Size (W), you need to convert all Fahrenheit values from Start to End at the gap of W, into their corresponding Celsius values and print the table.\n<strong>Input Format</strong> :\n3 integers - S, E and W respectively\n<strong>Output Format</strong> :\nFahrenheit to Celsius conversion table. One line for every Fahrenheit and corresponding Celsius value. On Fahrenheit value and its corresponding Celsius value should be separate by tab (&quot;\\t&quot;).</p>\n<hr>\n<p><strong>Sample Input</strong> :\n0\n100\n20\n<strong>Sample Output</strong> :\n0 -17\n20 -6\n40 4\n60 15\n80 26\n100 37\n<img src=\"/assets/2._Farenheit_to_Celsius-image-1.jpg\" alt=\"\"></p>\n",
      "id": 27
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/3._Patterns.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/3._Patterns.html",
      "content": "# 3. Patterns\nCreated Friday 18 October 2019\n\n**One of the most important topics.**\nThese are **simple** things, but they require clarity in the for and while loops.\nThe best approach is the one Nidhi Agarwal already taught.\nHow to solve a problem?\nA:\n\n1. Analyze the problem.\n2. Break down the problem into smaller problems/steps.\n3. Write down the solution on paper.\n4. Verify the solution, using random examples. If we get stuck change the solution. \n5. Write code, this is just a formality.\n\n\n*****\n\n\n* As we print line by line, we need a loop to traverse the lines. Just write a blank while loop for this, for most problems. Now we just have to concentrate on the current line. Use **i for the row counter, and j for the column counter.**\n* For keeping track of column, use another variable.\n* We need to observe things mathematically or geometrically, or by using grids, get the hard values, then write the loops.\n* Guess the number, then check the 1st and last and an intermediate case. **Done. Proof: mathematical induction.**\n* Don't think of the number of variables used.\n\n\n",
      "html": "<h1 id=\"3.-patterns\">3. Patterns <a class=\"heading-anchor-permalink\" href=\"#3.-patterns\">#</a></h1>\n<p>Created Friday 18 October 2019</p>\n<p><strong>One of the most important topics.</strong>\nThese are <strong>simple</strong> things, but they require clarity in the for and while loops.\nThe best approach is the one Nidhi Agarwal already taught.\nHow to solve a problem?\nA:</p>\n<ol>\n<li>Analyze the problem.</li>\n<li>Break down the problem into smaller problems/steps.</li>\n<li>Write down the solution on paper.</li>\n<li>Verify the solution, using random examples. If we get stuck change the solution.</li>\n<li>Write code, this is just a formality.</li>\n</ol>\n<hr>\n<ul>\n<li>As we print line by line, we need a loop to traverse the lines. Just write a blank while loop for this, for most problems. Now we just have to concentrate on the current line. Use <strong>i for the row counter, and j for the column counter.</strong></li>\n<li>For keeping track of column, use another variable.</li>\n<li>We need to observe things mathematically or geometrically, or by using grids, get the hard values, then write the loops.</li>\n<li>Guess the number, then check the 1st and last and an intermediate case. <strong>Done. Proof: mathematical induction.</strong></li>\n<li>Don’t think of the number of variables used.</li>\n</ul>\n",
      "id": 28
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/0_index.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/0_index.html",
      "content": "# 1. Patterns 1\nCreated Friday 18 October 2019\n\nHow to make a pattern?\nA: Before writing the code, we must know these:\n\n1. Number of rows to be printed, **i.**\n2. How many things/columns in the **i'**th row. f(i)\n3. What to print the in the  ith row, i.e what to be printed at (i, j). This can depend on **i **or** j **or **N. Guess it, you need to be clear about the dependencies.**\n\n**This is all that matters for patterns. It is best to initialize i and j by 1, not 0. Do not initialize j in terms of i, if you can help it.**\n\n",
      "html": "<h1 id=\"1.-patterns-1\">1. Patterns 1 <a class=\"heading-anchor-permalink\" href=\"#1.-patterns-1\">#</a></h1>\n<p>Created Friday 18 October 2019</p>\n<p>How to make a pattern?\nA: Before writing the code, we must know these:</p>\n<ol>\n<li>Number of rows to be printed, <strong>i.</strong></li>\n<li>How many things/columns in the **i’**th row. f(i)</li>\n<li>What to print the in the  ith row, i.e what to be printed at (i, j). This can depend on **i <strong>or</strong> j **or <strong>N. Guess it, you need to be clear about the dependencies.</strong></li>\n</ol>\n<p><strong>This is all that matters for patterns. It is best to initialize i and j by 1, not 0. Do not initialize j in terms of i, if you can help it.</strong></p>\n",
      "id": 29
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/1._Pattern1.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/1._Pattern1.html",
      "content": "# 1. Pattern1\nCreated Friday 18 October 2019\n\n**Note: Don't worry about number of variables.**\nStep0: Initialize i = 0. If the column depends on the row number, initialize j as well.\nStep1: Write a while (with i<N)or for loop, complete it's ending brace.\nStep2: Start writing inside the loop, concentrating on the ith row. \n\n(1, 1)\t(1, 2)\t(1, 3) . .  j increasing here ->\n(2, 1) \t(2, 2)\t(2, 3) . .\n(3, 1) \t(3, 2)\t(3, 3) . . \n:\t\t:\t\t:\ni increases downwards.\nNothing to do with cartesian coordinates.\nExcept if **i ↔ -y **and **j ↔ x. ** \nSystem with (j, -i) with origin as (1, -1), in 3rd Quadrant. Not useful.\n\n\n",
      "html": "<h1 id=\"1.-pattern1\">1. Pattern1 <a class=\"heading-anchor-permalink\" href=\"#1.-pattern1\">#</a></h1>\n<p>Created Friday 18 October 2019</p>\n<p><strong>Note: Don’t worry about number of variables.</strong>\nStep0: Initialize i = 0. If the column depends on the row number, initialize j as well.\nStep1: Write a while (with i&lt;N)or for loop, complete it’s ending brace.\nStep2: Start writing inside the loop, concentrating on the ith row.</p>\n<p>(1, 1)\t(1, 2)\t(1, 3) . .  j increasing here -&gt;\n(2, 1) \t(2, 2)\t(2, 3) . .\n(3, 1) \t(3, 2)\t(3, 3) . .\n:\t\t:\t\t:\ni increases downwards.\nNothing to do with cartesian coordinates.\nExcept if **i ↔ -y **and **j ↔ x. **\nSystem with (j, -i) with origin as (1, -1), in 3rd Quadrant. Not useful.</p>\n",
      "id": 30
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/2._Square_Patterns.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/2._Square_Patterns.html",
      "content": "# 2. Square Patterns\nCreated Friday 18 October 2019\n\nWhat matters in this is the 3 questions.\nAnalyze the pattern, trial and error will only cause frustration here.\n\n",
      "html": "<h1 id=\"2.-square-patterns\">2. Square Patterns <a class=\"heading-anchor-permalink\" href=\"#2.-square-patterns\">#</a></h1>\n<p>Created Friday 18 October 2019</p>\n<p>What matters in this is the 3 questions.\nAnalyze the pattern, trial and error will only cause frustration here.</p>\n",
      "id": 31
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/3._Triangle_Patterns.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/3._Triangle_Patterns.html",
      "content": "# 3. Triangle Patterns\nCreated Friday 18 October 2019\n\nJust solve for the 3 questions.\nBeware of the spaces.\nFor the given pattern, for n = 4.\n1\n2 3\n3 4 5\n4 5 6 7\nQ1) no. of rows  = N\nQ2) no. of columns = i\nQ3) What to print, there are **two** methods here, either formulate an epression for (i,j) or just start with i and print i terms.\nHere, I'll use the latter because it's obvious and easy to code. Here the val will be **initialized** to i, after every newline.  \n\nin this question,\n1\n2 3\n4 5 6\n7 8 9 10.\nHere Q1 and Q2 are same. We can either cout i + j, or just declare a variable k, and keep track of it till the end of the program.\n\n",
      "html": "<h1 id=\"3.-triangle-patterns\">3. Triangle Patterns <a class=\"heading-anchor-permalink\" href=\"#3.-triangle-patterns\">#</a></h1>\n<p>Created Friday 18 October 2019</p>\n<p>Just solve for the 3 questions.\nBeware of the spaces.\nFor the given pattern, for n = 4.\n1\n2 3\n3 4 5\n4 5 6 7\nQ1) no. of rows  = N\nQ2) no. of columns = i\nQ3) What to print, there are <strong>two</strong> methods here, either formulate an epression for (i,j) or just start with i and print i terms.\nHere, I’ll use the latter because it’s obvious and easy to code. Here the val will be <strong>initialized</strong> to i, after every newline.</p>\n<p>in this question,\n1\n2 3\n4 5 6\n7 8 9 10.\nHere Q1 and Q2 are same. We can either cout i + j, or just declare a variable k, and keep track of it till the end of the program.</p>\n",
      "id": 32
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/4._Character_Pattern.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/4._Character_Pattern.html",
      "content": "# 4. Character Pattern\nCreated Friday 18 October 2019\n\n\n* Remember here to cast the type to char.\n* Otherwise, we can store the value to be printed in a char variable before printing.\n\ne.g \nABCD\nBCDE\nCDEF\nDEFG\nval(i, j) = char('A' + i + j -1 )\n\n",
      "html": "<h1 id=\"4.-character-pattern\">4. Character Pattern <a class=\"heading-anchor-permalink\" href=\"#4.-character-pattern\">#</a></h1>\n<p>Created Friday 18 October 2019</p>\n<ul>\n<li>Remember here to cast the type to char.</li>\n<li>Otherwise, we can store the value to be printed in a char variable before printing.</li>\n</ul>\n<p>e.g\nABCD\nBCDE\nCDEF\nDEFG\nval(i, j) = char(‘A’ + i + j -1 )</p>\n",
      "id": 33
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/5._Interesting_Alphabets.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/5._Interesting_Alphabets.html",
      "content": "# 5. Interesting Alphabets\nCreated Friday 18 October 2019\n\nQ) Print the following pattern for the given number of rows.\nGiven pattern for N = 5\nE\nDE\nCDE\nBCDE\nABCDE\n**Input** format : N (Total no. of rows)\n**Output** format : Pattern in N lines\n**Sample** Input :\n8\n**Sample** Output :\nH\nGH\nFGH\nEFGH\nDEFGH\nCDEFGH\nBCDEFGH\nABCDEFGH\n\nAnswer: q1) Number of rows = n, i from 1 to n\nq2) no of columns = i.\nq3) The nth alphabet, followed by the successors.\nWe need to keep track of the first letter of each row, one way can be to store only the 1st letter as a calculation, an and the rest as code.\nchar val = 'A'+n-1; // gives the nth alphabet\nthen we do val-- for each row. We also need a second variable for the row elements.\n\n",
      "html": "<h1 id=\"5.-interesting-alphabets\">5. Interesting Alphabets <a class=\"heading-anchor-permalink\" href=\"#5.-interesting-alphabets\">#</a></h1>\n<p>Created Friday 18 October 2019</p>\n<p>Q) Print the following pattern for the given number of rows.\nGiven pattern for N = 5\nE\nDE\nCDE\nBCDE\nABCDE\n<strong>Input</strong> format : N (Total no. of rows)\n<strong>Output</strong> format : Pattern in N lines\n<strong>Sample</strong> Input :\n8\n<strong>Sample</strong> Output :\nH\nGH\nFGH\nEFGH\nDEFGH\nCDEFGH\nBCDEFGH\nABCDEFGH</p>\n<p>Answer: q1) Number of rows = n, i from 1 to n\nq2) no of columns = i.\nq3) The nth alphabet, followed by the successors.\nWe need to keep track of the first letter of each row, one way can be to store only the 1st letter as a calculation, an and the rest as code.\nchar val = ‘A’+n-1; // gives the nth alphabet\nthen we do val-- for each row. We also need a second variable for the row elements.</p>\n",
      "id": 34
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2/1._Mirror_Triangles.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2/1._Mirror_Triangles.html",
      "content": "# 1. Mirror Triangles\nCreated Saturday 19 October 2019\n\nSolve the three given questions and then code the solution, just be wary of the spaces that need to be inserted\nbefore printing the things on the i'th row.\n * * * *\n * * *\n * *\n * \n\n\n",
      "html": "<h1 id=\"1.-mirror-triangles\">1. Mirror Triangles <a class=\"heading-anchor-permalink\" href=\"#1.-mirror-triangles\">#</a></h1>\n<p>Created Saturday 19 October 2019</p>\n<p>Solve the three given questions and then code the solution, just be wary of the spaces that need to be inserted\nbefore printing the things on the i’th row.</p>\n<hr>\n<hr>\n<ul>\n<li>\n<ul>\n<li></li>\n</ul>\n</li>\n<li></li>\n</ul>\n",
      "id": 35
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2/2._Isosceles_Triangle.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2/2._Isosceles_Triangle.html",
      "content": "# 2. Isosceles Triangle\nCreated Saturday 19 October 2019\n\nVery interesting.\nInsights: Here each row has three phases:\n\n1. The spaces. (_). Make a variable called space. Keep space and j as counters as far as possible. No need to foolishly mathematicize.\n2. Increasing numbers. Avoid writing ++ or — directly in cout.\t\n3. Decreasing numbers.\n\ne.g (ignore the spaces between underscore) \n_ _ 1 _ _\n_ 1 2 1 _\n1 2 3 2 1\nSolution: Let's write code for this first,\n_ _ 1\n_ 1 2\n1 2 3\nThen we'll se about the decreasing thing in each row.\nConclusion: Try to keep things as independent as you can between the phases, saved time in debugging.\n**Analogies are ***too*** important to be ignored, what you already know to do is very important too.** **That's it. Good confidence increased.**\n\n",
      "html": "<h1 id=\"2.-isosceles-triangle\">2. Isosceles Triangle <a class=\"heading-anchor-permalink\" href=\"#2.-isosceles-triangle\">#</a></h1>\n<p>Created Saturday 19 October 2019</p>\n<p>Very interesting.\nInsights: Here each row has three phases:</p>\n<ol>\n<li>The spaces. (_). Make a variable called space. Keep space and j as counters as far as possible. No need to foolishly mathematicize.</li>\n<li>Increasing numbers. Avoid writing ++ or — directly in cout.</li>\n<li>Decreasing numbers.</li>\n</ol>\n<p>e.g (ignore the spaces between underscore)\n_ _ 1 _ _\n_ 1 2 1 _\n1 2 3 2 1\nSolution: Let’s write code for this first,\n_ _ 1\n_ 1 2\n1 2 3\nThen we’ll se about the decreasing thing in each row.\nConclusion: Try to keep things as independent as you can between the phases, saved time in debugging.\n<strong>Analogies are <em><strong>too</strong></em> important to be ignored, what you already know to do is very important too.</strong> <strong>That’s it. Good confidence increased.</strong></p>\n",
      "id": 36
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2/3._More_Patterns.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2/3._More_Patterns.html",
      "content": "# 3. More Patterns\nCreated Saturday 19 October 2019\n\nFor making the pattern n(always odd) = 7 is\n\n\n\n",
      "html": "<h1 id=\"3.-more-patterns\">3. More Patterns <a class=\"heading-anchor-permalink\" href=\"#3.-more-patterns\">#</a></h1>\n<p>Created Saturday 19 October 2019</p>\n<p>For making the pattern n(always odd) = 7 is</p>\n",
      "id": 37
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/1._Bitwise_Operator.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/1._Bitwise_Operator.html",
      "content": "# 1. Bitwise Operator\nCreated Saturday 19 October 2019\n\n\n* & - check even or odd →  do k&1 → if answer is 1, then k is odd. Otherwise even. \n* | checking for zero, do k | 0. If 0 comes, k is 0. else it is non-zero.\n* ~ checking for 0, if the number after ~k == 0, then k is 0.\n* ^ shortcut for checking equality, 0 if equal and 1 if unequal.\n\nThere are two bitwise shift operators:\n\n* << operator. Shift to the left, pad with zeros.This does doubles the value for almost all numbers, except the ones with the second last MSB as 1 or 0, It flips the here. \n* >> **floored** **division with not truncation of decimal**. Padding with 0 or 1 as per compiler, g++17 pads negatives with 1 and, positives with 0. e.g -23/2 = -12\n* Using shift operators with negative integers is termed an **undefined** operator coz we cannot predict the output for all cases.\n\nResources\n- https://codeforwin.org/2018/05/10-cool-bitwise-operator-hacks-and-tricks.html\n- https://graphics.stanford.edu/~seander/bithacks.html",
      "html": "<h1 id=\"1.-bitwise-operator\">1. Bitwise Operator <a class=\"heading-anchor-permalink\" href=\"#1.-bitwise-operator\">#</a></h1>\n<p>Created Saturday 19 October 2019</p>\n<ul>\n<li>&amp; - check even or odd →  do k&amp;1 → if answer is 1, then k is odd. Otherwise even.</li>\n<li>| checking for zero, do k | 0. If 0 comes, k is 0. else it is non-zero.</li>\n<li>~ checking for 0, if the number after ~k == 0, then k is 0.</li>\n<li>^ shortcut for checking equality, 0 if equal and 1 if unequal.</li>\n</ul>\n<p>There are two bitwise shift operators:</p>\n<ul>\n<li>&lt;&lt; operator. Shift to the left, pad with zeros.This does doubles the value for almost all numbers, except the ones with the second last MSB as 1 or 0, It flips the here.</li>\n<li>\n<blockquote>\n<blockquote>\n<p><strong>floored</strong> <strong>division with not truncation of decimal</strong>. Padding with 0 or 1 as per compiler, g++17 pads negatives with 1 and, positives with 0. e.g -23/2 = -12</p>\n</blockquote>\n</blockquote>\n</li>\n<li>Using shift operators with negative integers is termed an <strong>undefined</strong> operator coz we cannot predict the output for all cases.</li>\n</ul>\n<p>Resources</p>\n<ul>\n<li><a href=\"https://codeforwin.org/2018/05/10-cool-bitwise-operator-hacks-and-tricks.html\">https://codeforwin.org/2018/05/10-cool-bitwise-operator-hacks-and-tricks.html</a></li>\n<li><a href=\"https://graphics.stanford.edu/~seander/bithacks.html\">https://graphics.stanford.edu/~seander/bithacks.html</a></li>\n</ul>\n",
      "id": 38
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/2._Increment_Operators.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/2._Increment_Operators.html",
      "content": "# 2. Increment Operators\n\nCreated Tuesday 22 October 2019\n\nThese are shortcuts for x = x + 1, with post and pre to make good use of them.\n\n- pre, increases 1st and does in memory.\n- post, increases after giving old value.\n- <https://stackoverflow.com/questions/2989704/order-of-operations-for-pre-increment-and-post-increment-in-a-function-argument>\n\nThe statement after the two will have the same value;\n\n- the +=, \\*=, -=, [/=.](file:///Users/muhammadsanjar/Dropbox/Work_Section/career_dir/dsa_Prog/dsap_toolbox/langs/cpp_dir/codingNinjas/Intro_to_cpp/%3D.) No pre or post in this case.\n- Precedence and associativity\n\n![](/assets/2._Increment_Operators-image-1.png)\nAssociativity is used only when two operators of the same operator\n<https://www.geeksforgeeks.org/operator-precedence-and-associativity-in-c/>\n<https://www.tutorialspoint.com/Operators-Precedence-in-Cplusplus>\n\nCaveat: No need to remember the table, use brackets for simplicity.\n\n- **You know it, be confident.**\n\n![](/assets/2._Increment_Operators-image-2.png)\n",
      "html": "<h1 id=\"2.-increment-operators\">2. Increment Operators <a class=\"heading-anchor-permalink\" href=\"#2.-increment-operators\">#</a></h1>\n<p>Created Tuesday 22 October 2019</p>\n<p>These are shortcuts for x = x + 1, with post and pre to make good use of them.</p>\n<ul>\n<li>pre, increases 1st and does in memory.</li>\n<li>post, increases after giving old value.</li>\n<li><a href=\"https://stackoverflow.com/questions/2989704/order-of-operations-for-pre-increment-and-post-increment-in-a-function-argument\">https://stackoverflow.com/questions/2989704/order-of-operations-for-pre-increment-and-post-increment-in-a-function-argument</a></li>\n</ul>\n<p>The statement after the two will have the same value;</p>\n<ul>\n<li>the +=, *=, -=, [/=.](file:///Users/muhammadsanjar/Dropbox/Work_Section/career_dir/dsa_Prog/dsap_toolbox/langs/cpp_dir/codingNinjas/Intro_to_cpp/%3D.) No pre or post in this case.</li>\n<li>Precedence and associativity</li>\n</ul>\n<p><img src=\"/assets/2._Increment_Operators-image-1.png\" alt=\"\">\nAssociativity is used only when two operators of the same operator\n<a href=\"https://www.geeksforgeeks.org/operator-precedence-and-associativity-in-c/\">https://www.geeksforgeeks.org/operator-precedence-and-associativity-in-c/</a>\n<a href=\"https://www.tutorialspoint.com/Operators-Precedence-in-Cplusplus\">https://www.tutorialspoint.com/Operators-Precedence-in-Cplusplus</a></p>\n<p>Caveat: No need to remember the table, use brackets for simplicity.</p>\n<ul>\n<li><strong>You know it, be confident.</strong></li>\n</ul>\n<p><img src=\"/assets/2._Increment_Operators-image-2.png\" alt=\"\"></p>\n",
      "id": 39
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/3.0_For_loop.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/3.0_For_loop.html",
      "content": "# 3.0 For loop\n\nCreated Tuesday 22 October 2019\nstructure of a for loop:\ninit variable(s)\nwhile(check_condition){\n\n---\n\n---\n\n---\n\nincerement/decrement;\n}\n\nstructure for the for loop:\nfor(init; condition_check; increment){\n\n---\n\n---\n\n---\n\n}\nfor and while are exactly the same, except jargon.\n![](/assets/3.0_For_loop-image-1.jpg)\nAdvantages of a for loop:\n\n1. We tend to forget the increment condition, this helps in avoiding the mistake.\n2. It makes the code neater.\n\nImportant:\n\n1. All the three parts of the for are optional, we can skip one or more of them. But the three semicolons are **compulsory. **<http://www.cplusplus.com/doc/tutorial/control/>\n2. In the initialization, we can initialize multiple variables, separated by commas. It's(first expression's) value does not matter anyway.\n3. In the check_condition, all boolean expressions have to be connected using bool operators only, no commas should be used.\n4. the increment part can have multiple increment parts separated by commas.\n\nRunning time:\n\n- the inititializer is run only 1 time\n- the checker is run n times, this including the anchor/stopping condition.\n- the incrementer runs n times, including the last increment.\n\nState:\nThe start state is the initializer.\nThe end state is the checker or a break inside the body.\n![](/assets/3.0_For_loop-image-2.png)\n\n**A hard lesson: The order of content in a loop does matter. **\n\n- Read only about for and while loop:\n",
      "html": "<h1 id=\"3.0-for-loop\">3.0 For loop <a class=\"heading-anchor-permalink\" href=\"#3.0-for-loop\">#</a></h1>\n<p>Created Tuesday 22 October 2019\nstructure of a for loop:\ninit variable(s)\nwhile(check_condition){</p>\n<hr>\n<hr>\n<hr>\n<p>incerement/decrement;\n}</p>\n<p>structure for the for loop:\nfor(init; condition_check; increment){</p>\n<hr>\n<hr>\n<hr>\n<p>}\nfor and while are exactly the same, except jargon.\n<img src=\"/assets/3.0_For_loop-image-1.jpg\" alt=\"\">\nAdvantages of a for loop:</p>\n<ol>\n<li>We tend to forget the increment condition, this helps in avoiding the mistake.</li>\n<li>It makes the code neater.</li>\n</ol>\n<p>Important:</p>\n<ol>\n<li>All the three parts of the for are optional, we can skip one or more of them. But the three semicolons are **compulsory. **<a href=\"http://www.cplusplus.com/doc/tutorial/control/\">http://www.cplusplus.com/doc/tutorial/control/</a></li>\n<li>In the initialization, we can initialize multiple variables, separated by commas. It’s(first expression’s) value does not matter anyway.</li>\n<li>In the check_condition, all boolean expressions have to be connected using bool operators only, no commas should be used.</li>\n<li>the increment part can have multiple increment parts separated by commas.</li>\n</ol>\n<p>Running time:</p>\n<ul>\n<li>the inititializer is run only 1 time</li>\n<li>the checker is run n times, this including the anchor/stopping condition.</li>\n<li>the incrementer runs n times, including the last increment.</li>\n</ul>\n<p>State:\nThe start state is the initializer.\nThe end state is the checker or a break inside the body.\n<img src=\"/assets/3.0_For_loop-image-2.png\" alt=\"\"></p>\n<p>**A hard lesson: The order of content in a loop does matter. **</p>\n<ul>\n<li>Read only about for and while loop:</li>\n</ul>\n",
      "id": 40
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/3.1_For_each_loop.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/3.1_For_each_loop.html",
      "content": "# 3.1 For each loop\nCreated Saturday 11 January 2020\n\n\n* keyword is for. **And not for each.**\n* Also called range based <loops.http://www.cplusplus.com/doc/tutorial/control/>\n* This loop is automatic and does not require the explicit initialization of any counter variable.\n* Syntax: for(data_type variable_name: collection_name)\n\n{\n\n}\n\n* Ranges are sequences of elements, including arrays, containers, and any other type supporting the functions begin and end; i.e works only on collections, i.e arrays, strings or vectors.\n* Range based loops usually also make use of type deduction for the type of the elements with auto.\n* It does **not **work with pointers.\n\n\n",
      "html": "<h1 id=\"3.1-for-each-loop\">3.1 For each loop <a class=\"heading-anchor-permalink\" href=\"#3.1-for-each-loop\">#</a></h1>\n<p>Created Saturday 11 January 2020</p>\n<ul>\n<li>keyword is for. <strong>And not for each.</strong></li>\n<li>Also called range based <a href=\"loops.http://www.cplusplus.com/doc/tutorial/control/\">loops.http://www.cplusplus.com/doc/tutorial/control/</a></li>\n<li>This loop is automatic and does not require the explicit initialization of any counter variable.</li>\n<li>Syntax: for(data_type variable_name: collection_name)</li>\n</ul>\n<p>{</p>\n<p>}</p>\n<ul>\n<li>Ranges are sequences of elements, including arrays, containers, and any other type supporting the functions begin and end; i.e works only on collections, i.e arrays, strings or vectors.</li>\n<li>Range based loops usually also make use of type deduction for the type of the elements with auto.</li>\n<li>It does **not **work with pointers.</li>\n</ul>\n",
      "id": 41
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/4._Break_and_continue.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/4._Break_and_continue.html",
      "content": "# 4. Break and continue\nCreated Tuesday 22 October 2019\n\nBreak and  continue are used to alter the normal flow of the **for, while **loops and the **switch statement**.\n**break: ** This exits only the innermost loop where we are currently in. \nloop1{int a\nloop2{ int b\nbreak;\nloop3{int a\n}\n}\n}\n\nthe break here will not let loop3 execute for any iteration of loop2. \nNo.of times run = a*b\n**continue**:\nThis will skip execution of the code below **continue** and take the nearest current to the next iteration. \n\n* Be  sure to do the increment step when using the continue statement in a **while** loop. In the for loop this is not required. Because increment statement is executed **even if** continue is used.\n\n\n* Read only about break and continue: <http://www.cplusplus.com/doc/tutorial/control/>\n\n\n",
      "html": "<h1 id=\"4.-break-and-continue\">4. Break and continue <a class=\"heading-anchor-permalink\" href=\"#4.-break-and-continue\">#</a></h1>\n<p>Created Tuesday 22 October 2019</p>\n<p>Break and  continue are used to alter the normal flow of the **for, while **loops and the <strong>switch statement</strong>.\n**break: ** This exits only the innermost loop where we are currently in.\nloop1{int a\nloop2{ int b\nbreak;\nloop3{int a\n}\n}\n}</p>\n<p>the break here will not let loop3 execute for any iteration of loop2.\nNo.of times run = a*b\n<strong>continue</strong>:\nThis will skip execution of the code below <strong>continue</strong> and take the nearest current to the next iteration.</p>\n<ul>\n<li>\n<p>Be  sure to do the increment step when using the continue statement in a <strong>while</strong> loop. In the for loop this is not required. Because increment statement is executed <strong>even if</strong> continue is used.</p>\n</li>\n<li>\n<p>Read only about break and continue: <a href=\"http://www.cplusplus.com/doc/tutorial/control/\">http://www.cplusplus.com/doc/tutorial/control/</a></p>\n</li>\n</ul>\n",
      "id": 42
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/5._Scope_of_variables.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/5._Scope_of_variables.html",
      "content": "# 5. Scope of variables\nCreated Tuesday 22 October 2019\n\n\n* C++ has an availability scope for each variable.\n* Only one variable can be accessible by a name, anytime anywhere.\n\nThe following cases show all possible outcomes of a scope error:\n\n1. Variable are accessible only within their nearest container codeblock.\n2. init Variable in **for** loop are **in scope** inside the braces. Similarly for **while**, **switch **statements.\n3. Overriding of value: if a variable in declared in the **same** scope, then this is an invalid practice.\n4. Overriding of value: if a variable is declared in an **inner **scope, with the same name as a variable from an **outer **scope, then the outer variable is lost, i.e the **inner **one shadows the **outer **one. \n\n\n\n\n",
      "html": "<h1 id=\"5.-scope-of-variables\">5. Scope of variables <a class=\"heading-anchor-permalink\" href=\"#5.-scope-of-variables\">#</a></h1>\n<p>Created Tuesday 22 October 2019</p>\n<ul>\n<li>C++ has an availability scope for each variable.</li>\n<li>Only one variable can be accessible by a name, anytime anywhere.</li>\n</ul>\n<p>The following cases show all possible outcomes of a scope error:</p>\n<ol>\n<li>Variable are accessible only within their nearest container codeblock.</li>\n<li>init Variable in <strong>for</strong> loop are <strong>in scope</strong> inside the braces. Similarly for <strong>while</strong>, **switch **statements.</li>\n<li>Overriding of value: if a variable in declared in the <strong>same</strong> scope, then this is an invalid practice.</li>\n<li>Overriding of value: if a variable is declared in an **inner **scope, with the same name as a variable from an **outer **scope, then the outer variable is lost, i.e the **inner **one shadows the **outer **one.</li>\n</ol>\n",
      "id": 43
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/6._cin_vs_cin.get().md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/6._cin_vs_cin.get().html",
      "content": "# 6. cin vs cin.get()\nCreated Tuesday 22 October 2019\n\n\n* **cin **ignores space, tabs and enter(newline).\n* cin.get() accepts spaces. Just write x = cin.get()\n\nIt accepts spaces, tabs and newlines. \nHow does cin or cin.get operate, they keep on taking values until we give the enter command.\n[Notes for the lecture](./attach_ments/0000000000000030.pdf)\n\nThis is a very good and easy page to cin and cout for C++\n\n",
      "html": "<h1 id=\"6.-cin-vs-cin.get()\">6. cin vs cin.get() <a class=\"heading-anchor-permalink\" href=\"#6.-cin-vs-cin.get()\">#</a></h1>\n<p>Created Tuesday 22 October 2019</p>\n<ul>\n<li>**cin **ignores space, tabs and enter(newline).</li>\n<li>cin.get() accepts spaces. Just write x = cin.get()</li>\n</ul>\n<p>It accepts spaces, tabs and newlines.\nHow does cin or cin.get operate, they keep on taking values until we give the enter command.\n<a href=\"./attach_ments/0000000000000030.pdf\">Notes for the lecture</a></p>\n<p>This is a very good and easy page to cin and cout for C++</p>\n",
      "id": 44
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/7._Assignments.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/5._For_loop_and_bitwise_ops/7._Assignments.html",
      "content": "# 7. Assignments\nCreated Tuesday 22 October 2019\n\nA1: [Sum or Product](./7._Assignments/attach_ments/a1.cpp)\nA2: [Terms of AP](./7._Assignments/attach_ments/a2.cpp)\nA3: [Reverse Of a Number](./7._Assignments/attach_ments/a3.cpp)\nA4: [Binary to decimal](./7._Assignments/attach_ments/a4.cpp)\nA5: [Decimal to Binary](./7._Assignments/attach_ments/a5.cpp)\nA6: [Square Root(Integral)](./7._Assignments/attach_ments/a6.cpp)\nA7: [Check Number Sequence](./7._Assignments/attach_ments/a7.cpp) Elegantly and beautifully solved.\n\n",
      "html": "<h1 id=\"7.-assignments\">7. Assignments <a class=\"heading-anchor-permalink\" href=\"#7.-assignments\">#</a></h1>\n<p>Created Tuesday 22 October 2019</p>\n<p>A1: <a href=\"./7._Assignments/attach_ments/a1.cpp\">Sum or Product</a>\nA2: <a href=\"./7._Assignments/attach_ments/a2.cpp\">Terms of AP</a>\nA3: <a href=\"./7._Assignments/attach_ments/a3.cpp\">Reverse Of a Number</a>\nA4: <a href=\"./7._Assignments/attach_ments/a4.cpp\">Binary to decimal</a>\nA5: <a href=\"./7._Assignments/attach_ments/a5.cpp\">Decimal to Binary</a>\nA6: <a href=\"./7._Assignments/attach_ments/a6.cpp\">Square Root(Integral)</a>\nA7: <a href=\"./7._Assignments/attach_ments/a7.cpp\">Check Number Sequence</a> Elegantly and beautifully solved.</p>\n",
      "id": 45
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/6._Functions/0_index.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/6._Functions/0_index.html",
      "content": "# 6. Functions\nCreated Wednesday 23 October 2019\n\n[Functions Official Notes](./6._Functions/attach_ments/functions.pdf)\nQuick Reads: <http://www.cplusplus.com/doc/tutorial/functions/>\n\n",
      "html": "<h1 id=\"6.-functions\">6. Functions <a class=\"heading-anchor-permalink\" href=\"#6.-functions\">#</a></h1>\n<p>Created Wednesday 23 October 2019</p>\n<p><a href=\"./6._Functions/attach_ments/functions.pdf\">Functions Official Notes</a>\nQuick Reads: <a href=\"http://www.cplusplus.com/doc/tutorial/functions/\">http://www.cplusplus.com/doc/tutorial/functions/</a></p>\n",
      "id": 46
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/6._Functions/1._What_are_functions.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/6._Functions/1._What_are_functions.html",
      "content": "# 1. What are functions\n\nCreated Wednesday 23 October 2019\nSuppose we need to calculate nCr. We can do this by making 3 for loops for n!. r! and (n-r)!\nThis will take 2n steps in total. We had to do copy the code for all the three things.\nThis is very bad because:\n\n- If an error happens at any part, all other parts need to be changed.\n- Code is bulky, like rambling.\n- Unreadable.\n- Most of the code is not reusable.\n\nIt is better that we have a funtion for doing repetitive tasks. This code can be debugged easily, looks good and is not bulky.\nThis solution is called a function.\n![](/assets/1._What_are_functions-image-1.jpg)\n\nSyntax for declaring functions in C++.\nouput_type name_of_the_function(input_type1 name1, input_type2, name2){\n// code inside the function, called function definition\n}\n\n- We can pass as many parameters as we want.\n- In the main function, it is **not necessary** to use a variable to store the output. If the functions returns a value, then f() will be **evaluated** as an expression.\n- the return keyword is used to end the function and return the value, or stop if the function is of type void. This is very useful in programs like prime, we can use this to our advantage.\n- A function without arguments is also possible. But it will not change anything in the main function, except that it takes some time.\n- If a function is given more or less* values than it is supposed to take, the programs throws and error, function not viable. *case when we have default arguments.\n",
      "html": "<h1 id=\"1.-what-are-functions\">1. What are functions <a class=\"heading-anchor-permalink\" href=\"#1.-what-are-functions\">#</a></h1>\n<p>Created Wednesday 23 October 2019\nSuppose we need to calculate nCr. We can do this by making 3 for loops for n!. r! and (n-r)!\nThis will take 2n steps in total. We had to do copy the code for all the three things.\nThis is very bad because:</p>\n<ul>\n<li>If an error happens at any part, all other parts need to be changed.</li>\n<li>Code is bulky, like rambling.</li>\n<li>Unreadable.</li>\n<li>Most of the code is not reusable.</li>\n</ul>\n<p>It is better that we have a funtion for doing repetitive tasks. This code can be debugged easily, looks good and is not bulky.\nThis solution is called a function.\n<img src=\"/assets/1._What_are_functions-image-1.jpg\" alt=\"\"></p>\n<p>Syntax for declaring functions in C++.\nouput_type name_of_the_function(input_type1 name1, input_type2, name2){\n// code inside the function, called function definition\n}</p>\n<ul>\n<li>We can pass as many parameters as we want.</li>\n<li>In the main function, it is <strong>not necessary</strong> to use a variable to store the output. If the functions returns a value, then f() will be <strong>evaluated</strong> as an expression.</li>\n<li>the return keyword is used to end the function and return the value, or stop if the function is of type void. This is very useful in programs like prime, we can use this to our advantage.</li>\n<li>A function without arguments is also possible. But it will not change anything in the main function, except that it takes some time.</li>\n<li>If a function is given more or less* values than it is supposed to take, the programs throws and error, function not viable. *case when we have default arguments.</li>\n</ul>\n",
      "id": 47
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/6._Functions/2._How_function_calling_works.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/6._Functions/2._How_function_calling_works.html",
      "content": "# 2. How function calling works\nCreated Saturday 09 November 2019\n\n\n* Scoping is important\n* Function call use LIFO philosophy, i.e stack. Each part of the RAM having a function is called an activation record.\n\n\n",
      "html": "<h1 id=\"2.-how-function-calling-works\">2. How function calling works <a class=\"heading-anchor-permalink\" href=\"#2.-how-function-calling-works\">#</a></h1>\n<p>Created Saturday 09 November 2019</p>\n<ul>\n<li>Scoping is important</li>\n<li>Function call use LIFO philosophy, i.e stack. Each part of the RAM having a function is called an activation record.</li>\n</ul>\n",
      "id": 48
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/6._Functions/3._Scope_of_variables_w.r.t_functions.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/6._Functions/3._Scope_of_variables_w.r.t_functions.html",
      "content": "# 3. Scope of variables w.r.t functions\n\nCreated Saturday 09 November 2019\n\n- Scopes are very important in functions, functions can access values only global variables and their local variables.\n- The above is true for every variable, even in the functions.\n- Variables that have the different scopes, may have the same name, but it does not mean that they are the same memory locations.\n- If two variables which are both in scope at a location, then the most local one shadows the all other variable(s) with the same name, even if we have the same name deeper in the same block.\n\n![](/assets/3._Scope_of_variables_w.r.t_functions-image-1.png)\nHere both variables have name as 'a' but are refer to two different variables, the best way to visualize this is to rename them absoultely, i.e main.a and increment.a(in this case).\n\n- **Lifetime and Scope are two different concepts.**\n",
      "html": "<h1 id=\"3.-scope-of-variables-w.r.t-functions\">3. Scope of variables w.r.t functions <a class=\"heading-anchor-permalink\" href=\"#3.-scope-of-variables-w.r.t-functions\">#</a></h1>\n<p>Created Saturday 09 November 2019</p>\n<ul>\n<li>Scopes are very important in functions, functions can access values only global variables and their local variables.</li>\n<li>The above is true for every variable, even in the functions.</li>\n<li>Variables that have the different scopes, may have the same name, but it does not mean that they are the same memory locations.</li>\n<li>If two variables which are both in scope at a location, then the most local one shadows the all other variable(s) with the same name, even if we have the same name deeper in the same block.</li>\n</ul>\n<p><img src=\"/assets/3._Scope_of_variables_w.r.t_functions-image-1.png\" alt=\"\">\nHere both variables have name as ‘a’ but are refer to two different variables, the best way to visualize this is to rename them absoultely, i.e main.a and increment.a(in this case).</p>\n<ul>\n<li><strong>Lifetime and Scope are two different concepts.</strong></li>\n</ul>\n",
      "id": 49
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/6._Functions/4._Call_by_Value.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/6._Functions/4._Call_by_Value.html",
      "content": "# 4. Call by Value\nCreated Saturday 09 November 2019\nJust another name for **pass by value**.\n\n* This is a concept in Computer Science, where parameters are given a copy(value) of the argument, rather than giving them the memory location of the variable passed in the function call. \n* So the param and the argument, both, remain independent.\n\n\n",
      "html": "<h1 id=\"4.-call-by-value\">4. Call by Value <a class=\"heading-anchor-permalink\" href=\"#4.-call-by-value\">#</a></h1>\n<p>Created Saturday 09 November 2019\nJust another name for <strong>pass by value</strong>.</p>\n<ul>\n<li>This is a concept in Computer Science, where parameters are given a copy(value) of the argument, rather than giving them the memory location of the variable passed in the function call.</li>\n<li>So the param and the argument, both, remain independent.</li>\n</ul>\n",
      "id": 50
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/0_index.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/0_index.html",
      "content": "# 7. Arrays\nCreated Tuesday 12 November 2019\n\n<http://www.cplusplus.com/doc/tutorial/arrays/>\n\n",
      "html": "<h1 id=\"7.-arrays\">7. Arrays <a class=\"heading-anchor-permalink\" href=\"#7.-arrays\">#</a></h1>\n<p>Created Tuesday 12 November 2019</p>\n<p><a href=\"http://www.cplusplus.com/doc/tutorial/arrays/\">http://www.cplusplus.com/doc/tutorial/arrays/</a></p>\n",
      "id": 51
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/1._Why_arrays.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/1._Why_arrays.html",
      "content": "# 1. Why arrays\nCreated Tuesday 12 November 2019\n\n*Problem/Premise*: When we want to save data for working on it, it beomes tedious if a large number of variables are involved, agreed.\n*Observations*: \n\n* It may be necessary if all are different. \n* But it is stupid if all of them are similar, or if we took all of them as input(e.g maximum among n elements). \n\n*Solution*: The solution to this, in the *simplest* way, is an array(a primary data structure), which is a contiguous space of the variable which are identified by an index. So it's easy and intuitive.\n\nDeclaration:\ndata_type name_of_the_array[size_required]\nInitialization:\n\n* At declaration, becomes easier as Cpp develops.\n* By using a loop.\n\n\n**Confidence Increased!!**\n\n",
      "html": "<h1 id=\"1.-why-arrays\">1. Why arrays <a class=\"heading-anchor-permalink\" href=\"#1.-why-arrays\">#</a></h1>\n<p>Created Tuesday 12 November 2019</p>\n<p><em>Problem/Premise</em>: When we want to save data for working on it, it beomes tedious if a large number of variables are involved, agreed.\n<em>Observations</em>:</p>\n<ul>\n<li>It may be necessary if all are different.</li>\n<li>But it is stupid if all of them are similar, or if we took all of them as input(e.g maximum among n elements).</li>\n</ul>\n<p><em>Solution</em>: The solution to this, in the <em>simplest</em> way, is an array(a primary data structure), which is a contiguous space of the variable which are identified by an index. So it’s easy and intuitive.</p>\n<p>Declaration:\ndata_type name_of_the_array[size_required]\nInitialization:</p>\n<ul>\n<li>At declaration, becomes easier as Cpp develops.</li>\n<li>By using a loop.</li>\n</ul>\n<p><strong>Confidence Increased!!</strong></p>\n",
      "id": 52
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/2._More_On_Arrays/0_index.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/2._More_On_Arrays/0_index.html",
      "content": "# 2. More On Arrays\n\nCreated Tuesday 12 November 2019\n\n- We do and will only use an integer literal as the array length. So no variables allowed. Reason will be discussed later.\n- Use a big number like 100, **I know this wastes space. We will deal with this in dynamic memory allocation.**\n\n**Q**) Find the maximum integer in an integer array of size n.\n**A**) Why not? If we take A[0] as optimum, two possibilities arise for the value of 'max':\n\n1. It is the optimum. Hence, nothing will be greater or lesses than it (< or >) conditions for greatest and least respectively.[Note we don't need to update if duplicate optimums are present, no equality in comparisons].\n2. It is not the optimum, here. The value will be updated to a relative optimum of the comparison, but if we hit an optimum, possibility no.2 becomes true, hence no change will occur.\n3. But what if n = 0, then, we get max as A[0] which is not even there. In such a case, i.e if we have a function called max, it has to return some integer, but it has nothing to work with. We are stuck. So for consistency, we initialize max as INT_MIN (in <climits>) or INT32_MIN(<iostream>). So it returns a hugely negative integer in the case of n=0. For The general case, this is simply case 2(or rarely case 1, i.e if all are really INT_MIN). Which eventually becomes case 2. Problem Solved.\n\n- INT_MIN or INT_MAX was only for a formality of consistency for the return value. It is a **convention**. **It is better to use INT_MIN or MAX for no confusion at all. **\n- In the method max = A[0], we had to check if n>0 first.\n\n_Algorithmically(Assuming n>0)_:\n\n![](/assets/2._More_On_Arrays-image-1.jpg)\n",
      "html": "<h1 id=\"2.-more-on-arrays\">2. More On Arrays <a class=\"heading-anchor-permalink\" href=\"#2.-more-on-arrays\">#</a></h1>\n<p>Created Tuesday 12 November 2019</p>\n<ul>\n<li>We do and will only use an integer literal as the array length. So no variables allowed. Reason will be discussed later.</li>\n<li>Use a big number like 100, <strong>I know this wastes space. We will deal with this in dynamic memory allocation.</strong></li>\n</ul>\n<p><strong>Q</strong>) Find the maximum integer in an integer array of size n.\n<strong>A</strong>) Why not? If we take A[0] as optimum, two possibilities arise for the value of ‘max’:</p>\n<ol>\n<li>It is the optimum. Hence, nothing will be greater or lesses than it (&lt; or &gt;) conditions for greatest and least respectively.[Note we don’t need to update if duplicate optimums are present, no equality in comparisons].</li>\n<li>It is not the optimum, here. The value will be updated to a relative optimum of the comparison, but if we hit an optimum, possibility no.2 becomes true, hence no change will occur.</li>\n<li>But what if n = 0, then, we get max as A[0] which is not even there. In such a case, i.e if we have a function called max, it has to return some integer, but it has nothing to work with. We are stuck. So for consistency, we initialize max as INT_MIN (in <climits>) or INT32_MIN(<iostream>). So it returns a hugely negative integer in the case of n=0. For The general case, this is simply case 2(or rarely case 1, i.e if all are really INT_MIN). Which eventually becomes case 2. Problem Solved.</li>\n</ol>\n<ul>\n<li>INT_MIN or INT_MAX was only for a formality of consistency for the return value. It is a <strong>convention</strong>. **It is better to use INT_MIN or MAX for no confusion at all. **</li>\n<li>In the method max = A[0], we had to check if n&gt;0 first.</li>\n</ul>\n<p><em>Algorithmically(Assuming n&gt;0)</em>:</p>\n<p><img src=\"/assets/2._More_On_Arrays-image-1.jpg\" alt=\"\"></p>\n",
      "id": 53
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/3._Arrays_and_memory.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/3._Arrays_and_memory.html",
      "content": "# 3. Arrays and memory\nCreated Tuesday 12 November 2019\n\n\n* Zero Indexing is preferred, coz it decreases an operation on the CPU(Really) \n* Hence index is the same as \"distance from the first element\".\n* Address  = root addrress + (size_of_datatype)*index\n* Except for strings, couting arr_name returns the root address. For a char array, it looks for a '\\0' and hence prints the string.\n\n\n**You were right, there's no way that we pass an array as arg without it's size. We need to explictly pass the size, as the head is merely a pointer.**\n\n* When we write paramaters, we write (data_type name[]), although data_type* name would have worked too.\n* But when we call the function, we pass only the array name.\n\n\n",
      "html": "<h1 id=\"3.-arrays-and-memory\">3. Arrays and memory <a class=\"heading-anchor-permalink\" href=\"#3.-arrays-and-memory\">#</a></h1>\n<p>Created Tuesday 12 November 2019</p>\n<ul>\n<li>Zero Indexing is preferred, coz it decreases an operation on the CPU(Really)</li>\n<li>Hence index is the same as “distance from the first element”.</li>\n<li>Address  = root addrress + (size_of_datatype)*index</li>\n<li>Except for strings, couting arr_name returns the root address. For a char array, it looks for a ‘\\0’ and hence prints the string.</li>\n</ul>\n<p><strong>You were right, there’s no way that we pass an array as arg without it’s size. We need to explictly pass the size, as the head is merely a pointer.</strong></p>\n<ul>\n<li>When we write paramaters, we write (data_type name[]), although data_type* name would have worked too.</li>\n<li>But when we call the function, we pass only the array name.</li>\n</ul>\n",
      "id": 54
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/4._Arrays_as_function_parameters.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/4._Arrays_as_function_parameters.html",
      "content": "# 4. Arrays as function parameters\nCreated Wednesday 13 November 2019\n\nDeclaring and defining the variables in the same statement:\n\n1. data_type arr_name[] = { val1, val 2,...};  // creates an array of size = number of values n braces\n2. data_type arr_name[arr_size] = { val1, val 2,...val n};  // creates an array of size arr_size(assuming no. of values <= arr_size). Also the first n elements of the arrays are initialized to val1 val2 .. val n. An the **remaining are initialized to 0. Remember this.**\n\n\n* To create an array with all zeros just write, . data_type arr_name[arr_size] = {} \n* When we pass the array as argument, the whole array should be copied due to *Call by Value, ***But, **this does not happen because only the head is copied, the who array **is not copied.** \n\nQ) Reversing an array. Swap n/2(floored) times. On Both sides\nA) for(int i=0, j=n-1, a = 1; a<=n/2; a++, i++, j--)\n{\nint temp = arr[i];\nar[i] = arr[j];\narr[j] = arr[i];\n} \n \n\n* In C++, it is **syntactically correct** to exceed the valid range of indices for an array. This can create problems, since accessing out-of-range elements do not cause errors on compilation, but can cause errors on runtime. The reason for this being allowed will be seen in a later chapter when pointers are introduced.\n* Library arrays using <array> <http://www.cplusplus.com/doc/tutorial/arrays/>\n\n\n",
      "html": "<h1 id=\"4.-arrays-as-function-parameters\">4. Arrays as function parameters <a class=\"heading-anchor-permalink\" href=\"#4.-arrays-as-function-parameters\">#</a></h1>\n<p>Created Wednesday 13 November 2019</p>\n<p>Declaring and defining the variables in the same statement:</p>\n<ol>\n<li>data_type arr_name[] = { val1, val 2,…};  // creates an array of size = number of values n braces</li>\n<li>data_type arr_name[arr_size] = { val1, val 2,…val n};  // creates an array of size arr_size(assuming no. of values &lt;= arr_size). Also the first n elements of the arrays are initialized to val1 val2 … val n. An the <strong>remaining are initialized to 0. Remember this.</strong></li>\n</ol>\n<ul>\n<li>To create an array with all zeros just write, . data_type arr_name[arr_size] = {}</li>\n<li>When we pass the array as argument, the whole array should be copied due to *Call by Value, ***But, **this does not happen because only the head is copied, the who array <strong>is not copied.</strong></li>\n</ul>\n<p>Q) Reversing an array. Swap n/2(floored) times. On Both sides\nA) for(int i=0, j=n-1, a = 1; a&lt;=n/2; a++, i++, j–)\n{\nint temp = arr[i];\nar[i] = arr[j];\narr[j] = arr[i];\n}</p>\n<ul>\n<li>In C++, it is <strong>syntactically correct</strong> to exceed the valid range of indices for an array. This can create problems, since accessing out-of-range elements do not cause errors on compilation, but can cause errors on runtime. The reason for this being allowed will be seen in a later chapter when pointers are introduced.</li>\n<li>Library arrays using <array> <a href=\"http://www.cplusplus.com/doc/tutorial/arrays/\">http://www.cplusplus.com/doc/tutorial/arrays/</a></li>\n</ul>\n",
      "id": 55
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/5._Assignments.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/7._Arrays/5._Assignments.html",
      "content": "# 5. Assignments\nCreated Tuesday 12 November 2019\n\nA1: [Find Unique](./5._Assignments/soln_files/A1.cpp)\nA2: [Find Duplicate](./5._Assignments/soln_files/A2.cpp)\nA3: [Array Intersection](./5._Assignments/soln_files/A3.cpp)\nA4: [Pairwise Sum](./5._Assignments/soln_files/A4.cpp)\nA5: Triplet sum\nA6: [Sort 1 and 0, constant T.C and S.C](./5._Assignments/soln_files/A5.cpp)\n\n",
      "html": "<h1 id=\"5.-assignments\">5. Assignments <a class=\"heading-anchor-permalink\" href=\"#5.-assignments\">#</a></h1>\n<p>Created Tuesday 12 November 2019</p>\n<p>A1: <a href=\"./5._Assignments/soln_files/A1.cpp\">Find Unique</a>\nA2: <a href=\"./5._Assignments/soln_files/A2.cpp\">Find Duplicate</a>\nA3: <a href=\"./5._Assignments/soln_files/A3.cpp\">Array Intersection</a>\nA4: <a href=\"./5._Assignments/soln_files/A4.cpp\">Pairwise Sum</a>\nA5: Triplet sum\nA6: <a href=\"./5._Assignments/soln_files/A5.cpp\">Sort 1 and 0, constant T.C and S.C</a></p>\n",
      "id": 56
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/0_index.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/0_index.html",
      "content": "# 8. Searching and Sorting\nCreated Tuesday 10 December 2019\n\nA1\n\n",
      "html": "<h1 id=\"8.-searching-and-sorting\">8. Searching and Sorting <a class=\"heading-anchor-permalink\" href=\"#8.-searching-and-sorting\">#</a></h1>\n<p>Created Tuesday 10 December 2019</p>\n<p>A1</p>\n",
      "id": 57
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/1.Linear_Search.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/1.Linear_Search.html",
      "content": "# 1.Linear Search\nCreated Wednesday 11 December 2019\n\nTime O(N)\n\n",
      "html": "<h1 id=\"1.linear-search\">1.Linear Search <a class=\"heading-anchor-permalink\" href=\"#1.linear-search\">#</a></h1>\n<p>Created Wednesday 11 December 2019</p>\n<p>Time O(N)</p>\n",
      "id": 58
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/2._Binary_Search.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/2._Binary_Search.html",
      "content": "# 2. Binary Search\nCreated Wednesday 11 December 2019\n\n\n* Works only if array is sorted.\n* Time O(N)\n\nImplementation:\n\n* Things we had problems with, odd and even. Doesn't matter, numbers are geometric.\n```c++\n// arr - input array\n// n - size of array\n// val - element to be searched\nint BinarySearch(int arr[], int n, int val){\n  int l = 0, r = n - 1, mid = (l + r) / 2;\n\n  while(arr[mid] != val && l < r)\n  {\n    mid = (l+r)/2;\n    if(arr[mid]<val)\n      l = mid+1;\n    else\n      r = mid-1;\n  }\n\n  if(arr[mid]==val)\n    return mid;\n  return -1;\n}\n```\n",
      "html": "<h1 id=\"2.-binary-search\">2. Binary Search <a class=\"heading-anchor-permalink\" href=\"#2.-binary-search\">#</a></h1>\n<p>Created Wednesday 11 December 2019</p>\n<ul>\n<li>Works only if array is sorted.</li>\n<li>Time O(N)</li>\n</ul>\n<p>Implementation:</p>\n<ul>\n<li>Things we had problems with, odd and even. Doesn’t matter, numbers are geometric.</li>\n</ul>\n<pre><code class=\"language-c++\">// arr - input array\n// n - size of array\n// val - element to be searched\nint BinarySearch(int arr[], int n, int val){\n  int l = 0, r = n - 1, mid = (l + r) / 2;\n\n  while(arr[mid] != val &amp;&amp; l &lt; r)\n  {\n    mid = (l+r)/2;\n    if(arr[mid]&lt;val)\n      l = mid+1;\n    else\n      r = mid-1;\n  }\n\n  if(arr[mid]==val)\n    return mid;\n  return -1;\n}\n</code></pre>\n",
      "id": 59
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/3._Merging_two_sorted_arrays.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/3._Merging_two_sorted_arrays.html",
      "content": "# 3. Merging two sorted arrays\nCreated Wednesday 11 December 2019\n\n\n* No waiting, step by step, do it in one go.\n\nAlgorithm\n\n1. Start i=0, j=0. Make an array of length n1 + n2.\n2. Run a while loop, with condition i<n1 and j<n2. Copy to the result array.\n3. When the loop exits, declare (p and t-size =  of the unfinished array, i.e n1 or n2) assign it to the unfinished array.\n4. Run a while loop(t<n1 or n2){p++}, easy done. No need to count. t was needed for anchor, i.e from where to resume). \n\nTraversal was done directly by using pointer.\n\n",
      "html": "<h1 id=\"3.-merging-two-sorted-arrays\">3. Merging two sorted arrays <a class=\"heading-anchor-permalink\" href=\"#3.-merging-two-sorted-arrays\">#</a></h1>\n<p>Created Wednesday 11 December 2019</p>\n<ul>\n<li>No waiting, step by step, do it in one go.</li>\n</ul>\n<p>Algorithm</p>\n<ol>\n<li>Start i=0, j=0. Make an array of length n1 + n2.</li>\n<li>Run a while loop, with condition i&lt;n1 and j&lt;n2. Copy to the result array.</li>\n<li>When the loop exits, declare (p and t-size =  of the unfinished array, i.e n1 or n2) assign it to the unfinished array.</li>\n<li>Run a while loop(t&lt;n1 or n2){p++}, easy done. No need to count. t was needed for anchor, i.e from where to resume).</li>\n</ol>\n<p>Traversal was done directly by using pointer.</p>\n",
      "id": 60
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/4._Bubble_Sort.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/4._Bubble_Sort.html",
      "content": "# 4. Bubble Sort\nCreated Wednesday 11 December 2019\n\n**Name: **The largest one sinks at the bottom. Again, the process starts from the very top.\n// arr - input array\n// n - size of array\n```c++\nvoid BubbleSort(int arr[], int n){\n    // Write your code here\n    int temp = 0;\n    for(int i=0; i<n-1; i++) // check n-1 elements\n    {\n        for(int j=0; j<n-1-i; j++)\n        {    // check 0 to last element, which changes at each stage\n            if(arr[j] > arr[j+1])\n            {\n                temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}\n```\n",
      "html": "<h1 id=\"4.-bubble-sort\">4. Bubble Sort <a class=\"heading-anchor-permalink\" href=\"#4.-bubble-sort\">#</a></h1>\n<p>Created Wednesday 11 December 2019</p>\n<p>**Name: **The largest one sinks at the bottom. Again, the process starts from the very top.\n// arr - input array\n// n - size of array</p>\n<pre><code class=\"language-c++\">void BubbleSort(int arr[], int n){\n    // Write your code here\n    int temp = 0;\n    for(int i=0; i&lt;n-1; i++) // check n-1 elements\n    {\n        for(int j=0; j&lt;n-1-i; j++)\n        {    // check 0 to last element, which changes at each stage\n            if(arr[j] &gt; arr[j+1])\n            {\n                temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}\n</code></pre>\n",
      "id": 61
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/5._Insertion_Sort.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/5._Insertion_Sort.html",
      "content": "# 5. Insertion Sort\nCreated Wednesday 11 December 2019\n\n\n* Don't worry about sliding. Step-swap them, it's okay.\n* Start from right, try to put that to as far left as possible.\n* This'll work for sure. Even if max is at 1, it will move to the right, as smaller ones go to the beginning.\n\n\n",
      "html": "<h1 id=\"5.-insertion-sort\">5. Insertion Sort <a class=\"heading-anchor-permalink\" href=\"#5.-insertion-sort\">#</a></h1>\n<p>Created Wednesday 11 December 2019</p>\n<ul>\n<li>Don’t worry about sliding. Step-swap them, it’s okay.</li>\n<li>Start from right, try to put that to as far left as possible.</li>\n<li>This’ll work for sure. Even if max is at 1, it will move to the right, as smaller ones go to the beginning.</li>\n</ul>\n",
      "id": 62
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/6._Selection_Sort.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/6._Selection_Sort.html",
      "content": "# 6. Selection Sort\nCreated Wednesday 11 December 2019\n\n**Name:** Select the minimum from the right hand unsorted side, swap with the starting element of the unsorted side.\n\n",
      "html": "<h1 id=\"6.-selection-sort\">6. Selection Sort <a class=\"heading-anchor-permalink\" href=\"#6.-selection-sort\">#</a></h1>\n<p>Created Wednesday 11 December 2019</p>\n<p><strong>Name:</strong> Select the minimum from the right hand unsorted side, swap with the starting element of the unsorted side.</p>\n",
      "id": 63
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/Analyzing_sorting_algorithms.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/Analyzing_sorting_algorithms.html",
      "content": "# Analyzing sorting algorithms\nCreated Wednesday 11 December 2019\n\nThere are 5 criteria for any analyzing **any** sorting algorithm:\n\n1. Number of swaps\n2. Number of comparisons\n3. Inplace or not(i.e use extra memory or not) \n4. Adaptive - When input is a sorted array, does time complexity decrease for the case.\n5. Stable - Order of the elements with equal value stays the same Or not.\n\n\n",
      "html": "<h1 id=\"analyzing-sorting-algorithms\">Analyzing sorting algorithms <a class=\"heading-anchor-permalink\" href=\"#analyzing-sorting-algorithms\">#</a></h1>\n<p>Created Wednesday 11 December 2019</p>\n<p>There are 5 criteria for any analyzing <strong>any</strong> sorting algorithm:</p>\n<ol>\n<li>Number of swaps</li>\n<li>Number of comparisons</li>\n<li>Inplace or not(i.e use extra memory or not)</li>\n<li>Adaptive - When input is a sorted array, does time complexity decrease for the case.</li>\n<li>Stable - Order of the elements with equal value stays the same Or not.</li>\n</ol>\n",
      "id": 64
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/Assignments/0_index.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/8._Searching_and_Sorting/Assignments/0_index.html",
      "content": "# Assignments\nCreated Tuesday 10 December 2019\n\nA1: [Push zeros to the end](Assignments/A1.cpp)\nA2: [Rotate Array](Assignments/A2.cpp)\nA3: [Second Largest in an array](Assignments/A3.cpp)\nA4: [Check Array Rotation](Assignments/A4.cpp)\nA5: [Sort 0, 1, 2](Assignments/A5.cpp)\nA6: [Sum of Two Arrays](Assignments/A6.cpp)\n\nNote: Learnt to use dynamic window. Moves on step at a time, like a tank.\nSize increases when we get favourable a element.\nWe maintain the window using a pointer, and two integer values (front, back), corresponding to the 1st and the last index.\n\n",
      "html": "<h1 id=\"assignments\">Assignments <a class=\"heading-anchor-permalink\" href=\"#assignments\">#</a></h1>\n<p>Created Tuesday 10 December 2019</p>\n<p>A1: <a href=\"Assignments/A1.cpp\">Push zeros to the end</a>\nA2: <a href=\"Assignments/A2.cpp\">Rotate Array</a>\nA3: <a href=\"Assignments/A3.cpp\">Second Largest in an array</a>\nA4: <a href=\"Assignments/A4.cpp\">Check Array Rotation</a>\nA5: <a href=\"Assignments/A5.cpp\">Sort 0, 1, 2</a>\nA6: <a href=\"Assignments/A6.cpp\">Sum of Two Arrays</a></p>\n<p>Note: Learnt to use dynamic window. Moves on step at a time, like a tank.\nSize increases when we get favourable a element.\nWe maintain the window using a pointer, and two integer values (front, back), corresponding to the 1st and the last index.</p>\n",
      "id": 65
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/9._Stringsx.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/9._Stringsx.html",
      "content": "# 9. Stringsx\nCreated Thursday 08 April 2021\n\nWhat is a str\n\n* The last element is the '\\0'\n* strlen() does not count the '\\0'\n* sizeof() calculates the length of the array irrespective of character.\n* It's not compulsory to know the length in case of character pointers.\n* A write head is very useful for in place transformations, where the EOS ro EOL may be treated the same as case end, with the next iteration stopping if we reached EOL. This helps in making the code same for every case. A special case is not required.\n* cout for a char[] or char* prints every character until it hits reaches any whitespace(which are not printed). **Note: This means we cannot cout a *address, it will do this for even one character, so unexpected behavior.**\n* cin for a char* or char[], takes input until we type a backdefaut inserts a null character(if space is left), otherwise code will give segmentation faults or SIGSEGV.\n* cin works upon a temporary memory till it encounters a whitespace, then it calculates the size and copies the array elements.\n* void cin.getline(char*x, int n) - takes in array name(or char*) and number(which includes null). So for n=27, we can store abc...z\\'0'.\n* cin.getline(char**x*, int max_*size*, char *delimiter=' \\0')*\n\n<http://www.cplusplus.com/doc/tutorial/ntcs/> Relation between strings and NULL terminated character arrays, they are the same! Except that strings are managed **dynamically**.\n\n*****\n\nchar nula[]  =\"jhwev\"\nstring nula_string = nula;// converted to string\n\n*****\n\ninbuilt function: in <cstring>\n\n1. strlen(char * *str*); for \"hello\", it returns 5.\n2. strcmp(char* *s1*, har* *s2*). \n\t* If it returns 0, both strings are equal, for all non zero outputs, strings are not equal. \n\t* If +ve, then the s1 > s2. (Assuming all characters in both are of the of the same case) \n\t* And -ve means s1, s2. (Assuming all characters in both are of the of the same case) \n3. strcpy(char **destination*, char *source). Will copy the string source to the destination(including the null character), assuming that memory is enough for copying). \n\t* source can be a string literal as well.\n\t* It copies the null character too.\n4. strncpy(char **destination*, char *source, int n). Copies n characters from source to string(i.e overwrites). \n\t* **Does **not append the **null character**.\n\t* if source is of length less than 'n', then it appends null to all the remaining characters.\n\n\n* stringstream this is used to convert int to strings and so on.\n\n\n",
      "html": "<h1 id=\"9.-stringsx\">9. Stringsx <a class=\"heading-anchor-permalink\" href=\"#9.-stringsx\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<p>What is a str</p>\n<ul>\n<li>The last element is the ‘\\0’</li>\n<li>strlen() does not count the ‘\\0’</li>\n<li>sizeof() calculates the length of the array irrespective of character.</li>\n<li>It’s not compulsory to know the length in case of character pointers.</li>\n<li>A write head is very useful for in place transformations, where the EOS ro EOL may be treated the same as case end, with the next iteration stopping if we reached EOL. This helps in making the code same for every case. A special case is not required.</li>\n<li>cout for a char[] or char* prints every character until it hits reaches any whitespace(which are not printed). *<em>Note: This means we cannot cout a <em>address, it will do this for even one character, so unexpected behavior.</em></em></li>\n<li>cin for a char* or char[], takes input until we type a backdefaut inserts a null character(if space is left), otherwise code will give segmentation faults or SIGSEGV.</li>\n<li>cin works upon a temporary memory till it encounters a whitespace, then it calculates the size and copies the array elements.</li>\n<li>void cin.getline(char<em>x, int n) - takes in array name(or char</em>) and number(which includes null). So for n=27, we can store abc…z’0’.</li>\n<li>cin.getline(char**x*, int max_<em>size</em>, char <em>delimiter=’ \\0’)</em></li>\n</ul>\n<p><a href=\"http://www.cplusplus.com/doc/tutorial/ntcs/\">http://www.cplusplus.com/doc/tutorial/ntcs/</a> Relation between strings and NULL terminated character arrays, they are the same! Except that strings are managed <strong>dynamically</strong>.</p>\n<hr>\n<p>char nula[]  =“jhwev”\nstring nula_string = nula;// converted to string</p>\n<hr>\n<p>inbuilt function: in <cstring></p>\n<ol>\n<li>strlen(char * <em>str</em>); for “hello”, it returns 5.</li>\n<li>strcmp(char* <em>s1</em>, har* <em>s2</em>).\n<ul>\n<li>If it returns 0, both strings are equal, for all non zero outputs, strings are not equal.</li>\n<li>If +ve, then the s1 &gt; s2. (Assuming all characters in both are of the of the same case)</li>\n<li>And -ve means s1, s2. (Assuming all characters in both are of the of the same case)</li>\n</ul>\n</li>\n<li>strcpy(char *<em>destination</em>, char *source). Will copy the string source to the destination(including the null character), assuming that memory is enough for copying).\n<ul>\n<li>source can be a string literal as well.</li>\n<li>It copies the null character too.</li>\n</ul>\n</li>\n<li>strncpy(char *<em>destination</em>, char *source, int n). Copies n characters from source to string(i.e overwrites).\n<ul>\n<li>**Does **not append the <strong>null character</strong>.</li>\n<li>if source is of length less than ‘n’, then it appends null to all the remaining characters.</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>stringstream this is used to convert int to strings and so on.</li>\n</ul>\n",
      "id": 66
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/Home.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/Home.html",
      "content": "# Home\nCreated Wednesday 16 October 2019\n\n#### Why learn C++\nExcept that C++ is fast😅️, it helps in learning about:\n\n1. Free-flow syntax - used in other langs like JS, Java, Go, C#, PHP\n2. Simplest scoping rules.\n3. Concept of data types, static typing.\n4. Manipulate data directly at the bit level.\n5. Pointers and memory management.\n6. Multiple paradigms together:\n\t1. Structured programming - write like C. Use functions and pointers only.\n\t2. OOP:\n\nOperator overloading(make your own operators from scratch)\nStrict encapsulation - constrained access to object's members\n\n7. Preprocessor\n8. Compiler and Linker\n\n\nNote: \n\n* These concepts are used in almost all languages - in some way or the other. So you'll be comfortable with new langs very quickly.\n* Many languages can be seen as an abstraction over C++, so it helps in understanding their features better. Javascipt, Go, Java. You'll have a good foundation to reason about langs like C++.\n* Important: Using C++ for learning other langs is not always beneficial or even possible - every language has its philosophy, style and quirks. Langs like Haskell, Lisp are completely different. Plus, it is boring to use the same style, philosophy.\n\n\n#### C++ is used for\nWriting very efficient code - time and memory wise. So, it is mostly used for implementing tools and libraries.\n\n* Competitive programming - nothing personal.\n* System software - operating systems, database engines, critical parts of a backend\n* Game Development and graphics tools - Unreal engine, Unity\n* Game development in general\n* Writing interpreters for other langs - V8\n* AI/ML/BigData libraries and tools - Tensorflow, PyTorch\n\n#### C++ is not used for\nHigher level stuff.\n\n* Data science/AI/ML\n* Web Development\n* Mobile Development\n* Scripting\n\n\n#### Issues\n\n* Learning C++ can *seem* boring, because it's not useful for higher level stuff - images, videos, websites. You can't *see* progress.\n* Rapid prototyping is not a feature. However, there exists a Jupyter REPL for C++.\n* It takes time to learn, the syntax *is* cryptic. But not complicated.\n\n\n",
      "html": "<h1 id=\"home\">Home <a class=\"heading-anchor-permalink\" href=\"#home\">#</a></h1>\n<p>Created Wednesday 16 October 2019</p>\n<h4 id=\"why-learn-c%2B%2B\">Why learn C++ <a class=\"heading-anchor-permalink\" href=\"#why-learn-c%2B%2B\">#</a></h4>\n<p>Except that C++ is fast😅️, it helps in learning about:</p>\n<ol>\n<li>Free-flow syntax - used in other langs like JS, Java, Go, C#, PHP</li>\n<li>Simplest scoping rules.</li>\n<li>Concept of data types, static typing.</li>\n<li>Manipulate data directly at the bit level.</li>\n<li>Pointers and memory management.</li>\n<li>Multiple paradigms together:\n<ol>\n<li>Structured programming - write like C. Use functions and pointers only.</li>\n<li>OOP:</li>\n</ol>\n</li>\n</ol>\n<p>Operator overloading(make your own operators from scratch)\nStrict encapsulation - constrained access to object’s members</p>\n<ol start=\"7\">\n<li>Preprocessor</li>\n<li>Compiler and Linker</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>These concepts are used in almost all languages - in some way or the other. So you’ll be comfortable with new langs very quickly.</li>\n<li>Many languages can be seen as an abstraction over C++, so it helps in understanding their features better. Javascipt, Go, Java. You’ll have a good foundation to reason about langs like C++.</li>\n<li>Important: Using C++ for learning other langs is not always beneficial or even possible - every language has its philosophy, style and quirks. Langs like Haskell, Lisp are completely different. Plus, it is boring to use the same style, philosophy.</li>\n</ul>\n<h4 id=\"c%2B%2B-is-used-for\">C++ is used for <a class=\"heading-anchor-permalink\" href=\"#c%2B%2B-is-used-for\">#</a></h4>\n<p>Writing very efficient code - time and memory wise. So, it is mostly used for implementing tools and libraries.</p>\n<ul>\n<li>Competitive programming - nothing personal.</li>\n<li>System software - operating systems, database engines, critical parts of a backend</li>\n<li>Game Development and graphics tools - Unreal engine, Unity</li>\n<li>Game development in general</li>\n<li>Writing interpreters for other langs - V8</li>\n<li>AI/ML/BigData libraries and tools - Tensorflow, PyTorch</li>\n</ul>\n<h4 id=\"c%2B%2B-is-not-used-for\">C++ is not used for <a class=\"heading-anchor-permalink\" href=\"#c%2B%2B-is-not-used-for\">#</a></h4>\n<p>Higher level stuff.</p>\n<ul>\n<li>Data science/AI/ML</li>\n<li>Web Development</li>\n<li>Mobile Development</li>\n<li>Scripting</li>\n</ul>\n<h4 id=\"issues\">Issues <a class=\"heading-anchor-permalink\" href=\"#issues\">#</a></h4>\n<ul>\n<li>Learning C++ can <em>seem</em> boring, because it’s not useful for higher level stuff - images, videos, websites. You can’t <em>see</em> progress.</li>\n<li>Rapid prototyping is not a feature. However, there exists a Jupyter REPL for C++.</li>\n<li>It takes time to learn, the syntax <em>is</em> cryptic. But not complicated.</li>\n</ul>\n",
      "id": 67
    },
    {
      "path": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/notebook.md",
      "url": "home/4_resource_itineraries/1_CN_Intro_to_Cpp/notebook.html",
      "content": "# Index of Introduction_to_C++\n\n* [1. Flowcharts](1._Flowcharts.md)\n\t* [1. Intro to flowcharts](1._Flowcharts/1._Intro_to_flowcharts.md)\n\t* [2. Decision Making](1._Flowcharts/2._Decision_Making.md)\n\t* [3. Loops](1._Flowcharts/3._Loops.md)\n\t* [4. Largest of N numbers](1._Flowcharts/4._Largest_of_N_numbers.md)\n\t* [5. Assignments](1._Flowcharts/5._Assignments.md)\n\t* [Conclusion](1._Flowcharts/Conclusion.md)\n* [2. C++, W2H](2._C++,_W2H.md)\n\t* [1. About C++](2._C++,_W2H/1._About_C++.md)\n\t* [2. Why learn C++](2._C++,_W2H/2._Why_learn_C++.md)\n\t* [3. C++ Setup](2._C++,_W2H/3._C++_Setup.md)\n* [3. main, Variables and Operators](3._main,_Variables_and_Operators.md)\n\t* [1. First Program](3._main,_Variables_and_Operators/1._First_Program.md)\n\t* [2. Variables and data types](3._main,_Variables_and_Operators/2._Variables_and_data_types.md)\n\t\t* [2.1 Type Aliases](3._main,_Variables_and_Operators/2._Variables_and_data_types/2.1_Type_Aliases.md)\n\t\t* [2.2 Automatic Type Deductions](3._main,_Variables_and_Operators/2._Variables_and_data_types/2.2_Automatic_Type_Deductions.md)\n\t\t\t* [1. auto](3._main,_Variables_and_Operators/2._Variables_and_data_types/2.2_Automatic_Type_Deductions/1._auto.md)\n\t\t\t* [2. decltype](3._main,_Variables_and_Operators/2._Variables_and_data_types/2.2_Automatic_Type_Deductions/2._decltype.md)\n\t* [4. How is the data stored](3._main,_Variables_and_Operators/4._How_is_the_data_stored.md)\n\t* [5. How are negative numbers stored](3._main,_Variables_and_Operators/5._How_are_negative_numbers_stored.md)\n\t* [6. Operators](3._main,_Variables_and_Operators/6._Operators.md)\n* [4. Conditionals and while loops](4._Conditionals_and_while_loops.md)\n\t* [1. Conditionals](4._Conditionals_and_while_loops/1._Conditionals.md)\n\t* [2. Farenheit to Celsius](4._Conditionals_and_while_loops/2._Farenheit_to_Celsius.md)\n\t* [3. Patterns](4._Conditionals_and_while_loops/3._Patterns.md)\n\t* [4. Pratice problems](4._Conditionals_and_while_loops/4._Pratice_problems.md)\n\t\t* [1. Patterns 1](4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1.md)\n\t\t\t* [1. Pattern1](4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/1._Pattern1.md)\n\t\t\t* [2. Square Patterns](4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/2._Square_Patterns.md)\n\t\t\t* [3. Triangle Patterns](4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/3._Triangle_Patterns.md)\n\t\t\t* [4. Character Pattern](4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/4._Character_Pattern.md)\n\t\t\t* [5. Interesting Alphabets](4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/5._Interesting_Alphabets.md)\n\t\t* [2. Patterns 2](4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2.md)\n\t\t\t* [1. Mirror Triangles](4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2/1._Mirror_Triangles.md)\n\t\t\t* [2. Isosceles Triangle](4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2/2._Isosceles_Triangle.md)\n\t\t\t* [3. More Patterns](4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2/3._More_Patterns.md)\n* [5. For loop and bitwise ops](5._For_loop_and_bitwise_ops.md)\n\t* [1. Bitwise Operator](5._For_loop_and_bitwise_ops/1._Bitwise_Operator.md)\n\t* [2. Increment Operators](5._For_loop_and_bitwise_ops/2._Increment_Operators.md)\n\t* [3.0 For loop](5._For_loop_and_bitwise_ops/3.0_For_loop.md)\n\t* [3.1 For each loop](5._For_loop_and_bitwise_ops/3.1_For_each_loop.md)\n\t* [4. Break and continue](5._For_loop_and_bitwise_ops/4._Break_and_continue.md)\n\t* [5. Scope of variables](5._For_loop_and_bitwise_ops/5._Scope_of_variables.md)\n\t* [6. cin vs cin.get()](5._For_loop_and_bitwise_ops/6._cin_vs_cin.get().md)\n\t* [7. Assignments](5._For_loop_and_bitwise_ops/7._Assignments.md)\n* [6. Functions](6._Functions.md)\n\t* [1. What are functions](6._Functions/1._What_are_functions.md)\n\t* [2. How function calling works](6._Functions/2._How_function_calling_works.md)\n\t* [3. Scope of variables w.r.t functions](6._Functions/3._Scope_of_variables_w.r.t_functions.md)\n\t* [4. Call by Value](6._Functions/4._Call_by_Value.md)\n* [7. Arrays](7._Arrays.md)\n\t* [1. Why arrays](7._Arrays/1._Why_arrays.md)\n\t* [2. More On Arrays](7._Arrays/2._More_On_Arrays.md)\n\t* [3. Arrays and memory](7._Arrays/3._Arrays_and_memory.md)\n\t* [4. Arrays as function parameters](7._Arrays/4._Arrays_as_function_parameters.md)\n\t* [5. Assignments](7._Arrays/5._Assignments.md)\n* [8. Searching and Sorting](8._Searching_and_Sorting.md)\n\t* [1.Linear Search](8._Searching_and_Sorting/1.Linear_Search.md)\n\t* [2. Binary Search](8._Searching_and_Sorting/2._Binary_Search.md)\n\t* [3. Merging two sorted arrays](8._Searching_and_Sorting/3._Merging_two_sorted_arrays.md)\n\t* [4. Bubble Sort](8._Searching_and_Sorting/4._Bubble_Sort.md)\n\t* [5. Insertion Sort](8._Searching_and_Sorting/5._Insertion_Sort.md)\n\t* [6. Selection Sort](8._Searching_and_Sorting/6._Selection_Sort.md)\n\t* [Analyzing sorting algorithms](8._Searching_and_Sorting/Analyzing_sorting_algorithms.md)\n\t* [Assignments](8._Searching_and_Sorting/Assignments.md)\n* [9. Stringsx](9._Stringsx.md)\n* [10. Multidimensional Arrays](10._Multidimensional_Arrays.md)\n\t* [Assignments](10._Multidimensional_Arrays/Assignments.md)\n* [Home](Home.md)\n\n\n",
      "html": "<h1 id=\"index-of-introduction_to_c%2B%2B\">Index of Introduction_to_C++ <a class=\"heading-anchor-permalink\" href=\"#index-of-introduction_to_c%2B%2B\">#</a></h1>\n<ul>\n<li><a href=\"1._Flowcharts.html\">1. Flowcharts</a>\n<ul>\n<li><a href=\"1._Flowcharts/1._Intro_to_flowcharts.html\">1. Intro to flowcharts</a></li>\n<li><a href=\"1._Flowcharts/2._Decision_Making.html\">2. Decision Making</a></li>\n<li><a href=\"1._Flowcharts/3._Loops.html\">3. Loops</a></li>\n<li><a href=\"1._Flowcharts/4._Largest_of_N_numbers.html\">4. Largest of N numbers</a></li>\n<li><a href=\"1._Flowcharts/5._Assignments.html\">5. Assignments</a></li>\n<li><a href=\"1._Flowcharts/Conclusion.html\">Conclusion</a></li>\n</ul>\n</li>\n<li><a href=\"2._C++,_W2H.html\">2. C++, W2H</a>\n<ul>\n<li><a href=\"2._C++,_W2H/1._About_C++.html\">1. About C++</a></li>\n<li><a href=\"2._C++,_W2H/2._Why_learn_C++.html\">2. Why learn C++</a></li>\n<li><a href=\"2._C++,_W2H/3._C++_Setup.html\">3. C++ Setup</a></li>\n</ul>\n</li>\n<li><a href=\"3._main,_Variables_and_Operators.html\">3. main, Variables and Operators</a>\n<ul>\n<li><a href=\"3._main,_Variables_and_Operators/1._First_Program.html\">1. First Program</a></li>\n<li><a href=\"3._main,_Variables_and_Operators/2._Variables_and_data_types.html\">2. Variables and data types</a>\n<ul>\n<li><a href=\"3._main,_Variables_and_Operators/2._Variables_and_data_types/2.1_Type_Aliases.html\">2.1 Type Aliases</a></li>\n<li><a href=\"3._main,_Variables_and_Operators/2._Variables_and_data_types/2.2_Automatic_Type_Deductions.html\">2.2 Automatic Type Deductions</a>\n<ul>\n<li><a href=\"3._main,_Variables_and_Operators/2._Variables_and_data_types/2.2_Automatic_Type_Deductions/1._auto.html\">1. auto</a></li>\n<li><a href=\"3._main,_Variables_and_Operators/2._Variables_and_data_types/2.2_Automatic_Type_Deductions/2._decltype.html\">2. decltype</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"3._main,_Variables_and_Operators/4._How_is_the_data_stored.html\">4. How is the data stored</a></li>\n<li><a href=\"3._main,_Variables_and_Operators/5._How_are_negative_numbers_stored.html\">5. How are negative numbers stored</a></li>\n<li><a href=\"3._main,_Variables_and_Operators/6._Operators.html\">6. Operators</a></li>\n</ul>\n</li>\n<li><a href=\"4._Conditionals_and_while_loops.html\">4. Conditionals and while loops</a>\n<ul>\n<li><a href=\"4._Conditionals_and_while_loops/1._Conditionals.html\">1. Conditionals</a></li>\n<li><a href=\"4._Conditionals_and_while_loops/2._Farenheit_to_Celsius.html\">2. Farenheit to Celsius</a></li>\n<li><a href=\"4._Conditionals_and_while_loops/3._Patterns.html\">3. Patterns</a></li>\n<li><a href=\"4._Conditionals_and_while_loops/4._Pratice_problems.html\">4. Pratice problems</a>\n<ul>\n<li><a href=\"4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1.html\">1. Patterns 1</a>\n<ul>\n<li><a href=\"4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/1._Pattern1.html\">1. Pattern1</a></li>\n<li><a href=\"4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/2._Square_Patterns.html\">2. Square Patterns</a></li>\n<li><a href=\"4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/3._Triangle_Patterns.html\">3. Triangle Patterns</a></li>\n<li><a href=\"4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/4._Character_Pattern.html\">4. Character Pattern</a></li>\n<li><a href=\"4._Conditionals_and_while_loops/4._Pratice_problems/1._Patterns_1/5._Interesting_Alphabets.html\">5. Interesting Alphabets</a></li>\n</ul>\n</li>\n<li><a href=\"4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2.html\">2. Patterns 2</a>\n<ul>\n<li><a href=\"4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2/1._Mirror_Triangles.html\">1. Mirror Triangles</a></li>\n<li><a href=\"4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2/2._Isosceles_Triangle.html\">2. Isosceles Triangle</a></li>\n<li><a href=\"4._Conditionals_and_while_loops/4._Pratice_problems/2._Patterns_2/3._More_Patterns.html\">3. More Patterns</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"5._For_loop_and_bitwise_ops.html\">5. For loop and bitwise ops</a>\n<ul>\n<li><a href=\"5._For_loop_and_bitwise_ops/1._Bitwise_Operator.html\">1. Bitwise Operator</a></li>\n<li><a href=\"5._For_loop_and_bitwise_ops/2._Increment_Operators.html\">2. Increment Operators</a></li>\n<li><a href=\"5._For_loop_and_bitwise_ops/3.0_For_loop.html\">3.0 For loop</a></li>\n<li><a href=\"5._For_loop_and_bitwise_ops/3.1_For_each_loop.html\">3.1 For each loop</a></li>\n<li><a href=\"5._For_loop_and_bitwise_ops/4._Break_and_continue.html\">4. Break and continue</a></li>\n<li><a href=\"5._For_loop_and_bitwise_ops/5._Scope_of_variables.html\">5. Scope of variables</a></li>\n<li><a href=\"5._For_loop_and_bitwise_ops/6._cin_vs_cin.get().html\">6. cin vs cin.get()</a></li>\n<li><a href=\"5._For_loop_and_bitwise_ops/7._Assignments.html\">7. Assignments</a></li>\n</ul>\n</li>\n<li><a href=\"6._Functions.html\">6. Functions</a>\n<ul>\n<li><a href=\"6._Functions/1._What_are_functions.html\">1. What are functions</a></li>\n<li><a href=\"6._Functions/2._How_function_calling_works.html\">2. How function calling works</a></li>\n<li><a href=\"6._Functions/3._Scope_of_variables_w.r.t_functions.html\">3. Scope of variables w.r.t functions</a></li>\n<li><a href=\"6._Functions/4._Call_by_Value.html\">4. Call by Value</a></li>\n</ul>\n</li>\n<li><a href=\"7._Arrays.html\">7. Arrays</a>\n<ul>\n<li><a href=\"7._Arrays/1._Why_arrays.html\">1. Why arrays</a></li>\n<li><a href=\"7._Arrays/2._More_On_Arrays.html\">2. More On Arrays</a></li>\n<li><a href=\"7._Arrays/3._Arrays_and_memory.html\">3. Arrays and memory</a></li>\n<li><a href=\"7._Arrays/4._Arrays_as_function_parameters.html\">4. Arrays as function parameters</a></li>\n<li><a href=\"7._Arrays/5._Assignments.html\">5. Assignments</a></li>\n</ul>\n</li>\n<li><a href=\"8._Searching_and_Sorting.html\">8. Searching and Sorting</a>\n<ul>\n<li><a href=\"8._Searching_and_Sorting/1.Linear_Search.html\">1.Linear Search</a></li>\n<li><a href=\"8._Searching_and_Sorting/2._Binary_Search.html\">2. Binary Search</a></li>\n<li><a href=\"8._Searching_and_Sorting/3._Merging_two_sorted_arrays.html\">3. Merging two sorted arrays</a></li>\n<li><a href=\"8._Searching_and_Sorting/4._Bubble_Sort.html\">4. Bubble Sort</a></li>\n<li><a href=\"8._Searching_and_Sorting/5._Insertion_Sort.html\">5. Insertion Sort</a></li>\n<li><a href=\"8._Searching_and_Sorting/6._Selection_Sort.html\">6. Selection Sort</a></li>\n<li><a href=\"8._Searching_and_Sorting/Analyzing_sorting_algorithms.html\">Analyzing sorting algorithms</a></li>\n<li><a href=\"8._Searching_and_Sorting/Assignments.html\">Assignments</a></li>\n</ul>\n</li>\n<li><a href=\"9._Stringsx.html\">9. Stringsx</a></li>\n<li><a href=\"10._Multidimensional_Arrays.html\">10. Multidimensional Arrays</a>\n<ul>\n<li><a href=\"10._Multidimensional_Arrays/Assignments.html\">Assignments</a></li>\n</ul>\n</li>\n<li><a href=\"Home.html\">Home</a></li>\n</ul>\n",
      "id": 68
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/0_index.html",
      "content": "# 1. Memory and Pointers\nCreated Thursday 08 April 2021\n\n#### Note\nThe course had two small topics after \"[Dynamic Memory Allocation](1._Memory_and_Pointers/2._Dynamic_Memory_Allocation.md)\":\n\n1. [Macros and Global Variables](7._C++_Continued/1._Macros_and_Global_Variables.md)\n2. [Inline and Default Arguments](7._C++_Continued/2._Inline_and_Default_Arguments.md)\n\nI've moved them elsewhere. They are very important(and easy) in general, but are not required for coding data structures.",
      "html": "<h1 id=\"1.-memory-and-pointers\">1. Memory and Pointers <a class=\"heading-anchor-permalink\" href=\"#1.-memory-and-pointers\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<h4 id=\"note\">Note <a class=\"heading-anchor-permalink\" href=\"#note\">#</a></h4>\n<p>The course had two small topics after “<a href=\"1._Memory_and_Pointers/2._Dynamic_Memory_Allocation.html\">Dynamic Memory Allocation</a>”:</p>\n<ol>\n<li><a href=\"7._C++_Continued/1._Macros_and_Global_Variables.html\">Macros and Global Variables</a></li>\n<li><a href=\"7._C++_Continued/2._Inline_and_Default_Arguments.html\">Inline and Default Arguments</a></li>\n</ol>\n<p>I’ve moved them elsewhere. They are very important(and easy) in general, but are not required for coding data structures.</p>\n",
      "id": 69
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/0_index.html",
      "content": "# 1. Pointers\nCreated Saturday 21 December 2019\n\n[Official pointer Notes](1._Pointers/0000000000000035.pdf) \n[Tip](https://youtu.be/UCWWObpNUZw): Pointer use must be minimized, there's almost always better alternatives in C++.\n\n",
      "html": "<h1 id=\"1.-pointers\">1. Pointers <a class=\"heading-anchor-permalink\" href=\"#1.-pointers\">#</a></h1>\n<p>Created Saturday 21 December 2019</p>\n<p><a href=\"1._Pointers/0000000000000035.pdf\">Official pointer Notes</a>\n<a href=\"https://youtu.be/UCWWObpNUZw\">Tip</a>: Pointer use must be minimized, there’s almost always better alternatives in C++.</p>\n",
      "id": 70
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/1._Pointer_Intro.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/1._Pointer_Intro.html",
      "content": "# 1. Pointer Intro\nCreated Saturday 21 December 2019\n\n(Optional - I knew this) Pointers exhaustive from scratch: <https://www.youtube.com/watch?v=h-HBipu_1P0&list=PL2_aWCzGMAwLZp6LMUKI3cc7pgGsasm2_>\n\n#### Pointers\nPointers are variables which hold memory addresses. \n\n* Size of a pointer variable is system(compiler) dependent. A memory address is basically a number. Size of a pointer does not depend on the data type it is pointing to. We can use ``sizeof`` operator to get the size of a pointer, in bytes.\n* All variables, we are speaking of, are on RAM. **We are *not* manipulating secondary memory - HDD, SSD, etc.**\n* Jump(memory blocks to read) is decided by using a **symbol table**. It has atleast 3 columns. (variable name, type, starting_address). Type decides the jump for reading/writing.\n* Symbol table can have two differently named variables for the same address. This is how **references** are implemented.\n* It is wrong to assume that a 32 bit architecture will always use 8 bytes for pointer 4 bytes for an integer. This is mostly true, but not guaranteed, so any code which assumes this is not portable.\n\n\n#### Points to - jargon\n\n* \"points to\" means that a pointer variable holds the **starting_address** and **jump** for the intended memory location.\n\n\n#### Declaration:\n\n* for single pointer variable. ``data_type *variable1;``\n* for multiple pointers on the same line, ``data_type *v1, *v2 ...``\n* This means that we can declare normal and pointer variables on the same line.\n\nNOTE: Always initialize pointer to ``nullptr`` or ``NULL`` or ``0``. ``nullptr`` is recommended.\n\n#### Assignment\n\n* ``p_variable = &normal_variable``\n* ``p_variable = pointerVariable``\n* ``&`` is called the \"address of\" operator, it looks up the ``starting_address`` of the given variable(from the symbol table).\n* We can declare a pointer for a pointer using 2 asterisks. Remember that a variable of type \"pointer to pointer ... to pointer\" is the same as a single level pointer variable(if we look at the lookup table). Of course, the content is context specific.\n\n\n#### Dereferening(access value)\n\n* Interacting(i.e *reading/writing*) value of the variable using its pointer variable is called a dereference. The pointer **needs **to be a valid address and a have a jump(i.e not be a ``void`` pointer). \n* void pointers cannot be derefenced(jump size is undefined). \n* A pointer with an invalid address(i.e NULL or nullptr or 0) cannot be dereferenced. Hence, NULL is used as a sentinel value.\n\n\n#### Jargon for problematic pointers\nSource: <https://www.youtube.com/watch?v=uvw5bZZT3pM>\n\n1. **Wild pointer** - an uninitialized pointer.\n2. **Dangling pointer** - a pointer pointing to a inexistent variable(a variable that has been **deallocated** aka **destroyed** aka **has gone out of scope**).  Access can lead to segmentation faults/crashes. Be careful with static pointers - they are initialized only once.\n3. **void pointer** - a pointer which is not associated with any data type. The type field(in the symbol table) is undefined. So it cannot be dereferenced(coz we don't know how much to jump). Use - general purpose pointer, can store address of all types of variables.\n4. **NULL pointer**, has an address value of zero. This is not an actual address, so it is used as a [sentinel](https://en.wikipedia.org/wiki/Sentinel_value#:~:text=In%20computer%20programming%2C%20a%20sentinel,a%20loop%20or%20recursive%20algorithm.). NULL may be a ``char`` or ``int`` or ``long`` depending on the compiler. In modern usage, ``nullptr`` is recommended.\n\n\n",
      "html": "<h1 id=\"1.-pointer-intro\">1. Pointer Intro <a class=\"heading-anchor-permalink\" href=\"#1.-pointer-intro\">#</a></h1>\n<p>Created Saturday 21 December 2019</p>\n<p>(Optional - I knew this) Pointers exhaustive from scratch: <a href=\"https://www.youtube.com/watch?v=h-HBipu_1P0&amp;list=PL2_aWCzGMAwLZp6LMUKI3cc7pgGsasm2_\">https://www.youtube.com/watch?v=h-HBipu_1P0&amp;list=PL2_aWCzGMAwLZp6LMUKI3cc7pgGsasm2_</a></p>\n<h4 id=\"pointers\">Pointers <a class=\"heading-anchor-permalink\" href=\"#pointers\">#</a></h4>\n<p>Pointers are variables which hold memory addresses.</p>\n<ul>\n<li>Size of a pointer variable is system(compiler) dependent. A memory address is basically a number. Size of a pointer does not depend on the data type it is pointing to. We can use <code>sizeof</code> operator to get the size of a pointer, in bytes.</li>\n<li>All variables, we are speaking of, are on RAM. <strong>We are <em>not</em> manipulating secondary memory - HDD, SSD, etc.</strong></li>\n<li>Jump(memory blocks to read) is decided by using a <strong>symbol table</strong>. It has atleast 3 columns. (variable name, type, starting_address). Type decides the jump for reading/writing.</li>\n<li>Symbol table can have two differently named variables for the same address. This is how <strong>references</strong> are implemented.</li>\n<li>It is wrong to assume that a 32 bit architecture will always use 8 bytes for pointer 4 bytes for an integer. This is mostly true, but not guaranteed, so any code which assumes this is not portable.</li>\n</ul>\n<h4 id=\"points-to---jargon\">Points to - jargon <a class=\"heading-anchor-permalink\" href=\"#points-to---jargon\">#</a></h4>\n<ul>\n<li>“points to” means that a pointer variable holds the <strong>starting_address</strong> and <strong>jump</strong> for the intended memory location.</li>\n</ul>\n<h4 id=\"declaration%3A\">Declaration: <a class=\"heading-anchor-permalink\" href=\"#declaration%3A\">#</a></h4>\n<ul>\n<li>for single pointer variable. <code>data_type *variable1;</code></li>\n<li>for multiple pointers on the same line, <code>data_type *v1, *v2 ...</code></li>\n<li>This means that we can declare normal and pointer variables on the same line.</li>\n</ul>\n<p>NOTE: Always initialize pointer to <code>nullptr</code> or <code>NULL</code> or <code>0</code>. <code>nullptr</code> is recommended.</p>\n<h4 id=\"assignment\">Assignment <a class=\"heading-anchor-permalink\" href=\"#assignment\">#</a></h4>\n<ul>\n<li><code>p_variable = &amp;normal_variable</code></li>\n<li><code>p_variable = pointerVariable</code></li>\n<li><code>&amp;</code> is called the “address of” operator, it looks up the <code>starting_address</code> of the given variable(from the symbol table).</li>\n<li>We can declare a pointer for a pointer using 2 asterisks. Remember that a variable of type “pointer to pointer … to pointer” is the same as a single level pointer variable(if we look at the lookup table). Of course, the content is context specific.</li>\n</ul>\n<h4 id=\"dereferening(access-value)\">Dereferening(access value) <a class=\"heading-anchor-permalink\" href=\"#dereferening(access-value)\">#</a></h4>\n<ul>\n<li>Interacting(i.e <em>reading/writing</em>) value of the variable using its pointer variable is called a dereference. The pointer **needs **to be a valid address and a have a jump(i.e not be a <code>void</code> pointer).</li>\n<li>void pointers cannot be derefenced(jump size is undefined).</li>\n<li>A pointer with an invalid address(i.e NULL or nullptr or 0) cannot be dereferenced. Hence, NULL is used as a sentinel value.</li>\n</ul>\n<h4 id=\"jargon-for-problematic-pointers\">Jargon for problematic pointers <a class=\"heading-anchor-permalink\" href=\"#jargon-for-problematic-pointers\">#</a></h4>\n<p>Source: <a href=\"https://www.youtube.com/watch?v=uvw5bZZT3pM\">https://www.youtube.com/watch?v=uvw5bZZT3pM</a></p>\n<ol>\n<li><strong>Wild pointer</strong> - an uninitialized pointer.</li>\n<li><strong>Dangling pointer</strong> - a pointer pointing to a inexistent variable(a variable that has been <strong>deallocated</strong> aka <strong>destroyed</strong> aka <strong>has gone out of scope</strong>).  Access can lead to segmentation faults/crashes. Be careful with static pointers - they are initialized only once.</li>\n<li><strong>void pointer</strong> - a pointer which is not associated with any data type. The type field(in the symbol table) is undefined. So it cannot be dereferenced(coz we don’t know how much to jump). Use - general purpose pointer, can store address of all types of variables.</li>\n<li><strong>NULL pointer</strong>, has an address value of zero. This is not an actual address, so it is used as a <a href=\"https://en.wikipedia.org/wiki/Sentinel_value#:~:text=In%20computer%20programming%2C%20a%20sentinel,a%20loop%20or%20recursive%20algorithm.\">sentinel</a>. NULL may be a <code>char</code> or <code>int</code> or <code>long</code> depending on the compiler. In modern usage, <code>nullptr</code> is recommended.</li>\n</ol>\n",
      "id": 71
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/2._Pointer_Arithmetic.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/2._Pointer_Arithmetic.html",
      "content": "# 2. Pointer Arithmetic\nCreated Saturday 21 December 2019\n\nAddition and subtraction of integers is allowed on pointer variables(except **null** and **void** pointers). Other arithmetic operations such as multiplication and division are not allowed.\n**Reason:** As we don't know the memory they reference and the jump, respectively, void* are increased by 1 in some compilers, but this is not a standard, it is done only if the ``-pedantic`` flag is used.\n\n* When we do +2 for a pointer, we actually do start_address + 2*sizeof(data_type) . Similarly for subtraction.\n* Variables declared together need not be contiguos. Memory is actually allocated as per availability.\n* Array elements are always contiguos - definition of array.\n* Each +-1 adds/subtracts by the sizeof(data_type).\n* Everthing in pointer-land is about offsets, not about the addresses themselves.\n\nNote: \n\n* Pointers may be **compared** by using relational operators, such as ==, <, and >. This meaningful only if p1 and p2 are **related** to each other, such as elements of the same array.\n\n\n\n\n\n\n",
      "html": "<h1 id=\"2.-pointer-arithmetic\">2. Pointer Arithmetic <a class=\"heading-anchor-permalink\" href=\"#2.-pointer-arithmetic\">#</a></h1>\n<p>Created Saturday 21 December 2019</p>\n<p>Addition and subtraction of integers is allowed on pointer variables(except <strong>null</strong> and <strong>void</strong> pointers). Other arithmetic operations such as multiplication and division are not allowed.\n<strong>Reason:</strong> As we don’t know the memory they reference and the jump, respectively, void* are increased by 1 in some compilers, but this is not a standard, it is done only if the <code>-pedantic</code> flag is used.</p>\n<ul>\n<li>When we do +2 for a pointer, we actually do start_address + 2*sizeof(data_type) . Similarly for subtraction.</li>\n<li>Variables declared together need not be contiguos. Memory is actually allocated as per availability.</li>\n<li>Array elements are always contiguos - definition of array.</li>\n<li>Each ±1 adds/subtracts by the sizeof(data_type).</li>\n<li>Everthing in pointer-land is about offsets, not about the addresses themselves.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>Pointers may be <strong>compared</strong> by using relational operators, such as ==, &lt;, and &gt;. This meaningful only if p1 and p2 are <strong>related</strong> to each other, such as elements of the same array.</li>\n</ul>\n",
      "id": 72
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/3._Arrays_and_Pointers/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/3._Arrays_and_Pointers/0_index.html",
      "content": "# 3. Arrays and Pointers\n\nCreated Sunday 22 December 2019\n\nArrays same as pointer?\n\n#### Short answer\n\nAn array uses a pointer to save the address of the first element.\nThe notation [] is just syntactic sugar.\n\n#### Long answer\n\n- Array variable is functionally a pointer to the the first element's address.\n\nWhat are the differences:\n\n1. `sizeof()` gives the size of the array, in the local scope. This happens because the type is set as int[] and not int*. But + works on the int* part, hence arithmetic operation is the same as a pointer. i.e no new variable of 8 bytes is stored for an array.\n\n- **Important:** Symbol table is able to differentiate between a pointer and an array.\n\n2. `&` operator is the same for both 'arr' and '&arr'. Value of 'a' is just the address of a. It does not need to go to the RAM for reading(no traversal required).\n\n- While &p and p is different if p is a pointer, the first is the address of the pointer variable and the second is the address of the variable that p points to, respectively.\n- An observation: We can learn from here that **only the left part of the declaration** takes part in writing the values of the symbol table, **it is absolutely independent of the rvalue**. **This is important** because it makes C++ more intuitive and eases operator overloading and definition criteria. It is **only** in case of static arrays, that we see the sizeof() value is different as compared to the jump value.\n\n**Q)** Can it not be that sizeof is stored differently?\n**A)** No, because sizeof is the same for all. And it has to be in the table, as array names are in reality just names.\n\n1. Pointer arithmetic is invalid for array names(yeah, exactly names), as **no changes can be made to the symbol table, we can only change the value of the memory of the variable. This means that array names cannot be reassigned ( &x is an rvalue and cannot act as an lvalue).** Hence prefix and postfix increment/decrement are also illegal.\n\ni.e arr = p, **not allowed. arr = arr+3 wants to make a change in the address field of the symbol table which is also not allowed. arr+3 in and of itself is valid.**\nbut p = arr is **allowed. Also arr+i makes a jump of i\\*(sizeof(data_type_of_array)), i.e the ith element.**\narr[i] is the same as _(arr+i), hence i[arr] is the same = _(i+arr);\n**Hence: Array names are just an entry with the address of the starting address, in the symbol table. It's not a pointer.**\n**All this is the(an?) impementation of arrays in C++. This is helpful because we can use sizeof to get the size of the arrays, obviously within scope.**\n\nQ) Why can't we get a array length outside the functions scope.\nAns: This is because in call by value, we copy only the content.\nIn call by address we copy only the value.\nIn call by reference/address we copy only the address. So we cannot copy a whole record from a symbol table.\n![](/assets/3._Arrays_and_Pointers-image-1.png)\nWe have gained confidence and the required understanding\nQuestionnare: [Questionnaire 1, 2 and 3.](3._Arrays_and_Pointers/questionnaire1&2&3.md)\n",
      "html": "<h1 id=\"3.-arrays-and-pointers\">3. Arrays and Pointers <a class=\"heading-anchor-permalink\" href=\"#3.-arrays-and-pointers\">#</a></h1>\n<p>Created Sunday 22 December 2019</p>\n<p>Arrays same as pointer?</p>\n<h4 id=\"short-answer\">Short answer <a class=\"heading-anchor-permalink\" href=\"#short-answer\">#</a></h4>\n<p>An array uses a pointer to save the address of the first element.\nThe notation [] is just syntactic sugar.</p>\n<h4 id=\"long-answer\">Long answer <a class=\"heading-anchor-permalink\" href=\"#long-answer\">#</a></h4>\n<ul>\n<li>Array variable is functionally a pointer to the the first element’s address.</li>\n</ul>\n<p>What are the differences:</p>\n<ol>\n<li><code>sizeof()</code> gives the size of the array, in the local scope. This happens because the type is set as int[] and not int*. But + works on the int* part, hence arithmetic operation is the same as a pointer. i.e no new variable of 8 bytes is stored for an array.</li>\n</ol>\n<ul>\n<li><strong>Important:</strong> Symbol table is able to differentiate between a pointer and an array.</li>\n</ul>\n<ol start=\"2\">\n<li><code>&amp;</code> operator is the same for both ‘arr’ and ‘&amp;arr’. Value of ‘a’ is just the address of a. It does not need to go to the RAM for reading(no traversal required).</li>\n</ol>\n<ul>\n<li>While &amp;p and p is different if p is a pointer, the first is the address of the pointer variable and the second is the address of the variable that p points to, respectively.</li>\n<li>An observation: We can learn from here that <strong>only the left part of the declaration</strong> takes part in writing the values of the symbol table, <strong>it is absolutely independent of the rvalue</strong>. <strong>This is important</strong> because it makes C++ more intuitive and eases operator overloading and definition criteria. It is <strong>only</strong> in case of static arrays, that we see the sizeof() value is different as compared to the jump value.</li>\n</ul>\n<p><strong>Q)</strong> Can it not be that sizeof is stored differently?\n<strong>A)</strong> No, because sizeof is the same for all. And it has to be in the table, as array names are in reality just names.</p>\n<ol>\n<li>Pointer arithmetic is invalid for array names(yeah, exactly names), as <strong>no changes can be made to the symbol table, we can only change the value of the memory of the variable. This means that array names cannot be reassigned ( &amp;x is an rvalue and cannot act as an lvalue).</strong> Hence prefix and postfix increment/decrement are also illegal.</li>\n</ol>\n<p>i.e arr = p, <strong>not allowed. arr = arr+3 wants to make a change in the address field of the symbol table which is also not allowed. arr+3 in and of itself is valid.</strong>\nbut p = arr is <strong>allowed. Also arr+i makes a jump of i*(sizeof(data_type_of_array)), i.e the ith element.</strong>\narr[i] is the same as _(arr+i), hence i[arr] is the same = _(i+arr);\n<strong>Hence: Array names are just an entry with the address of the starting address, in the symbol table. It’s not a pointer.</strong>\n<strong>All this is the(an?) impementation of arrays in C++. This is helpful because we can use sizeof to get the size of the arrays, obviously within scope.</strong></p>\n<p>Q) Why can’t we get a array length outside the functions scope.\nAns: This is because in call by value, we copy only the content.\nIn call by address we copy only the value.\nIn call by reference/address we copy only the address. So we cannot copy a whole record from a symbol table.\n<img src=\"/assets/3._Arrays_and_Pointers-image-1.png\" alt=\"\">\nWe have gained confidence and the required understanding\nQuestionnare: <a href=\"3._Arrays_and_Pointers/questionnaire1&amp;2&amp;3.html\">Questionnaire 1, 2 and 3.</a></p>\n",
      "id": 73
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/3._Arrays_and_Pointers/Assignment_questions.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/3._Arrays_and_Pointers/Assignment_questions.html",
      "content": "# Assignment\n\n**What will be the output ?**\n\n    #include <iostream>\n    using namespace std;\n    void swap(char *x, char *y)\n    {\n        char *t = x;\n        x = y;\n        y = t;\n    }\n\n    int main()\n    {\n        char *x = \"geeksquiz\";\n        char *y = \"geeksforgeeks\";\n        char *t;\n        swap(x, y);\n        cout << x << \" \" << y;\n        t = x;\n        x = y;\n        y = t;\n        cout << \" \" << x << \" \" << y;\n        return 0;\n    }\n\n**Options**\n\n    a. geeksforgeeks geeksquiz geeksforgeeks geeksquiz\n    b. geeksquiz geeksforgeeks geeksquiz geeksforgeeks\n    c. geeksquiz geeksforgeeks geeksforgeeks geeksquiz\n    d. Compiler Error\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. geeksquiz geeksforgeeks geeksforgeeks geeksquiz\n    The function changes only values of the formal parameters, and does not affect the value stored at the address.\n\n</details>\n\n---\n\n**What will be the output ?**\n\n    #include <iostream>\n    using namespace std;\n    int main()\n    {\n        float arr[5] = {12.5, 10.0, 13.5, 90.5, 0.5};\n        float *ptr1 = &arr[0];\n        float *ptr2 = ptr1 + 3;\n        cout<<*ptr2<<\" \";\n        cout<< ptr2 - ptr1;\n        return 0;\n    }\n\n**Options**\n\n    a. 90.5 3\n    b. 90.5 12\n    c. 10.0 12\n    d. undefined\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. 90.5 3\n    Basic arithmetic.\n\n</details>\n\n---\n\n**What will be the output ?**\n\n    #include<iostream>\n    using namespace std;\n    int main() {\n        char st[] = \"ABCD\";\n        for(int i = 0; st[i] != ‘\\0’; i++) {\n           cout << st[i] << *(st)+i << *(i+st) << i[st];\n        }\n        return 0;\n    }\n\n**Options**\n\n    a. AAAABBBBCCCCDDDD\n    b. ABCD\n    c. A65AAB66BBC67CCD68DD\n    d. Compilation Error\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. A65AAB66BBC67CCD68DD\n    st[i] = *(st+i) = *(i+st)\n    while *(st)+i = ASCII_value + i\n\n</details>\n\n---\n\n**What will be the output ?**\n\n    #include <iostream>\n    using namespace std;\n    void Q(int z)\n    {\n        z += z;\n        cout<<z << \" \";\n    }\n\n    void P(int *y)\n    {\n        int x = *y + 2;\n        Q(x);\n        *y = x - 1;\n        cout<<x << \" \";\n    }\n\n    int main()\n    {\n        int x = 5;\n        P(&x);\n        cout<<x;\n        return 0;\n    }\n\n**Options**\n\n    a. 7 6 14\n    b. 14 7 5\n    c. 14 7 6\n    d. 14 6 5\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. 14 7 6\n    Basics, do on pen and paper if need be.\n\n</details>\n\n---\n\n**What will be the output ?**\n\n    #include<iostream>\n    using namespace std;\n    int main()\n    {\n        int ***r, **q, *p, i=8;\n        p = &i;\n        (*p)++;\n        q = &p;\n        (**q)++;\n        r = &q;\n        cout<<*p << \" \" <<**q << \" \"<<***r;\n        return 0;\n    }\n\n**Options**\n\n    a. 8 8 8\n    b. 10 10 10\n    c. 9 10 11\n    d. 9 10 10\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. 10 10 10\n    Basics, just draw a diagram.\n\n</details>\n\n---\n\n**What will be the output ?**\n\n    int f(int x, int *py, int **ppz)\n    {\n        int y, z;\n        **ppz += 1;\n        z = **ppz;\n        *py += 2;\n        y = *py;\n        x += 3;\n        return x + y + z;\n    }\n\n    int main()\n    {\n        int c, *b, **a;\n        c = 4;\n        b = &c;\n        a = &b;\n        cout << f(c, b, a);\n        return 0;\n    }\n\n**Options**\n\n    a. 21\n    b. 18\n    c. 19\n    d. 24\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. 19\n    Basics, just draw a diagram. Make new memory for formal variables.\n\n</details>\n\n---\n\n# End Of Quiz\n",
      "html": "<h1 id=\"assignment\">Assignment <a class=\"heading-anchor-permalink\" href=\"#assignment\">#</a></h1>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid swap(char *x, char *y)\n{\n    char *t = x;\n    x = y;\n    y = t;\n}\n\nint main()\n{\n    char *x = &quot;geeksquiz&quot;;\n    char *y = &quot;geeksforgeeks&quot;;\n    char *t;\n    swap(x, y);\n    cout &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; y;\n    t = x;\n    x = y;\n    y = t;\n    cout &lt;&lt; &quot; &quot; &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; y;\n    return 0;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. geeksforgeeks geeksquiz geeksforgeeks geeksquiz\nb. geeksquiz geeksforgeeks geeksquiz geeksforgeeks\nc. geeksquiz geeksforgeeks geeksforgeeks geeksquiz\nd. Compiler Error\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. geeksquiz geeksforgeeks geeksforgeeks geeksquiz\nThe function changes only values of the formal parameters, and does not affect the value stored at the address.\n</code></pre>\n</details>\n<hr>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    float arr[5] = {12.5, 10.0, 13.5, 90.5, 0.5};\n    float *ptr1 = &amp;arr[0];\n    float *ptr2 = ptr1 + 3;\n    cout&lt;&lt;*ptr2&lt;&lt;&quot; &quot;;\n    cout&lt;&lt; ptr2 - ptr1;\n    return 0;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 90.5 3\nb. 90.5 12\nc. 10.0 12\nd. undefined\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. 90.5 3\nBasic arithmetic.\n</code></pre>\n</details>\n<hr>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main() {\n    char st[] = &quot;ABCD&quot;;\n    for(int i = 0; st[i] != ‘\\0’; i++) {\n       cout &lt;&lt; st[i] &lt;&lt; *(st)+i &lt;&lt; *(i+st) &lt;&lt; i[st];\n    }\n    return 0;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. AAAABBBBCCCCDDDD\nb. ABCD\nc. A65AAB66BBC67CCD68DD\nd. Compilation Error\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. A65AAB66BBC67CCD68DD\nst[i] = *(st+i) = *(i+st)\nwhile *(st)+i = ASCII_value + i\n</code></pre>\n</details>\n<hr>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid Q(int z)\n{\n    z += z;\n    cout&lt;&lt;z &lt;&lt; &quot; &quot;;\n}\n\nvoid P(int *y)\n{\n    int x = *y + 2;\n    Q(x);\n    *y = x - 1;\n    cout&lt;&lt;x &lt;&lt; &quot; &quot;;\n}\n\nint main()\n{\n    int x = 5;\n    P(&amp;x);\n    cout&lt;&lt;x;\n    return 0;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 7 6 14\nb. 14 7 5\nc. 14 7 6\nd. 14 6 5\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. 14 7 6\nBasics, do on pen and paper if need be.\n</code></pre>\n</details>\n<hr>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int ***r, **q, *p, i=8;\n    p = &amp;i;\n    (*p)++;\n    q = &amp;p;\n    (**q)++;\n    r = &amp;q;\n    cout&lt;&lt;*p &lt;&lt; &quot; &quot; &lt;&lt;**q &lt;&lt; &quot; &quot;&lt;&lt;***r;\n    return 0;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 8 8 8\nb. 10 10 10\nc. 9 10 11\nd. 9 10 10\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. 10 10 10\nBasics, just draw a diagram.\n</code></pre>\n</details>\n<hr>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>int f(int x, int *py, int **ppz)\n{\n    int y, z;\n    **ppz += 1;\n    z = **ppz;\n    *py += 2;\n    y = *py;\n    x += 3;\n    return x + y + z;\n}\n\nint main()\n{\n    int c, *b, **a;\n    c = 4;\n    b = &amp;c;\n    a = &amp;b;\n    cout &lt;&lt; f(c, b, a);\n    return 0;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 21\nb. 18\nc. 19\nd. 24\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. 19\nBasics, just draw a diagram. Make new memory for formal variables.\n</code></pre>\n</details>\n<hr>\n<h1 id=\"end-of-quiz\">End Of Quiz <a class=\"heading-anchor-permalink\" href=\"#end-of-quiz\">#</a></h1>\n",
      "id": 74
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/3._Arrays_and_Pointers/questionnaire1&2&3.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/3._Arrays_and_Pointers/questionnaire1&2&3.html",
      "content": "# Lecture 1: Introduction to Pointers\n\n**What will be the output ?**\n\n    int *ptr = 0;\n    int a = 10;\n    ptr = a;\n    cout << *ptr << endl;\n\n**Options:**\n\n    a. 10\n    b. 0\n    c. Error\n    d. None\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    Error\n    Cannot assign int value to an int*\n\n</details>\n\n---\n\n**What will be the output ?**\n\n    int a = 7;\n    int b = 17;\n    int *c = &b;\n    a = *c;\n    *c = *c + 1;\n    cout  << a << \"  \" << b << endl;\n\n**Options**\n\n    a. 18 18\n    b. 7 18\n    c. 17 17\n    d. 17 18\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    d. 17 18\n    Make a variable map.\n\n</details>\n\n---\n\n**What will be the output ?**\n\n    float f = 10.5;\n    float p = 2.5;\n    float* ptr = &f;\n    (*ptr)++;\n    *ptr = p;\n    cout << *ptr << \" \" << f << \" \" << p;\n\n**Options**\n\n    a. 2.5 10.5 2.5\n    b. 2.5 11.5 2.5\n    c. 2.5 2.5 2.5\n    d. 11.5 11.5 2.5\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c.2.5 2.5 2.5\n    Make a variable map.\n\n</details>\n\n---\n\n# Lecture 2: Pointer Arithmetic\n\n**What will be the output ?**\n\n    int a = 7;\n    int *c = &a;\n    c = c + 1;\n    cout  << a << \"  \" << *c << endl;\n\n**Options**\n\n    a. Garbage_value 7\n    b. 7 Garbage_value\n    c. 8 8\n    d. 7 7\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. 7 Garbage_value\n    Obvious.\n\n</details>\n\n---\n\n**Assume memory address of variable ‘a’ is : 400 (and an integer takes 4 bytes), what will be the output ?**\n\n    int a = 7;\n    int *c = &a;\n    c = c + 3;\n    cout  << c << endl;\n\n**Fill in the answer**\n\n    ____\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    412\n    400 + 3*4 = 412\n\n</details>\n\n---\n\n**Assume memory address of variable ‘a’ is : 200 and a double variable is of size 8 bytes, what will be the output ?**\n\n    double a = 10.54;\n    double *d = &a;\n    d = d + 1;\n    cout  << d << endl;\n\n**Fill in the answer**\n\n    ____\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    208\n    200 + 1*8 = 208\n\n</details>\n\n---\n\n# Lecture 3: Arrays and Pointers\n\n**Assume integer takes 4 bytes and integer pointer 8 bytes.**\\\n**What is the output**\n\n    int a[5];\n    int *c;\n    cout << sizeof(a) << \" \" << sizeof(c);\n\n**Options**\n\n    a. 8 8\n    b. 5 8\n    c. 20 8\n    d. 20 4\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. 20 8\n    sizeof(a) = size of the array, sizeof(c) = 8 bytes(pointer size)\n\n</details>\n\n---\n\n**Fill the output**\n\n    int a[] = {1, 2, 3, 4};\n    cout << *(a) << \" \" << *(a+1);\n\n**Answer**\n\n    ____\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. 1 2\n    *a = first element of the array,*(a+1) is the second element\n\n</details>\n\n---\n\n**Assume that address of 0th index of array ‘a’ is : 200. What is the output ?**\n\n    int a[6] = {1, 2, 3};\n    cout << a << \" \" << &a;\n\n**Answer**\n\n    ____\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    200 200\n    value of 'a' and address of 'a' is the same in case of array names.\n\n</details>\n\n---\n\n**Assume that address of 0th index of array ‘a’ is : 200. What is the output ?**\n\n    int a[6] = {1, 2, 3};\n    cout << (a+2);\n\n**Answer**\n\n    ____\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    208\n    jump = 4, 200 + 2*(4) = 208. Jump is decided based on data type.\n\n</details>\n\n---\n\n**Assume that address of 0th index of array ‘a’ is : 200. What is the output ?**\n\n    int a[6] = {1, 2, 3};\n    int *b = a;\n    cout << b[2];\n\n**Options**\n\n    a. Error\n    b. 3\n    c. 1\n    d. 200\n    e. 212\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. 3\n    b[2] = 3rd element\n\n</details>\n\n---\n\n**Assume that address of 0th index of array ‘a’ is : 200. What is the output ?**\n\n    int a[] = {1, 2, 3, 4, 5};\n    cout << *(a) << \" \" << *(a + 4);\n\n**Options**\n\n    a. Error\n    b. 200 216\n    c. 1 5\n    d. None of these\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. 1 5\n    1st and 5th element\n\n</details>\n\n---\n\n**Assume that address of 0th index of array ‘a’ is : 200. What is the output ?**\n\n    int a[] = {1, 2, 3, 4};\n    int *p = a++;\n    cout << *p << endl;\n\n**Options**\n\n    a. 1\n    b. 2\n    c. Garbage Value\n    d. Error\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    d. Error\n    int *p = a is okay, but a = a+1 is invalid, coz it intends to make a change in the symbol table.\n\n</details>\n\n---\n\n# End Of Quiz\n",
      "html": "<h1 id=\"lecture-1%3A-introduction-to-pointers\">Lecture 1: Introduction to Pointers <a class=\"heading-anchor-permalink\" href=\"#lecture-1%3A-introduction-to-pointers\">#</a></h1>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>int *ptr = 0;\nint a = 10;\nptr = a;\ncout &lt;&lt; *ptr &lt;&lt; endl;\n</code></pre>\n<p><strong>Options:</strong></p>\n<pre><code>a. 10\nb. 0\nc. Error\nd. None\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>Error\nCannot assign int value to an int*\n</code></pre>\n</details>\n<hr>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>int a = 7;\nint b = 17;\nint *c = &amp;b;\na = *c;\n*c = *c + 1;\ncout  &lt;&lt; a &lt;&lt; &quot;  &quot; &lt;&lt; b &lt;&lt; endl;\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 18 18\nb. 7 18\nc. 17 17\nd. 17 18\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>d. 17 18\nMake a variable map.\n</code></pre>\n</details>\n<hr>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>float f = 10.5;\nfloat p = 2.5;\nfloat* ptr = &amp;f;\n(*ptr)++;\n*ptr = p;\ncout &lt;&lt; *ptr &lt;&lt; &quot; &quot; &lt;&lt; f &lt;&lt; &quot; &quot; &lt;&lt; p;\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 2.5 10.5 2.5\nb. 2.5 11.5 2.5\nc. 2.5 2.5 2.5\nd. 11.5 11.5 2.5\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c.2.5 2.5 2.5\nMake a variable map.\n</code></pre>\n</details>\n<hr>\n<h1 id=\"lecture-2%3A-pointer-arithmetic\">Lecture 2: Pointer Arithmetic <a class=\"heading-anchor-permalink\" href=\"#lecture-2%3A-pointer-arithmetic\">#</a></h1>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>int a = 7;\nint *c = &amp;a;\nc = c + 1;\ncout  &lt;&lt; a &lt;&lt; &quot;  &quot; &lt;&lt; *c &lt;&lt; endl;\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Garbage_value 7\nb. 7 Garbage_value\nc. 8 8\nd. 7 7\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. 7 Garbage_value\nObvious.\n</code></pre>\n</details>\n<hr>\n<p><strong>Assume memory address of variable ‘a’ is : 400 (and an integer takes 4 bytes), what will be the output ?</strong></p>\n<pre><code>int a = 7;\nint *c = &amp;a;\nc = c + 3;\ncout  &lt;&lt; c &lt;&lt; endl;\n</code></pre>\n<p><strong>Fill in the answer</strong></p>\n<pre><code>____\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>412\n400 + 3*4 = 412\n</code></pre>\n</details>\n<hr>\n<p><strong>Assume memory address of variable ‘a’ is : 200 and a double variable is of size 8 bytes, what will be the output ?</strong></p>\n<pre><code>double a = 10.54;\ndouble *d = &amp;a;\nd = d + 1;\ncout  &lt;&lt; d &lt;&lt; endl;\n</code></pre>\n<p><strong>Fill in the answer</strong></p>\n<pre><code>____\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>208\n200 + 1*8 = 208\n</code></pre>\n</details>\n<hr>\n<h1 id=\"lecture-3%3A-arrays-and-pointers\">Lecture 3: Arrays and Pointers <a class=\"heading-anchor-permalink\" href=\"#lecture-3%3A-arrays-and-pointers\">#</a></h1>\n<p><strong>Assume integer takes 4 bytes and integer pointer 8 bytes.</strong><br>\n<strong>What is the output</strong></p>\n<pre><code>int a[5];\nint *c;\ncout &lt;&lt; sizeof(a) &lt;&lt; &quot; &quot; &lt;&lt; sizeof(c);\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 8 8\nb. 5 8\nc. 20 8\nd. 20 4\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. 20 8\nsizeof(a) = size of the array, sizeof(c) = 8 bytes(pointer size)\n</code></pre>\n</details>\n<hr>\n<p><strong>Fill the output</strong></p>\n<pre><code>int a[] = {1, 2, 3, 4};\ncout &lt;&lt; *(a) &lt;&lt; &quot; &quot; &lt;&lt; *(a+1);\n</code></pre>\n<p><strong>Answer</strong></p>\n<pre><code>____\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. 1 2\n*a = first element of the array,*(a+1) is the second element\n</code></pre>\n</details>\n<hr>\n<p><strong>Assume that address of 0th index of array ‘a’ is : 200. What is the output ?</strong></p>\n<pre><code>int a[6] = {1, 2, 3};\ncout &lt;&lt; a &lt;&lt; &quot; &quot; &lt;&lt; &amp;a;\n</code></pre>\n<p><strong>Answer</strong></p>\n<pre><code>____\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>200 200\nvalue of 'a' and address of 'a' is the same in case of array names.\n</code></pre>\n</details>\n<hr>\n<p><strong>Assume that address of 0th index of array ‘a’ is : 200. What is the output ?</strong></p>\n<pre><code>int a[6] = {1, 2, 3};\ncout &lt;&lt; (a+2);\n</code></pre>\n<p><strong>Answer</strong></p>\n<pre><code>____\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>208\njump = 4, 200 + 2*(4) = 208. Jump is decided based on data type.\n</code></pre>\n</details>\n<hr>\n<p><strong>Assume that address of 0th index of array ‘a’ is : 200. What is the output ?</strong></p>\n<pre><code>int a[6] = {1, 2, 3};\nint *b = a;\ncout &lt;&lt; b[2];\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Error\nb. 3\nc. 1\nd. 200\ne. 212\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. 3\nb[2] = 3rd element\n</code></pre>\n</details>\n<hr>\n<p><strong>Assume that address of 0th index of array ‘a’ is : 200. What is the output ?</strong></p>\n<pre><code>int a[] = {1, 2, 3, 4, 5};\ncout &lt;&lt; *(a) &lt;&lt; &quot; &quot; &lt;&lt; *(a + 4);\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Error\nb. 200 216\nc. 1 5\nd. None of these\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. 1 5\n1st and 5th element\n</code></pre>\n</details>\n<hr>\n<p><strong>Assume that address of 0th index of array ‘a’ is : 200. What is the output ?</strong></p>\n<pre><code>int a[] = {1, 2, 3, 4};\nint *p = a++;\ncout &lt;&lt; *p &lt;&lt; endl;\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 1\nb. 2\nc. Garbage Value\nd. Error\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>d. Error\nint *p = a is okay, but a = a+1 is invalid, coz it intends to make a change in the symbol table.\n</code></pre>\n</details>\n<hr>\n<h1 id=\"end-of-quiz\">End Of Quiz <a class=\"heading-anchor-permalink\" href=\"#end-of-quiz\">#</a></h1>\n",
      "id": 75
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/4._Characters_and_Pointers.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/4._Characters_and_Pointers.html",
      "content": "# 4. Characters and Pointers\nCreated Monday 23 December 2019\n\nCharacter arrays and pointers have a different behavior, as compared to numerical data types.\n\n* cout behaves differently for character pointers and array names(i.e addresses), instead of printing the address, it prints the value at the address till we reach a memory byte where we have a null character.\n* cin, if taken in a memory address or array name, will make a **temporary memory for storing all input,** when it encounters a whitespace, it copies all the elements from the** temporary space to a contiguos memory space** of the (to be string's) length.\n\n**Note:** This is okay. But initializing a char* with a string may or may not work. As the literal is stored in the **temporary memory** which may or may not be readable after taking the input. So, the safe method is to **not** initialize the pointer directly using *string literal. ***Note** that such a declarization is available only for strings and not for any other data type. e.g int *x  = 2 is invalid, while char* x =\"sanjar\" will generate warnings but unsafe.\n\n* assignment exception: char* x = \"sanjar\" is valid. Although, this is invalid in -pedantic flag. = has been overloaded for character addresses(pointers and array names).\n\n\n**Note:**\n\n* *These* 3 cases and *only* these 3 cases are an anomaly, no other exceptions are there for character arrays. So, *derefencing *char *, works the same as it does for integers and other data types.\n* Referencing(using &), cannot help us know the length of the string(or any array in general). As it operates on the address and not on the sizeof() value in the symbol table.\n\n\n",
      "html": "<h1 id=\"4.-characters-and-pointers\">4. Characters and Pointers <a class=\"heading-anchor-permalink\" href=\"#4.-characters-and-pointers\">#</a></h1>\n<p>Created Monday 23 December 2019</p>\n<p>Character arrays and pointers have a different behavior, as compared to numerical data types.</p>\n<ul>\n<li>cout behaves differently for character pointers and array names(i.e addresses), instead of printing the address, it prints the value at the address till we reach a memory byte where we have a null character.</li>\n<li>cin, if taken in a memory address or array name, will make a <strong>temporary memory for storing all input,</strong> when it encounters a whitespace, it copies all the elements from the** temporary space to a contiguos memory space** of the (to be string’s) length.</li>\n</ul>\n<p><strong>Note:</strong> This is okay. But initializing a char* with a string may or may not work. As the literal is stored in the <strong>temporary memory</strong> which may or may not be readable after taking the input. So, the safe method is to <strong>not</strong> initialize the pointer directly using *string literal. *<strong>Note</strong> that such a declarization is available only for strings and not for any other data type. e.g int <em>x  = 2 is invalid, while char</em> x =“sanjar” will generate warnings but unsafe.</p>\n<ul>\n<li>assignment exception: char* x = “sanjar” is valid. Although, this is invalid in -pedantic flag. = has been overloaded for character addresses(pointers and array names).</li>\n</ul>\n<p><strong>Note:</strong></p>\n<ul>\n<li><em>These</em> 3 cases and <em>only</em> these 3 cases are an anomaly, no other exceptions are there for character arrays. So, *derefencing *char *, works the same as it does for integers and other data types.</li>\n<li>Referencing(using &amp;), cannot help us know the length of the string(or any array in general). As it operates on the address and not on the sizeof() value in the symbol table.</li>\n</ul>\n",
      "id": 76
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/5._Function_and_Pointers.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/5._Function_and_Pointers.html",
      "content": "# 5. Function and Pointers\nCreated Monday 23 December 2019\n\n\n* Re-emphasizing the scope of pointers. \n* (*p)++ is significant. \n* int x[] as a formal parameter is the same as int*. No difference at all. Hence we need to pass the length. \n* Passing parts of the function as an array, is a useful trick. \n\nf(arr+2, 5) is the same as making a pointer on the 3rd then passing it. \n\n\n\n",
      "html": "<h1 id=\"5.-function-and-pointers\">5. Function and Pointers <a class=\"heading-anchor-permalink\" href=\"#5.-function-and-pointers\">#</a></h1>\n<p>Created Monday 23 December 2019</p>\n<ul>\n<li>Re-emphasizing the scope of pointers.</li>\n<li>(*p)++ is significant.</li>\n<li>int x[] as a formal parameter is the same as int*. No difference at all. Hence we need to pass the length.</li>\n<li>Passing parts of the function as an array, is a useful trick.</li>\n</ul>\n<p>f(arr+2, 5) is the same as making a pointer on the 3rd then passing it.</p>\n",
      "id": 77
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/6._Nested_pointer/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/6._Nested_pointer/0_index.html",
      "content": "# 6. Nested pointer\n\nCreated Tuesday 24 December 2019\n\n**Q)** Why don't we use **pointer** instead of int*, char* etc.\n**Answer:** We use int* and char* etc to indicate the jump(or read span) which must be read form the address specified. Relate this to the jump field in the symbol table.\n\n- We do have generic pointers, but they cannot be derefenced. Have to be cast to dereference them.\n\nDouble pointer: When we do this\n\nint i = 10;\nint\\* p = &i;\n\nThis takes place: ![](/assets/6._Nested_pointer-image-1.png)\n\n---\n\nCan we use another variable to store the address of the int\\* p pointer. **Yes** we can.\n\n- **That will need to be dereferenced too, hence we do **int\\*\\*p1=&p; This is a pointer to pointer or \"double pointer\".\n- Basically: data_type \\* variable_name; // for declarartion\n- - variable_name for dereference.\n\n![](/assets/6._Nested_pointer-image-2.png)\n**This is obvious, but worth mentioning: **\ncout << *p2 << endl;\ncout << p << endl;\nThe output is the same on both lines. We just accessed on the same *level\\*.\n\n---\n\nClearing the thought smoke regarding double or n pointer chains.\n\n- A star(\\*) adds a bubble with an arrow to the variable bubble.\n- Derefencing refers to traversing the arrows \\* no. of times and reading the memory space acc to the data type.\n- Don't worry of the arrayname issue here, from the symbol table, coz all addresses are held in variables. Also &x is not a valid lvalue.\n- When we pass a pointer to a function, just make a variable with the address of the argument and join the arrow. We don't need to look below this level. This is **obvious coz there's no connection** of the formal parameters with the other variables of the main() function except the argument. So any links will be **made** only with the argument. **Note**: But as derefencing involves traversing of arrows, we need to be careful, as the links may be changed. This is **accessing** the data, rather than **making **the chain.\n- Representation: Use a box/circle.\n  1.  Value: Inside the bubble.\n  2.  Address of the bubble below it.\n  3.  Name of the bubble on the left side.\n  4.  Arrows from the bubble to the bubble(whose address is stored in the previous bubble - helps with dereferencing.\n\n---\n",
      "html": "<h1 id=\"6.-nested-pointer\">6. Nested pointer <a class=\"heading-anchor-permalink\" href=\"#6.-nested-pointer\">#</a></h1>\n<p>Created Tuesday 24 December 2019</p>\n<p><strong>Q)</strong> Why don’t we use <strong>pointer</strong> instead of int*, char* etc.\n<strong>Answer:</strong> We use int* and char* etc to indicate the jump(or read span) which must be read form the address specified. Relate this to the jump field in the symbol table.</p>\n<ul>\n<li>We do have generic pointers, but they cannot be derefenced. Have to be cast to dereference them.</li>\n</ul>\n<p>Double pointer: When we do this</p>\n<p>int i = 10;\nint* p = &amp;i;</p>\n<p>This takes place: <img src=\"/assets/6._Nested_pointer-image-1.png\" alt=\"\"></p>\n<hr>\n<p>Can we use another variable to store the address of the int* p pointer. <strong>Yes</strong> we can.</p>\n<ul>\n<li>**That will need to be dereferenced too, hence we do **int**p1=&amp;p; This is a pointer to pointer or “double pointer”.</li>\n<li>Basically: data_type * variable_name; // for declarartion</li>\n<li>\n<ul>\n<li>variable_name for dereference.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/assets/6._Nested_pointer-image-2.png\" alt=\"\">\n**This is obvious, but worth mentioning: **\ncout &lt;&lt; *p2 &lt;&lt; endl;\ncout &lt;&lt; p &lt;&lt; endl;\nThe output is the same on both lines. We just accessed on the same *level*.</p>\n<hr>\n<p>Clearing the thought smoke regarding double or n pointer chains.</p>\n<ul>\n<li>A star(*) adds a bubble with an arrow to the variable bubble.</li>\n<li>Derefencing refers to traversing the arrows * no. of times and reading the memory space acc to the data type.</li>\n<li>Don’t worry of the arrayname issue here, from the symbol table, coz all addresses are held in variables. Also &amp;x is not a valid lvalue.</li>\n<li>When we pass a pointer to a function, just make a variable with the address of the argument and join the arrow. We don’t need to look below this level. This is <strong>obvious coz there’s no connection</strong> of the formal parameters with the other variables of the main() function except the argument. So any links will be <strong>made</strong> only with the argument. <strong>Note</strong>: But as derefencing involves traversing of arrows, we need to be careful, as the links may be changed. This is <strong>accessing</strong> the data, rather than **making **the chain.</li>\n<li>Representation: Use a box/circle.\n<ol>\n<li>Value: Inside the bubble.</li>\n<li>Address of the bubble below it.</li>\n<li>Name of the bubble on the left side.</li>\n<li>Arrows from the bubble to the bubble(whose address is stored in the previous bubble - helps with dereferencing.</li>\n</ol>\n</li>\n</ul>\n<hr>\n",
      "id": 78
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/6._Nested_pointer/questionnaire4&5&6.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/6._Nested_pointer/questionnaire4&5&6.html",
      "content": "# Lecture 4: Characters and Pointers\n\n**What will be the output ?**\n\n    char ch = 'a';\n    char* ptr = &ch;\n    ch++;\n    cout << *ptr << endl;\n\n**Options**\n\n    a. a\n    b. b\n    c. 97\n    d. 98\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. b\n    This should print all characters until it reaches a null character. But we can assume that the next one is a null character.\n\n</details>\n\n---\n\n**Assume address of 0th index of array ‘b’ is 200. What is the output ?**\n\n    char b[] = \"xyz\";\n    char *c = &b[0];\n    cout << c << endl;\n\n**Options**\n\n    a. 200\n    b. x\n    c. xyz\n    d. None of these\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    d. xyz\n    This should print all characters until it reaches a null character.\n\n</details>\n\n---\n\n**Assume that address of 0th index of array ‘a’ is : 200. What is the output ?**\n\n    char b[] = \"xyz\";\n    char *c = &b[0];\n    c++;\n    cout << c << endl;\n\n**Options**\n\n    a. 201\n    b. y\n    c. xyz\n    d. yz\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    d. yz\n    This should print all characters until it reaches a null character.\n\n</details>\n\n---\n\n**Fill the output ?**\n\n    char s[]= \"hello\";\n    char *p = s;\n    cout << s[0] << \" \" << p[0];\n\n**Answer**\n\n    ____\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    h h\n    Why not hello hello or h hello? As we have used bracket notation, dereferencing has been done, and dereferencing happens according to the jump.\n    The only anomaly is with character addresses(pointers and array_names), where instead of displaying the hex address, we get the derefenced char values till EOS.\n\n</details>\n\n---\n\n# Lecture 5: Pointers and Functions\n\n**Figure out the correct output of the following code.**\n\n    void changeSign(int *p)\n    {\n        *p = (*p)  *  -1;\n    }\n\n    int main()\n    {\n        int a = 10;\n        changeSign(&a);\n        cout << a << endl;\n    }\n\n**Options**\n\n    a. -10\n    b.  10\n    c.  Error\n    d. None of the above\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    -10\n    We made changes at the address, and it will surely be reflected.\n\n</details>\n\n---\n\n**Fill the output**\n\n    void fun(int a[])\n    {\n        cout << a[0] << \" \";\n    }\n\n    int main()\n    {\n        int a[] = {1, 2, 3, 4};\n        fun(a + 1);\n        cout << a[0];\n    }\n\n**Answer**\n\n    ____\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    2 1\n    Obvious.\n\n</details>\n\n---\n\n**What will be the output ?**\n\n    void square(int *p)\n    {\n        int a = 10;\n        p = &a;\n        *p = (*p) * (*p);\n    }\n\n    int main()\n    {\n        int a = 10;\n        square(&a);\n        cout << a << endl;\n    }\n\n**Options**\n\n    a. 100\n    b. 10\n    c. Error\n    d. None of these\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    10\n    No changes were made at the location of the argument.\n\n</details>\n\n---\n\n# Lecture 6: Double Pointer\n\n**What will be the output ?**\n\n    int a = 10;\n    int *p = &a;\n    int **q = &p;\n    int b = 20;\n    *q = &b;\n    (*p)++;\n    cout << a << \" \" << b << endl;\n\n**Options**\n\n    a. 10 21\n    b. 11 20\n    c. 11 21\n    d. 10 20\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. 10 21\n    Use the diagram rules.\n\n</details>\n\n---\n\n**What will be the output ?**\n\n    int a = 100;\n    int *p = &a;\n    int **q = &p;\n    int b = (**q)++ + 4;\n    cout << a << \" \" << b << endl;\n\n**Options**\n\n    a. 100 104\n    b. 101 104\n    c. 101 105\n    d. 100 105\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. 101 104\n    ++ is evaluated after the statement ends. Safe assumption.\n\n</details>\n\n---\n\n**What will be the output ?**\n\n    int a = 100;\n    int *p = &a;\n    int **q = &p;\n    int b = (**q)++;\n    int *r = *q;\n    (*r)++;\n    cout << a << \" \" << b << endl;\n\n**Options**\n\n    a. 102 100\n    b. 101 100\n    c. 101 101\n    d. 102 101\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. 102 100\n    Draw a diagram.\n\n</details>\n\n---\n\n**What will be the output ?**\n\n    void increment(int **p)\n    {\n        (**p)++;\n    }\n\n    int main()\n    {\n        int num = 10;\n        int *ptr = &num;\n        increment(&ptr);\n        cout << num << endl;\n    }\n\n    a. 10\n    b. 11\n    c. Error\n    d. None of these\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. 11\n    The function changes the value at the address.\n\n</details>\n\n---\n\n# End Of Quiz\n",
      "html": "<h1 id=\"lecture-4%3A-characters-and-pointers\">Lecture 4: Characters and Pointers <a class=\"heading-anchor-permalink\" href=\"#lecture-4%3A-characters-and-pointers\">#</a></h1>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>char ch = 'a';\nchar* ptr = &amp;ch;\nch++;\ncout &lt;&lt; *ptr &lt;&lt; endl;\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. a\nb. b\nc. 97\nd. 98\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. b\nThis should print all characters until it reaches a null character. But we can assume that the next one is a null character.\n</code></pre>\n</details>\n<hr>\n<p><strong>Assume address of 0th index of array ‘b’ is 200. What is the output ?</strong></p>\n<pre><code>char b[] = &quot;xyz&quot;;\nchar *c = &amp;b[0];\ncout &lt;&lt; c &lt;&lt; endl;\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 200\nb. x\nc. xyz\nd. None of these\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>d. xyz\nThis should print all characters until it reaches a null character.\n</code></pre>\n</details>\n<hr>\n<p><strong>Assume that address of 0th index of array ‘a’ is : 200. What is the output ?</strong></p>\n<pre><code>char b[] = &quot;xyz&quot;;\nchar *c = &amp;b[0];\nc++;\ncout &lt;&lt; c &lt;&lt; endl;\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 201\nb. y\nc. xyz\nd. yz\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>d. yz\nThis should print all characters until it reaches a null character.\n</code></pre>\n</details>\n<hr>\n<p><strong>Fill the output ?</strong></p>\n<pre><code>char s[]= &quot;hello&quot;;\nchar *p = s;\ncout &lt;&lt; s[0] &lt;&lt; &quot; &quot; &lt;&lt; p[0];\n</code></pre>\n<p><strong>Answer</strong></p>\n<pre><code>____\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>h h\nWhy not hello hello or h hello? As we have used bracket notation, dereferencing has been done, and dereferencing happens according to the jump.\nThe only anomaly is with character addresses(pointers and array_names), where instead of displaying the hex address, we get the derefenced char values till EOS.\n</code></pre>\n</details>\n<hr>\n<h1 id=\"lecture-5%3A-pointers-and-functions\">Lecture 5: Pointers and Functions <a class=\"heading-anchor-permalink\" href=\"#lecture-5%3A-pointers-and-functions\">#</a></h1>\n<p><strong>Figure out the correct output of the following code.</strong></p>\n<pre><code>void changeSign(int *p)\n{\n    *p = (*p)  *  -1;\n}\n\nint main()\n{\n    int a = 10;\n    changeSign(&amp;a);\n    cout &lt;&lt; a &lt;&lt; endl;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. -10\nb.  10\nc.  Error\nd. None of the above\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>-10\nWe made changes at the address, and it will surely be reflected.\n</code></pre>\n</details>\n<hr>\n<p><strong>Fill the output</strong></p>\n<pre><code>void fun(int a[])\n{\n    cout &lt;&lt; a[0] &lt;&lt; &quot; &quot;;\n}\n\nint main()\n{\n    int a[] = {1, 2, 3, 4};\n    fun(a + 1);\n    cout &lt;&lt; a[0];\n}\n</code></pre>\n<p><strong>Answer</strong></p>\n<pre><code>____\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>2 1\nObvious.\n</code></pre>\n</details>\n<hr>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>void square(int *p)\n{\n    int a = 10;\n    p = &amp;a;\n    *p = (*p) * (*p);\n}\n\nint main()\n{\n    int a = 10;\n    square(&amp;a);\n    cout &lt;&lt; a &lt;&lt; endl;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 100\nb. 10\nc. Error\nd. None of these\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>10\nNo changes were made at the location of the argument.\n</code></pre>\n</details>\n<hr>\n<h1 id=\"lecture-6%3A-double-pointer\">Lecture 6: Double Pointer <a class=\"heading-anchor-permalink\" href=\"#lecture-6%3A-double-pointer\">#</a></h1>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>int a = 10;\nint *p = &amp;a;\nint **q = &amp;p;\nint b = 20;\n*q = &amp;b;\n(*p)++;\ncout &lt;&lt; a &lt;&lt; &quot; &quot; &lt;&lt; b &lt;&lt; endl;\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 10 21\nb. 11 20\nc. 11 21\nd. 10 20\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. 10 21\nUse the diagram rules.\n</code></pre>\n</details>\n<hr>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>int a = 100;\nint *p = &amp;a;\nint **q = &amp;p;\nint b = (**q)++ + 4;\ncout &lt;&lt; a &lt;&lt; &quot; &quot; &lt;&lt; b &lt;&lt; endl;\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 100 104\nb. 101 104\nc. 101 105\nd. 100 105\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. 101 104\n++ is evaluated after the statement ends. Safe assumption.\n</code></pre>\n</details>\n<hr>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>int a = 100;\nint *p = &amp;a;\nint **q = &amp;p;\nint b = (**q)++;\nint *r = *q;\n(*r)++;\ncout &lt;&lt; a &lt;&lt; &quot; &quot; &lt;&lt; b &lt;&lt; endl;\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 102 100\nb. 101 100\nc. 101 101\nd. 102 101\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. 102 100\nDraw a diagram.\n</code></pre>\n</details>\n<hr>\n<p><strong>What will be the output ?</strong></p>\n<pre><code>void increment(int **p)\n{\n    (**p)++;\n}\n\nint main()\n{\n    int num = 10;\n    int *ptr = &amp;num;\n    increment(&amp;ptr);\n    cout &lt;&lt; num &lt;&lt; endl;\n}\n\na. 10\nb. 11\nc. Error\nd. None of these\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. 11\nThe function changes the value at the address.\n</code></pre>\n</details>\n<hr>\n<h1 id=\"end-of-quiz\">End Of Quiz <a class=\"heading-anchor-permalink\" href=\"#end-of-quiz\">#</a></h1>\n",
      "id": 79
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/7._Address_Typecasting.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/7._Address_Typecasting.html",
      "content": "# 7. Address Typecasting\nCreated Tuesday 24 December 2019\n\n**Q)** Why don't we use **pointer** instead of int*, char* etc.\n**A)** We use int* and char* etc to: \n\n* Indicate the jump(or read span) which must be read form the address specified. This is the jump field in the symbol table.\n* Interpret the data, even if we know the jump. What is it, Float or Int ? Absurd. \n\n**Note**: We do have generic pointers(i.e void pointers), but they cannot be derefenced. They need to be cast a data type before dereference.\n\n**Q)** If a character pointer is assigned the address of an integer with value 65. Is this assignment(of address allowed)?\n**A)** Generally this is not valid for addresses. As the lvalue or rvalue jump(depending) on the type may give weird results or out of range behavior.\n\n* Implicit cast, this is done when we are dealing with values. Like char c = '65' or int x = 'a' etc.\n* Explicit cast, can be used redundantly in case of implicit cast. **Especially** useful when we want to assign an address of a different pointer type.\n\nchar c = 'a'\nint *x = (int*) &c;\n**Note:** when assigning an address to a void pointer, no type-casting is required.\n**Q)** Can we assign an a pointer of data_type1, a address of a diffrent type of variable?\n**A)** For integer values, most complilers store octets in the reverse order, called the Little Endian System. So 65 is stored as 65 0 0 0. \nIn the Little Endian systemW, the :\n\n1. **Last bit of the first octet is the LSB.**\n2. **First Bit of the last octet is the MSB(aka the sign bit).**\n3. The second octet(from the left in the memory) is the 2nd last octet as written on paper. Similarly for other octets, i.e in the reverse order.\n\nBig Endian stores the number as it is written on a paper(basic math), i.e MSB is the leftmost bit, LSB is the rightmost bit.\n\n* Void pointers can be assigned any address without any typecasting coz, they can are not derefernceable until they are type casted, whch is  seperate concern.\n\n\n",
      "html": "<h1 id=\"7.-address-typecasting\">7. Address Typecasting <a class=\"heading-anchor-permalink\" href=\"#7.-address-typecasting\">#</a></h1>\n<p>Created Tuesday 24 December 2019</p>\n<p><strong>Q)</strong> Why don’t we use <strong>pointer</strong> instead of int*, char* etc.\n<strong>A)</strong> We use int* and char* etc to:</p>\n<ul>\n<li>Indicate the jump(or read span) which must be read form the address specified. This is the jump field in the symbol table.</li>\n<li>Interpret the data, even if we know the jump. What is it, Float or Int ? Absurd.</li>\n</ul>\n<p><strong>Note</strong>: We do have generic pointers(i.e void pointers), but they cannot be derefenced. They need to be cast a data type before dereference.</p>\n<p><strong>Q)</strong> If a character pointer is assigned the address of an integer with value 65. Is this assignment(of address allowed)?\n<strong>A)</strong> Generally this is not valid for addresses. As the lvalue or rvalue jump(depending) on the type may give weird results or out of range behavior.</p>\n<ul>\n<li>Implicit cast, this is done when we are dealing with values. Like char c = ‘65’ or int x = ‘a’ etc.</li>\n<li>Explicit cast, can be used redundantly in case of implicit cast. <strong>Especially</strong> useful when we want to assign an address of a different pointer type.</li>\n</ul>\n<p>char c = ‘a’\nint <em>x = (int</em>) &amp;c;\n<strong>Note:</strong> when assigning an address to a void pointer, no type-casting is required.\n<strong>Q)</strong> Can we assign an a pointer of data_type1, a address of a diffrent type of variable?\n<strong>A)</strong> For integer values, most complilers store octets in the reverse order, called the Little Endian System. So 65 is stored as 65 0 0 0.\nIn the Little Endian systemW, the :</p>\n<ol>\n<li><strong>Last bit of the first octet is the LSB.</strong></li>\n<li><strong>First Bit of the last octet is the MSB(aka the sign bit).</strong></li>\n<li>The second octet(from the left in the memory) is the 2nd last octet as written on paper. Similarly for other octets, i.e in the reverse order.</li>\n</ol>\n<p>Big Endian stores the number as it is written on a paper(basic math), i.e MSB is the leftmost bit, LSB is the rightmost bit.</p>\n<ul>\n<li>Void pointers can be assigned any address without any typecasting coz, they can are not derefernceable until they are type casted, whch is  seperate concern.</li>\n</ul>\n",
      "id": 80
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/8._References_and_Pass_by_Reference.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/1._Pointers/8._References_and_Pass_by_Reference.html",
      "content": "# 8. References and Pass by Reference\nCreated Wednesday 25 December 2019\n\n\n* We want to make a variable name(an alias, not a pointer) with the address of a variable. This new variable name does not have a memory of its own. It is just an **alias** for an existing variable.\n* It is just a record in the symbol table. A record which copies the address and data type. (Data type needs to be same).\n\n**Syntax:**\n```c++\nint x = 10;\n/*declaration*/  \t\tint &y = x;\t\t // reference is not a pointer, it's an alias, so no need of assigning the address.\n/* value reassignment*/ \t\talias_1 = alias_2; //allowed, just copies data from alias_2 to alias1's variable.\n/* access/modification */\talias1++; // exactly the same as the original name . (Nothing like derefence here).\n\n/*function declaration*/\tf(int &x);\n/* passing a variable as reference*/ f(p); // interpreted as int &x = p; so no problems.\n```\n**Note:**\n\n* **References 'sources' cannot be reassigned. As they are in the symbol table.** No change can be made in the symbol table, once written.\n\n**Caution:**\nint x = 10;\nint &y; // invalid\n**You requested for an alias, but for what? Absurd/Error.** *Remember that we have to fill all fields in the symbol table and that they are unchangeable. Although **values**(i.e at memory location), can be changed.*\n\n* **Hence reference variables need to be** initialized **at the time of declaration.**\n\n**Advantages of reference variables(i.e why are they useful):**\n\n1. We don't need to make pointers for each function call where we need to make changes to the same memory, during function calls.\n2. No extra storage required. Good for memory.\n3. Code is short and clean.\n\n\n#### Normal variable and a reference are interchangeable\n```c++\nvoid f(int val)\n{\n   val++;\n}\n\nvoid g(int &val)\n{\n   val++;\n}\n\nmain()\n{\n   int a = 5;\n   int &b = a;\n\n   f(a); // OK\n   f(b) ; // OK\n\n   g(a); // OK\n   g(b); // OK\n\n   // all combinations are OK\n}\n```\n**Note:** As we can send values(by reference), we can **recieve** values as well. Called **return by reference.**\n**Caution:** *Return by reference* and *return by address* are very dangerous, as they can sometimes return reference and address of local variables, which may have gone out of scope. **It's a bad practice.**\n<https://www.bogotobogo.com/cplusplus/memoryallocation.php>\n\n\n\n\n",
      "html": "<h1 id=\"8.-references-and-pass-by-reference\">8. References and Pass by Reference <a class=\"heading-anchor-permalink\" href=\"#8.-references-and-pass-by-reference\">#</a></h1>\n<p>Created Wednesday 25 December 2019</p>\n<ul>\n<li>We want to make a variable name(an alias, not a pointer) with the address of a variable. This new variable name does not have a memory of its own. It is just an <strong>alias</strong> for an existing variable.</li>\n<li>It is just a record in the symbol table. A record which copies the address and data type. (Data type needs to be same).</li>\n</ul>\n<p><strong>Syntax:</strong></p>\n<pre><code class=\"language-c++\">int x = 10;\n/*declaration*/  \t\tint &amp;y = x;\t\t // reference is not a pointer, it's an alias, so no need of assigning the address.\n/* value reassignment*/ \t\talias_1 = alias_2; //allowed, just copies data from alias_2 to alias1's variable.\n/* access/modification */\talias1++; // exactly the same as the original name . (Nothing like derefence here).\n\n/*function declaration*/\tf(int &amp;x);\n/* passing a variable as reference*/ f(p); // interpreted as int &amp;x = p; so no problems.\n</code></pre>\n<p><strong>Note:</strong></p>\n<ul>\n<li><strong>References ‘sources’ cannot be reassigned. As they are in the symbol table.</strong> No change can be made in the symbol table, once written.</li>\n</ul>\n<p><strong>Caution:</strong>\nint x = 10;\nint &amp;y; // invalid\n<strong>You requested for an alias, but for what? Absurd/Error.</strong> <em>Remember that we have to fill all fields in the symbol table and that they are unchangeable. Although <strong>values</strong>(i.e at memory location), can be changed.</em></p>\n<ul>\n<li><strong>Hence reference variables need to be</strong> initialized <strong>at the time of declaration.</strong></li>\n</ul>\n<p><strong>Advantages of reference variables(i.e why are they useful):</strong></p>\n<ol>\n<li>We don’t need to make pointers for each function call where we need to make changes to the same memory, during function calls.</li>\n<li>No extra storage required. Good for memory.</li>\n<li>Code is short and clean.</li>\n</ol>\n<h4 id=\"normal-variable-and-a-reference-are-interchangeable\">Normal variable and a reference are interchangeable <a class=\"heading-anchor-permalink\" href=\"#normal-variable-and-a-reference-are-interchangeable\">#</a></h4>\n<pre><code class=\"language-c++\">void f(int val)\n{\n   val++;\n}\n\nvoid g(int &amp;val)\n{\n   val++;\n}\n\nmain()\n{\n   int a = 5;\n   int &amp;b = a;\n\n   f(a); // OK\n   f(b) ; // OK\n\n   g(a); // OK\n   g(b); // OK\n\n   // all combinations are OK\n}\n</code></pre>\n<p><strong>Note:</strong> As we can send values(by reference), we can <strong>recieve</strong> values as well. Called <strong>return by reference.</strong>\n<strong>Caution:</strong> <em>Return by reference</em> and <em>return by address</em> are very dangerous, as they can sometimes return reference and address of local variables, which may have gone out of scope. <strong>It’s a bad practice.</strong>\n<a href=\"https://www.bogotobogo.com/cplusplus/memoryallocation.php\">https://www.bogotobogo.com/cplusplus/memoryallocation.php</a></p>\n",
      "id": 81
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/2._Dynamic_Memory_Allocation/1._Dynamic_Allocation.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/2._Dynamic_Memory_Allocation/1._Dynamic_Allocation.html",
      "content": "# 1. Dynamic Allocation\nCreated Wednesday 25 December 2019\n\n**Q)** What is the biggest problem we face when working with arrays?\n**A)** Arrays need to have their size decided at compile time, doing ``int n; cin >> n; int a[n];`` was not allowed, until recently. As 'n' is known only at run time.\nRemember compile time and run times are actually phases which roughly specify the how(and where) of the program.\n\n\n* This type of allocation is called **static memory allocation**. i.e size must decided at compile time. The memory location is in an area of memory called **stack**.\n* Our solution to this \"fixed\" size array, is **dynamic memory allocation**. i.e size can be specified at run time. This memory location is in an area of memory called **heap**.\n* Generally heap > stack in size, it is also much more flexible. But stack is faster than heap.\n* All the declaration, are stored in the stack. Except global/static variables.\n\n\n#### new\nThe ``new`` keyword is used to access free memory from the heap. This switches the memory's tag from free to \"in use\" and returns a pointer corresponding to the requested data type. This address may be stored in a pointer for doing work on the requested memory. This pointer is stored on **stack**. **This shows that heap is not directly accessible. We always need a pointer when working with heaps.**\n\n* So total data consumption = (pointer) + (data requested).\n\n**Syntax: ***``data_type``*`` * ``*``variable_name``*``  = new ``*``data-type;``*\n\n* For arrays, it is: ``int n; cin >> n; int * arr = new int[n];``. **Note: **As ``new`` returns an address(and not an array), sizeof() will return 8. The sizeof() shows the whole array size **only** for static arrays..\n* Accessing the elements in a dynamic array is the same as that for static arrays.\n\n**note: [**new int] in and of itself is useless, coz we can't access the address, what's the use of this address then?\n**Scope** of dynamic memory: When we declare variables and arrays on stack, they automatically get deallocated, but dynamically allocated memory is not. **Manual release of memory is required.**\n**An experiment:** can be done by using an unending while loop. In case 1 an integer is declared using int x = 10. Case 2 does DMA but no deallocation. Compile the program. Open the resource manager, run the\nprogram and see the memory consumption. In case 1, there's only 4 bytes(which is not visible), and constant. But in case 2, memory starts filling, until, if you wait for a long time, the system crashes, due to continuous allocation of new 4 bytes each time. **Confidence increased, I tried it on my own, way. It's great.** Every piece of data that is declared **statically** is automatically **deallocated**, on the basis of** scope. **But** dynamic data is not cleared, unless explicitly **done, irrespective of scope**.**\n\n* Heap does get when the program ends, this is done by the OS(most often, can't say about embedded systems though). Even if this happens, what's the use if deallocation happens after program ends, we need memory when program is running. And this cannot save us from crashing, coz the program is still running and all the memory is made to \"in use\", hence the OS will not free it.\n\n**Advantages of DMA:**\n\n1. We take only the space as it is required. No more, no less.\n2. Makes it easy for us to implemenyt very efficient data\n\n**delete:**\nUsed to deallocate heap memory.\n**syntax:** delete *to_heap_pointer_name;\t* single element//\ndelete [] *to_heap_pointer_name;\t\t*e.g int *x = new int; delete x;// takes care of memory allocated.\n**note:** delete deallocates the heap memory, but the memory for the pointer(which is in the stack) is **not** deallocated. **Don't worry about it,** as stack memory is taken care of by the compiler(block scoping).\n[How does delete[] know the length of the array?](https://stackoverflow.com/a/197699/11392807)\n**But **do remember deallocate the heap memory, as it won't be deallocated on it's own.\n\n* This is the most common reasons apps crashed in old iOS apps, as Apple fixed limit for heap allocations for all apps.\n* The error that occurs when the programmer doesn't free the heap memory is called a memory leak. [leak as seen from the OS's perspective, i.e the free memory pool's size has been diminished, until the program is running].\n\n\nHow heap memory works: <https://www.bogotobogo.com/cplusplus/assembly.php#heap_memory>\nHow stack memory works: <https://www.bogotobogo.com/cplusplus/assembly.php#stacks>\n\n",
      "html": "<h1 id=\"1.-dynamic-allocation\">1. Dynamic Allocation <a class=\"heading-anchor-permalink\" href=\"#1.-dynamic-allocation\">#</a></h1>\n<p>Created Wednesday 25 December 2019</p>\n<p><strong>Q)</strong> What is the biggest problem we face when working with arrays?\n<strong>A)</strong> Arrays need to have their size decided at compile time, doing <code>int n; cin &gt;&gt; n; int a[n];</code> was not allowed, until recently. As ‘n’ is known only at run time.\nRemember compile time and run times are actually phases which roughly specify the how(and where) of the program.</p>\n<ul>\n<li>This type of allocation is called <strong>static memory allocation</strong>. i.e size must decided at compile time. The memory location is in an area of memory called <strong>stack</strong>.</li>\n<li>Our solution to this “fixed” size array, is <strong>dynamic memory allocation</strong>. i.e size can be specified at run time. This memory location is in an area of memory called <strong>heap</strong>.</li>\n<li>Generally heap &gt; stack in size, it is also much more flexible. But stack is faster than heap.</li>\n<li>All the declaration, are stored in the stack. Except global/static variables.</li>\n</ul>\n<h4 id=\"new\">new <a class=\"heading-anchor-permalink\" href=\"#new\">#</a></h4>\n<p>The <code>new</code> keyword is used to access free memory from the heap. This switches the memory’s tag from free to “in use” and returns a pointer corresponding to the requested data type. This address may be stored in a pointer for doing work on the requested memory. This pointer is stored on <strong>stack</strong>. <strong>This shows that heap is not directly accessible. We always need a pointer when working with heaps.</strong></p>\n<ul>\n<li>So total data consumption = (pointer) + (data requested).</li>\n</ul>\n<p>**Syntax: <em><em><em><code>data_type</code></em><code>*</code></em><code>variable_name</code></em><code>= new</code><em><code>data-type;</code></em></p>\n<ul>\n<li>For arrays, it is: <code>int n; cin &gt;&gt; n; int * arr = new int[n];</code>. **Note: **As <code>new</code> returns an address(and not an array), sizeof() will return 8. The sizeof() shows the whole array size <strong>only</strong> for static arrays…</li>\n<li>Accessing the elements in a dynamic array is the same as that for static arrays.</li>\n</ul>\n<p><strong>note: [<strong>new int] in and of itself is useless, coz we can’t access the address, what’s the use of this address then?\n<strong>Scope</strong> of dynamic memory: When we declare variables and arrays on stack, they automatically get deallocated, but dynamically allocated memory is not. <strong>Manual release of memory is required.</strong>\n<strong>An experiment:</strong> can be done by using an unending while loop. In case 1 an integer is declared using int x = 10. Case 2 does DMA but no deallocation. Compile the program. Open the resource manager, run the\nprogram and see the memory consumption. In case 1, there’s only 4 bytes(which is not visible), and constant. But in case 2, memory starts filling, until, if you wait for a long time, the system crashes, due to continuous allocation of new 4 bytes each time. <strong>Confidence increased, I tried it on my own, way. It’s great.</strong> Every piece of data that is declared <strong>statically</strong> is automatically <strong>deallocated</strong>, on the basis of</strong> scope. <strong>But</strong> dynamic data is not cleared, unless explicitly <strong>done, irrespective of scope</strong>.</strong></p>\n<ul>\n<li>Heap does get when the program ends, this is done by the OS(most often, can’t say about embedded systems though). Even if this happens, what’s the use if deallocation happens after program ends, we need memory when program is running. And this cannot save us from crashing, coz the program is still running and all the memory is made to “in use”, hence the OS will not free it.</li>\n</ul>\n<p><strong>Advantages of DMA:</strong></p>\n<ol>\n<li>We take only the space as it is required. No more, no less.</li>\n<li>Makes it easy for us to implemenyt very efficient data</li>\n</ol>\n<p><strong>delete:</strong>\nUsed to deallocate heap memory.\n<strong>syntax:</strong> delete *to_heap_pointer_name;\t* single element//\ndelete [] *to_heap_pointer_name;\t\t*e.g int *x = new int; delete x;// takes care of memory allocated.\n<strong>note:</strong> delete deallocates the heap memory, but the memory for the pointer(which is in the stack) is <strong>not</strong> deallocated. <strong>Don’t worry about it,</strong> as stack memory is taken care of by the compiler(block scoping).\n<a href=\"https://stackoverflow.com/a/197699/11392807\">How does delete[] know the length of the array?</a>\n**But **do remember deallocate the heap memory, as it won’t be deallocated on it’s own.</p>\n<ul>\n<li>This is the most common reasons apps crashed in old iOS apps, as Apple fixed limit for heap allocations for all apps.</li>\n<li>The error that occurs when the programmer doesn’t free the heap memory is called a memory leak. [leak as seen from the OS’s perspective, i.e the free memory pool’s size has been diminished, until the program is running].</li>\n</ul>\n<p>How heap memory works: <a href=\"https://www.bogotobogo.com/cplusplus/assembly.php#heap_memory\">https://www.bogotobogo.com/cplusplus/assembly.php#heap_memory</a>\nHow stack memory works: <a href=\"https://www.bogotobogo.com/cplusplus/assembly.php#stacks\">https://www.bogotobogo.com/cplusplus/assembly.php#stacks</a></p>\n",
      "id": 82
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/2._Dynamic_Memory_Allocation/2._Dynamic_Memory_Allocation_of_2D_arrays.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/2._Dynamic_Memory_Allocation/2._Dynamic_Memory_Allocation_of_2D_arrays.html",
      "content": "# 2. Dynamic Memory Allocation of 2D arrays\nCreated Wednesday 25 December 2019\n\n\n* To create a 2D array in heap, ``new int[rows][columns]``, unfortunately, does not work.\n* We have to create a pointer to a pointer array, where each pointer(element of array) is the start(head) of 10 elements. We can choose column major or row major. Let's use **row-major** here.\n\n**How to do it:**\n```c++\nint** p1  = new int*[10];\t\t//make the array of pointers\nfor(int i=0; i<10; i++)\n\tp1[i] = new int[10];\t\t//make the array for each pointer.\n// p1[10][10] is created.\n```\n\n* Accessing is just like 2D array, **``arr[i][j]``**`` = (arr[i])[j] = (*(arr+i))[j] = *(*(arr+i) +j)``. Explanation: [] has an L → R associativity, so first the 'i' is used to get the head_pointer of the 'i'th array in the array of pointers, and then this head_pointer is used to get the 'j'th element in the *data_type* array.\n* Observations about dynamic arrays using ***data_type*. It's not necessary that we make all the 'rows' of the same size. We can make them of different sizes too, but that wouldn't be a 2D array then.\n* **How to free:**\n\t* If we delete arr directly, we'll lose all the pointers, and the arrays in it. It'll be a foolish mistake. Only the pointer to arrays will be deallocated, which occupy very little space as compared to the actual array elements.\n\nSo, we must first perform deallocation of the array corresponding to each *pointer. Then delete the **pointer.** Cleaned Successfully.\n**How to do it:**\nfor(int i=0; i<10; i++)\ndelete [] p1[i];\t// clean each array\ndelete [] p1;\t// clean the array of pointers\nStack vs Heap: <https://www.geeksforgeeks.org/stack-vs-heap-memory-allocation/>\n**We have a lot of power now. We can do whatever we want.** We can make data structures of all kinds using our programming language skills.\n\n* delete NULL is just ignored.\n\n\n",
      "html": "<h1 id=\"2.-dynamic-memory-allocation-of-2d-arrays\">2. Dynamic Memory Allocation of 2D arrays <a class=\"heading-anchor-permalink\" href=\"#2.-dynamic-memory-allocation-of-2d-arrays\">#</a></h1>\n<p>Created Wednesday 25 December 2019</p>\n<ul>\n<li>To create a 2D array in heap, <code>new int[rows][columns]</code>, unfortunately, does not work.</li>\n<li>We have to create a pointer to a pointer array, where each pointer(element of array) is the start(head) of 10 elements. We can choose column major or row major. Let’s use <strong>row-major</strong> here.</li>\n</ul>\n<p><strong>How to do it:</strong></p>\n<pre><code class=\"language-c++\">int** p1  = new int*[10];\t\t//make the array of pointers\nfor(int i=0; i&lt;10; i++)\n\tp1[i] = new int[10];\t\t//make the array for each pointer.\n// p1[10][10] is created.\n</code></pre>\n<ul>\n<li>Accessing is just like 2D array, <strong><code>arr[i][j]</code></strong><code>= (arr[i])[j] = (*(arr+i))[j] = *(*(arr+i) +j)</code>. Explanation: [] has an L → R associativity, so first the ‘i’ is used to get the head_pointer of the 'i’th array in the array of pointers, and then this head_pointer is used to get the 'j’th element in the <em>data_type</em> array.</li>\n<li>Observations about dynamic arrays using **<em>data_type</em>. It’s not necessary that we make all the ‘rows’ of the same size. We can make them of different sizes too, but that wouldn’t be a 2D array then.</li>\n<li><strong>How to free:</strong>\n<ul>\n<li>If we delete arr directly, we’ll lose all the pointers, and the arrays in it. It’ll be a foolish mistake. Only the pointer to arrays will be deallocated, which occupy very little space as compared to the actual array elements.</li>\n</ul>\n</li>\n</ul>\n<p>So, we must first perform deallocation of the array corresponding to each *pointer. Then delete the <strong>pointer.</strong> Cleaned Successfully.\n<strong>How to do it:</strong>\nfor(int i=0; i&lt;10; i++)\ndelete [] p1[i];\t// clean each array\ndelete [] p1;\t// clean the array of pointers\nStack vs Heap: <a href=\"https://www.geeksforgeeks.org/stack-vs-heap-memory-allocation/\">https://www.geeksforgeeks.org/stack-vs-heap-memory-allocation/</a>\n<strong>We have a lot of power now. We can do whatever we want.</strong> We can make data structures of all kinds using our programming language skills.</p>\n<ul>\n<li>delete NULL is just ignored.</li>\n</ul>\n",
      "id": 83
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/2._Dynamic_Memory_Allocation/questionnaire1.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/1._Memory_and_Pointers/2._Dynamic_Memory_Allocation/questionnaire1.html",
      "content": "# Lecture 1: Address Typecasting\n\n**Void pointer can point to which type of objects ?**\n\n**Options**\n\n    a. int\n    b. double\n    c. float\n    d. All\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    d. All\n    void can point to any type, that too without a type-cast.\n\n</details>\n\n---\n\n**What is the output ?**\n\n    int main()\n    {\n        int d = 65;\n        int i = d;\n        char ch = i;\n        cout << ch << endl;\n    }\n\n**Answer**\n\n    Type here: ____\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    A\n    As integers are stored as per Little Endian System, so 65 is on the first 8 bits. Which are read by the character pointer.\n\n</details>\n\n---\n\n**What is the output ?**\n\n    #include <iostream>\n    using namespace std;\n\n    void updateValue(int *p)\n    {\n        *p = 610 % 255;\n    }\n\n    int main()\n    {\n        char ch = 'A';\n        updateValue((int*)&ch);\n        cout << ch;\n    }\n\n**Answer**\n\n    Type here: ____\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    d\n    100 is d for ASCII. Clue: 97 - 96 = A.\n\n</details>\n\n---\n\n# Lecture 2: Reference and Pass by Reference\n\n**What is the correct syntax of declaring and defining a reference?**\n\n**Options**\n\n    a. int a = 10; int &b; b = a;\n    b. int a = 10; int &b = a;\n    c. int a = 10; int b = &a;\n    d. int a = 10; int &b = &a;\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. int a = 10; int &b = a;\n    Reference variables need a record from the symbol table w.r.t a name. And this has to be done in one go. Hence they need to be initialized with the name of an already existing value.\n\n</details>\n\n---\n\n**What is the output ?**\n\n    #include <iostream>\n    using namespace std;\n\n    void func(int p)\n    {\n        cout << p << \" \";\n    }\n\n    int main()\n    {\n        int i = 10;\n        int &p = i;\n        func(p++);\n        cout << i;\n    }\n\n**Answer**\n\n    Type here: ____\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    10 11\n    As the increment is a postfix, hence the code func(p) will be evaluated.\n    Then p++ is evaluated. So in the next line(of the main()), 11 will be printed.\n\n</details>\n\n---\n\n**What is the output ?**\n\n    #include <iostream>\n    using namespace std;\n\n    void func(int i, int& j, int p)\n    {\n        i++;\n        j++;\n        p++;\n    }\n\n    int main()\n    {\n        int i = 10;\n        int j = 6;\n        int &p = i;\n        func(i, j, p);\n        cout << i << \" \" << j << \" \" << p;\n    }\n\n**Answer**\n\n    Type here: ____\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    10 7 10\n    As i and p are passed by value, no changes get reflected on the actual(i. e main()) memory location. But as j is passed by reference, so a change is made at the actual memory.\n\n</details>\n\n---\n\n# Lecture 3: Dynamic Allocation\n\n**What is the output ?**\n\n    In CPP, dynamic memory allocation is done using ____ operator.\n\n**Options**\n\n    a. calloc()\n    b. malloc\n    c. allocate\n    d. new\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    d. new\n    new is used in C++.\n    void *malloc(n*sizeof()), void *calloc(n, sizeof()), void *realloc(ptr, n*sizeof()), void free()\n\n</details>\n\n---\n\n**How will you free the memory allocated by following program ?**\n\n    #include <iostream>\n    using namespace std;\n\n    int main()\n    {\n        int *a = new int;\n    }\n\n**Options**\n\n    a. free a;\n    b. delete *a;\n    c. delete a;\n    d. new a;\n\n<details> <summary><strong>Correct Answer</strong></summary>\n    c. delete a;\n</details>\n\n---\n\n**How will you free the memory allocated by following program ?**\n\n    Correct statement for creating an integer array of size 5, dynamically -\n\n**Options**\n\n    a. int *arr[] = new int[5];\n    b. int *arr = new int[5];\n    c. int arr = new int[5];\n    d. int *arr[5] = new int;\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. int *arr = new int[5];\n\n</details>\n\n---\n\n**Correct statement for deallocating the array is ?**\n\n    Correct statement for creating an integer array of size 5, dynamically -\n\n**Options**\n\n    a. delete [] arr;\n    b. delete arr;\n    c. delete *arr;\n    d. delete [] *arr;\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. delete [] arr;\n\n</details>\n\n---\n\n**On deleting a dynamic memory, if the pointer value is not modified, then the pointer points to ?**\n\n    Correct statement for creating an integer array of size 5, dynamically -\n\n**Options**\n\n    a. NULL\n    b. Other dynamically allocated memory\n    c. The same deleted memory location\n    d. It points back to location it was initialized with.\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. delete [] arr;\n\n</details>\n\n---\n\n# Lecture 4: Dynamic Allocation for 2D arrays\n\n**What is the output ?**\n\n    In CPP, dynamic memory allocation is done using ____ operator.\n\n**Options**\n\n    a. calloc()\n    b. malloc\n    c. allocate\n    d. new\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    d. new\n    new is used in C++.\n    void *malloc(n*sizeof()), void *calloc(n, sizeof()), void *realloc(ptr, n*sizeof()), void free()\n\n</details>\n\n---\n\n**How will you free the memory allocated by following program ?**\n\n    #include <iostream>\n    using namespace std;\n\n    int main()\n    {\n        int *a = new int;\n    }\n\n**Options**\n\n    a. free a;\n    b. delete* a;\n    c. delete a;\n    d. free a;\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. delete a;\n    We use the delete keyword, followed to by the to_heap_pointer_name.\n\n</details>\n\n---\n\n**Correct statement for creating an integer array of size 5, dynamically ?**\n\n**Options**\n\n    a. int *arr[] = new int[5];\n    b. int *arr = new int[5];\n    c. int arr = new int[5];\n    d. int *arr[5] = new int;\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. int *arr = new int[5];\n    Basic syntax.\n\n</details>\n\n---\n\n**Correct statement for deallocating the array is:**\n\n**Options**\n\n    a. delete [] arr;\n    b. delete arr;\n    c. delete *arr;\n    d. delete [] *arr;\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. delete [] arr;\n    Basic syntax.\n\n</details>\n\n---\n\n**On deleting a dynamic memory, if the pointer value is not modified, then the pointer points to?**\n\n**Options**\n\n    a. NULL\n    b. Other dynamically allocated memory\n    c. The same deleted memory location\n    d. It points back to location it was initialized with\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. The same deleted memory location\n    The memory is saved even if it goes out of scope.\n\n</details>\n\n---\n\n**How to Dynamically create a Two Dimensional Array in C++?**\n\n**Options**\n\n    a. int *twoDArray = new int[10][10];\n    b. int **twoDArray = new int*[10];\n    c. int **twoDArray = new int[10][10];\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. int **twoDArray = new int*[10];\n    Just create an array of pointers, each of which points to an array of data_type, the rows.\n\n</details>\n\n---\n\n**Can we create Jagged Arrays in C++ ?**\n\n**Options**\n\n    a. Yes\n    b. No\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. Yes\n    Yes, we have no obligation to make all the arrays of the same size. Since there's no part in the pointer declaration that indicates any kind of number, so sizeof() field is just for the pointer(in contrast to statically declared array).\n\n</details>\n\n---\n\n**Given the following CPP Program. Select the CORRECT Syntax of deleting this 2D array? Check all that apply?**\n\n    #include <iostream>\n    using namespace std;\n\n    int main()\n    {\n        int **twoDArray = new int*[10];\n        for(int i = 0; i < 10; i++)\n            *(twoDArray + i) = new int[10];\n    }\n\n**Options**\n\n    a. delete twoDArray [][];\n\n    b.  for(int i = 0; i < 10; i++)\n            delete twoDArray[i];\n\n    c.  for(int i = 0; i < 10; i++)\n            delete [] twoDArray[i];\n\n    d.  for(int i = 0; i < 10; i++)\n            delete twoDArray[i][];\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. Only C\n    Basic syntax\n\n</details>\n\n---\n\n# End Of Quiz\n",
      "html": "<h1 id=\"lecture-1%3A-address-typecasting\">Lecture 1: Address Typecasting <a class=\"heading-anchor-permalink\" href=\"#lecture-1%3A-address-typecasting\">#</a></h1>\n<p><strong>Void pointer can point to which type of objects ?</strong></p>\n<p><strong>Options</strong></p>\n<pre><code>a. int\nb. double\nc. float\nd. All\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>d. All\nvoid can point to any type, that too without a type-cast.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output ?</strong></p>\n<pre><code>int main()\n{\n    int d = 65;\n    int i = d;\n    char ch = i;\n    cout &lt;&lt; ch &lt;&lt; endl;\n}\n</code></pre>\n<p><strong>Answer</strong></p>\n<pre><code>Type here: ____\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>A\nAs integers are stored as per Little Endian System, so 65 is on the first 8 bits. Which are read by the character pointer.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output ?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid updateValue(int *p)\n{\n    *p = 610 % 255;\n}\n\nint main()\n{\n    char ch = 'A';\n    updateValue((int*)&amp;ch);\n    cout &lt;&lt; ch;\n}\n</code></pre>\n<p><strong>Answer</strong></p>\n<pre><code>Type here: ____\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>d\n100 is d for ASCII. Clue: 97 - 96 = A.\n</code></pre>\n</details>\n<hr>\n<h1 id=\"lecture-2%3A-reference-and-pass-by-reference\">Lecture 2: Reference and Pass by Reference <a class=\"heading-anchor-permalink\" href=\"#lecture-2%3A-reference-and-pass-by-reference\">#</a></h1>\n<p><strong>What is the correct syntax of declaring and defining a reference?</strong></p>\n<p><strong>Options</strong></p>\n<pre><code>a. int a = 10; int &amp;b; b = a;\nb. int a = 10; int &amp;b = a;\nc. int a = 10; int b = &amp;a;\nd. int a = 10; int &amp;b = &amp;a;\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. int a = 10; int &amp;b = a;\nReference variables need a record from the symbol table w.r.t a name. And this has to be done in one go. Hence they need to be initialized with the name of an already existing value.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output ?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid func(int p)\n{\n    cout &lt;&lt; p &lt;&lt; &quot; &quot;;\n}\n\nint main()\n{\n    int i = 10;\n    int &amp;p = i;\n    func(p++);\n    cout &lt;&lt; i;\n}\n</code></pre>\n<p><strong>Answer</strong></p>\n<pre><code>Type here: ____\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>10 11\nAs the increment is a postfix, hence the code func(p) will be evaluated.\nThen p++ is evaluated. So in the next line(of the main()), 11 will be printed.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output ?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid func(int i, int&amp; j, int p)\n{\n    i++;\n    j++;\n    p++;\n}\n\nint main()\n{\n    int i = 10;\n    int j = 6;\n    int &amp;p = i;\n    func(i, j, p);\n    cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; &quot; &quot; &lt;&lt; p;\n}\n</code></pre>\n<p><strong>Answer</strong></p>\n<pre><code>Type here: ____\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>10 7 10\nAs i and p are passed by value, no changes get reflected on the actual(i. e main()) memory location. But as j is passed by reference, so a change is made at the actual memory.\n</code></pre>\n</details>\n<hr>\n<h1 id=\"lecture-3%3A-dynamic-allocation\">Lecture 3: Dynamic Allocation <a class=\"heading-anchor-permalink\" href=\"#lecture-3%3A-dynamic-allocation\">#</a></h1>\n<p><strong>What is the output ?</strong></p>\n<pre><code>In CPP, dynamic memory allocation is done using ____ operator.\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. calloc()\nb. malloc\nc. allocate\nd. new\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>d. new\nnew is used in C++.\nvoid *malloc(n*sizeof()), void *calloc(n, sizeof()), void *realloc(ptr, n*sizeof()), void free()\n</code></pre>\n</details>\n<hr>\n<p><strong>How will you free the memory allocated by following program ?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int *a = new int;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. free a;\nb. delete *a;\nc. delete a;\nd. new a;\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n    c. delete a;\n</details>\n<hr>\n<p><strong>How will you free the memory allocated by following program ?</strong></p>\n<pre><code>Correct statement for creating an integer array of size 5, dynamically -\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. int *arr[] = new int[5];\nb. int *arr = new int[5];\nc. int arr = new int[5];\nd. int *arr[5] = new int;\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. int *arr = new int[5];\n</code></pre>\n</details>\n<hr>\n<p><strong>Correct statement for deallocating the array is ?</strong></p>\n<pre><code>Correct statement for creating an integer array of size 5, dynamically -\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. delete [] arr;\nb. delete arr;\nc. delete *arr;\nd. delete [] *arr;\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. delete [] arr;\n</code></pre>\n</details>\n<hr>\n<p><strong>On deleting a dynamic memory, if the pointer value is not modified, then the pointer points to ?</strong></p>\n<pre><code>Correct statement for creating an integer array of size 5, dynamically -\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. NULL\nb. Other dynamically allocated memory\nc. The same deleted memory location\nd. It points back to location it was initialized with.\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. delete [] arr;\n</code></pre>\n</details>\n<hr>\n<h1 id=\"lecture-4%3A-dynamic-allocation-for-2d-arrays\">Lecture 4: Dynamic Allocation for 2D arrays <a class=\"heading-anchor-permalink\" href=\"#lecture-4%3A-dynamic-allocation-for-2d-arrays\">#</a></h1>\n<p><strong>What is the output ?</strong></p>\n<pre><code>In CPP, dynamic memory allocation is done using ____ operator.\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. calloc()\nb. malloc\nc. allocate\nd. new\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>d. new\nnew is used in C++.\nvoid *malloc(n*sizeof()), void *calloc(n, sizeof()), void *realloc(ptr, n*sizeof()), void free()\n</code></pre>\n</details>\n<hr>\n<p><strong>How will you free the memory allocated by following program ?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int *a = new int;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. free a;\nb. delete* a;\nc. delete a;\nd. free a;\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. delete a;\nWe use the delete keyword, followed to by the to_heap_pointer_name.\n</code></pre>\n</details>\n<hr>\n<p><strong>Correct statement for creating an integer array of size 5, dynamically ?</strong></p>\n<p><strong>Options</strong></p>\n<pre><code>a. int *arr[] = new int[5];\nb. int *arr = new int[5];\nc. int arr = new int[5];\nd. int *arr[5] = new int;\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. int *arr = new int[5];\nBasic syntax.\n</code></pre>\n</details>\n<hr>\n<p><strong>Correct statement for deallocating the array is:</strong></p>\n<p><strong>Options</strong></p>\n<pre><code>a. delete [] arr;\nb. delete arr;\nc. delete *arr;\nd. delete [] *arr;\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. delete [] arr;\nBasic syntax.\n</code></pre>\n</details>\n<hr>\n<p><strong>On deleting a dynamic memory, if the pointer value is not modified, then the pointer points to?</strong></p>\n<p><strong>Options</strong></p>\n<pre><code>a. NULL\nb. Other dynamically allocated memory\nc. The same deleted memory location\nd. It points back to location it was initialized with\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. The same deleted memory location\nThe memory is saved even if it goes out of scope.\n</code></pre>\n</details>\n<hr>\n<p><strong>How to Dynamically create a Two Dimensional Array in C++?</strong></p>\n<p><strong>Options</strong></p>\n<pre><code>a. int *twoDArray = new int[10][10];\nb. int **twoDArray = new int*[10];\nc. int **twoDArray = new int[10][10];\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. int **twoDArray = new int*[10];\nJust create an array of pointers, each of which points to an array of data_type, the rows.\n</code></pre>\n</details>\n<hr>\n<p><strong>Can we create Jagged Arrays in C++ ?</strong></p>\n<p><strong>Options</strong></p>\n<pre><code>a. Yes\nb. No\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. Yes\nYes, we have no obligation to make all the arrays of the same size. Since there's no part in the pointer declaration that indicates any kind of number, so sizeof() field is just for the pointer(in contrast to statically declared array).\n</code></pre>\n</details>\n<hr>\n<p><strong>Given the following CPP Program. Select the CORRECT Syntax of deleting this 2D array? Check all that apply?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int **twoDArray = new int*[10];\n    for(int i = 0; i &lt; 10; i++)\n        *(twoDArray + i) = new int[10];\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. delete twoDArray [][];\n\nb.  for(int i = 0; i &lt; 10; i++)\n        delete twoDArray[i];\n\nc.  for(int i = 0; i &lt; 10; i++)\n        delete [] twoDArray[i];\n\nd.  for(int i = 0; i &lt; 10; i++)\n        delete twoDArray[i][];\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. Only C\nBasic syntax\n</code></pre>\n</details>\n<hr>\n<h1 id=\"end-of-quiz\">End Of Quiz <a class=\"heading-anchor-permalink\" href=\"#end-of-quiz\">#</a></h1>\n",
      "id": 84
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/0_index.html",
      "content": "# 2. Time and Space Analysis\nCreated Sunday 05 January 2020\n\n[Exercise Questions](2._Time_and_Space_Analysis/exerciseques.md)\n[Excellent and pragmatic notes on time complexity](2._Time_and_Space_Analysis/TimeComplexity_Excellent_Notes.pdf)\n\n",
      "html": "<h1 id=\"2.-time-and-space-analysis\">2. Time and Space Analysis <a class=\"heading-anchor-permalink\" href=\"#2.-time-and-space-analysis\">#</a></h1>\n<p>Created Sunday 05 January 2020</p>\n<p><a href=\"2._Time_and_Space_Analysis/exerciseques.html\">Exercise Questions</a>\n<a href=\"2._Time_and_Space_Analysis/TimeComplexity_Excellent_Notes.pdf\">Excellent and pragmatic notes on time complexity</a></p>\n",
      "id": 85
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/1._Order_Complexity_Analysis/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/1._Order_Complexity_Analysis/0_index.html",
      "content": "# 1. Order Complexity Analysis\nCreated Sunday 05 January 2020\n\nThe idea is to quantify the quality of the solution, in terms of time(steps) and space(memory).\n\n1. Time -  This is very very important.\n\n\n* this is very important from a commercial perspective. \n* This is the primary reason why we are studying different algorithms for the same problem.\n* The user can buy hardware but he can't afford a slow system. \n\nScenario: \n\n1. **Experimental Analysis**: For a given algo the **simplest **method is to note the running time for input size 1, 10, 100, 1000 etc. Plot the graph and we can figure out the expression for time for a given n. F(n) = an + b (say). Or some other function.\n\n\t\n**Confidence Boost: **Ankush has done the same thing which I did in semester IV. He used time(0). **Yeah!!!!!!!!!!!!!!!!!!!!**\n\t\n For 0.1 million, Merge sort ~ 0.15 seconds\nSelection sort ~ ( Hrs) 2400 seconds (Investment in algos is worth it)\n[Comparing Time values](1._Order_Complexity_Analysis/Selection_002.png)\n\n* Issues with experimental analysis:\n\t1. Time is not exactly the same for the same input. This is because of the distribution of RAM, processes running. Too much dependency on the machien, resources.\n\t2. We need to be sure of the test case's nature, i.e the input should not be favourable to any of the algorithm. This is **very difficult**. \n\t3. We need to **code** each solution, this is very **painful**. Stupid way to do this. Not intelligent at all.\n\t4. Very very Time consuming, we would have to wait for all algos to finish, and if they do. Also small inputs don't have much difference, hence they cannot be used anyway.\n\n**Hence, we won't be doing this.**\n\n2. Theoretical analysis**(This is a gold mine)**:\n\nIn this, we don't need to take into account, the computer, or resources etc. Our **pseudocode/algorithm** is enough to find the time complexity.\n\t\t\nThis makes sense, as we think of the solution, then why to use experimentation to calculate time. This is one important thing we can do, for **algorithms, at least**.\n\t\t\n\n* We need to learn Asymptotic notation for this.\n\n**Important Note**: Suppose some algorithm takes 5 n^2^, is this accurate in seconds. No, but it is the steps(i.e no. of unit operations) that we will be doing. So, machine dependency can be ignored altogether.\n**Confidence Boost: I thought the exact same, this is the best feeling.**\n\t\nFor a function f(n). Big Oh is a way to give an upper bound.(May or may not be worst case).\ng(n) is O(f(n)), if g(n) <= k * f(n) for large values and a positive k.\nIn Big Oh notation, we write:\n\n1. Number of unit operations.\n2. Only highest power term matters.\n3. We don't care about the coefficients.\n\n\nQ) Find largest element in an array.\nA) Can be done in single scan. We do (k constant) operations for each number.  So k*n.This is theta(n).  Hence it is also O(n).\n\n**Things like initialization, etc is constant, so it is ignored.**\n\nQ) Bubble sort for input size n.\nA) Suppose we swap every time.\n sigma(n-i) i=1 to n -> O(n^2^).\n\n*****\n\n\n* Remember, if multiple variables are present, we cannot equalize them. Because different things have different bounds.\n* If multiple things are involved, keep the parameters differnt. Equalizing paints a false picture.\n* In Big Oh notation, **only** constants and **dormant **terms are discarded, nothing else.\n\n\n\n\n\n\n",
      "html": "<h1 id=\"1.-order-complexity-analysis\">1. Order Complexity Analysis <a class=\"heading-anchor-permalink\" href=\"#1.-order-complexity-analysis\">#</a></h1>\n<p>Created Sunday 05 January 2020</p>\n<p>The idea is to quantify the quality of the solution, in terms of time(steps) and space(memory).</p>\n<ol>\n<li>Time -  This is very very important.</li>\n</ol>\n<ul>\n<li>this is very important from a commercial perspective.</li>\n<li>This is the primary reason why we are studying different algorithms for the same problem.</li>\n<li>The user can buy hardware but he can’t afford a slow system.</li>\n</ul>\n<p>Scenario:</p>\n<ol>\n<li><strong>Experimental Analysis</strong>: For a given algo the **simplest **method is to note the running time for input size 1, 10, 100, 1000 etc. Plot the graph and we can figure out the expression for time for a given n. F(n) = an + b (say). Or some other function.</li>\n</ol>\n<p>**Confidence Boost: **Ankush has done the same thing which I did in semester IV. He used time(0). <strong>Yeah!!!</strong></p>\n<p>For 0.1 million, Merge sort ~ 0.15 seconds\nSelection sort ~ ( Hrs) 2400 seconds (Investment in algos is worth it)\n<a href=\"1._Order_Complexity_Analysis/Selection_002.png\">Comparing Time values</a></p>\n<ul>\n<li>Issues with experimental analysis:\n<ol>\n<li>Time is not exactly the same for the same input. This is because of the distribution of RAM, processes running. Too much dependency on the machien, resources.</li>\n<li>We need to be sure of the test case’s nature, i.e the input should not be favourable to any of the algorithm. This is <strong>very difficult</strong>.</li>\n<li>We need to <strong>code</strong> each solution, this is very <strong>painful</strong>. Stupid way to do this. Not intelligent at all.</li>\n<li>Very very Time consuming, we would have to wait for all algos to finish, and if they do. Also small inputs don’t have much difference, hence they cannot be used anyway.</li>\n</ol>\n</li>\n</ul>\n<p><strong>Hence, we won’t be doing this.</strong></p>\n<ol start=\"2\">\n<li>Theoretical analysis**(This is a gold mine)**:</li>\n</ol>\n<p>In this, we don’t need to take into account, the computer, or resources etc. Our <strong>pseudocode/algorithm</strong> is enough to find the time complexity.</p>\n<p>This makes sense, as we think of the solution, then why to use experimentation to calculate time. This is one important thing we can do, for <strong>algorithms, at least</strong>.</p>\n<ul>\n<li>We need to learn Asymptotic notation for this.</li>\n</ul>\n<p><strong>Important Note</strong>: Suppose some algorithm takes 5 n^2^, is this accurate in seconds. No, but it is the steps(i.e no. of unit operations) that we will be doing. So, machine dependency can be ignored altogether.\n<strong>Confidence Boost: I thought the exact same, this is the best feeling.</strong></p>\n<p>For a function f(n). Big Oh is a way to give an upper bound.(May or may not be worst case).\ng(n) is O(f(n)), if g(n) &lt;= k * f(n) for large values and a positive k.\nIn Big Oh notation, we write:</p>\n<ol>\n<li>Number of unit operations.</li>\n<li>Only highest power term matters.</li>\n<li>We don’t care about the coefficients.</li>\n</ol>\n<p>Q) Find largest element in an array.\nA) Can be done in single scan. We do (k constant) operations for each number.  So k*n.This is theta(n).  Hence it is also O(n).</p>\n<p><strong>Things like initialization, etc is constant, so it is ignored.</strong></p>\n<p>Q) Bubble sort for input size n.\nA) Suppose we swap every time.\nsigma(n-i) i=1 to n -&gt; O(n^2^).</p>\n<hr>\n<ul>\n<li>Remember, if multiple variables are present, we cannot equalize them. Because different things have different bounds.</li>\n<li>If multiple things are involved, keep the parameters differnt. Equalizing paints a false picture.</li>\n<li>In Big Oh notation, <strong>only</strong> constants and **dormant **terms are discarded, nothing else.</li>\n</ul>\n",
      "id": 86
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/2._Linear_Search_Time_Complexity.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/2._Linear_Search_Time_Complexity.html",
      "content": "# 2. Linear Search Time Complexity\nCreated Sunday 05 January 2020\n\nFor linear search we have 3 cases:\n\n1. Best case - constant. Key matches the first element.\n2. Average case - something in between.\n3. Worst case - Not present in the array or present at the last place. Time O(n). \n\n\n* Worst case is what we are interested in - so O(n) is can be called \"Time Complexity of the Linear search\".\n\n\n",
      "html": "<h1 id=\"2.-linear-search-time-complexity\">2. Linear Search Time Complexity <a class=\"heading-anchor-permalink\" href=\"#2.-linear-search-time-complexity\">#</a></h1>\n<p>Created Sunday 05 January 2020</p>\n<p>For linear search we have 3 cases:</p>\n<ol>\n<li>Best case - constant. Key matches the first element.</li>\n<li>Average case - something in between.</li>\n<li>Worst case - Not present in the array or present at the last place. Time O(n).</li>\n</ol>\n<ul>\n<li>Worst case is what we are interested in - so O(n) is can be called “Time Complexity of the Linear search”.</li>\n</ul>\n",
      "id": 87
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/3._Insertion_Sort.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/3._Insertion_Sort.html",
      "content": "# 3. Insertion Sort\nCreated Sunday 05 January 2020\n\n\n* Let the left part be sorted. Initially of length 1.\n* Insert the first array of the unsorted side to the appropriate position(using shifting, i.e adjacent swapping), this takes O(size of sorted), in the worst case.\n* Move the divider by 1.\n\nHence worst case time complexity is 1 + 2 + ... + n = O(n^2^).\n\n\n* Best case scenario for Insertion sort: When array is already sorted, each element is already at the sorted position. No swapping at all. All we do is checking n times.\n\n**Best case: O(n) - because it is naturally adaptive.**\n**Worst case: O(n**^2^**)**\n\n",
      "html": "<h1 id=\"3.-insertion-sort\">3. Insertion Sort <a class=\"heading-anchor-permalink\" href=\"#3.-insertion-sort\">#</a></h1>\n<p>Created Sunday 05 January 2020</p>\n<ul>\n<li>Let the left part be sorted. Initially of length 1.</li>\n<li>Insert the first array of the unsorted side to the appropriate position(using shifting, i.e adjacent swapping), this takes O(size of sorted), in the worst case.</li>\n<li>Move the divider by 1.</li>\n</ul>\n<p>Hence worst case time complexity is 1 + 2 + … + n = O(n^2^).</p>\n<ul>\n<li>Best case scenario for Insertion sort: When array is already sorted, each element is already at the sorted position. No swapping at all. All we do is checking n times.</li>\n</ul>\n<p><strong>Best case: O(n) - because it is naturally adaptive.</strong>\n<strong>Worst case: O(n</strong>^2^<strong>)</strong></p>\n",
      "id": 88
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/4._Selection_Sort.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/4._Selection_Sort.html",
      "content": "# 4. Selection Sort\nCreated Sunday 05 January 2020\n\n\n* Find the optimum, place it at the optimum index of the sorted part.\n* Does this for each. Takes size_unsorted for placing an element to it's sorted position.\n* Time: n + n-1 + ... + 1 = O(n^2^). Worst case.\n* Best case: list is already sorted. We still do  size_unsorted, to find the smallest. **Still** O(n^2^).\n\n**Selection sort is the ***slower ***than insertion sort.**\n\n",
      "html": "<h1 id=\"4.-selection-sort\">4. Selection Sort <a class=\"heading-anchor-permalink\" href=\"#4.-selection-sort\">#</a></h1>\n<p>Created Sunday 05 January 2020</p>\n<ul>\n<li>Find the optimum, place it at the optimum index of the sorted part.</li>\n<li>Does this for each. Takes size_unsorted for placing an element to it’s sorted position.</li>\n<li>Time: n + n-1 + … + 1 = O(n^2^). Worst case.</li>\n<li>Best case: list is already sorted. We still do  size_unsorted, to find the smallest. <strong>Still</strong> O(n^2^).</li>\n</ul>\n<p>**Selection sort is the ***slower *<strong>than insertion sort.</strong></p>\n",
      "id": 89
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/5._Time_complexity_for_recursive_algorithms/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/5._Time_complexity_for_recursive_algorithms/0_index.html",
      "content": "# 5. Time complexity for recursive algorithms\n\nCreated Monday 06 January 2020\n\n- For recursive algorithms, just write down the **recurrence relation, \\***with the anchor condition\\*.\n- Make the relation as compact as possible, by combining constants(whereever possible).\n- Solve this to get the time complexity.\n\n**Methods for solving recurrence relations.**\n\n- Write down all (...) the recursive 'levels', solve all these equations.(By adding/subtracting/manipulating them all). i.e\n  1.  _Back substitution + MI to predict the exponents_.\n  2.  small work + recursion work.\n\n![](/assets/5._Time_complexity_for_recursive_algorithms-image-1.png)\n\n---\n\n- Recurrence Tree, we guess our solutions using this. Proved using MI.\n- Master's Theorem.\n\n**Note**:\n\n- ceil and floor functions can be assumed to be integers for asymptotic notation.\n- Also numbers may be assumed to be exact powers of 2(this is somehwat problematic).\n- We can ignore the constants with degree terms.\n",
      "html": "<h1 id=\"5.-time-complexity-for-recursive-algorithms\">5. Time complexity for recursive algorithms <a class=\"heading-anchor-permalink\" href=\"#5.-time-complexity-for-recursive-algorithms\">#</a></h1>\n<p>Created Monday 06 January 2020</p>\n<ul>\n<li>For recursive algorithms, just write down the **recurrence relation, ***with the anchor condition*.</li>\n<li>Make the relation as compact as possible, by combining constants(whereever possible).</li>\n<li>Solve this to get the time complexity.</li>\n</ul>\n<p><strong>Methods for solving recurrence relations.</strong></p>\n<ul>\n<li>Write down all (…) the recursive ‘levels’, solve all these equations.(By adding/subtracting/manipulating them all). i.e\n<ol>\n<li><em>Back substitution + MI to predict the exponents</em>.</li>\n<li>small work + recursion work.</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"/assets/5._Time_complexity_for_recursive_algorithms-image-1.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li>Recurrence Tree, we guess our solutions using this. Proved using MI.</li>\n<li>Master’s Theorem.</li>\n</ul>\n<p><strong>Note</strong>:</p>\n<ul>\n<li>ceil and floor functions can be assumed to be integers for asymptotic notation.</li>\n<li>Also numbers may be assumed to be exact powers of 2(this is somehwat problematic).</li>\n<li>We can ignore the constants with degree terms.</li>\n</ul>\n",
      "id": 90
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/6._Fibonacci_is_bad.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/1._Time/6._Fibonacci_is_bad.html",
      "content": "# 6. Fibonacci is bad\nCreated Monday 06 January 2020\n\n\n* For the 50th fibonacci using f(n) = f(n-1) + f(n-2). It takes 2^50^ = (1024)^5 ^= 10^15 ^steps.\n\nWe are better off with manual work in this case.\n\n",
      "html": "<h1 id=\"6.-fibonacci-is-bad\">6. Fibonacci is bad <a class=\"heading-anchor-permalink\" href=\"#6.-fibonacci-is-bad\">#</a></h1>\n<p>Created Monday 06 January 2020</p>\n<ul>\n<li>For the 50th fibonacci using f(n) = f(n-1) + f(n-2). It takes 2^50^ = (1024)^5 ^= 10^15 ^steps.</li>\n</ul>\n<p>We are better off with manual work in this case.</p>\n",
      "id": 91
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/2._Space.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/2._Space.html",
      "content": "# 2. Space\n\nCreated Monday 06 January 2020\n\nFollow these 3 rules(which we had known by ourselves)\n\n1. Only **Auxiliary Space: **The amount of 'extra' space required as a function of input size. The size of the input does not matter, that will take space. This is not counted. **Only auxiliary space is taken into account in space complexity.**\n2. **Maximum: **The space requirement is just the **maximum **amount of memory(at any point of time) that is required in the execution period of the problem. Scope is responsible for this i.e. it deallocates the unnecessary space.\n\nAssume that we don't use concurrent threads.\n**Note**: It should be kept in mind that if we don't free space, it will have to be calculated as the sum, since the space will only be deallocated only if the program ends. **This is never the case though. At least for iterative parts.**\n![](/assets/2._Space-image-1.png) ![](/assets/2._Space-image-2.png)\n\n3. **Height of the tree: **In case of recursion, the memory required is the total memory of the **call stack** for all the **activation records,** when they are** the highest. \\***i.e \\*the memory corresponding to the time when the **height of the tree is maximum**. i.e log~2~(n+1), where n = total number of nodes in the function tree. The memory is actually for the formal variables in each activation record. **In recursion, **we always have some memory overhead.\n\n_3 is just an extension of rule 2._\n\n4. Constant space, even if the variables are being declared in a code block is not counted as an overhead, i.e RAM is assumed to be very quick. **In reality, this may affect the algorithm quality, i.e it is better to give all variables before the loop, but it is not compulsory in C++.**\n",
      "html": "<h1 id=\"2.-space\">2. Space <a class=\"heading-anchor-permalink\" href=\"#2.-space\">#</a></h1>\n<p>Created Monday 06 January 2020</p>\n<p>Follow these 3 rules(which we had known by ourselves)</p>\n<ol>\n<li>Only **Auxiliary Space: **The amount of ‘extra’ space required as a function of input size. The size of the input does not matter, that will take space. This is not counted. <strong>Only auxiliary space is taken into account in space complexity.</strong></li>\n<li>**Maximum: **The space requirement is just the **maximum **amount of memory(at any point of time) that is required in the execution period of the problem. Scope is responsible for this i.e. it deallocates the unnecessary space.</li>\n</ol>\n<p>Assume that we don’t use concurrent threads.\n<strong>Note</strong>: It should be kept in mind that if we don’t free space, it will have to be calculated as the sum, since the space will only be deallocated only if the program ends. <strong>This is never the case though. At least for iterative parts.</strong>\n<img src=\"/assets/2._Space-image-1.png\" alt=\"\"> <img src=\"/assets/2._Space-image-2.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>**Height of the tree: <strong>In case of recursion, the memory required is the total memory of the <strong>call stack</strong> for all the <strong>activation records,</strong> when they are</strong> the highest. ***i.e *the memory corresponding to the time when the <strong>height of the tree is maximum</strong>. i.e log~2~(n+1), where n = total number of nodes in the function tree. The memory is actually for the formal variables in each activation record. **In recursion, **we always have some memory overhead.</li>\n</ol>\n<p><em>3 is just an extension of rule 2.</em></p>\n<ol start=\"4\">\n<li>Constant space, even if the variables are being declared in a code block is not counted as an overhead, i.e RAM is assumed to be very quick. <strong>In reality, this may affect the algorithm quality, i.e it is better to give all variables before the loop, but it is not compulsory in C++.</strong></li>\n</ol>\n",
      "id": 92
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/exerciseques.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/exerciseques.html",
      "content": "# Lecture 1 and 2: Characters and Pointers\n\n**Linear Search Worst Case**\n\n    The Worst case(s) occur in linear search algorithm when -\n\n**Options**\n\n    a. Item is somewhere in the middle of the array\n    b. Item is the last element in the array\n    c. Item is present at first index of the array.\n    d. Item is not in the array at all\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. and d.\n    Basics\n\n</details>\n\n---\n\n**Linear Search**\n\n    The worst case time complexity of Linear search is :\n\n**Options**\n\n    a. O(n)\n    b. O(n^2)\n    c. O(nlogn)\n    d. O(logn)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. O(n)\n    Basics\n\n</details>\n\n---\n\n**Insertion Sort Worst Case Time Complexity**\n\n    Worst case time complexity of insertion sort is ?\n\n**Options**\n\n    a. O(n)\n    b. O(n^2)\n    c. O(nlogn)\n    d. O(logn)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. O(n^2)\n    Basics\n\n</details>\n\n---\n\n**Selection Sort Worst Case Time Complexity**\n\n    Worst case time complexity of selection sort is ?\n\n**Options**\n\n    a. O(n)\n    b. O(n^2)\n    c. O(nlogn)\n    d. O(logn)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. O(n^2)\n    Basics\n\n</details>\n\n---\n\n# Lecture 3, 4 and 5: Analysis of basic sorting and searching algorithms\n\n**Efficiency of an Algorithm**\n\n    Two main measures for the efficiency of an algorithm are -\n\n**Options**\n\n    a. Processor and memory\n    b. Complexity and capacity\n    c. Time and space\n    d. Data and space\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. Time and space\n    Basics\n\n</details>\n\n---\n\n**Theoretical Analysis**\n\n    In theoretical analysis the time factor when determining the efficiency of algorithm is measured by -\n\n**Options**\n\n    a. Counting microseconds\n    b. Counting the number of statements in code\n    c. Counting the number of unit operations\n    d. Counting the kilobytes of algorithm\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. Counting the number of unit operations\n    Basics\n\n</details>\n\n---\n\n**Time Complexity**\n\n    If the number of primary operations of an algorithm that takes an array of size n as input are 3n^2 + 5n. The worst case time complexity of the algorithm will be ?\n\n**Options**\n\n    a. O(n^3)\n    b. O((n^2)*logn)\n    c. O(n^2)\n    d. O(n)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. O(n^2)\n    Basics\n\n</details>\n\n---\n\n**Time Complexity of Code**\n\n    What will be the Time Complexity of following code in terms of ‘n’ ?\n\n    Refer the code for C++ -\n\n    for(int i = 0; i < n; i++)\n    {\n        for(; i < n; i++)\n        {\n            cout << i << endl;\n        }\n    }\n\n**Options**\n\n    a. O(n)\n    b. O(n^2)\n    c. O(logn)\n    d. O(nlogn)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. O(n)\n    i will be n in the inner loop itself.\n\n</details>\n\n---\n\n**Time Complexity of Code**\n\n    What will be the Time Complexity of following code in terms of ‘n’ ?\n\n    Note : Assume k to be a constant value\n\n    Refer the code for C++ -\n\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 1 ; j < k; j++)\n        {\n            cout << (i + j ) << endl;\n        }\n    }\n\n**Options**\n\n    a. O(n^2)\n    b. O(n)\n    c. O(logn)\n    d. None of these\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. O(n)\n    i will be n in the inner loop itself.\n\n</details>\n\n---\n\n**Time Complexity of Code**\n\n    For merging two sorted arrays of size m and n into a sorted array of size m+n, we require operations -\n\n**Options**\n\n    a. O(m * n)\n    b. O(m + n)\n    c. O(m) if m >= n\n    d. O(n) if n > m\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. The time complexity is the worst time possible.\n    Hence O(m+n)\n\n</details>\n\n---\n\n**Recurrence for Merge Sort**\n\n    What is the recurrence relation for merge sort :\n\n**Options**\n\n    a. T(n) = 2T(n/2)\n    b. T(n) = 2T(n/2) + k\n    c. T(n) = 2T(n/2) + O(n)\n    d. T(n) = 2T(n/2) + O(log n)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. T(n) = 2T(n/2) + O(n)\n    After we have successfully sorted the two halves, merge them O(n/2+/2) = O(n)\n\n</details>\n\n---\n\n**Merge Sort**\n\n    What is the time complexity of merge sort :\n\n**Options**\n\n    a. O(n)\n    b. O(n^2)\n    c. O(nlogn)\n    d. O(log n)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. T(n) = 2T(n/2) + O(n)\n    After we have successfully sorted the two halves, merge them, copy them k1*n + O(n/2+/2) = O(n)\n\n</details>\n\n---\n\n**What is time complexity**\n\n    What is the time complexity of following code ?\n\n    int multiplyRec(int m, int n)\n    {\n        if(n == 1)\n            return m;\n        return m + multiplyRec(m,  n - 1);\n    }\n\n**Options**\n\n    a. O(m*n)\n    b. O(n)\n    c. O(n^2)\n    d. O(m)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. O(n)\n    f(n) = k + f(n-1); f(n) = n*k + 0 = O(n)\n\n</details>\n\n---\n\n**What is time complexity**\n\n    int sumOfDigits(int n)\n    {\n            int sum;\n            if(n < 10)\n            {\n                return n;\n            }\n            sum = (n % 10) + sumOfDigits(n / 10);\n            return sum;\n    }\n\n**Options**\n\n    a. O(logn) - log is to the base 10\n    b. O(n)\n    c. O(n^2)\n    d. None of these\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. O(logn) - log is to the base 10\n    Basics\n\n</details>\n\n---\n\n**Fibonacci**\n\n    What is the time complexity of following code for calculating nth fibonacci number\n    long fib(int n)\n    {\n        if(n == 0 || n == 1)\n        {\n            return n;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n\n**Options**\n\n    a. O(n)\n    b. O(n^2)\n    c. O(2^n)\n    d. O(n^3)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. O(2^n)\n    assume n-2  ~ n-1 -> f(n) = 2*f(n-1)\n    Exponential\n\n</details>\n\n---\n\n# Lecture 8 and 9\n\n**Merge Sort space**\n\n    The space complexity for merge sort is :\n\n**Options**\n\n    a. O(n)\n    b. O(n^2)\n    c. O(nlogn)\n    d. O(log n)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. O(n)\n\n    A doubt: Why not take into account the memory of the stack?\n    Ans: Maximum stack memory is 12*log(n) = (8 Bytes + 4Bytes ~ pointer + size) * logn. But for the array it is much greater i.e max(12logn, 4n) = O(n)\n\n</details>\n\n---\n\n**Fibonacci**\n\n    The space complexity for finding nth fibonacci number using recursion is :\n\n**Options**\n\n    a. O(n)\n    b. O(2^n)\n    c. O(log n)\n    d. O(n^2)\n    e. O(nlogn)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. O(n)\n    The max height, corresponding to the left most branch(if we do f(n-1) before f(n-2), from left to right). Only for the single variable.\n\n</details>\n\n---\n",
      "html": "<h1 id=\"lecture-1-and-2%3A-characters-and-pointers\">Lecture 1 and 2: Characters and Pointers <a class=\"heading-anchor-permalink\" href=\"#lecture-1-and-2%3A-characters-and-pointers\">#</a></h1>\n<p><strong>Linear Search Worst Case</strong></p>\n<pre><code>The Worst case(s) occur in linear search algorithm when -\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Item is somewhere in the middle of the array\nb. Item is the last element in the array\nc. Item is present at first index of the array.\nd. Item is not in the array at all\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. and d.\nBasics\n</code></pre>\n</details>\n<hr>\n<p><strong>Linear Search</strong></p>\n<pre><code>The worst case time complexity of Linear search is :\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(n)\nb. O(n^2)\nc. O(nlogn)\nd. O(logn)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. O(n)\nBasics\n</code></pre>\n</details>\n<hr>\n<p><strong>Insertion Sort Worst Case Time Complexity</strong></p>\n<pre><code>Worst case time complexity of insertion sort is ?\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(n)\nb. O(n^2)\nc. O(nlogn)\nd. O(logn)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. O(n^2)\nBasics\n</code></pre>\n</details>\n<hr>\n<p><strong>Selection Sort Worst Case Time Complexity</strong></p>\n<pre><code>Worst case time complexity of selection sort is ?\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(n)\nb. O(n^2)\nc. O(nlogn)\nd. O(logn)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. O(n^2)\nBasics\n</code></pre>\n</details>\n<hr>\n<h1 id=\"lecture-3%2C-4-and-5%3A-analysis-of-basic-sorting-and-searching-algorithms\">Lecture 3, 4 and 5: Analysis of basic sorting and searching algorithms <a class=\"heading-anchor-permalink\" href=\"#lecture-3%2C-4-and-5%3A-analysis-of-basic-sorting-and-searching-algorithms\">#</a></h1>\n<p><strong>Efficiency of an Algorithm</strong></p>\n<pre><code>Two main measures for the efficiency of an algorithm are -\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Processor and memory\nb. Complexity and capacity\nc. Time and space\nd. Data and space\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. Time and space\nBasics\n</code></pre>\n</details>\n<hr>\n<p><strong>Theoretical Analysis</strong></p>\n<pre><code>In theoretical analysis the time factor when determining the efficiency of algorithm is measured by -\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Counting microseconds\nb. Counting the number of statements in code\nc. Counting the number of unit operations\nd. Counting the kilobytes of algorithm\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. Counting the number of unit operations\nBasics\n</code></pre>\n</details>\n<hr>\n<p><strong>Time Complexity</strong></p>\n<pre><code>If the number of primary operations of an algorithm that takes an array of size n as input are 3n^2 + 5n. The worst case time complexity of the algorithm will be ?\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(n^3)\nb. O((n^2)*logn)\nc. O(n^2)\nd. O(n)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. O(n^2)\nBasics\n</code></pre>\n</details>\n<hr>\n<p><strong>Time Complexity of Code</strong></p>\n<pre><code>What will be the Time Complexity of following code in terms of ‘n’ ?\n\nRefer the code for C++ -\n\nfor(int i = 0; i &lt; n; i++)\n{\n    for(; i &lt; n; i++)\n    {\n        cout &lt;&lt; i &lt;&lt; endl;\n    }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(n)\nb. O(n^2)\nc. O(logn)\nd. O(nlogn)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. O(n)\ni will be n in the inner loop itself.\n</code></pre>\n</details>\n<hr>\n<p><strong>Time Complexity of Code</strong></p>\n<pre><code>What will be the Time Complexity of following code in terms of ‘n’ ?\n\nNote : Assume k to be a constant value\n\nRefer the code for C++ -\n\nfor(int i = 0; i &lt; n; i++)\n{\n    for(int j = 1 ; j &lt; k; j++)\n    {\n        cout &lt;&lt; (i + j ) &lt;&lt; endl;\n    }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(n^2)\nb. O(n)\nc. O(logn)\nd. None of these\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. O(n)\ni will be n in the inner loop itself.\n</code></pre>\n</details>\n<hr>\n<p><strong>Time Complexity of Code</strong></p>\n<pre><code>For merging two sorted arrays of size m and n into a sorted array of size m+n, we require operations -\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(m * n)\nb. O(m + n)\nc. O(m) if m &gt;= n\nd. O(n) if n &gt; m\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. The time complexity is the worst time possible.\nHence O(m+n)\n</code></pre>\n</details>\n<hr>\n<p><strong>Recurrence for Merge Sort</strong></p>\n<pre><code>What is the recurrence relation for merge sort :\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. T(n) = 2T(n/2)\nb. T(n) = 2T(n/2) + k\nc. T(n) = 2T(n/2) + O(n)\nd. T(n) = 2T(n/2) + O(log n)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. T(n) = 2T(n/2) + O(n)\nAfter we have successfully sorted the two halves, merge them O(n/2+/2) = O(n)\n</code></pre>\n</details>\n<hr>\n<p><strong>Merge Sort</strong></p>\n<pre><code>What is the time complexity of merge sort :\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(n)\nb. O(n^2)\nc. O(nlogn)\nd. O(log n)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. T(n) = 2T(n/2) + O(n)\nAfter we have successfully sorted the two halves, merge them, copy them k1*n + O(n/2+/2) = O(n)\n</code></pre>\n</details>\n<hr>\n<p><strong>What is time complexity</strong></p>\n<pre><code>What is the time complexity of following code ?\n\nint multiplyRec(int m, int n)\n{\n    if(n == 1)\n        return m;\n    return m + multiplyRec(m,  n - 1);\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(m*n)\nb. O(n)\nc. O(n^2)\nd. O(m)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. O(n)\nf(n) = k + f(n-1); f(n) = n*k + 0 = O(n)\n</code></pre>\n</details>\n<hr>\n<p><strong>What is time complexity</strong></p>\n<pre><code>int sumOfDigits(int n)\n{\n        int sum;\n        if(n &lt; 10)\n        {\n            return n;\n        }\n        sum = (n % 10) + sumOfDigits(n / 10);\n        return sum;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(logn) - log is to the base 10\nb. O(n)\nc. O(n^2)\nd. None of these\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. O(logn) - log is to the base 10\nBasics\n</code></pre>\n</details>\n<hr>\n<p><strong>Fibonacci</strong></p>\n<pre><code>What is the time complexity of following code for calculating nth fibonacci number\nlong fib(int n)\n{\n    if(n == 0 || n == 1)\n    {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(n)\nb. O(n^2)\nc. O(2^n)\nd. O(n^3)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. O(2^n)\nassume n-2  ~ n-1 -&gt; f(n) = 2*f(n-1)\nExponential\n</code></pre>\n</details>\n<hr>\n<h1 id=\"lecture-8-and-9\">Lecture 8 and 9 <a class=\"heading-anchor-permalink\" href=\"#lecture-8-and-9\">#</a></h1>\n<p><strong>Merge Sort space</strong></p>\n<pre><code>The space complexity for merge sort is :\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(n)\nb. O(n^2)\nc. O(nlogn)\nd. O(log n)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. O(n)\n\nA doubt: Why not take into account the memory of the stack?\nAns: Maximum stack memory is 12*log(n) = (8 Bytes + 4Bytes ~ pointer + size) * logn. But for the array it is much greater i.e max(12logn, 4n) = O(n)\n</code></pre>\n</details>\n<hr>\n<p><strong>Fibonacci</strong></p>\n<pre><code>The space complexity for finding nth fibonacci number using recursion is :\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(n)\nb. O(2^n)\nc. O(log n)\nd. O(n^2)\ne. O(nlogn)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. O(n)\nThe max height, corresponding to the left most branch(if we do f(n-1) before f(n-2), from left to right). Only for the single variable.\n</code></pre>\n</details>\n<hr>\n",
      "id": 93
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/zAssignments/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/zAssignments/0_index.html",
      "content": "# zAssignments\nCreated Sunday 05 January 2020\n\n**Trust in your ability. Never let go. You can discover the best ways.**\n\n",
      "html": "<h1 id=\"zassignments\">zAssignments <a class=\"heading-anchor-permalink\" href=\"#zassignments\">#</a></h1>\n<p>Created Sunday 05 January 2020</p>\n<p><strong>Trust in your ability. Never let go. You can discover the best ways.</strong></p>\n",
      "id": 94
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/zAssignments/after_assignments.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/2._Time_and_Space_Analysis/zAssignments/after_assignments.html",
      "content": "<details> <summary><strong> 1. Find the Unique Element </strong></summary>\n\n# 1. Find the Unique Element\n\n    Given an integer array of size 2N + 1. In this given array, N numbers are present twice and one number is present only once in the array.\n\n    You need to find and return that number which is unique in the array.\n\n    Note : Given array will always contain odd number of elements.\n\n**Input Format**\n\n    Line 1 : Array size i.e. 2N+1\n\n    Line 2 : Array elements (separated by space)\n\n**Output Format**\n\n    Unique element present in the array\n\n**Constraints**\n\n    1 <= N <= 10^6\n\n**Sample Input**\n\n    7\n    2 3 1 6 3 6 2\n\n**Sample Output**\n\n    1\n\n<details> <summary><strong>Code</strong></summary>\n\n    Using the associative and commumtative property of XOR, we will calculate the XOR of the array, which is mathematically equal to 0 ^ (distinct element) = distinct element, found it.\n    // arr - input array\n    // size - size of array\n\n    int FindUnique(int arr[], int size)\n    {\n        int ret = 0;\n        for(int i=0; i<size;i++)\n            ret ^= arr[i];\n        return ret;\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 2. Duplicate in array </strong></summary>\n\n# 2. Duplicate in array\n\n    Given an array of integers of size n which contains numbers from 0 to n - 2. Each number is present at least once. That is, if n = 5, numbers from 0 to 3 is present in the given array at least once and one number is present twice. You need to find and return that duplicate number present in the array.\n\n    Assume, duplicate number is always present in the array.\n\n**Input Format**\n\n    Line 1 : Size of input array\n\n    Line 2 : Array elements (separated by space)\n\n**Output Format**\n\n    Duplicate element\n\n**Constraints**\n\n    1 <= n <= 10^6\n\n**Sample Input**\n\n    9\n    0 7 2 5 4 7 1 3 6\n\n**Sample Output**\n\n    7\n\n<details> <summary><strong>Code</strong></summary>\n\n    // arr - input array\n    // size - size of array\n\n    int MissingNumber(int arr[], int size)\n    {\n        int idealSum = (size-2)*(size-1)/2; // sum from 0 to n-2, i.e 1 is missing\n        int realSum = 0;\n        for(int i=0; i<size; i++)\n            realSum+=arr[i];\n        return realSum-idealSum;\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 3. Print Array intersection </strong></summary>\n\n# 3. Print Array intersection\n\n    Given two random integer arrays, print their intersection. That is, print all the elements that are present in both the given arrays.\n\n    Input arrays can contain duplicate elements.\n\n    Note : Order of elements are not important\n\n**Input Format**\n\n    Line 1 : Integer N, Array 1 Size\n\n    Line 2 : Array 1 elements (separated by space)\n\n    Line 3 : Integer M, Array 2 Size\n\n    Line 4 : Array 2 elements (separated by space)\n\n**Output Format**\n\n    Print intersection elements in different lines\n\n**Constraints**\n\n    1 <= M, N <= 10^6\n\n**Sample Input 1**\n\n    6\n    2 6 8 5 4 3\n    4\n    2 3 4 7\n\n**Sample Output 1**\n\n    2\n    4\n    3\n\n**Sample Input 2**\n\n    4\n    2 6 1 2\n    5\n    1 2 3 4 2\n\n**Sample Output 2**\n\n    2\n    2\n    1\n\n<details> <summary><strong>Code</strong></summary>\n\n    // input1 - first array\n    // input2 - second array\n    // size1 - size of first array\n    // size2 - size of second array\n    void intersection(int input1[], int input2[], int size1, int size2)\n    {\n        std::sort(input1, input1+size1);\n        std::sort(input2, input2+size2);\n        int i = 0, j = 0;\n\n        while(i < size1 && j < size2)\n        {\n            if(input1[i]==input2[j])\n            {\n                cout << input1[i] <<  endl;\n                i++, j++;\n            }\n            else if(input1[i]<input2[j]) // you won't be able to find input2[j] except for the next elements of input1[i]\n                i++;\n            else if(input1[i]>input2[j]) // you won't be able to find input1[i] except for the next elements of input2[j]\n                j++;\n        }\n        // that was easy enough\n        // we can use maps too, time complexity is O(n)\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 4. Pair sum in array </strong></summary>\n\n# 4. Pair sum in array\n\n    Given a random integer array A and a number x. Find and print the pair of elements in the array which sum to x.\n\n    Array A can contain duplicate elements.\n\n    While printing a pair, print the smaller element first.\n\n    That is, if a valid pair is (6, 5) print \"5 6\". There is no constraint that out of 5 pairs which have to be printed in 1st line. You can print pairs in any order, just be careful about the order of elements in a pair.\n\n**Input Format**\n\n    Line 1 : Integer N (Array size)\n\n    Line 2 : Array elements (separated by space)\n\n    Line 3 : Integer x\n\n**Output Format**\n\n    Line 1 : Pair 1 elements (separated by space)\n\n    Line 2 : Pair 2 elements (separated by space)\n\n    Line 3 : and so on\n\n**Constraints**\n\n    1 <= N <= 1000\n\n    1 <= x <= 100\n\n**Sample Input**\n\n    9\n    1 3 6 2 5 4 3 2 4\n    7\n\n**Sample Output**\n\n    1 6\n    3 4\n    3 4\n    2 5\n    2 5\n    3 4\n    3 4\n\n<details> <summary><strong>Code</strong></summary>\n\n    #include<algorithm>\n    void pairSum(int input[], int size, int x)\n    {\n        *// start from the two ends*\n        // Advantage: As compare the biggest to the smallest, if they sum equals\n        // the numbers at hand, then print em. Else leave them\n\n        // We need to scan further as we might get the sum in the insides.\n\n        // when we scan if ar[i]+arr[j]<su, move from the front. The left part(at hand) is useless\n        // if(ar[i]+ar[j]>sum), right part(check with while) is useless.\n        // when we get (ar[i]==arr[j])\n        // case1: if(ar[i]==arr[j])\n                // print the number len1*(len1-1)/2\n        // case 2:\n        // count the stretch for both the ends and print the numbers len1*len2 times.\n\n        // T.C = nlong + n  = O(nlogn), SC = O(1)\n\n        sort(input, input+size);\n        int i = 0, j = size - 1;\n        int len1 = 0, len2 = 0;\n        while(i<j) // i==j is useless\n        {\n\n            if(input[i]==input[j]) // if both are equal then everything between them is the same\n            {\n                if(input[i]+input[j]!=x)\n                    break;\n                else  // redundant\n                {\n                    len1 = j-i+1;\n                    for(int k=0; k < (len1*(len1-1))/2; k++)\n                        cout << input[i] << \" \" << input[i] << endl;\n                    break;\n                }\n            } // saves a lot of time, you can check the case using custom input\n\n            else // input[i] is not equal to input[j]\n            {\n                if(input[i]+input[j]<x)\n                {\n                    while(i<j && input[i]+input[j]<x)\n                        i++; // will stop is sum>=x the next case will take care of it.\n                }\n                else if(input[i]+input[j]>x)\n                {\n                    while(i<j && input[i]+input[j]>x)\n                        j--; // will stop is sum>=x the next case will take care of it.\n                }\n                else\n                {\n                    len1 = 1, len2 = 1;\n                    while(input[i]==input[++i]) // not equal so for sure will find a wall or interface\n                        len1+=1; // don't worry about i and j as input[i] and input[j] cannot be the same for all values\n                    while(input[j]==input[--j]) // not equal so for sure will find a wall or interface\n                        len2+=1;\n                    for(int k=0; k < len1*len2; k++)\n                        cout << input[i-1] << \" \" << input[j+1] << endl;\n                }\n            }\n        }\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 5. Triplet sum </strong></summary>\n\n# 5. Triplet sum\n\n    Given a random integer array and a number x. Find and print the triplets of elements in the array which sum to x.\n\n    While printing a triplet, print the smallest element first.\n\n    That is, if a valid triplet is (6, 5, 10) print \"5 6 10\". There is no constraint that out of 5 triplets which have to be printed on 1st line. You can print triplets in any order, just be careful about the order of elements in a triplet.\n\n**Input Format**\n\n    Line 1 : Integer N (Array Size)\n\n    Line 2 : Array elements (separated by space)\n\n    Line 3 : Integer x\n\n**Output Format**\n\n    Line 1 : Triplet 1 elements (separated by space)\n\n    Line 2 : Triplet 3 elements (separated by space)\n\n    Line 3 : and so on\n\n**Constraints**\n\n    1 <= N <= 1000\n\n    1 <= x <= 100\n\n**Sample Input**\n\n    7\n    1 2 3 4 5 6 7\n    12\n\n**Sample Output**\n\n    1 4 7\n    1 5 6\n    2 3 7\n    2 4 6\n    3 4 5\n\n<details> <summary><strong>Code</strong></summary>\n\n    // arr - input array\n    // size - size of array\n    // x - sum of triplets\n\n    void FindTriplet(int arr[], int size, int x)\n    {\n        /* Don't write main().\n         * Don't read input, it is passed as function argument.\n         * Print output and don't return it.\n         * Taking input is handled automatically.\n         */\n\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 6. Rotate array </strong></summary>\n\n# 6. Rotate array\n\n    Given a random integer array of size n, write a function that rotates the given array by d elements (towards left).\n\n    Change in the input array itself. You don't need to return or print elements.\n\n**Input Format**\n\n    Line 1 : Integer n (Array Size)\n\n    Line 2 : Array elements (separated by space)\n\n    Line 3 : Integer d\n\n**Output Format**\n\n    Updated array elements (separated by space)\n\n**Constraints**\n\n    1 <= N <= 1000\n\n    1 <= d <= N\n\n**Sample Input**\n\n    7\n    1 2 3 4 5 6 7\n    2\n\n**Sample Output**\n\n    3 4 5 6 7 1 2\n\n<details> <summary><strong>Code</strong></summary>\n\n    // arr - input array\n    // n - size of array\n    // d - array to be rotated by d elements\n\n    #include<algorithm>\n    void rotate(int *arr, int d, int n)\n    {\n        if(d==0)\n            return;\n    \td%=n;\n        d = n-d;\n        int buckets = __gcd(n, d);\n        int bucket_size = n/buckets;\n        int position = 0;\n        int store = arr[0], swap;\n        for(int i=0; i<buckets; i++)\n        {\n            for(int j=0; j<bucket_size; j++)\n            {\n                position = (position+d)%n;\n                swap = arr[position];\n                arr[position] = store;\n                store = swap;\n            }\n            store=arr[++position]; // new bucket\n        }\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 7. Check array rotation </strong></summary>\ns\n# 7. Check array rotation\n\n    Given an integer array, which is sorted (in increasing order) and has been rotated by some number k in clockwise direction. Find and return the k.\n\n**Input Format**\n\n    Line 1 : Integer n (Array Size)\n\n    Line 2 : Array elements (separated by space)\n\n**Output Format**\n\n    Integer k\n\n**Constraints**\n\n    1 <= n <= 1000\n\n**Constraints**\n\n    1 <= n <= 20\n\n**Sample Input 1**\n\n    6\n    5 6 1 2 3 4\n\n**Sample Output 1**\n\n    2\n\n**Sample Input 2**\n\n    5\n    3 6 8 9 10\n\n**Sample Output 2**\n\n    0\n\n<details> <summary><strong>Code</strong></summary>\n\n    // arr - input array\n    // n - size of array\n\n    int FindSortedArrayRotation(int arr[], int n)\n    {\n        /* Don't write main().\n         * Don't read input, it is passed as function argument.\n         * Return output and don't print it.\n         * Taking input and printing output is handled automatically.\n         */\n\n    }\n\n</details>\n\n---\n\n</details>\n",
      "html": "<details> <summary><strong> 1. Find the Unique Element </strong></summary>\n<h1 id=\"1.-find-the-unique-element\">1. Find the Unique Element <a class=\"heading-anchor-permalink\" href=\"#1.-find-the-unique-element\">#</a></h1>\n<pre><code>Given an integer array of size 2N + 1. In this given array, N numbers are present twice and one number is present only once in the array.\n\nYou need to find and return that number which is unique in the array.\n\nNote : Given array will always contain odd number of elements.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Array size i.e. 2N+1\n\nLine 2 : Array elements (separated by space)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Unique element present in the array\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= N &lt;= 10^6\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>7\n2 3 1 6 3 6 2\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>1\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>Using the associative and commumtative property of XOR, we will calculate the XOR of the array, which is mathematically equal to 0 ^ (distinct element) = distinct element, found it.\n// arr - input array\n// size - size of array\n\nint FindUnique(int arr[], int size)\n{\n    int ret = 0;\n    for(int i=0; i&lt;size;i++)\n        ret ^= arr[i];\n    return ret;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 2. Duplicate in array </strong></summary>\n<h1 id=\"2.-duplicate-in-array\">2. Duplicate in array <a class=\"heading-anchor-permalink\" href=\"#2.-duplicate-in-array\">#</a></h1>\n<pre><code>Given an array of integers of size n which contains numbers from 0 to n - 2. Each number is present at least once. That is, if n = 5, numbers from 0 to 3 is present in the given array at least once and one number is present twice. You need to find and return that duplicate number present in the array.\n\nAssume, duplicate number is always present in the array.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Size of input array\n\nLine 2 : Array elements (separated by space)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Duplicate element\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= n &lt;= 10^6\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>9\n0 7 2 5 4 7 1 3 6\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>7\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// arr - input array\n// size - size of array\n\nint MissingNumber(int arr[], int size)\n{\n    int idealSum = (size-2)*(size-1)/2; // sum from 0 to n-2, i.e 1 is missing\n    int realSum = 0;\n    for(int i=0; i&lt;size; i++)\n        realSum+=arr[i];\n    return realSum-idealSum;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 3. Print Array intersection </strong></summary>\n<h1 id=\"3.-print-array-intersection\">3. Print Array intersection <a class=\"heading-anchor-permalink\" href=\"#3.-print-array-intersection\">#</a></h1>\n<pre><code>Given two random integer arrays, print their intersection. That is, print all the elements that are present in both the given arrays.\n\nInput arrays can contain duplicate elements.\n\nNote : Order of elements are not important\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Integer N, Array 1 Size\n\nLine 2 : Array 1 elements (separated by space)\n\nLine 3 : Integer M, Array 2 Size\n\nLine 4 : Array 2 elements (separated by space)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Print intersection elements in different lines\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= M, N &lt;= 10^6\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>6\n2 6 8 5 4 3\n4\n2 3 4 7\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>2\n4\n3\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>4\n2 6 1 2\n5\n1 2 3 4 2\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>2\n2\n1\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// input1 - first array\n// input2 - second array\n// size1 - size of first array\n// size2 - size of second array\nvoid intersection(int input1[], int input2[], int size1, int size2)\n{\n    std::sort(input1, input1+size1);\n    std::sort(input2, input2+size2);\n    int i = 0, j = 0;\n\n    while(i &lt; size1 &amp;&amp; j &lt; size2)\n    {\n        if(input1[i]==input2[j])\n        {\n            cout &lt;&lt; input1[i] &lt;&lt;  endl;\n            i++, j++;\n        }\n        else if(input1[i]&lt;input2[j]) // you won't be able to find input2[j] except for the next elements of input1[i]\n            i++;\n        else if(input1[i]&gt;input2[j]) // you won't be able to find input1[i] except for the next elements of input2[j]\n            j++;\n    }\n    // that was easy enough\n    // we can use maps too, time complexity is O(n)\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 4. Pair sum in array </strong></summary>\n<h1 id=\"4.-pair-sum-in-array\">4. Pair sum in array <a class=\"heading-anchor-permalink\" href=\"#4.-pair-sum-in-array\">#</a></h1>\n<pre><code>Given a random integer array A and a number x. Find and print the pair of elements in the array which sum to x.\n\nArray A can contain duplicate elements.\n\nWhile printing a pair, print the smaller element first.\n\nThat is, if a valid pair is (6, 5) print &quot;5 6&quot;. There is no constraint that out of 5 pairs which have to be printed in 1st line. You can print pairs in any order, just be careful about the order of elements in a pair.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Integer N (Array size)\n\nLine 2 : Array elements (separated by space)\n\nLine 3 : Integer x\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Line 1 : Pair 1 elements (separated by space)\n\nLine 2 : Pair 2 elements (separated by space)\n\nLine 3 : and so on\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= N &lt;= 1000\n\n1 &lt;= x &lt;= 100\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>9\n1 3 6 2 5 4 3 2 4\n7\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>1 6\n3 4\n3 4\n2 5\n2 5\n3 4\n3 4\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>#include&lt;algorithm&gt;\nvoid pairSum(int input[], int size, int x)\n{\n    *// start from the two ends*\n    // Advantage: As compare the biggest to the smallest, if they sum equals\n    // the numbers at hand, then print em. Else leave them\n\n    // We need to scan further as we might get the sum in the insides.\n\n    // when we scan if ar[i]+arr[j]&lt;su, move from the front. The left part(at hand) is useless\n    // if(ar[i]+ar[j]&gt;sum), right part(check with while) is useless.\n    // when we get (ar[i]==arr[j])\n    // case1: if(ar[i]==arr[j])\n            // print the number len1*(len1-1)/2\n    // case 2:\n    // count the stretch for both the ends and print the numbers len1*len2 times.\n\n    // T.C = nlong + n  = O(nlogn), SC = O(1)\n\n    sort(input, input+size);\n    int i = 0, j = size - 1;\n    int len1 = 0, len2 = 0;\n    while(i&lt;j) // i==j is useless\n    {\n\n        if(input[i]==input[j]) // if both are equal then everything between them is the same\n        {\n            if(input[i]+input[j]!=x)\n                break;\n            else  // redundant\n            {\n                len1 = j-i+1;\n                for(int k=0; k &lt; (len1*(len1-1))/2; k++)\n                    cout &lt;&lt; input[i] &lt;&lt; &quot; &quot; &lt;&lt; input[i] &lt;&lt; endl;\n                break;\n            }\n        } // saves a lot of time, you can check the case using custom input\n\n        else // input[i] is not equal to input[j]\n        {\n            if(input[i]+input[j]&lt;x)\n            {\n                while(i&lt;j &amp;&amp; input[i]+input[j]&lt;x)\n                    i++; // will stop is sum&gt;=x the next case will take care of it.\n            }\n            else if(input[i]+input[j]&gt;x)\n            {\n                while(i&lt;j &amp;&amp; input[i]+input[j]&gt;x)\n                    j--; // will stop is sum&gt;=x the next case will take care of it.\n            }\n            else\n            {\n                len1 = 1, len2 = 1;\n                while(input[i]==input[++i]) // not equal so for sure will find a wall or interface\n                    len1+=1; // don't worry about i and j as input[i] and input[j] cannot be the same for all values\n                while(input[j]==input[--j]) // not equal so for sure will find a wall or interface\n                    len2+=1;\n                for(int k=0; k &lt; len1*len2; k++)\n                    cout &lt;&lt; input[i-1] &lt;&lt; &quot; &quot; &lt;&lt; input[j+1] &lt;&lt; endl;\n            }\n        }\n    }\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 5. Triplet sum </strong></summary>\n<h1 id=\"5.-triplet-sum\">5. Triplet sum <a class=\"heading-anchor-permalink\" href=\"#5.-triplet-sum\">#</a></h1>\n<pre><code>Given a random integer array and a number x. Find and print the triplets of elements in the array which sum to x.\n\nWhile printing a triplet, print the smallest element first.\n\nThat is, if a valid triplet is (6, 5, 10) print &quot;5 6 10&quot;. There is no constraint that out of 5 triplets which have to be printed on 1st line. You can print triplets in any order, just be careful about the order of elements in a triplet.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Integer N (Array Size)\n\nLine 2 : Array elements (separated by space)\n\nLine 3 : Integer x\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Line 1 : Triplet 1 elements (separated by space)\n\nLine 2 : Triplet 3 elements (separated by space)\n\nLine 3 : and so on\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= N &lt;= 1000\n\n1 &lt;= x &lt;= 100\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>7\n1 2 3 4 5 6 7\n12\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>1 4 7\n1 5 6\n2 3 7\n2 4 6\n3 4 5\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// arr - input array\n// size - size of array\n// x - sum of triplets\n\nvoid FindTriplet(int arr[], int size, int x)\n{\n    /* Don't write main().\n     * Don't read input, it is passed as function argument.\n     * Print output and don't return it.\n     * Taking input is handled automatically.\n     */\n\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 6. Rotate array </strong></summary>\n<h1 id=\"6.-rotate-array\">6. Rotate array <a class=\"heading-anchor-permalink\" href=\"#6.-rotate-array\">#</a></h1>\n<pre><code>Given a random integer array of size n, write a function that rotates the given array by d elements (towards left).\n\nChange in the input array itself. You don't need to return or print elements.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Integer n (Array Size)\n\nLine 2 : Array elements (separated by space)\n\nLine 3 : Integer d\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Updated array elements (separated by space)\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= N &lt;= 1000\n\n1 &lt;= d &lt;= N\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>7\n1 2 3 4 5 6 7\n2\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>3 4 5 6 7 1 2\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// arr - input array\n// n - size of array\n// d - array to be rotated by d elements\n\n#include&lt;algorithm&gt;\nvoid rotate(int *arr, int d, int n)\n{\n    if(d==0)\n        return;\n\td%=n;\n    d = n-d;\n    int buckets = __gcd(n, d);\n    int bucket_size = n/buckets;\n    int position = 0;\n    int store = arr[0], swap;\n    for(int i=0; i&lt;buckets; i++)\n    {\n        for(int j=0; j&lt;bucket_size; j++)\n        {\n            position = (position+d)%n;\n            swap = arr[position];\n            arr[position] = store;\n            store = swap;\n        }\n        store=arr[++position]; // new bucket\n    }\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 7. Check array rotation </strong></summary>\ns\n# 7. Check array rotation\n<pre><code>Given an integer array, which is sorted (in increasing order) and has been rotated by some number k in clockwise direction. Find and return the k.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Integer n (Array Size)\n\nLine 2 : Array elements (separated by space)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Integer k\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= n &lt;= 1000\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= n &lt;= 20\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>6\n5 6 1 2 3 4\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>2\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>5\n3 6 8 9 10\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>0\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// arr - input array\n// n - size of array\n\nint FindSortedArrayRotation(int arr[], int n)\n{\n    /* Don't write main().\n     * Don't read input, it is passed as function argument.\n     * Return output and don't print it.\n     * Taking input and printing output is handled automatically.\n     */\n\n}\n</code></pre>\n</details>\n<hr>\n</details>\n",
      "id": 95
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Binary_Search_Trees/Quizzes&Exercises/Exercises.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Binary_Search_Trees/Quizzes&Exercises/Exercises.html",
      "content": "",
      "html": "",
      "id": 96
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Binary_Search_Trees/zAssignments/Assignments.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Binary_Search_Trees/zAssignments/Assignments.html",
      "content": "",
      "html": "",
      "id": 97
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/0_index.html",
      "content": "# 1. Recursion Basics\nCreated Saturday 28 December 2019\n\nFor counting problems, make a graph solve it using them.\n\n",
      "html": "<h1 id=\"1.-recursion-basics\">1. Recursion Basics <a class=\"heading-anchor-permalink\" href=\"#1.-recursion-basics\">#</a></h1>\n<p>Created Saturday 28 December 2019</p>\n<p>For counting problems, make a graph solve it using them.</p>\n",
      "id": 98
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/1._Intro_to_Recursion.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/1._Intro_to_Recursion.html",
      "content": "# 1. Intro to Recursion\nCreated Saturday 28 December 2019\n\n\n* Recursion: A **problem** that can be expressed in terms of **same** problem(itself) but with a **smaller** input(until an anchor point, obviously).\n\n(Don't say that a function calls itself, it actually calls a smaller version of itself).\ne.g. factorial: i.e f(n) = n * f(n-1) , f(0) = 1.\n\n* The anchor point is just a trivial instance of the problem, and the answer is known.\n* Recursion works by making a stack of activation records.\n\n**Note: **We don't have to make manually manage activation records, as this is tedious. We'll see better representation in the next lecture.\n\n* It's very intuitive and helpful in solving many problems.\n* Many optimal algorithms are recursive.\n\n\n",
      "html": "<h1 id=\"1.-intro-to-recursion\">1. Intro to Recursion <a class=\"heading-anchor-permalink\" href=\"#1.-intro-to-recursion\">#</a></h1>\n<p>Created Saturday 28 December 2019</p>\n<ul>\n<li>Recursion: A <strong>problem</strong> that can be expressed in terms of <strong>same</strong> problem(itself) but with a <strong>smaller</strong> input(until an anchor point, obviously).</li>\n</ul>\n<p>(Don’t say that a function calls itself, it actually calls a smaller version of itself).\ne.g. factorial: i.e f(n) = n * f(n-1) , f(0) = 1.</p>\n<ul>\n<li>The anchor point is just a trivial instance of the problem, and the answer is known.</li>\n<li>Recursion works by making a stack of activation records.</li>\n</ul>\n<p>**Note: **We don’t have to make manually manage activation records, as this is tedious. We’ll see better representation in the next lecture.</p>\n<ul>\n<li>It’s very intuitive and helpful in solving many problems.</li>\n<li>Many optimal algorithms are recursive.</li>\n</ul>\n",
      "id": 99
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/2._Recursion_and_PMI.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/2._Recursion_and_PMI.html",
      "content": "# 2. Recursion and PMI\nCreated Saturday 28 December 2019\n\n\n* Recursion is a easy and intuitive way to solve problems, whose iterative solution may be tedious, and may require a \"programmers stack\".\n* It's a **pain **to think of recursion as a stack of activation records, and it's too slow.\n* We **won't **go into the **tracking detail **of the recursion(before writing the code).\n* We will work on recursion using PMI(Principal of Mathematical Induction):\n\nProblem: Prove that P(x) is true for all x ∈ N.\nStep 1: **Base Case **- F(x) is true for x = anchor point. Mostly F(0) or F(1) is shown to be true. [ *Done by observation ]*\nStep 2: **Induction Hypothesis** - Assume that F(k) is true for some k in the input range. [ This is your hypothesis, it cannot be challenged until the completion of the next step ]\nStep 3: **Induction Step **- Prove that F(k+1) is true. [  Just check that this is is sync with the hypothesis value, by assuming F(k) is true ]\nIf Step 3 holds then F(k) is true for all n.\n\n**Reason why it works: **1. We have a base. For a unit part of the ladder, we prove that the next unit is there. This is true for all units, since we used a variable 'k'. Definitely it is true for the base case. Hence the ladder can be progressed for any k in N.\n\n\n* For any recursion problem, just solve the equivalent PMI of the problem and implement the code.\n* Only after that do we make a **tree**. It is confusing to draw the tree before writing the code, atleast for beginners.\n\nExample: Using PMI for factorial.\n```c++\nint factorial(int n) // exploded view of the code\n{\n\tif(n==0)\n\t\treturn 1; \t// Base case\n\telse\n\t{\n\t\tint smallOutput = factorial(n-1); \t// Induction hypothesis: which is the function itself.\n\t\tint output = n * factorial(n-1); \t// this is where we put our hypothesis(i.e assumed solution).\n\t\treturn output;\n\t}\n}\n// A simple version(equivalent to the above)\nint factorial(int n)\n{\n\tif(n==0)\n\t\treturn 1; \t// Base case\n\treturn n * f(n-1); // all temp variable are handled by the compiler\n}\n```\n* We can optimize step 2 and 3 in code. But it is always better to write them seperately when learning recursion. Then mix them acc to the rules of programming.\n* Order of the recursive call does matter, it can be a head recursion or a tail recursion.\n\n\n#### Flow of a recursive function\nThere are 3 things in a recursive functions, in this order\n\n1. Anchor condition\n2. Recursive call(s)\n3. Small calculation before return, if any.\n\n\nNote\n\n* **Why this order** - 2 and 3 are irrelevant for the simple case, and so 1 must appear before them.\n* Code may not follow this order, but execution wise it must follow the order.\n\n\n#### Recursion rocks\nRecursion is a popular approach for solving problems because recursive solutions are generally easier to think than their iterative counterparts and the code is also shorter and easier to understand.\n\n#### Using recursion\nIn a nutshell:\n\n1. Solve the problem using PMI(for the nth case, not extremes).\n2. Write the code.\n3. Dry run it using trees.\n4. Done !!\n\n[Intro to Recursion Notes](recursionNotes1.pdf)\n\n",
      "html": "<h1 id=\"2.-recursion-and-pmi\">2. Recursion and PMI <a class=\"heading-anchor-permalink\" href=\"#2.-recursion-and-pmi\">#</a></h1>\n<p>Created Saturday 28 December 2019</p>\n<ul>\n<li>Recursion is a easy and intuitive way to solve problems, whose iterative solution may be tedious, and may require a “programmers stack”.</li>\n<li>It’s a **pain **to think of recursion as a stack of activation records, and it’s too slow.</li>\n<li>We **won’t **go into the **tracking detail **of the recursion(before writing the code).</li>\n<li>We will work on recursion using PMI(Principal of Mathematical Induction):</li>\n</ul>\n<p>Problem: Prove that P(x) is true for all x ∈ N.\nStep 1: **Base Case **- F(x) is true for x = anchor point. Mostly F(0) or F(1) is shown to be true. [ <em>Done by observation ]</em>\nStep 2: <strong>Induction Hypothesis</strong> - Assume that F(k) is true for some k in the input range. [ This is your hypothesis, it cannot be challenged until the completion of the next step ]\nStep 3: **Induction Step **- Prove that F(k+1) is true. [  Just check that this is is sync with the hypothesis value, by assuming F(k) is true ]\nIf Step 3 holds then F(k) is true for all n.</p>\n<p>**Reason why it works: **1. We have a base. For a unit part of the ladder, we prove that the next unit is there. This is true for all units, since we used a variable ‘k’. Definitely it is true for the base case. Hence the ladder can be progressed for any k in N.</p>\n<ul>\n<li>For any recursion problem, just solve the equivalent PMI of the problem and implement the code.</li>\n<li>Only after that do we make a <strong>tree</strong>. It is confusing to draw the tree before writing the code, atleast for beginners.</li>\n</ul>\n<p>Example: Using PMI for factorial.</p>\n<pre><code class=\"language-c++\">int factorial(int n) // exploded view of the code\n{\n\tif(n==0)\n\t\treturn 1; \t// Base case\n\telse\n\t{\n\t\tint smallOutput = factorial(n-1); \t// Induction hypothesis: which is the function itself.\n\t\tint output = n * factorial(n-1); \t// this is where we put our hypothesis(i.e assumed solution).\n\t\treturn output;\n\t}\n}\n// A simple version(equivalent to the above)\nint factorial(int n)\n{\n\tif(n==0)\n\t\treturn 1; \t// Base case\n\treturn n * f(n-1); // all temp variable are handled by the compiler\n}\n</code></pre>\n<ul>\n<li>We can optimize step 2 and 3 in code. But it is always better to write them seperately when learning recursion. Then mix them acc to the rules of programming.</li>\n<li>Order of the recursive call does matter, it can be a head recursion or a tail recursion.</li>\n</ul>\n<h4 id=\"flow-of-a-recursive-function\">Flow of a recursive function <a class=\"heading-anchor-permalink\" href=\"#flow-of-a-recursive-function\">#</a></h4>\n<p>There are 3 things in a recursive functions, in this order</p>\n<ol>\n<li>Anchor condition</li>\n<li>Recursive call(s)</li>\n<li>Small calculation before return, if any.</li>\n</ol>\n<p>Note</p>\n<ul>\n<li><strong>Why this order</strong> - 2 and 3 are irrelevant for the simple case, and so 1 must appear before them.</li>\n<li>Code may not follow this order, but execution wise it must follow the order.</li>\n</ul>\n<h4 id=\"recursion-rocks\">Recursion rocks <a class=\"heading-anchor-permalink\" href=\"#recursion-rocks\">#</a></h4>\n<p>Recursion is a popular approach for solving problems because recursive solutions are generally easier to think than their iterative counterparts and the code is also shorter and easier to understand.</p>\n<h4 id=\"using-recursion\">Using recursion <a class=\"heading-anchor-permalink\" href=\"#using-recursion\">#</a></h4>\n<p>In a nutshell:</p>\n<ol>\n<li>Solve the problem using PMI(for the nth case, not extremes).</li>\n<li>Write the code.</li>\n<li>Dry run it using trees.</li>\n<li>Done !!</li>\n</ol>\n<p><a href=\"recursionNotes1.pdf\">Intro to Recursion Notes</a></p>\n",
      "id": 100
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/3._Fibonacci_Number.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/3._Fibonacci_Number.html",
      "content": "# 3. Fibonacci Number\nCreated Saturday 28 December 2019\n\n#### Extended PMI\n\n* An extended, or obvious extension of PMI is to assume that f(k) is true for all values i<=k.(i.e if step 2 holds for all the The other steps stay the same)\n\nNote: This is equivalent to PMI, but is easier to use.\n\n<https://youtu.be/3vbHTi6sID0> Fibonacci as a closed form expression. We have an explicit formula now.\n\n",
      "html": "<h1 id=\"3.-fibonacci-number\">3. Fibonacci Number <a class=\"heading-anchor-permalink\" href=\"#3.-fibonacci-number\">#</a></h1>\n<p>Created Saturday 28 December 2019</p>\n<h4 id=\"extended-pmi\">Extended PMI <a class=\"heading-anchor-permalink\" href=\"#extended-pmi\">#</a></h4>\n<ul>\n<li>An extended, or obvious extension of PMI is to assume that f(k) is true for all values i&lt;=k.(i.e if step 2 holds for all the The other steps stay the same)</li>\n</ul>\n<p>Note: This is equivalent to PMI, but is easier to use.</p>\n<p><a href=\"https://youtu.be/3vbHTi6sID0\">https://youtu.be/3vbHTi6sID0</a> Fibonacci as a closed form expression. We have an explicit formula now.</p>\n",
      "id": 101
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/4._Recursion_with_Arrays.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/4._Recursion_with_Arrays.html",
      "content": "# 4. Recursion with Arrays\nCreated Saturday 28 December 2019\n\n\n* Some problems are very tedious to solve using iterative methods, they may ultimately require a programmers stack. \n* Difference between head recursion and tail recursion.\n\ne.g check if given array is sorted or not\n Method 1: if(n<=1) return true.\nif arr[0]<=arr[1] check further in f(arr+1, n-1)\nelse return false;\n// it will ultimately reach n-1.\n**Tail recursion. Easier to convert to an iteration.**\nMethod 2: if(n<=1) it is sorted by default.\nif(f(arr+1, n-1)==true)\n{\nif(arr[0] <=arr[1]\nreturn true;\n}\nreturn false;\n**Head recursion.** **Difficult to convert to an iteration.**\n\n\n\n",
      "html": "<h1 id=\"4.-recursion-with-arrays\">4. Recursion with Arrays <a class=\"heading-anchor-permalink\" href=\"#4.-recursion-with-arrays\">#</a></h1>\n<p>Created Saturday 28 December 2019</p>\n<ul>\n<li>Some problems are very tedious to solve using iterative methods, they may ultimately require a programmers stack.</li>\n<li>Difference between head recursion and tail recursion.</li>\n</ul>\n<p>e.g check if given array is sorted or not\nMethod 1: if(n&lt;=1) return true.\nif arr[0]&lt;=arr[1] check further in f(arr+1, n-1)\nelse return false;\n// it will ultimately reach n-1.\n<strong>Tail recursion. Easier to convert to an iteration.</strong>\nMethod 2: if(n&lt;=1) it is sorted by default.\nif(f(arr+1, n-1)==true)\n{\nif(arr[0] &lt;=arr[1]\nreturn true;\n}\nreturn false;\n<strong>Head recursion.</strong> <strong>Difficult to convert to an iteration.</strong></p>\n",
      "id": 102
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/5._Approach_for_recursive_problems.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/5._Approach_for_recursive_problems.html",
      "content": "# 5. Approach for recursive problems\nCreated Saturday 28 December 2019\n\nTo solve a recursive problem\n\n* Find a base case\n* Find a solution for the solution in terms of itself (Hypothesis). Very exhilarating step.\n* Solve the question.\n* If possible, use **tail **recursion. As it can easily be converted to iterative if required.\n\n\nQ) We have been given an integer array and a number 'x'. We need to find the first index of the occurence of 'x', if it is present. Otherwise return -1.\nA) We can do both tail recursion and head recursion. But as we need to find the 'first' occurrence. Hence we are better off with tail recursion.\n\n",
      "html": "<h1 id=\"5.-approach-for-recursive-problems\">5. Approach for recursive problems <a class=\"heading-anchor-permalink\" href=\"#5.-approach-for-recursive-problems\">#</a></h1>\n<p>Created Saturday 28 December 2019</p>\n<p>To solve a recursive problem</p>\n<ul>\n<li>Find a base case</li>\n<li>Find a solution for the solution in terms of itself (Hypothesis). Very exhilarating step.</li>\n<li>Solve the question.</li>\n<li>If possible, use **tail **recursion. As it can easily be converted to iterative if required.</li>\n</ul>\n<p>Q) We have been given an integer array and a number ‘x’. We need to find the first index of the occurence of ‘x’, if it is present. Otherwise return -1.\nA) We can do both tail recursion and head recursion. But as we need to find the ‘first’ occurrence. Hence we are better off with tail recursion.</p>\n",
      "id": 103
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/questionnare2.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/questionnare2.html",
      "content": "# Lecture 1, 2 and 3: Recursion Level 1 (till Fibonacci number)\n\n**What is the output of the following program?**\n\n    #include <iostream>\n    using namespace std;\n\n    int func(int num)\n    {\n        return func(num- 1);\n    }\n\n    int main()\n    {\n        int num = 5;\n        int ans = func(num - 1);\n        cout << ans;\n    }\n\n**Options**\n\n    a. Compilation Error\n    b. Runtime Error\n    c. 5\n    d. None of these\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. Runtime Error\n    No anchor condition, so recursion calls will never end. Hence Runtime error.\n\n</details>\n\n---\n\n**What is the output of the following program?**\n\n    #include <iostream>\n    using namespace std;\n\n    void print(int n)\n    {\n        if(n < 0)\n        {\n            return;\n        }\n        cout << n << \" \";\n        print(n - 2);\n    }\n\n    int main()\n    {\n        int num = 5;\n        print(num);\n    }\n\n**Options**\n\n    a. Runtime error\n    b. 5 4 3 2 1\n    c. 5 3 1\n    d. None of these\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. 5 3 1\n    Simple recursion.\n\n</details>\n\n---\n\n**What is the output of the following program?**\n\n    #include <iostream>\n    using namespace std;\n\n    void print(int n)\n    {\n        if(n < 0)\n        {\n            return;\n        }\n        if(n == 0)\n        {\n            cout << n << “ “;\n            return;\n        }\n        print(n --);\n        cout << n << “ “;\n    }\n\n    int main()\n    {\n        int num = 3;\n        print(num);\n    }\n\n**Options**\n\n    a. Runtime error\n    b. 3 2 1\n    c. 3 3 3\n    d. 0 1 2 3\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. Runtime Error\n    As we are passing n--(post -), so n is passed everytime in the recursion call. And as n is not decreasing, it is an infinite recursion.\n\n</details>\n\n---\n",
      "html": "<h1 id=\"lecture-1%2C-2-and-3%3A-recursion-level-1-(till-fibonacci-number)\">Lecture 1, 2 and 3: Recursion Level 1 (till Fibonacci number) <a class=\"heading-anchor-permalink\" href=\"#lecture-1%2C-2-and-3%3A-recursion-level-1-(till-fibonacci-number)\">#</a></h1>\n<p><strong>What is the output of the following program?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint func(int num)\n{\n    return func(num- 1);\n}\n\nint main()\n{\n    int num = 5;\n    int ans = func(num - 1);\n    cout &lt;&lt; ans;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Compilation Error\nb. Runtime Error\nc. 5\nd. None of these\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. Runtime Error\nNo anchor condition, so recursion calls will never end. Hence Runtime error.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output of the following program?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid print(int n)\n{\n    if(n &lt; 0)\n    {\n        return;\n    }\n    cout &lt;&lt; n &lt;&lt; &quot; &quot;;\n    print(n - 2);\n}\n\nint main()\n{\n    int num = 5;\n    print(num);\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Runtime error\nb. 5 4 3 2 1\nc. 5 3 1\nd. None of these\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. 5 3 1\nSimple recursion.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output of the following program?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid print(int n)\n{\n    if(n &lt; 0)\n    {\n        return;\n    }\n    if(n == 0)\n    {\n        cout &lt;&lt; n &lt;&lt; “ “;\n        return;\n    }\n    print(n --);\n    cout &lt;&lt; n &lt;&lt; “ “;\n}\n\nint main()\n{\n    int num = 3;\n    print(num);\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Runtime error\nb. 3 2 1\nc. 3 3 3\nd. 0 1 2 3\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. Runtime Error\nAs we are passing n--(post -), so n is passed everytime in the recursion call. And as n is not decreasing, it is an infinite recursion.\n</code></pre>\n</details>\n<hr>\n",
      "id": 104
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/zAssignments/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/zAssignments/0_index.html",
      "content": "# zAssignments\nCreated Monday 30 December 2019\n\n\n* We can use helper functions wherever necessary.\n* We can use extra arguments in the helper to pass values.\n* We **should **use integer declarations if we hope to forward/or backtrack the value to the next, previous stack. This is a thing of experience.\n* You get too pedantic in recursion. Use for loops wherever necessary. e.g for shifying the array.\n\n\n",
      "html": "<h1 id=\"zassignments\">zAssignments <a class=\"heading-anchor-permalink\" href=\"#zassignments\">#</a></h1>\n<p>Created Monday 30 December 2019</p>\n<ul>\n<li>We can use helper functions wherever necessary.</li>\n<li>We can use extra arguments in the helper to pass values.</li>\n<li>We **should **use integer declarations if we hope to forward/or backtrack the value to the next, previous stack. This is a thing of experience.</li>\n<li>You get too pedantic in recursion. Use for loops wherever necessary. e.g for shifying the array.</li>\n</ul>\n",
      "id": 105
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/zAssignments/after_assignments.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/zAssignments/after_assignments.html",
      "content": "# Multiplication (Recursive)\n\n    Given two integers m & n, calculate and return their multiplication using recursion.\n    You can only use subtraction and addition for your calculation.\n    No other operators are allowed.\n    Input format : m and n (in different lines)\n\n**Sample Input**\n\n    3\n    5\n\n**Sample Output**\n\n    15\n\n<details> <summary><strong>Code</strong></summary>\n\n    int multiplyNumbers(int m, int n)\n    {\n        if(m==0|| n==0)// either of them could becime 0 depending on the first\n            return 0;\n        return n + multiplyNumbers(m-1, n);\n    }\n\n</details>\n\n---\n\n# Count Zeros\n\n    Given an integer n, count and return the number of zeros that are present in the given integer using recursion.\n\n    Input Format : Integer n\n    Output Format : No. of 0s\n\n**Sample Input**\n\n    10204\n\n**Sample Output**\n\n    2\n\n<details> <summary><strong>Code</strong></summary>\n\n    int countZeros(int n)\n    {\n        if(n==0)\n            return 0;\n        if(n%10==0)\n            return 1 + countZeros(n/10);\n        else\n            return 0 + countZeros(n/10);\n    }\n\n</details>\n\n---\n\n# Geometric Sum\n\n    Given k, find the geometric sum i.e. 1 + 1/2 + 1/4 + 1/8 + ... + 1/(2^k)\n    using recursion. Return the answer.\n\n**Sample Input**\n\n    3\n\n**Sample Output**\n\n    1.875\n\n<details> <summary><strong>Code</strong></summary>\n\n    double geometricSum(int k)\n    {\n        if(k==0)\n            return 1;\n        return 1.0 + geometricSum(k-1)/2.0;\n    }\n\n</details>\n\n---\n\n# Check Palindrome (recursive)\n\n    Check if a given String S is palindrome or not (using recursion). Return true or false.\n    Input Format : String S\n    Output Format : true or false\n\n**Sample Input 1**\n\n    racecar\n\n**Sample Output 1**\n\n    true\n\n**Sample Input 2**\n\n    ninja\n\n**Sample Output 2**\n\n    false\n\n<details> <summary><strong>Code</strong></summary>\n\n    bool helper(char* start, char* end)\n    {\n        if(end<=start) // if equal, then true. A letter is same as itself, lame\n            return true; // when they pass\n        if(*start==*end)\n            return helper(start+1, end-1);\n        else\n            return false;\n    }\n\n    bool checkPalindrome(char input[])\n    {\n        char* end = input;\n        while(*end!=0)\n            end++; // end at the null\n        return helper(input, end-1); // we need to seek from the back\n    }\n\n    //Way better a solution then the CN solution. Elegance guarenteed\n\n</details>\n\n---\n\n# Sum of Digits (recursive)\n\n    Write a recursive function that returns the sum of the digits of a given integer.\n\n**Sample Input**\n\n    12345\n\n**Sample Output**\n\n    15\n\n<details> <summary><strong>Code</strong></summary>\n\n    int sumOfDigits(int n)\n    {\n        if(n==0)  // or n<=9 is better, 1 step less\n            return 0;\n        return n%10 + sumOfDigits(n/10);\n    }\n\n</details>\n\n---\n",
      "html": "<h1 id=\"multiplication-(recursive)\">Multiplication (Recursive) <a class=\"heading-anchor-permalink\" href=\"#multiplication-(recursive)\">#</a></h1>\n<pre><code>Given two integers m &amp; n, calculate and return their multiplication using recursion.\nYou can only use subtraction and addition for your calculation.\nNo other operators are allowed.\nInput format : m and n (in different lines)\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>3\n5\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>15\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int multiplyNumbers(int m, int n)\n{\n    if(m==0|| n==0)// either of them could becime 0 depending on the first\n        return 0;\n    return n + multiplyNumbers(m-1, n);\n}\n</code></pre>\n</details>\n<hr>\n<h1 id=\"count-zeros\">Count Zeros <a class=\"heading-anchor-permalink\" href=\"#count-zeros\">#</a></h1>\n<pre><code>Given an integer n, count and return the number of zeros that are present in the given integer using recursion.\n\nInput Format : Integer n\nOutput Format : No. of 0s\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>10204\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>2\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int countZeros(int n)\n{\n    if(n==0)\n        return 0;\n    if(n%10==0)\n        return 1 + countZeros(n/10);\n    else\n        return 0 + countZeros(n/10);\n}\n</code></pre>\n</details>\n<hr>\n<h1 id=\"geometric-sum\">Geometric Sum <a class=\"heading-anchor-permalink\" href=\"#geometric-sum\">#</a></h1>\n<pre><code>Given k, find the geometric sum i.e. 1 + 1/2 + 1/4 + 1/8 + ... + 1/(2^k)\nusing recursion. Return the answer.\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>3\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>1.875\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>double geometricSum(int k)\n{\n    if(k==0)\n        return 1;\n    return 1.0 + geometricSum(k-1)/2.0;\n}\n</code></pre>\n</details>\n<hr>\n<h1 id=\"check-palindrome-(recursive)\">Check Palindrome (recursive) <a class=\"heading-anchor-permalink\" href=\"#check-palindrome-(recursive)\">#</a></h1>\n<pre><code>Check if a given String S is palindrome or not (using recursion). Return true or false.\nInput Format : String S\nOutput Format : true or false\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>racecar\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>true\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>ninja\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>false\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>bool helper(char* start, char* end)\n{\n    if(end&lt;=start) // if equal, then true. A letter is same as itself, lame\n        return true; // when they pass\n    if(*start==*end)\n        return helper(start+1, end-1);\n    else\n        return false;\n}\n\nbool checkPalindrome(char input[])\n{\n    char* end = input;\n    while(*end!=0)\n        end++; // end at the null\n    return helper(input, end-1); // we need to seek from the back\n}\n\n//Way better a solution then the CN solution. Elegance guarenteed\n</code></pre>\n</details>\n<hr>\n<h1 id=\"sum-of-digits-(recursive)\">Sum of Digits (recursive) <a class=\"heading-anchor-permalink\" href=\"#sum-of-digits-(recursive)\">#</a></h1>\n<pre><code>Write a recursive function that returns the sum of the digits of a given integer.\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>12345\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>15\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int sumOfDigits(int n)\n{\n    if(n==0)  // or n&lt;=9 is better, 1 step less\n        return 0;\n    return n%10 + sumOfDigits(n/10);\n}\n</code></pre>\n</details>\n<hr>\n",
      "id": 106
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/zAssignments/lect_assignments.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/1._Recursion_Basics/zAssignments/lect_assignments.html",
      "content": "# Power\n\n    Write a program to find x to the power n (i.e. x^n). Take x and n from the user. You need to return the answer.\n    Do this recursively.\n\n    Input format : Two integers x and n (separated by space)\n    Output Format : x^n (i.e. x raise to the power n)\n    Constraints :\n    1 <= x <= 30\n    0 <= n <= 30\n\n**Sample Input 1**\n\n    3 4\n\n**Sample Output 1**\n\n    81\n\n**Sample Input 2**\n\n    2 5\n\n**Sample Output 2**\n\n    32\n\n<details> <summary><strong>Code</strong></summary>\n\n    int power(int x, int n)\n    {\n        if(n==0)\n            return 1;\n        return x * power(x, n - 1);\n    }\n\n    // can be optimized using odd even value of the exponent\n\n</details>\n\n---\n\n# Print Numbers\n\n    Given the code to print number from 1 to n in increasing order recursively. But it contains few bugs, that you need to rectify such that all the test cases should pass.\n    Input Format : Integer n\n    Output Format : Numbers from 1 to n (separated by space)\n    Constraints :\n    1 <= n <= 10000\n\n**Sample Input**\n\n    6\n\n**Sample Output**\n\n    1 2 3 4 5 6\n\n<details> <summary><strong>Code</strong></summary>\n\n    void print(int n)\n    {\n        if(n == 1)\n        {\n            cout << n << \" \";\n            return;\n        }\n\n        print(n - 1);        // induction hypothesis and the next step in one go.\n        cout << n << \" \";\n    }\n\n</details>\n\n---\n\n# Number of Digits\n\n    Given the code to find out and return the number of digits present in a number recursively. But it contains few bugs, that you need to rectify such that all the test cases should pass.\n    Input Format : Integer n\n    Output Format : Count of digits\n    Constraints :\n    1 <= n <= 10^6\n\n**Sample Input**\n\n    156\n\n**Sample Output**\n\n    3\n\n<details> <summary><strong>Code</strong></summary>\n\n    int count(int n){\n        if(n < 10)\n        {\n            return 1;\n        }\n\n        int smallAns = count(n / 10);\n        return smallAns + 1;\n    }\n\n</details>\n\n---\n\n# Sum of Array\n\n    Given an array of length N, you need to find and return the sum of all elements of the array.\n    Do this recursively.\n    Input Format :\n    Line 1 : An Integer N i.e. size of array\n    Line 2 : N integers which are elements of the array, separated by spaces\n    Output Format :\n    Sum\n    Constraints :\n    1 <= N <= 10^3\n\n**Sample Input**\n\n    3\n    9 8 9\n\n**Sample Output 1**\n\n    26\n\n<details> <summary><strong>Code</strong></summary>\n\n    int sum(int input[], int n)\n    {\n        if(n==0)\n            return 0;\n        return input[0] + sum(input + 1, n - 1);\n    }\n\n</details>\n\n---\n\n# Check Number\n\n    Given an array of length N and an integer x, you need to find if x is present in the array or not. Return true or false.\n    Do this recursively.\n    Input Format :\n    Line 1 : An Integer N i.e. size of array\n    Line 2 : N integers which are elements of the array, separated by spaces\n    Line 3 : Integer x\n    Output Format :\n    true or false\n    Constraints :\n    1 <= N <= 10^3\n\n**Sample Input**\n\n    3\n    9 8 10\n    8\n\n**Sample Output**\n\n    true\n\n<details> <summary><strong>Code</strong></summary>\n\n    bool checkNumber(int input[], int size, int x)\n    {\n        if(size==0)\n            return false; // base case\n        // hypothesis -> assumed to be true\n\n        // return true if the current one is the key or that remaining has it\n        if(input[0]==x || checkNumber(input+1, size-1, x)==true)\n            return true;\n        return false;\n    }\n\n</details>\n\n---\n\n# First Index of Number\n\n    Given an array of length N and an integer x, you need to find and return the first index of integer x present in the array. Return -1 if it is not present in the array.\n    First index means, the index of first occurrence of x in the input array.\n    Do this recursively. Indexing in the array starts from 0.\n\n    Input Format :\n    Line 1 : An Integer N i.e. size of array\n    Line 2 : N integers which are elements of the array, separated by spaces\n    Line 3 : Integer x\n    Output Format :\n    first index or -1\n    Constraints :\n    1 <= N <= 10^3\n\n**Sample Input**\n\n    4\n    9 8 10 8\n    8\n\n**Sample Output**\n\n    1\n\n<details> <summary><strong>Code</strong></summary>\n\n    int firstIndex(int input[], int size, int x)\n    {\n        if(size==0)\n            return -1; // if at all we reach an end\n\n        if(input[0]==x)\n            return 0;\n\n        // if this is don't find it\n\n        int k = firstIndex(input+1, size-1, x);\n        // hav to take this variable as I have to compare the value I get, and 'pass' it.\n\n        if(k==-1)\n            return -1;\n        return k+1;     // for add operation, we used k as the dummy variable\n    }\n\n</details>\n\n---\n\n# All Indices of Number\n\n    Given an array of length N and an integer x, you need to find all the indexes where x is present in the input array. Save all the indexes in an array (in increasing order).\n    Do this recursively. Indexing in the array starts from 0.\n    Input Format :\n    Line 1 : An Integer N i.e. size of array\n    Line 2 : N integers which are elements of the array, separated by spaces\n    Line 3 : Integer x\n    Output Format :\n    indexes where x is present in the array (separated by space)\n    Constraints :\n    1 <= N <= 10^3\n\n**Sample Input**\n\n    5\n    9 8 10 8 8\n    8\n\n**Sample Output**\n\n    1 3 4\n\n<details> <summary><strong>Code</strong></summary>\n\n\n    int allIndexes(int input[], int size, int x, int output[])\n    {\n        static int index = -1;\n        if(size==0)\n            return 0;\n        if(input[++index]==x)\n        {\n            *output = index;\n            return 1 + allIndexes(input, size-1, x, output+1);\n        }\n        return 0 + allIndexes(input, size-1, x, output);\n    }\n     // done easy. Just needed a static variable or use a helper function with a remenant of the static variable\n\n</details>\n\n---\n",
      "html": "<h1 id=\"power\">Power <a class=\"heading-anchor-permalink\" href=\"#power\">#</a></h1>\n<pre><code>Write a program to find x to the power n (i.e. x^n). Take x and n from the user. You need to return the answer.\nDo this recursively.\n\nInput format : Two integers x and n (separated by space)\nOutput Format : x^n (i.e. x raise to the power n)\nConstraints :\n1 &lt;= x &lt;= 30\n0 &lt;= n &lt;= 30\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>3 4\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>81\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>2 5\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>32\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int power(int x, int n)\n{\n    if(n==0)\n        return 1;\n    return x * power(x, n - 1);\n}\n\n// can be optimized using odd even value of the exponent\n</code></pre>\n</details>\n<hr>\n<h1 id=\"print-numbers\">Print Numbers <a class=\"heading-anchor-permalink\" href=\"#print-numbers\">#</a></h1>\n<pre><code>Given the code to print number from 1 to n in increasing order recursively. But it contains few bugs, that you need to rectify such that all the test cases should pass.\nInput Format : Integer n\nOutput Format : Numbers from 1 to n (separated by space)\nConstraints :\n1 &lt;= n &lt;= 10000\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>6\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>1 2 3 4 5 6\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>void print(int n)\n{\n    if(n == 1)\n    {\n        cout &lt;&lt; n &lt;&lt; &quot; &quot;;\n        return;\n    }\n\n    print(n - 1);        // induction hypothesis and the next step in one go.\n    cout &lt;&lt; n &lt;&lt; &quot; &quot;;\n}\n</code></pre>\n</details>\n<hr>\n<h1 id=\"number-of-digits\">Number of Digits <a class=\"heading-anchor-permalink\" href=\"#number-of-digits\">#</a></h1>\n<pre><code>Given the code to find out and return the number of digits present in a number recursively. But it contains few bugs, that you need to rectify such that all the test cases should pass.\nInput Format : Integer n\nOutput Format : Count of digits\nConstraints :\n1 &lt;= n &lt;= 10^6\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>156\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>3\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int count(int n){\n    if(n &lt; 10)\n    {\n        return 1;\n    }\n\n    int smallAns = count(n / 10);\n    return smallAns + 1;\n}\n</code></pre>\n</details>\n<hr>\n<h1 id=\"sum-of-array\">Sum of Array <a class=\"heading-anchor-permalink\" href=\"#sum-of-array\">#</a></h1>\n<pre><code>Given an array of length N, you need to find and return the sum of all elements of the array.\nDo this recursively.\nInput Format :\nLine 1 : An Integer N i.e. size of array\nLine 2 : N integers which are elements of the array, separated by spaces\nOutput Format :\nSum\nConstraints :\n1 &lt;= N &lt;= 10^3\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>3\n9 8 9\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>26\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int sum(int input[], int n)\n{\n    if(n==0)\n        return 0;\n    return input[0] + sum(input + 1, n - 1);\n}\n</code></pre>\n</details>\n<hr>\n<h1 id=\"check-number\">Check Number <a class=\"heading-anchor-permalink\" href=\"#check-number\">#</a></h1>\n<pre><code>Given an array of length N and an integer x, you need to find if x is present in the array or not. Return true or false.\nDo this recursively.\nInput Format :\nLine 1 : An Integer N i.e. size of array\nLine 2 : N integers which are elements of the array, separated by spaces\nLine 3 : Integer x\nOutput Format :\ntrue or false\nConstraints :\n1 &lt;= N &lt;= 10^3\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>3\n9 8 10\n8\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>true\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>bool checkNumber(int input[], int size, int x)\n{\n    if(size==0)\n        return false; // base case\n    // hypothesis -&gt; assumed to be true\n\n    // return true if the current one is the key or that remaining has it\n    if(input[0]==x || checkNumber(input+1, size-1, x)==true)\n        return true;\n    return false;\n}\n</code></pre>\n</details>\n<hr>\n<h1 id=\"first-index-of-number\">First Index of Number <a class=\"heading-anchor-permalink\" href=\"#first-index-of-number\">#</a></h1>\n<pre><code>Given an array of length N and an integer x, you need to find and return the first index of integer x present in the array. Return -1 if it is not present in the array.\nFirst index means, the index of first occurrence of x in the input array.\nDo this recursively. Indexing in the array starts from 0.\n\nInput Format :\nLine 1 : An Integer N i.e. size of array\nLine 2 : N integers which are elements of the array, separated by spaces\nLine 3 : Integer x\nOutput Format :\nfirst index or -1\nConstraints :\n1 &lt;= N &lt;= 10^3\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>4\n9 8 10 8\n8\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>1\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int firstIndex(int input[], int size, int x)\n{\n    if(size==0)\n        return -1; // if at all we reach an end\n\n    if(input[0]==x)\n        return 0;\n\n    // if this is don't find it\n\n    int k = firstIndex(input+1, size-1, x);\n    // hav to take this variable as I have to compare the value I get, and 'pass' it.\n\n    if(k==-1)\n        return -1;\n    return k+1;     // for add operation, we used k as the dummy variable\n}\n</code></pre>\n</details>\n<hr>\n<h1 id=\"all-indices-of-number\">All Indices of Number <a class=\"heading-anchor-permalink\" href=\"#all-indices-of-number\">#</a></h1>\n<pre><code>Given an array of length N and an integer x, you need to find all the indexes where x is present in the input array. Save all the indexes in an array (in increasing order).\nDo this recursively. Indexing in the array starts from 0.\nInput Format :\nLine 1 : An Integer N i.e. size of array\nLine 2 : N integers which are elements of the array, separated by spaces\nLine 3 : Integer x\nOutput Format :\nindexes where x is present in the array (separated by space)\nConstraints :\n1 &lt;= N &lt;= 10^3\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>5\n9 8 10 8 8\n8\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>1 3 4\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int allIndexes(int input[], int size, int x, int output[])\n{\n    static int index = -1;\n    if(size==0)\n        return 0;\n    if(input[++index]==x)\n    {\n        *output = index;\n        return 1 + allIndexes(input, size-1, x, output+1);\n    }\n    return 0 + allIndexes(input, size-1, x, output);\n}\n // done easy. Just needed a static variable or use a helper function with a remenant of the static variable\n</code></pre>\n</details>\n<hr>\n",
      "id": 107
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/2._Recursion_Practice/assignments.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/2._Recursion_Practice/assignments.html",
      "content": "# Replace pi (recursive)\n\n    Given a string, compute recursively a new string where all appearances of \"pi\" have been replaced by \"3.14\".\n\n**Sample Input 1**\n\n    xpix\n\n**Sample Output 1**\n\n    x3.14x\n\n**Sample Input 2**\n\n    pipi\n\n**Sample Output 2**\n\n    3.143.14\n\n**Sample Input 3**\n\n    pip\n\n**Sample Output 3**\n\n    3.14p\n\n<details> <summary><strong>Code</strong></summary>\n\nvoid helper(char* arr, char* write);\n\nvoid replacePi(char input[])\n{\n// using some auxilary space\nint length = 0;\nwhile(input[length]!=0)\nlength++;\n// when we reach here, input[length] = 0. OK!\n\n    char *cop = new char[length];\n    for(int i=0; i<length; i++)\n        cop[i] = input[i];\n    cop[length]='\\0';\n    helper(cop, input);\n\n}\n\nvoid helper(char* arr, char* write)\n{\nif(*arr==0)\n{\n*write = 0;\nreturn;\n}\n\n    if(*arr=='p' && *(arr+1)=='i')\n    {\n        *(write++) = '3';\n        *(write++) = '.';\n        *(write++) = '1';\n        *(write++) = '4';\n        helper(arr+2, write);\n    }\n    else\n    {\n        *(write++)=*arr;\n        helper(arr+1, write);\n    }\n\n}\n\n// to save time, use iterative shifting, no choice in that\n\n</details>\n\n---\n\n# Remove X\n\n    Given a string, compute recursively a new string where all 'x' chars have been removed.\n\n**Sample Input 1**\n\n    xaxb\n\n**Sample Output 1**\n\n    ab\n\n**Sample Input 2**\n\n    abc\n\n**Sample Output 2**\n\n    abc\n\n**Sample Input 3**\n\n    xx\n\n**Sample Output 3**\n\n    (empty string)\n\n<details> <summary><strong>Code</strong></summary>\n\n    void removeX(char input[])\n    {\n        static char* head = input;\n\n        if(*input==0)\n            return;\n\n        if(*input!='x')\n        {\n            *head = *input;\n            head++;\n            removeX(input+1);\n        }\n        else\n            removeX(input+1);\n        *head=0; // put it at the end\n    }\n\n</details>\n\n---\n\n# String to Integer\n\n    Write a recursive function to convert a given string into the number it represents. That is input will be a numeric string that contains only numbers, you need to convert the string into corresponding integer and return the answer.\n\n    Input format :\n    Numeric string (string, Eg. \"1234\")\n    Output format :\n    Corresponding integer (int, Eg. 1234)\n\n**Sample Input 1**\n\n    1231\n\n**Sample Output 1**\n\n    1231\n\n**Sample Input 2**\n\n    12567\n\n**Sample Output 2**\n\n    12567\n\n<details> <summary><strong>Code</strong></summary>\n\n    // Change in the given string itself. So no need to return or print the changed string.\n\n    int helper(char* input, int & multiplier);\n\n    int stringToNumber(char input[])\n    {\n        if(input[0]==0)\n            return 0; // checking for an emoty string\n        int multiplier = 1;\n        return helper(input, multiplier);\n    }\n\n    int helper(char* input, int & multiplier)\n    {\n        if(*(input+1)=='\\0')\n            return (*input) - 48;\n        int x = helper(input+1, multiplier);\n        multiplier*=10;\n        return x + multiplier*((*input)-48);\n    }\n\n    // we could have also traversed the string in backwards order.\n    // This is better than coming up with a memory hog solution.\n\n</details>\n\n---\n\n# Pair star\n\n    Given a string, compute recursively a new string where identical chars that are adjacent in the original string are separated from each other by a \"*\".\n\n**Sample Input 1**\n\n    hello\n\n**Sample Output 1**\n\n    hel*lo\n\n**Sample Input 2**\n\n    xxyy\n\n**Sample Output 2**\n\n    x*xy*y\n\n**Sample Input 3**\n\n    aaaa\n\n**Sample Output 3**\n\n    a*a*a*a\n\n<details> <summary><strong>Code</strong></summary>\n\n    // Change in the given string itself. So no need to return or print the changed string.\n\n    void pairStar(char input[])\n    {\n        if(*input==0)\n            return;\n\n        if(input[0]==input[1])\n        {\n            // shift array to the right by 1,\n            char* wr = input+1;\n            char temp  = 0; // for flipping with the element present at the write head write head\n            char bag = '*';    // carries what is to be written\n            while(*(wr-1)!=0)\n            {\n                temp = *wr;\n                *wr = bag;\n                bag = temp;\n                wr++;\n            }\n            *(wr)=0;\n            // done, move to the next i.e input+2\n            pairStar(input+2);\n        }\n\n        // move by 1 step\n        pairStar(input+1);\n    }\n\n</details>\n\n---\n\n# Tower of Hanoi\n\n    Tower of Hanoi is a mathematical puzzle where we have three rods and n disks. The objective of the puzzle is to move all disks from source rod to destination rod using third rod (say auxiliary). The rules are :\n\n        1) Only one disk can be moved at a time.\n        2) A disk can be moved only if it is on the top of a rod.\n        3) No disk can be placed on the top of a smaller disk.\n\n    Print the steps required to move n disks from source rod to destination rod.\n    Source Rod is named as 'a', auxiliary rod as 'b' and destination rod as 'c'.\n\n    Input Format :\n    Integer n\n    Output Format :\n    Steps in different lines (in one line print source and destination rod name separated by space)\n\n**Sample Input**\n\n    2\n\n**Sample Output**\n\n    a b\n    a c\n    b c\n\n<details> <summary><strong>Code</strong></summary>\n\n    void towerOfHanoi(int n, char source, char auxiliary, char destination)\n    {\n        if(n==0)\n            return;\n        if(n==1)\n        {    // transfer directly or restated as as through auxiliary, but output is the same\n            cout << source << \" \" << destination << endl;\n            return;\n        }\n        if(n==2)\n        {\n            cout << source << \" \" << auxiliary << endl;\n            cout << source << \" \" << destination << endl;\n            cout << auxiliary << \" \" << destination << endl;\n            return;\n        }\n\n        towerOfHanoi(n-1, source, destination, auxiliary);   // recursion, place the heap(without the heaviest) on the auxiliary\n        cout << source << \" \" << destination << endl;        // heaviest from A to C using nothing\n        towerOfHanoi(n-1, auxiliary, source, destination);   // the heap from B to C using A as the auxiliary\n    }\n\n    // Did it in one go, mathematical induction is so useful.\n\n</details>\n\n---\n",
      "html": "<h1 id=\"replace-pi-(recursive)\">Replace pi (recursive) <a class=\"heading-anchor-permalink\" href=\"#replace-pi-(recursive)\">#</a></h1>\n<pre><code>Given a string, compute recursively a new string where all appearances of &quot;pi&quot; have been replaced by &quot;3.14&quot;.\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>xpix\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>x3.14x\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>pipi\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>3.143.14\n</code></pre>\n<p><strong>Sample Input 3</strong></p>\n<pre><code>pip\n</code></pre>\n<p><strong>Sample Output 3</strong></p>\n<pre><code>3.14p\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<p>void helper(char* arr, char* write);</p>\n<p>void replacePi(char input[])\n{\n// using some auxilary space\nint length = 0;\nwhile(input[length]!=0)\nlength++;\n// when we reach here, input[length] = 0. OK!</p>\n<pre><code>char *cop = new char[length];\nfor(int i=0; i&lt;length; i++)\n    cop[i] = input[i];\ncop[length]='\\0';\nhelper(cop, input);\n</code></pre>\n<p>}</p>\n<p>void helper(char* arr, char* write)\n{\nif(*arr==0)\n{\n*write = 0;\nreturn;\n}</p>\n<pre><code>if(*arr=='p' &amp;&amp; *(arr+1)=='i')\n{\n    *(write++) = '3';\n    *(write++) = '.';\n    *(write++) = '1';\n    *(write++) = '4';\n    helper(arr+2, write);\n}\nelse\n{\n    *(write++)=*arr;\n    helper(arr+1, write);\n}\n</code></pre>\n<p>}</p>\n<p>// to save time, use iterative shifting, no choice in that</p>\n</details>\n<hr>\n<h1 id=\"remove-x\">Remove X <a class=\"heading-anchor-permalink\" href=\"#remove-x\">#</a></h1>\n<pre><code>Given a string, compute recursively a new string where all 'x' chars have been removed.\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>xaxb\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>ab\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>abc\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>abc\n</code></pre>\n<p><strong>Sample Input 3</strong></p>\n<pre><code>xx\n</code></pre>\n<p><strong>Sample Output 3</strong></p>\n<pre><code>(empty string)\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>void removeX(char input[])\n{\n    static char* head = input;\n\n    if(*input==0)\n        return;\n\n    if(*input!='x')\n    {\n        *head = *input;\n        head++;\n        removeX(input+1);\n    }\n    else\n        removeX(input+1);\n    *head=0; // put it at the end\n}\n</code></pre>\n</details>\n<hr>\n<h1 id=\"string-to-integer\">String to Integer <a class=\"heading-anchor-permalink\" href=\"#string-to-integer\">#</a></h1>\n<pre><code>Write a recursive function to convert a given string into the number it represents. That is input will be a numeric string that contains only numbers, you need to convert the string into corresponding integer and return the answer.\n\nInput format :\nNumeric string (string, Eg. &quot;1234&quot;)\nOutput format :\nCorresponding integer (int, Eg. 1234)\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>1231\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>1231\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>12567\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>12567\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// Change in the given string itself. So no need to return or print the changed string.\n\nint helper(char* input, int &amp; multiplier);\n\nint stringToNumber(char input[])\n{\n    if(input[0]==0)\n        return 0; // checking for an emoty string\n    int multiplier = 1;\n    return helper(input, multiplier);\n}\n\nint helper(char* input, int &amp; multiplier)\n{\n    if(*(input+1)=='\\0')\n        return (*input) - 48;\n    int x = helper(input+1, multiplier);\n    multiplier*=10;\n    return x + multiplier*((*input)-48);\n}\n\n// we could have also traversed the string in backwards order.\n// This is better than coming up with a memory hog solution.\n</code></pre>\n</details>\n<hr>\n<h1 id=\"pair-star\">Pair star <a class=\"heading-anchor-permalink\" href=\"#pair-star\">#</a></h1>\n<pre><code>Given a string, compute recursively a new string where identical chars that are adjacent in the original string are separated from each other by a &quot;*&quot;.\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>hello\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>hel*lo\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>xxyy\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>x*xy*y\n</code></pre>\n<p><strong>Sample Input 3</strong></p>\n<pre><code>aaaa\n</code></pre>\n<p><strong>Sample Output 3</strong></p>\n<pre><code>a*a*a*a\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// Change in the given string itself. So no need to return or print the changed string.\n\nvoid pairStar(char input[])\n{\n    if(*input==0)\n        return;\n\n    if(input[0]==input[1])\n    {\n        // shift array to the right by 1,\n        char* wr = input+1;\n        char temp  = 0; // for flipping with the element present at the write head write head\n        char bag = '*';    // carries what is to be written\n        while(*(wr-1)!=0)\n        {\n            temp = *wr;\n            *wr = bag;\n            bag = temp;\n            wr++;\n        }\n        *(wr)=0;\n        // done, move to the next i.e input+2\n        pairStar(input+2);\n    }\n\n    // move by 1 step\n    pairStar(input+1);\n}\n</code></pre>\n</details>\n<hr>\n<h1 id=\"tower-of-hanoi\">Tower of Hanoi <a class=\"heading-anchor-permalink\" href=\"#tower-of-hanoi\">#</a></h1>\n<pre><code>Tower of Hanoi is a mathematical puzzle where we have three rods and n disks. The objective of the puzzle is to move all disks from source rod to destination rod using third rod (say auxiliary). The rules are :\n\n    1) Only one disk can be moved at a time.\n    2) A disk can be moved only if it is on the top of a rod.\n    3) No disk can be placed on the top of a smaller disk.\n\nPrint the steps required to move n disks from source rod to destination rod.\nSource Rod is named as 'a', auxiliary rod as 'b' and destination rod as 'c'.\n\nInput Format :\nInteger n\nOutput Format :\nSteps in different lines (in one line print source and destination rod name separated by space)\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>2\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>a b\na c\nb c\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>void towerOfHanoi(int n, char source, char auxiliary, char destination)\n{\n    if(n==0)\n        return;\n    if(n==1)\n    {    // transfer directly or restated as as through auxiliary, but output is the same\n        cout &lt;&lt; source &lt;&lt; &quot; &quot; &lt;&lt; destination &lt;&lt; endl;\n        return;\n    }\n    if(n==2)\n    {\n        cout &lt;&lt; source &lt;&lt; &quot; &quot; &lt;&lt; auxiliary &lt;&lt; endl;\n        cout &lt;&lt; source &lt;&lt; &quot; &quot; &lt;&lt; destination &lt;&lt; endl;\n        cout &lt;&lt; auxiliary &lt;&lt; &quot; &quot; &lt;&lt; destination &lt;&lt; endl;\n        return;\n    }\n\n    towerOfHanoi(n-1, source, destination, auxiliary);   // recursion, place the heap(without the heaviest) on the auxiliary\n    cout &lt;&lt; source &lt;&lt; &quot; &quot; &lt;&lt; destination &lt;&lt; endl;        // heaviest from A to C using nothing\n    towerOfHanoi(n-1, auxiliary, source, destination);   // the heap from B to C using A as the auxiliary\n}\n\n// Did it in one go, mathematical induction is so useful.\n</code></pre>\n</details>\n<hr>\n",
      "id": 108
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/0_index.html",
      "content": "# 3. Applications of Recursion\nCreated Tuesday 31 December 2019\n\n\n* Remove duplicates, using write head.\n\n\n",
      "html": "<h1 id=\"3.-applications-of-recursion\">3. Applications of Recursion <a class=\"heading-anchor-permalink\" href=\"#3.-applications-of-recursion\">#</a></h1>\n<p>Created Tuesday 31 December 2019</p>\n<ul>\n<li>Remove duplicates, using write head.</li>\n</ul>\n",
      "id": 109
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/1._Recursion_and_Strings/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/1._Recursion_and_Strings/0_index.html",
      "content": "# 1. Recursion and Strings\nCreated Thursday 02 January 2020\n\nSome basic problems on strings using recursion:\n\n1. Length of the string. Just do a head recursion. return 1 + length(input+1). Base case is the null character.\n2. RemoveX(), we need to remove all 'x's in the given string.\n\t1. Shift by 1, that is O(n^2^) time. Memory O(1).\n\t2. Pass the write head, time O(n). Memory O(n) [Assuming we don't use pointers]. Or O(1) if references in the symbol table take constant space.\n3. Remove duplicates, same as 2 except, that we do if(arr[0]==arr[1]) instead of if(arr[0]==x).\n\n\n",
      "html": "<h1 id=\"1.-recursion-and-strings\">1. Recursion and Strings <a class=\"heading-anchor-permalink\" href=\"#1.-recursion-and-strings\">#</a></h1>\n<p>Created Thursday 02 January 2020</p>\n<p>Some basic problems on strings using recursion:</p>\n<ol>\n<li>Length of the string. Just do a head recursion. return 1 + length(input+1). Base case is the null character.</li>\n<li>RemoveX(), we need to remove all 'x’s in the given string.\n<ol>\n<li>Shift by 1, that is O(n^2^) time. Memory O(1).</li>\n<li>Pass the write head, time O(n). Memory O(n) [Assuming we don’t use pointers]. Or O(1) if references in the symbol table take constant space.</li>\n</ol>\n</li>\n<li>Remove duplicates, same as 2 except, that we do if(arr[0]==arr[1]) instead of if(arr[0]==x).</li>\n</ol>\n",
      "id": 110
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/1._Recursion_and_Strings/assignments.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/1._Recursion_and_Strings/assignments.html",
      "content": "# Replace Character Recursively\n\n    Given an input string S and two characters c1 and c2, you need to replace every occurrence of character c1 with character c2 in the given string.\n\n    Do this recursively.\n\n    Input Format :\n    Line 1 : Input String S\n    Line 2 : Character c1 and c2 (separated by space)\n    Output Format :\n    Updated string\n    Constraints :\n    1 <= Length of String S <= 10^6\n\n**Sample Input 1**\n\n    abacd\n    a x\n\n**Sample Output 1**\n\n    xbxcd\n\n<details> <summary><strong>Code</strong></summary>\n\n    void replaceCharacter(char input[], char c1, char c2)\n    {\n        // static char* write = input;\n        if(*input==0)\n            return;\n        if(*input==c1)\n            *input=c2;\n        replaceCharacter(input+1, c1, c2);\n    }\n\n</details>\n\n---\n\n# Remove Duplicates Recursively\n\n    Given a string S, remove consecutive duplicates from it recursively.\n\n    Input Format :\n    String S\n    Output Format :\n    Output string\n    Constraints :\n    1 <= Length of String S <= 10^3\n\n**Sample Input**\n\n    aabccba\n\n**Sample Output**\n\n    abcba\n\n<details> <summary><strong>Code</strong></summary>\n\n    void helper(char* input, char* write);\n    void removeConsecutiveDuplicates(char *input)\n    {\n        if(*input==0)\n            return;\n        helper(input, input);\n    }\n\n    void helper(char* curr, char* write)\n    {\n        if(*curr==0)\n            return;\n\n        // search for the difference\n        while(*curr==*write)\n            curr++;\n        // curr is now a different aspect\n        if(*curr=='\\0')\n        {\n            *(write+1)=0;\n            return;\n        }\n\n        *(write+1) = *curr;\n        // call the function\n        helper(curr, write+1);\n    }\n\n</details>\n\n---\n\n# Merge Sort\n\n    Given a string S, remove consecutive duplicates from it recursively.\n\n    Input Format :\n    String S\n    Output Format :\n    Output string\n    Constraints :\n    1 <= Length of String S <= 10^3\n\n**Sample Input**\n\n    aabccba\n\n**Sample Output**\n\n    abcba\n\n<details> <summary><strong>Code</strong></summary>\n\n    void helper(char* input, char* write);\n    void removeConsecutiveDuplicates(char *input)\n    {\n        if(*input==0)\n            return;\n        helper(input, input);\n    }\n\n    void helper(char* curr, char* write)\n    {\n        if(*curr==0)\n            return;\n\n        // search for the difference\n        while(*curr==*write)\n            curr++;\n        // curr is now a different aspect\n        if(*curr=='\\0')\n        {\n            *(write+1)=0;\n            return;\n        }\n\n        *(write+1) = *curr;\n        // call the function\n        helper(curr, write+1);\n    }\n\n</details>\n\n---\n",
      "html": "<h1 id=\"replace-character-recursively\">Replace Character Recursively <a class=\"heading-anchor-permalink\" href=\"#replace-character-recursively\">#</a></h1>\n<pre><code>Given an input string S and two characters c1 and c2, you need to replace every occurrence of character c1 with character c2 in the given string.\n\nDo this recursively.\n\nInput Format :\nLine 1 : Input String S\nLine 2 : Character c1 and c2 (separated by space)\nOutput Format :\nUpdated string\nConstraints :\n1 &lt;= Length of String S &lt;= 10^6\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>abacd\na x\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>xbxcd\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>void replaceCharacter(char input[], char c1, char c2)\n{\n    // static char* write = input;\n    if(*input==0)\n        return;\n    if(*input==c1)\n        *input=c2;\n    replaceCharacter(input+1, c1, c2);\n}\n</code></pre>\n</details>\n<hr>\n<h1 id=\"remove-duplicates-recursively\">Remove Duplicates Recursively <a class=\"heading-anchor-permalink\" href=\"#remove-duplicates-recursively\">#</a></h1>\n<pre><code>Given a string S, remove consecutive duplicates from it recursively.\n\nInput Format :\nString S\nOutput Format :\nOutput string\nConstraints :\n1 &lt;= Length of String S &lt;= 10^3\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>aabccba\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>abcba\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>void helper(char* input, char* write);\nvoid removeConsecutiveDuplicates(char *input)\n{\n    if(*input==0)\n        return;\n    helper(input, input);\n}\n\nvoid helper(char* curr, char* write)\n{\n    if(*curr==0)\n        return;\n\n    // search for the difference\n    while(*curr==*write)\n        curr++;\n    // curr is now a different aspect\n    if(*curr=='\\0')\n    {\n        *(write+1)=0;\n        return;\n    }\n\n    *(write+1) = *curr;\n    // call the function\n    helper(curr, write+1);\n}\n</code></pre>\n</details>\n<hr>\n<h1 id=\"merge-sort\">Merge Sort <a class=\"heading-anchor-permalink\" href=\"#merge-sort\">#</a></h1>\n<pre><code>Given a string S, remove consecutive duplicates from it recursively.\n\nInput Format :\nString S\nOutput Format :\nOutput string\nConstraints :\n1 &lt;= Length of String S &lt;= 10^3\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>aabccba\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>abcba\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>void helper(char* input, char* write);\nvoid removeConsecutiveDuplicates(char *input)\n{\n    if(*input==0)\n        return;\n    helper(input, input);\n}\n\nvoid helper(char* curr, char* write)\n{\n    if(*curr==0)\n        return;\n\n    // search for the difference\n    while(*curr==*write)\n        curr++;\n    // curr is now a different aspect\n    if(*curr=='\\0')\n    {\n        *(write+1)=0;\n        return;\n    }\n\n    *(write+1) = *curr;\n    // call the function\n    helper(curr, write+1);\n}\n</code></pre>\n</details>\n<hr>\n",
      "id": 111
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/1._Recursion_and_Strings/ms_and_qs.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/1._Recursion_and_Strings/ms_and_qs.html",
      "content": "# Merge Sort Code\n\n    Sort an array A using Merge Sort.\n    Change in the input array itself. So no need to return or print anything.\n\n    Input format :\n    Line 1 : Integer n i.e. Array size\n    Line 2 : Array elements (separated by space)\n    Output format :\n    Array elements in increasing order (separated by space)\n\n    Constraints :\n    1 <= n <= 1000\n\n**Sample Input**\n\n    6\n    2 6 8 5 4 3\n\n**Sample Output**\n\n    2 3 4 5 6 8\n\n<details> <summary><strong>Code</strong></summary>\n\n    int *merge(int *a1, int *a2, int n1, int n2)\n    {\n        int *merged_array = new int[n1 + n2];\n        int k = 0;\n        int i = 0, j = 0;\n\n        while (i < n1 && j < n2)\n        {\n            merged_array[k] = a1[i] < a2[j] ? a1[i++] : a2[j++];\n            k++;\n        }\n\n        if (i==n1)\n        {\n            a1 = a2;\n            i = j;\n        }\n\n        while (k < n1+n2)\n            merged_array[k++] = a1[i++];\n        return merged_array;\n    }\n\n    void mergeSort(int input[], int size)\n    {\n        if(size<=1)\n            return;\n\n        mergeSort(input, size/2);\n        mergeSort(input + size/2, size-(size/2));\n\n        int* ret = merge(input, input+size/2, size/2, size-(size/2));\n\n        for(int i=0; i<size; i++)\n            input[i] = ret[i];\n\n    }\n\n</details>\n\n---\n\n# Quick Sort Code\n\n    Sort an array A using Quick Sort.\n    Change in the input array itself. So no need to return or print anything.\n\n    Input format :\n    Line 1 : Integer n i.e. Array size\n    Line 2 : Array elements (separated by space)\n    Output format :\n    Array elements in increasing order (separated by space)\n\n    Constraints :\n    1 <= n <= 1000\n\n**Sample Input**\n\n    6\n    2 6 8 5 4 3\n\n**Sample Output**\n\n    2 3 4 5 6 8\n\n<details> <summary><strong>Code</strong></summary>\n\n    int partition(int* A, int size);\n\n\n    void quickSort(int input[], int size)\n    {\n        if(size<=1)\n            return;\n        // int *pivot = partition(input, size);\n        int pivot = partition(input, size);\n        quickSort(input, pivot); // size = n_smaller\n        quickSort(input+pivot+1, size-1-pivot); // all except smaller and pivot\n    }\n\n\n    int partition(int* A, int size)\n    {\n        int* pivot  = A;\n\n        // count the number of elements smaller than pivot\n        int i = 0, n_smaller = 0;\n        while(i<size)\n        {\n            if(A[i] < pivot[0])\n                n_smaller++; // strictly smaller\n            i++;\n        }\n\n        // swap the value at the pivot element with the appropriate position of the pivot\n        int pivot_value = *pivot ;\n        *pivot = A[n_smaller];\n        A[n_smaller] = pivot_value;\n        pivot = A+n_smaller;\n        //OK!!\n\n        // we will deal only with pivot value now\n        i = 0; int j = size-1;\n        while(i<n_smaller && j>n_smaller)\n        {\n            if(A[i]<pivot_value) // ignoring if they conform\n                i++;\n            if(A[j]>=pivot_value) // pivot values allowed here, ignoring if they conform\n                j--;\n            if(A[i]>=pivot_value && A[j]<pivot_value) // swapping condition\n            {\n                int temp = A[i];\n                A[i] = A[j];\n                A[j] = temp;\n                i++; j--;\n            }\n        }\n        return n_smaller;\n    }\n\n</details>\n\n---\n",
      "html": "<h1 id=\"merge-sort-code\">Merge Sort Code <a class=\"heading-anchor-permalink\" href=\"#merge-sort-code\">#</a></h1>\n<pre><code>Sort an array A using Merge Sort.\nChange in the input array itself. So no need to return or print anything.\n\nInput format :\nLine 1 : Integer n i.e. Array size\nLine 2 : Array elements (separated by space)\nOutput format :\nArray elements in increasing order (separated by space)\n\nConstraints :\n1 &lt;= n &lt;= 1000\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>6\n2 6 8 5 4 3\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>2 3 4 5 6 8\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int *merge(int *a1, int *a2, int n1, int n2)\n{\n    int *merged_array = new int[n1 + n2];\n    int k = 0;\n    int i = 0, j = 0;\n\n    while (i &lt; n1 &amp;&amp; j &lt; n2)\n    {\n        merged_array[k] = a1[i] &lt; a2[j] ? a1[i++] : a2[j++];\n        k++;\n    }\n\n    if (i==n1)\n    {\n        a1 = a2;\n        i = j;\n    }\n\n    while (k &lt; n1+n2)\n        merged_array[k++] = a1[i++];\n    return merged_array;\n}\n\nvoid mergeSort(int input[], int size)\n{\n    if(size&lt;=1)\n        return;\n\n    mergeSort(input, size/2);\n    mergeSort(input + size/2, size-(size/2));\n\n    int* ret = merge(input, input+size/2, size/2, size-(size/2));\n\n    for(int i=0; i&lt;size; i++)\n        input[i] = ret[i];\n\n}\n</code></pre>\n</details>\n<hr>\n<h1 id=\"quick-sort-code\">Quick Sort Code <a class=\"heading-anchor-permalink\" href=\"#quick-sort-code\">#</a></h1>\n<pre><code>Sort an array A using Quick Sort.\nChange in the input array itself. So no need to return or print anything.\n\nInput format :\nLine 1 : Integer n i.e. Array size\nLine 2 : Array elements (separated by space)\nOutput format :\nArray elements in increasing order (separated by space)\n\nConstraints :\n1 &lt;= n &lt;= 1000\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>6\n2 6 8 5 4 3\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>2 3 4 5 6 8\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int partition(int* A, int size);\n\n\nvoid quickSort(int input[], int size)\n{\n    if(size&lt;=1)\n        return;\n    // int *pivot = partition(input, size);\n    int pivot = partition(input, size);\n    quickSort(input, pivot); // size = n_smaller\n    quickSort(input+pivot+1, size-1-pivot); // all except smaller and pivot\n}\n\n\nint partition(int* A, int size)\n{\n    int* pivot  = A;\n\n    // count the number of elements smaller than pivot\n    int i = 0, n_smaller = 0;\n    while(i&lt;size)\n    {\n        if(A[i] &lt; pivot[0])\n            n_smaller++; // strictly smaller\n        i++;\n    }\n\n    // swap the value at the pivot element with the appropriate position of the pivot\n    int pivot_value = *pivot ;\n    *pivot = A[n_smaller];\n    A[n_smaller] = pivot_value;\n    pivot = A+n_smaller;\n    //OK!!\n\n    // we will deal only with pivot value now\n    i = 0; int j = size-1;\n    while(i&lt;n_smaller &amp;&amp; j&gt;n_smaller)\n    {\n        if(A[i]&lt;pivot_value) // ignoring if they conform\n            i++;\n        if(A[j]&gt;=pivot_value) // pivot values allowed here, ignoring if they conform\n            j--;\n        if(A[i]&gt;=pivot_value &amp;&amp; A[j]&lt;pivot_value) // swapping condition\n        {\n            int temp = A[i];\n            A[i] = A[j];\n            A[j] = temp;\n            i++; j--;\n        }\n    }\n    return n_smaller;\n}\n</code></pre>\n</details>\n<hr>\n",
      "id": 112
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/2._Merge_Sort.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/2._Merge_Sort.html",
      "content": "# 2. Merge Sort\nCreated Wednesday 01 January 2020\n\n\n* Is a head recursion.\n* We need merge() and mergeSort()\n* We do it on two halves.\n* pseudo code\n```c++\nvoid mergeSort(arr, size)\n{\n    if(size<=1)\n      return;\n    mergeSort(arr, size/2);\n    mergeSort(arr+size/2, size -(size/2));\n    int* ret = merge(arr, arr+size/2, size/2, size - size/2);\n    for(int i=0; i<size; i++)\n      arr[i] = ret[i];\n}\n```\nDone!!\n\n* Let the PC do the even odd, you do just the things you know.\n* Memory: O(n).\n* Time: theta n*log~2~n\n* Possible bugs:\n\n\n1. Code the merge function properly. Return the address of the aux space.\n2. We need to all ms on the halves, and half sizes. Don't worry about the even odd.\n3. Copy the merged things into the actual input places, using for loop. **Free** the aux;\n\n[Merge Sort](./Lecture_1_-_Recursion_and_Strings/ms_and_qs.md)\n\n",
      "html": "<h1 id=\"2.-merge-sort\">2. Merge Sort <a class=\"heading-anchor-permalink\" href=\"#2.-merge-sort\">#</a></h1>\n<p>Created Wednesday 01 January 2020</p>\n<ul>\n<li>Is a head recursion.</li>\n<li>We need merge() and mergeSort()</li>\n<li>We do it on two halves.</li>\n<li>pseudo code</li>\n</ul>\n<pre><code class=\"language-c++\">void mergeSort(arr, size)\n{\n    if(size&lt;=1)\n      return;\n    mergeSort(arr, size/2);\n    mergeSort(arr+size/2, size -(size/2));\n    int* ret = merge(arr, arr+size/2, size/2, size - size/2);\n    for(int i=0; i&lt;size; i++)\n      arr[i] = ret[i];\n}\n</code></pre>\n<p>Done!!</p>\n<ul>\n<li>Let the PC do the even odd, you do just the things you know.</li>\n<li>Memory: O(n).</li>\n<li>Time: theta n*log~2~n</li>\n<li>Possible bugs:</li>\n</ul>\n<ol>\n<li>Code the merge function properly. Return the address of the aux space.</li>\n<li>We need to all ms on the halves, and half sizes. Don’t worry about the even odd.</li>\n<li>Copy the merged things into the actual input places, using for loop. <strong>Free</strong> the aux;</li>\n</ol>\n<p><a href=\"./Lecture_1_-_Recursion_and_Strings/ms_and_qs.html\">Merge Sort</a></p>\n",
      "id": 113
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/3._Quick_Sort.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/3._Quick_Sort.html",
      "content": "# 3. Quick Sort\nCreated Wednesday 01 January 2020\n\nStep 1: Create two phases one either side, one with all elements less than or equal to the pivot.  Till both writing heads are equal. \nHow?\n\n* Count the number of elements less(strictly) than pivot_value\n* swap(pivot, arr[n_smaller])\n* initialize i = 0, j = size-1. \n\t1. if(arr[i]<arr[n_smaller]) i++;\n\t2. if(arr[j]<=arr[n_smaller]) j--; // = here coz we need to be strict\n\t3. if(arr[i]>=arr[n_smaller] && arr[j] < arr[n_smaller]). swap(A[i], A[j]); i++, j--;\n* As QS is a tail recursion. We call QS after the partition function.\n\t* Note that the n_smaller is a sorted position. Avoid it in the function call.\n\t* Call qs on all before n_smaller.\n\t* Call qs on all after n_smaller.\n\n[Quick Sort](./Lecture_1_-_Recursion_and_Strings/ms_and_qs.md)\n\n",
      "html": "<h1 id=\"3.-quick-sort\">3. Quick Sort <a class=\"heading-anchor-permalink\" href=\"#3.-quick-sort\">#</a></h1>\n<p>Created Wednesday 01 January 2020</p>\n<p>Step 1: Create two phases one either side, one with all elements less than or equal to the pivot.  Till both writing heads are equal.\nHow?</p>\n<ul>\n<li>Count the number of elements less(strictly) than pivot_value</li>\n<li>swap(pivot, arr[n_smaller])</li>\n<li>initialize i = 0, j = size-1.\n<ol>\n<li>if(arr[i]&lt;arr[n_smaller]) i++;</li>\n<li>if(arr[j]&lt;=arr[n_smaller]) j–; // = here coz we need to be strict</li>\n<li>if(arr[i]&gt;=arr[n_smaller] &amp;&amp; arr[j] &lt; arr[n_smaller]). swap(A[i], A[j]); i++, j–;</li>\n</ol>\n</li>\n<li>As QS is a tail recursion. We call QS after the partition function.\n<ul>\n<li>Note that the n_smaller is a sorted position. Avoid it in the function call.</li>\n<li>Call qs on all before n_smaller.</li>\n<li>Call qs on all after n_smaller.</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"./Lecture_1_-_Recursion_and_Strings/ms_and_qs.html\">Quick Sort</a></p>\n",
      "id": 114
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/4._Strings.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/4._Strings.html",
      "content": "# 4. Strings\nCreated Wednesday 01 January 2020\n\n**Chuck the primary strings A. Use B if talking about stings, substrings.**\nIn this section, we are going to deal with strings. Using our basic null terminated character array is too redundant.\n\n* We will be using the string class, it does **the same**, just in a more intuitive manner. \n\nThings to remember:\n\n1. We can use dynamic memory to declare strings. Obviously, we can use static allocationa s well.\n2. We can use array notation to change the characters, i.e strings are mutable in C++.\n3. We can take input using getline(cin, string_name);\n4. string_name is just a character_array_name. i.e cout << string_name displays the whole string.\n5. concatenation is done using + operator. += is also allowed. **Append and prepend** dealt with easily. You can append character to a string too.\n6. Don't forget to use the -> if you are using string.\n\n\nWhy are we switching to strings view?\nIf we had to work with basic strings, we would've needed a 2D matrix and all.\n\n* This is better than python, coz our strings are mutable(unitwise-changeable).\n\n\n\n1. **For knowing the size**, string_name.**size**(); We can also use .length.\n2. **Substring function:  **like splicing , **substr**(i): return the string from index i to the end.(incl) **Does not change the original string.**\n3. **Modified substring**: **substr(**starting_index, length_required).  **Does not change the original string.**\n4. **Find**, s.**find(**key**)**: returns the index correpsonding to the first occurrence of the key. returns -1 if not found. Can be used to seatch substrings.\n5. **To check if string s is empty:** s.**empty()**, returns true for empty string, false otherwise.\n\n**Catch: ** Using substr to splice from index i to index j (excluding).\nJust do substr(i, j-i+1);\nNo headers are required for any of these.\n\n* Dont't think of unneccessary details.\n\n\n",
      "html": "<h1 id=\"4.-strings\">4. Strings <a class=\"heading-anchor-permalink\" href=\"#4.-strings\">#</a></h1>\n<p>Created Wednesday 01 January 2020</p>\n<p><strong>Chuck the primary strings A. Use B if talking about stings, substrings.</strong>\nIn this section, we are going to deal with strings. Using our basic null terminated character array is too redundant.</p>\n<ul>\n<li>We will be using the string class, it does <strong>the same</strong>, just in a more intuitive manner.</li>\n</ul>\n<p>Things to remember:</p>\n<ol>\n<li>We can use dynamic memory to declare strings. Obviously, we can use static allocationa s well.</li>\n<li>We can use array notation to change the characters, i.e strings are mutable in C++.</li>\n<li>We can take input using getline(cin, string_name);</li>\n<li>string_name is just a character_array_name. i.e cout &lt;&lt; string_name displays the whole string.</li>\n<li>concatenation is done using + operator. += is also allowed. <strong>Append and prepend</strong> dealt with easily. You can append character to a string too.</li>\n<li>Don’t forget to use the -&gt; if you are using string.</li>\n</ol>\n<p>Why are we switching to strings view?\nIf we had to work with basic strings, we would’ve needed a 2D matrix and all.</p>\n<ul>\n<li>This is better than python, coz our strings are mutable(unitwise-changeable).</li>\n</ul>\n<ol>\n<li><strong>For knowing the size</strong>, string_name.<strong>size</strong>(); We can also use .length.</li>\n<li>**Substring function:  **like splicing , <strong>substr</strong>(i): return the string from index i to the end.(incl) <strong>Does not change the original string.</strong></li>\n<li><strong>Modified substring</strong>: **substr(**starting_index, length_required).  <strong>Does not change the original string.</strong></li>\n<li><strong>Find</strong>, s.<strong>find(<strong>key</strong>)</strong>: returns the index correpsonding to the first occurrence of the key. returns -1 if not found. Can be used to seatch substrings.</li>\n<li><strong>To check if string s is empty:</strong> s.<strong>empty()</strong>, returns true for empty string, false otherwise.</li>\n</ol>\n<p>**Catch: ** Using substr to splice from index i to index j (excluding).\nJust do substr(i, j-i+1);\nNo headers are required for any of these.</p>\n<ul>\n<li>Dont’t think of unneccessary details.</li>\n</ul>\n",
      "id": 115
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/zAssignments/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/zAssignments/0_index.html",
      "content": "# zAssignments\nCreated Friday 03 January 2020\n\n[After Assignments](zAssignments/after_assignments.md)\n./after_assignments.md\n\n",
      "html": "<h1 id=\"zassignments\">zAssignments <a class=\"heading-anchor-permalink\" href=\"#zassignments\">#</a></h1>\n<p>Created Friday 03 January 2020</p>\n<p><a href=\"zAssignments/after_assignments.html\">After Assignments</a>\n./after_assignments.md</p>\n",
      "id": 116
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/zAssignments/1._Subsequences_of_Strings/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/zAssignments/1._Subsequences_of_Strings/0_index.html",
      "content": "# 1. Subsequences of Strings\nCreated Friday 03 January 2020\n\n**Jargon:**\n\n* subarray or substring: All possible(basically of any length from **0** to size) **contiguos elements** of the given array or string.\n* subsequences: A subsequence is a sequence that can be derived from the given sequence by deleting some or no elements without changing the order of the remaining elements, i.e if 'a' comes before 'f' in the original string, then it shall do this in all subsequences containing a and f. Each element has it's own identity(even if there are duplicates).\n\n**(Note: Repetition is not allowed in both, wysiwyg)**\n\nHow many for a string of length n:\n\n* Subarrays or substrings: \n\t1. We will add all contiguous subarrays of size 0 to n.\n\t2. size 0: 1, size 1: n, size 2: n-1, size 3: n-2 ... size r: n-r+1 ... size n: 1 \n\t3. Add all of these, 1+(n)+(n-1)+(n-2)+(n-3)+ ... + 1 = 1 + n(n+1)/2 = n(n+1)/2 + 1 \n\t4. i.e count = n(n+1)/2 + 1(empty string).\n\n\ne.g subarrays or substrings for for abc: \"\", a, b, c, ab, bc, abc. 6+1\n\n\n* Subsequences (the power set).\n\t1. We add all possible strings which have the same relative ordering of the elements.\n\n2.P and C: For every letter, we have a choice (take/leave). All are independent, product principle. And every set of choice is different from the other.\n\n3. So 2^n ^(including the empty string i.e take none). \n\ne.g subsequences for abc: \"\", a, b, c, ab, ac, bc, abc. 2^3^=8\n\nQ) Print/Collect all subsequences for the given array.\nA) \t[All Subsequences](1._Subsequences_of_Strings/all_subsequences.cpp)\nInput: String and output array address(of sufficient size).\nOutput: void? But we will need to give length of the string array, as there's no delimiter for the given array. Better if we return the size. So int should be the return type.\n\t\nBase case: if(input.empty()) \noutput[0] = \"\";\nreturn 1;\nwhy? Because this the first element that will be printed.\n**Doubt(will \"\" come only once): **This will be executed only once. As we have only one recursion call, so only one anchor is possible.\n\n* It is important that the base case be very simple, as the single case is **really **the case of the variable belonging to the activation record.\n* **Believe in yourself, that is the best you can do. For anything fun and useful, you are very good. Just Chill. Alhamdulillah.**\n\n\t\nWe assume that our recursion will fill the output array with all subsequneces of substr(1).\nHere, we will prepend the elements with the current Activation record's character, and add these to the ouput array.\nWe will use count as a variable to make a for loop copy \"these\" after the latest vacant position, which is nothing but \"count\"\noutput[count+i] = s[0]+output[i]; // we can append a character to a string it's okay. **This is a very clever trick. It's ubiquitous.**\nreturn 2*count; // Just return the current output array size, 2 times of what was there before the loop.\n\n* Uses: This problem can be used to solve keypad problems, it is the basis of most problems where we will store our inputs and make changes. We will use this idea.\n\n\n**Why? In 'storage', if we do calc first, we'll have to pass the number of copies as we go, which is very painful. Better we do **CBA **and return1 for the empty array. This will ensure that we are right. And we don't have to explicitly deal with the number of values. **\nRemember that we need to return the number of elements, and creating another formal parameter will be of significant overhead.\n\nQ) Code all possibilities of a keypad, single press mode.\ne.g 23 : dg dh di eg eh ei fg fh fi\nA) Using the same logic as recursion, do this. Let us make the base case sober(key here is **returning 1 and \"\" when nothing is printed and with 1**). Let's code the printing of values in the calc step.\n[Keypad print](1._Subsequences_of_Strings/lectureCodes.md)\n\n",
      "html": "<h1 id=\"1.-subsequences-of-strings\">1. Subsequences of Strings <a class=\"heading-anchor-permalink\" href=\"#1.-subsequences-of-strings\">#</a></h1>\n<p>Created Friday 03 January 2020</p>\n<p><strong>Jargon:</strong></p>\n<ul>\n<li>subarray or substring: All possible(basically of any length from <strong>0</strong> to size) <strong>contiguos elements</strong> of the given array or string.</li>\n<li>subsequences: A subsequence is a sequence that can be derived from the given sequence by deleting some or no elements without changing the order of the remaining elements, i.e if ‘a’ comes before ‘f’ in the original string, then it shall do this in all subsequences containing a and f. Each element has it’s own identity(even if there are duplicates).</li>\n</ul>\n<p><strong>(Note: Repetition is not allowed in both, wysiwyg)</strong></p>\n<p>How many for a string of length n:</p>\n<ul>\n<li>Subarrays or substrings:\n<ol>\n<li>We will add all contiguous subarrays of size 0 to n.</li>\n<li>size 0: 1, size 1: n, size 2: n-1, size 3: n-2 … size r: n-r+1 … size n: 1</li>\n<li>Add all of these, 1+(n)+(n-1)+(n-2)+(n-3)+ … + 1 = 1 + n(n+1)/2 = n(n+1)/2 + 1</li>\n<li>i.e count = n(n+1)/2 + 1(empty string).</li>\n</ol>\n</li>\n</ul>\n<p>e.g subarrays or substrings for for abc: “”, a, b, c, ab, bc, abc. 6+1</p>\n<ul>\n<li>Subsequences (the power set).\n<ol>\n<li>We add all possible strings which have the same relative ordering of the elements.</li>\n</ol>\n</li>\n</ul>\n<p>2.P and C: For every letter, we have a choice (take/leave). All are independent, product principle. And every set of choice is different from the other.</p>\n<ol start=\"3\">\n<li>So 2^n ^(including the empty string i.e take none).</li>\n</ol>\n<p>e.g subsequences for abc: “”, a, b, c, ab, ac, bc, abc. 2^3^=8</p>\n<p>Q) Print/Collect all subsequences for the given array.\nA) \t<a href=\"1._Subsequences_of_Strings/all_subsequences.cpp\">All Subsequences</a>\nInput: String and output array address(of sufficient size).\nOutput: void? But we will need to give length of the string array, as there’s no delimiter for the given array. Better if we return the size. So int should be the return type.</p>\n<p>Base case: if(input.empty())\noutput[0] = “”;\nreturn 1;\nwhy? Because this the first element that will be printed.\n**Doubt(will “” come only once): **This will be executed only once. As we have only one recursion call, so only one anchor is possible.</p>\n<ul>\n<li>It is important that the base case be very simple, as the single case is **really **the case of the variable belonging to the activation record.</li>\n<li><strong>Believe in yourself, that is the best you can do. For anything fun and useful, you are very good. Just Chill. Alhamdulillah.</strong></li>\n</ul>\n<p>We assume that our recursion will fill the output array with all subsequneces of substr(1).\nHere, we will prepend the elements with the current Activation record’s character, and add these to the ouput array.\nWe will use count as a variable to make a for loop copy “these” after the latest vacant position, which is nothing but “count”\noutput[count+i] = s[0]+output[i]; // we can append a character to a string it’s okay. <strong>This is a very clever trick. It’s ubiquitous.</strong>\nreturn 2*count; // Just return the current output array size, 2 times of what was there before the loop.</p>\n<ul>\n<li>Uses: This problem can be used to solve keypad problems, it is the basis of most problems where we will store our inputs and make changes. We will use this idea.</li>\n</ul>\n<p>**Why? In ‘storage’, if we do calc first, we’ll have to pass the number of copies as we go, which is very painful. Better we do **CBA **and return1 for the empty array. This will ensure that we are right. And we don’t have to explicitly deal with the number of values. **\nRemember that we need to return the number of elements, and creating another formal parameter will be of significant overhead.</p>\n<p>Q) Code all possibilities of a keypad, single press mode.\ne.g 23 : dg dh di eg eh ei fg fh fi\nA) Using the same logic as recursion, do this. Let us make the base case sober(key here is <strong>returning 1 and “” when nothing is printed and with 1</strong>). Let’s code the printing of values in the calc step.\n<a href=\"1._Subsequences_of_Strings/lectureCodes.html\">Keypad print</a></p>\n",
      "id": 117
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/zAssignments/1._Subsequences_of_Strings/lectureCodes.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/zAssignments/1._Subsequences_of_Strings/lectureCodes.html",
      "content": "# Return Keypad Code\n\n    Given an integer n, using phone keypad find out all the possible strings that can be made using digits of input n.\n    Return empty string for numbers 0 and 1.\n\n    Note : The order of strings are not important.\n    Input Format :\n    Integer n\n    Output Format :\n    All possible strings in different lines\n    Constraints :\n    1 <= n <= 10^6\n\n**Sample Input**\n\n    23\n\n**Sample Output**\n\n    ad\n    ae\n    af\n    bd\n    be\n    bf\n    cd\n    ce\n    cf\n\n<details> <summary><strong>Code</strong></summary>\n\n    int keypad(int num, string output[])\n    {\n        /* Insert all the possible combinations of the integer number into the output string array. You do not need to\n        print anything, just return the number of strings inserted into the array.\n        */\n        if (num <= 1)\n        {\n            output[0] = \"\"; // base case\n            return 1;\n        }\n        // we can either do n%10 or n/multplier. The first is good.\n        // as we are taking the last place it will need to be printed at the end of the branch. So a head recursion would suffice, I hope.\n\n        int count = keypad(num / 10, output);\n\n        // assume that the output is now filled.\n        // we need to append the output with all possible values of the given string.\n\n        int a = num % 10;\n        string toPut = \"\";\n\n        switch (a)\n        {\n        case 2:\n            toPut = \"abc\";\n            break;\n        case 3:\n            toPut = \"def\";\n            break;\n        case 4:\n            toPut = \"ghi\";\n            break;\n        case 5:\n            toPut = \"jkl\";\n            break;\n        case 6:\n            toPut = \"mno\";\n            break;\n        case 7:\n            toPut = \"pqrs\";\n            break;\n        case 8:\n            toPut = \"tuv\";\n            break;\n        case 9:\n            toPut = \"wxyz\";\n            break;\n        // default: return 1; // end of everything\n        }\n\n        // we need to make the copies of the output\n        a = toPut.size();   // done with a\n        int jumper = count; // jumper\n\n        for (int i = 0; i < a - 1; i++)\n        {\n            for (int j = 0; j < count; j++)\n            {\n                output[jumper + j] = output[j];\n            }\n            jumper += count;\n        }\n\n        jumper = 0;\n        // append the value\n        for (int i = 0; i < a; i++)\n        {\n            char app = toPut[i];\n            // cout << app << endl;\n            for (int j = 0; j < count; j++)\n            {\n                output[jumper + j] += app;\n            }\n            jumper += count;\n        }\n\n        return a * count;\n    }\n\n    // 1 \"\"\n    // 2 abc\n    // 3 def\n    // 4 ghi\n    // 5 jkl\n    // 6 mno\n    // 7 pqrs\n    // 8 tuv\n    // 9 wxyz\n\n</details>\n\n---\n",
      "html": "<h1 id=\"return-keypad-code\">Return Keypad Code <a class=\"heading-anchor-permalink\" href=\"#return-keypad-code\">#</a></h1>\n<pre><code>Given an integer n, using phone keypad find out all the possible strings that can be made using digits of input n.\nReturn empty string for numbers 0 and 1.\n\nNote : The order of strings are not important.\nInput Format :\nInteger n\nOutput Format :\nAll possible strings in different lines\nConstraints :\n1 &lt;= n &lt;= 10^6\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>23\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>ad\nae\naf\nbd\nbe\nbf\ncd\nce\ncf\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int keypad(int num, string output[])\n{\n    /* Insert all the possible combinations of the integer number into the output string array. You do not need to\n    print anything, just return the number of strings inserted into the array.\n    */\n    if (num &lt;= 1)\n    {\n        output[0] = &quot;&quot;; // base case\n        return 1;\n    }\n    // we can either do n%10 or n/multplier. The first is good.\n    // as we are taking the last place it will need to be printed at the end of the branch. So a head recursion would suffice, I hope.\n\n    int count = keypad(num / 10, output);\n\n    // assume that the output is now filled.\n    // we need to append the output with all possible values of the given string.\n\n    int a = num % 10;\n    string toPut = &quot;&quot;;\n\n    switch (a)\n    {\n    case 2:\n        toPut = &quot;abc&quot;;\n        break;\n    case 3:\n        toPut = &quot;def&quot;;\n        break;\n    case 4:\n        toPut = &quot;ghi&quot;;\n        break;\n    case 5:\n        toPut = &quot;jkl&quot;;\n        break;\n    case 6:\n        toPut = &quot;mno&quot;;\n        break;\n    case 7:\n        toPut = &quot;pqrs&quot;;\n        break;\n    case 8:\n        toPut = &quot;tuv&quot;;\n        break;\n    case 9:\n        toPut = &quot;wxyz&quot;;\n        break;\n    // default: return 1; // end of everything\n    }\n\n    // we need to make the copies of the output\n    a = toPut.size();   // done with a\n    int jumper = count; // jumper\n\n    for (int i = 0; i &lt; a - 1; i++)\n    {\n        for (int j = 0; j &lt; count; j++)\n        {\n            output[jumper + j] = output[j];\n        }\n        jumper += count;\n    }\n\n    jumper = 0;\n    // append the value\n    for (int i = 0; i &lt; a; i++)\n    {\n        char app = toPut[i];\n        // cout &lt;&lt; app &lt;&lt; endl;\n        for (int j = 0; j &lt; count; j++)\n        {\n            output[jumper + j] += app;\n        }\n        jumper += count;\n    }\n\n    return a * count;\n}\n\n// 1 &quot;&quot;\n// 2 abc\n// 3 def\n// 4 ghi\n// 5 jkl\n// 6 mno\n// 7 pqrs\n// 8 tuv\n// 9 wxyz\n</code></pre>\n</details>\n<hr>\n",
      "id": 118
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/zAssignments/2._Printing_subsequence/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/zAssignments/2._Printing_subsequence/0_index.html",
      "content": "# 2. Printing subsequence\nCreated Saturday 04 January 2020\n\n\n* Printing is different from storing. Space requirement is 2^n^.\n* Realise that the subsequence'f' of f(k, abc)  = f(k, bc) + f(ka, bc). Yes, this is true, the first string is what is \"fixed\" and will be printed. \n* **What about short strings, that can be handled in the main() call, by calling f(\"\", input). One node will keep generating only smaller ones.**\n* **Learnt: **In recursion, the function call from main is very important.\n* The **first one** helps in generating deleting values subsequences, while the **2nd one** helps in progressing old ones with all possible new ones. **Saying this is important. It may not be directly technically useful, but provides the motivation.**\n* i.e we are either including or excluding the head character.\n* We **do** carry our output with us.\n* print when input is an empty string. Use substr(liberally).\n* Space complexity: Same as the height of the tree. Here it is the same as the node where we get the output as the string size.\n* As this is a binary tree, hence we have 2**n leaf nodes. Storing had only one leaf node, as it was a skewed tree. Printing is not a skewed tree.\n\n[All subsequences](2._Printing_subsequence/all_subsequences.cpp)\n\nPrint Keypad:\nStep \n\n1. try some example, 23 9 possiblilites.\n2. As this is like a subsequence, except for the fact that we have toPut.size() number of problems, and not a simple inclusion/exclusion.\n3. We will prefer %10 rather than storing up a divider(10^r). This decides toPut, which will surely be prepended to the output.\n4. 234, as an example can be written as f(234,\"\")= f(23, toPut(i)+\"\"). The recurrence relation. **Maybe** we can escape using memoization. But that is just storing, **busted**.\n5. Base case: When we get num==0(num and not a digit okay, they are different), just print the output. \n\n[Keypad Problem](2._Printing_subsequence/print_keypad.cpp)\n\n",
      "html": "<h1 id=\"2.-printing-subsequence\">2. Printing subsequence <a class=\"heading-anchor-permalink\" href=\"#2.-printing-subsequence\">#</a></h1>\n<p>Created Saturday 04 January 2020</p>\n<ul>\n<li>Printing is different from storing. Space requirement is 2^n^.</li>\n<li>Realise that the subsequence’f’ of f(k, abc)  = f(k, bc) + f(ka, bc). Yes, this is true, the first string is what is “fixed” and will be printed.</li>\n<li><strong>What about short strings, that can be handled in the main() call, by calling f(&quot;&quot;, input). One node will keep generating only smaller ones.</strong></li>\n<li>**Learnt: **In recursion, the function call from main is very important.</li>\n<li>The <strong>first one</strong> helps in generating deleting values subsequences, while the <strong>2nd one</strong> helps in progressing old ones with all possible new ones. <strong>Saying this is important. It may not be directly technically useful, but provides the motivation.</strong></li>\n<li>i.e we are either including or excluding the head character.</li>\n<li>We <strong>do</strong> carry our output with us.</li>\n<li>print when input is an empty string. Use substr(liberally).</li>\n<li>Space complexity: Same as the height of the tree. Here it is the same as the node where we get the output as the string size.</li>\n<li>As this is a binary tree, hence we have 2**n leaf nodes. Storing had only one leaf node, as it was a skewed tree. Printing is not a skewed tree.</li>\n</ul>\n<p><a href=\"2._Printing_subsequence/all_subsequences.cpp\">All subsequences</a></p>\n<p>Print Keypad:\nStep</p>\n<ol>\n<li>try some example, 23 9 possiblilites.</li>\n<li>As this is like a subsequence, except for the fact that we have toPut.size() number of problems, and not a simple inclusion/exclusion.</li>\n<li>We will prefer %10 rather than storing up a divider(10^r). This decides toPut, which will surely be prepended to the output.</li>\n<li>234, as an example can be written as f(234,&quot;&quot;)= f(23, toPut(i)+&quot;&quot;). The recurrence relation. <strong>Maybe</strong> we can escape using memoization. But that is just storing, <strong>busted</strong>.</li>\n<li>Base case: When we get num==0(num and not a digit okay, they are different), just print the output.</li>\n</ol>\n<p><a href=\"2._Printing_subsequence/print_keypad.cpp\">Keypad Problem</a></p>\n",
      "id": 119
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/zAssignments/after_assignments.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/3._Applications_of_Recursion/zAssignments/after_assignments.html",
      "content": "<details> <summary><strong> 1. Check AB </strong></summary>\n\n# 1. Check AB\n\n    Suppose you have a string made up of only 'a' and 'b'.\n\n    Write a recursive function that checks if the string was generated using the following rules:\n        a. The string begins with an 'a'\n        b. Each 'a' is followed by nothing or an 'a' or \"bb\"\n        c. Each \"bb\" is followed by nothing or an 'a'\n\n    If all the rules are followed by the given string, return true otherwise return false.\n\n**Sample Input**\n\n    abb\n\n**Sample Output**\n\n    true\n\n<details> <summary><strong>Code</strong></summary>\n\n    bool helper(char* input);\n\n    bool checkAB(char input[])\n    {\n        if(*input!='a')\n            return false;\n        return helper(input);\n    }\n\n    bool helper(char *input)\n    {\n        if(input[0]==0)\n            return true;\n\n        bool rule_2 = input[0]=='a' && (input[1]==0 || (input[1]=='a') || (input[1]=='b' && input[2]=='b'));\n        if(rule_2)\n            return helper(input+1);\n\n        bool rule_3 = (input[0]=='b' && input[1]=='b') && (input[2]==0 || input[2]=='a');\n         if(rule_3)\n            return helper(input+2);\n\n        return false;\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 2. Staircase </strong></summary>\n\n# 2. Staircase\n\n    A child is running up a staircase with N steps, and can hop either 1 step, 2 steps or 3 steps at a time. Implement a method to count how many possible ways the child can run up to the stairs.\n    You need to return number of possible ways W.\n\n**Input Format**\n\n    Line 1 : Integer N (No. of steps)\n\n**Output Format**\n\n    Line 1 : Integer W i.e. Number of possible ways\n\n**Constraints**\n\n    (1 <= N <= 30)\n\n**Sample Input**\n\n    4\n\n**Sample Output**\n\n    7\n\n<details> <summary><strong>Code</strong></summary>\n\n    int staircase(int n)\n    {\n        if(n<0)\n            return 0; // no possible way to do this\n\n        if(n==0)    // i.e we took a full step of length 1 or 2 or 3. Mark it as 'a' step.\n            return 1;\n        // taking no step is also a single operation. i.e don't move 0C0. This will not affect our ops in any way\n\n        // we take a step of length 1 or 2 or 3, the remaining length's way's into 1 for each term\n        // i.e\n        // 1 f(n-1)\n        // 2 f(n-2)\n        // 3 f(n-3)\n        // add them up = 1*f(n-1) + 1*f(n-2) + 1*f(n-3) = f(n-1) + f(n-2) + f(n-3)\n\n        return staircase(n-1) + staircase(n-2) + staircase(n-3);\n    }\n\n    //  Resources\n    //  https://www.youtube.com/watch?v=5o-kdjv7FD0\n    //  https://www.dailycodingproblem.com/?ref=csdojo\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 3. Binary Search (Recursive) </strong></summary>\n\n# 3. Binary Search (Recursive)\n\n    Given an integer sorted array (sorted in increasing order) and an element x, find the x in given array using binary search. Return the index of x.\n\n    Return -1 if x is not present in the given array.\n    Note : If given array size is even, take first mid.\n\n**Input Format**\n\n    Line 1 : Array size\n\n    Line 2 : Array elements (separated by space)\n\n    Line 3 : x (element to be searched)\n\n**Sample Input**\n\n    6\n    2 3 4 5 6 8\n    5\n\n**Sample Output**\n\n    3\n\n<details> <summary><strong>Code</strong></summary>\n\n    int helper(int* A, int start, int end, int &x)\n    {\n        if(start==end)\n        {\n            if(A[start]==x)\n                return start;\n            return -1;\n        } // base case\n\n        if( x== A[(start+end)/2])     // calculation\n            return (start+end)/2;\n        else if(x < A[(start+end)/2])\n            return helper(A, start, (start+end)/2 - 1, x); // recursive 1\n        return helper(A, 1+(start+end)/2, end, x);    // recursive\n    }\n\n    int binarySearch(int input[], int size, int element) {\n        // Write your code here\n        if(size==0)\n            return -1;\n        return helper(input, 0, size-1, element);\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 4. Return subset of an array </strong></summary>\n\n# 4. Return subset of an array\n\n    Given an integer array (of length n), find and return all the subsets of input array.\n\n    Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.\n    Note : The order of subsets are not important.\n\n**Input Format**\n\n    Line 1 : Size of array\n\n    Line 2 : Array elements (separated by space)\n\n**Sample Input**\n\n    3\n    15 20 12\n\n**Sample Output**\n\n    [] (this just represents an empty array, don't worry about the square brackets)\n    12\n    20\n    20 12\n    15\n    15 12\n    15 20\n    15 20 12\n\n<details> <summary><strong>Code</strong></summary>\n\n    int subset(int input[], int n, int output[][20])\n    {\n        if (n == 0)\n        {\n            output[0][0] = 0; // length updated\n            return 1;\n        }\n\n        int num = subset(input + 1, n - 1, output);\n\n        // doing it in one go\n        for (int i = 0; i < num; i++)\n        {\n            output[i + num][0] = output[i][0] + 1; // length updated\n            output[i + num][1] = input[0];         // value prepended\n            for (int j = 0; j < output[i][0]; j++)\n            {\n                output[i + num][j + 2] = output[i][j + 1];\n            }\n        }\n        return 2 * num;\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 5. Print Subsets of Array </strong></summary>\n\n# 5. Print Subsets of Array\n\n    Given an integer array (of length n), find and print all the subsets of input array.\n\n    Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.\n\n    Note : The order of subsets are not important. Just print the subsets in different lines.\n\n**Input Format**\n\n    Line 1 : Integer n, Size of array\n    Line 2 : Array elements (separated by space)\n\n**Constraints**\n\n    1 <= n <= 15\n\n**Sample Input**\n\n    3\n    15 20 12\n\n**Sample Output**\n\n    [] (this just represents an empty array, don't worry about the square brackets)\n    12\n    20\n    20 12\n    15\n    15 12\n    15 20\n    15 20 12\n\n<details> <summary><strong>Code</strong></summary>\n\n    void helper(int *input, int n, int *output, int onum);\n\n    void printSubsetsOfArray(int input[], int size)\n    {\n        int *b = new int[20];\n        if (size != 0)\n            helper(input, size, 0, 0);\n    }\n\n    void helper(int *input, int n, int *output, int onum)\n    {\n        if (n == 0)\n        {\n            for (int i = 0; i < onum; i++)\n                cout << output[i] << \" \";\n            cout << endl;\n            delete[] output;\n            return;\n        }\n\n        int *contrib = new int[onum + 1];\n        // int *op2 = new int[onum];\n\n        for (int i = 0; i < onum; i++)\n            contrib[i] = output[i];\n\n        contrib[onum] = input[0];\n\n        helper(input + 1, n - 1, output, onum);\n        helper(input + 1, n - 1, contrib, onum + 1);\n\n        delete[] contrib;\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 6. Return subsets sum to K </strong></summary>\n\n# 6. Return subsets sum to K\n\n    Given an array A of size n and an integer K, return all subsets of A which sum to K.\n\n    Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.\n\n    Note : The order of subsets are not important.\n\n**Input Format**\n\n    Line 1 : Integer n, Size of input array\n    Line 2 : Array elements separated by space\n    Line 3 : K\n\n**Constraints**\n\n    1 <= n <= 20\n\n**Sample Input**\n\n    9\n    5 12 3 17 1 18 15 3 17\n    6\n\n**Sample Output**\n\n3 3\n5 1\n\n<details> <summary><strong>Code</strong></summary>\n\n    /***\n    You need to save all the subsets in the given 2D output array. And return the number of subsets(i.e. number of rows filled in output) from the given function.\n\n    In ith row of output array, 1st column contains length of the ith subset. And from 1st column actual subset follows.\n    For eg. Input : {1, 3, 4, 2} and K = 5, then output array should contain\n    \t{{2, 1, 4},\t// Length of this subset is 2\n    \t{2, 3, 2}}\t// Length of this subset is 2\n\n    Don’t print the subsets, just save them in output.\n    ***/\n\n    int subsetSumToK(int input[], int n, int output[][50], int k) {\n        // Write your code here\n\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 7. Print subsets sum to K </strong></summary>\n\n# 7. Print subsets sum to K\n\n    Given an array A and an integer K, print all subsets of A which sum to K.\n    Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.\n\n    Note : The order of subsets are not important. Just print them in different lines.\n\n**Input Format**\n\n    Line 1 : Size of input array\n    Line 2 : Array elements separated by space\n    Line 3 : K\n\n**Constraints**\n\n    1 <= n <= 20\n\n**Sample Input**\n\n    9\n    5 12 3 17 1 18 15 3 17\n    6\n\n**Sample Output**\n\n    3 3\n    5 1\n\n<details> <summary><strong>Code</strong></summary>\n\n    void printSubsetSumToK(int input[], int size, int k)\n    {\n        // Write your code here\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 8. Return all codes - String </strong></summary>\n\n# 8. Return all codes - String\n\n    Assume that the value of a = 1, b = 2, c = 3, ... , z = 26. You are given a numeric string S. Write a program to return the list of all possible codes that can be generated from the given string.\n    Note : The order of codes are not important. And input string does not contain 0s.\n\n**Input Format**\n\n    A numeric string\n\n**Constraints**\n\n    1 <= Length of String S <= 10\n\n**Sample Input**\n\n    1123\n\n**Sample Output**\n\n    aabc\n    kbc\n    alc\n    aaw\n    kw\n\n<details> <summary><strong>Code</strong></summary>\n\n    #include <string.h>\n    using namespace std;\n\n    int getCodes(string input, string output[10000]) {\n        /*\n        You are given the input text and output string array. Find all possible codes and store in the output string array. Don’t print the codes.\n        Also, return the number of codes return to the output string. You do not need to print anything.\n        */\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 9. Print all codes - String </strong></summary>\n\n# 9. Print all codes - String\n\n    Assume that the value of a = 1, b = 2, c = 3, ... , z = 26. You are given a numeric string S. Write a program to print the list of all possible codes that can be generated from the given string.\n\n    Note : The order of codes are not important. Just print them in different lines.\n\n**Input Format**\n\n    A numeric string S\n\n**Output Format**\n\n    All possible codes in different lines\n\n**Constraints**\n\n    1 <= Length of String S <= 10\n\n**Sample Input**\n\n    1123\n\n**Sample Output**\n\n    aabc\n    kbc\n    alc\n    aaw\n    kw\n\n<details> <summary><strong>Code</strong></summary>\n\n    #include <string.h>\n    using namespace std;\n\n    void printAllPossibleCodes(string input)\n    {\n        /*\n        Given the input as a string, print all its possible combinations. You do not need to return anything.\n        */\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 10. Return Permutations - String </strong></summary>\n\n# 10. Return Permutations - String\n\n    Given a string S, find and return all the possible permutations of the input string.\n    Note 1 : The order of permutations is not important.\n    Note 2 : If original string contains duplicate characters, permutations will also be duplicates.\n\n**Input Format**\n\n    String S\n\n**Sample Input**\n\n    abc\n\n**Sample Output**\n\n    abc\n    acb\n    bac\n    bca\n    cab\n    cba\n\n<details> <summary><strong>Code</strong></summary>\n\n    #include <string>\n    using namespace std;\n\n    int returnPermutations(string input, string output[])\n    {\n       \t/* Don't write main() function.\n    \t * Don't read input, it is passed as function argument.\n    \t * Print output as specified in the question\n    \t*/\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 11. Print Permutations - String </strong></summary>\n\n# 11. Print Permutations - String\n\n    Given a string, find and print all the possible permutations of the input string.\n\n    Note : The order of permutations are not important. Just print them in different lines.\n\n**Sample Input**\n\n    abc\n\n**Sample Output**\n\n    abc\n    acb\n    bac\n    bca\n    cab\n    cba\n\n<details> <summary><strong>Code</strong></summary>\n\n    #include <iostream>\n    #include <string>\n    using namespace std;\n\n    void helper(string output, string input);\n\n    void printPermutations(string input)\n    {\n        if(input.size()==0)\n            return;\n        helper(\"\", input);\n    }\n\n    void helper(string output, string input)\n    {\n        if(input.size()==0)\n        {\n            cout << output << endl;\n            return;\n        }\n\n        int num = input.size();\n        // just the shift function\n        for(int i = 0; i < num; i++)\n            helper(output + input[i], input.substr(0, i) + input.substr(i+1));\n\n    }\n\n    // in the second half of the call, we just do our move to front \"move\"\n\n</details>\n\n---\n\n</details>\n",
      "html": "<details> <summary><strong> 1. Check AB </strong></summary>\n<h1 id=\"1.-check-ab\">1. Check AB <a class=\"heading-anchor-permalink\" href=\"#1.-check-ab\">#</a></h1>\n<pre><code>Suppose you have a string made up of only 'a' and 'b'.\n\nWrite a recursive function that checks if the string was generated using the following rules:\n    a. The string begins with an 'a'\n    b. Each 'a' is followed by nothing or an 'a' or &quot;bb&quot;\n    c. Each &quot;bb&quot; is followed by nothing or an 'a'\n\nIf all the rules are followed by the given string, return true otherwise return false.\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>abb\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>true\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>bool helper(char* input);\n\nbool checkAB(char input[])\n{\n    if(*input!='a')\n        return false;\n    return helper(input);\n}\n\nbool helper(char *input)\n{\n    if(input[0]==0)\n        return true;\n\n    bool rule_2 = input[0]=='a' &amp;&amp; (input[1]==0 || (input[1]=='a') || (input[1]=='b' &amp;&amp; input[2]=='b'));\n    if(rule_2)\n        return helper(input+1);\n\n    bool rule_3 = (input[0]=='b' &amp;&amp; input[1]=='b') &amp;&amp; (input[2]==0 || input[2]=='a');\n     if(rule_3)\n        return helper(input+2);\n\n    return false;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 2. Staircase </strong></summary>\n<h1 id=\"2.-staircase\">2. Staircase <a class=\"heading-anchor-permalink\" href=\"#2.-staircase\">#</a></h1>\n<pre><code>A child is running up a staircase with N steps, and can hop either 1 step, 2 steps or 3 steps at a time. Implement a method to count how many possible ways the child can run up to the stairs.\nYou need to return number of possible ways W.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Integer N (No. of steps)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Line 1 : Integer W i.e. Number of possible ways\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>(1 &lt;= N &lt;= 30)\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>4\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>7\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int staircase(int n)\n{\n    if(n&lt;0)\n        return 0; // no possible way to do this\n\n    if(n==0)    // i.e we took a full step of length 1 or 2 or 3. Mark it as 'a' step.\n        return 1;\n    // taking no step is also a single operation. i.e don't move 0C0. This will not affect our ops in any way\n\n    // we take a step of length 1 or 2 or 3, the remaining length's way's into 1 for each term\n    // i.e\n    // 1 f(n-1)\n    // 2 f(n-2)\n    // 3 f(n-3)\n    // add them up = 1*f(n-1) + 1*f(n-2) + 1*f(n-3) = f(n-1) + f(n-2) + f(n-3)\n\n    return staircase(n-1) + staircase(n-2) + staircase(n-3);\n}\n\n//  Resources\n//  https://www.youtube.com/watch?v=5o-kdjv7FD0\n//  https://www.dailycodingproblem.com/?ref=csdojo\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 3. Binary Search (Recursive) </strong></summary>\n<h1 id=\"3.-binary-search-(recursive)\">3. Binary Search (Recursive) <a class=\"heading-anchor-permalink\" href=\"#3.-binary-search-(recursive)\">#</a></h1>\n<pre><code>Given an integer sorted array (sorted in increasing order) and an element x, find the x in given array using binary search. Return the index of x.\n\nReturn -1 if x is not present in the given array.\nNote : If given array size is even, take first mid.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Array size\n\nLine 2 : Array elements (separated by space)\n\nLine 3 : x (element to be searched)\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>6\n2 3 4 5 6 8\n5\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>3\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int helper(int* A, int start, int end, int &amp;x)\n{\n    if(start==end)\n    {\n        if(A[start]==x)\n            return start;\n        return -1;\n    } // base case\n\n    if( x== A[(start+end)/2])     // calculation\n        return (start+end)/2;\n    else if(x &lt; A[(start+end)/2])\n        return helper(A, start, (start+end)/2 - 1, x); // recursive 1\n    return helper(A, 1+(start+end)/2, end, x);    // recursive\n}\n\nint binarySearch(int input[], int size, int element) {\n    // Write your code here\n    if(size==0)\n        return -1;\n    return helper(input, 0, size-1, element);\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 4. Return subset of an array </strong></summary>\n<h1 id=\"4.-return-subset-of-an-array\">4. Return subset of an array <a class=\"heading-anchor-permalink\" href=\"#4.-return-subset-of-an-array\">#</a></h1>\n<pre><code>Given an integer array (of length n), find and return all the subsets of input array.\n\nSubsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.\nNote : The order of subsets are not important.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Size of array\n\nLine 2 : Array elements (separated by space)\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>3\n15 20 12\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>[] (this just represents an empty array, don't worry about the square brackets)\n12\n20\n20 12\n15\n15 12\n15 20\n15 20 12\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int subset(int input[], int n, int output[][20])\n{\n    if (n == 0)\n    {\n        output[0][0] = 0; // length updated\n        return 1;\n    }\n\n    int num = subset(input + 1, n - 1, output);\n\n    // doing it in one go\n    for (int i = 0; i &lt; num; i++)\n    {\n        output[i + num][0] = output[i][0] + 1; // length updated\n        output[i + num][1] = input[0];         // value prepended\n        for (int j = 0; j &lt; output[i][0]; j++)\n        {\n            output[i + num][j + 2] = output[i][j + 1];\n        }\n    }\n    return 2 * num;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 5. Print Subsets of Array </strong></summary>\n<h1 id=\"5.-print-subsets-of-array\">5. Print Subsets of Array <a class=\"heading-anchor-permalink\" href=\"#5.-print-subsets-of-array\">#</a></h1>\n<pre><code>Given an integer array (of length n), find and print all the subsets of input array.\n\nSubsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.\n\nNote : The order of subsets are not important. Just print the subsets in different lines.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Integer n, Size of array\nLine 2 : Array elements (separated by space)\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= n &lt;= 15\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>3\n15 20 12\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>[] (this just represents an empty array, don't worry about the square brackets)\n12\n20\n20 12\n15\n15 12\n15 20\n15 20 12\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>void helper(int *input, int n, int *output, int onum);\n\nvoid printSubsetsOfArray(int input[], int size)\n{\n    int *b = new int[20];\n    if (size != 0)\n        helper(input, size, 0, 0);\n}\n\nvoid helper(int *input, int n, int *output, int onum)\n{\n    if (n == 0)\n    {\n        for (int i = 0; i &lt; onum; i++)\n            cout &lt;&lt; output[i] &lt;&lt; &quot; &quot;;\n        cout &lt;&lt; endl;\n        delete[] output;\n        return;\n    }\n\n    int *contrib = new int[onum + 1];\n    // int *op2 = new int[onum];\n\n    for (int i = 0; i &lt; onum; i++)\n        contrib[i] = output[i];\n\n    contrib[onum] = input[0];\n\n    helper(input + 1, n - 1, output, onum);\n    helper(input + 1, n - 1, contrib, onum + 1);\n\n    delete[] contrib;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 6. Return subsets sum to K </strong></summary>\n<h1 id=\"6.-return-subsets-sum-to-k\">6. Return subsets sum to K <a class=\"heading-anchor-permalink\" href=\"#6.-return-subsets-sum-to-k\">#</a></h1>\n<pre><code>Given an array A of size n and an integer K, return all subsets of A which sum to K.\n\nSubsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.\n\nNote : The order of subsets are not important.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Integer n, Size of input array\nLine 2 : Array elements separated by space\nLine 3 : K\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= n &lt;= 20\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>9\n5 12 3 17 1 18 15 3 17\n6\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<p>3 3\n5 1</p>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>/***\nYou need to save all the subsets in the given 2D output array. And return the number of subsets(i.e. number of rows filled in output) from the given function.\n\nIn ith row of output array, 1st column contains length of the ith subset. And from 1st column actual subset follows.\nFor eg. Input : {1, 3, 4, 2} and K = 5, then output array should contain\n\t{{2, 1, 4},\t// Length of this subset is 2\n\t{2, 3, 2}}\t// Length of this subset is 2\n\nDon’t print the subsets, just save them in output.\n***/\n\nint subsetSumToK(int input[], int n, int output[][50], int k) {\n    // Write your code here\n\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 7. Print subsets sum to K </strong></summary>\n<h1 id=\"7.-print-subsets-sum-to-k\">7. Print subsets sum to K <a class=\"heading-anchor-permalink\" href=\"#7.-print-subsets-sum-to-k\">#</a></h1>\n<pre><code>Given an array A and an integer K, print all subsets of A which sum to K.\nSubsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.\n\nNote : The order of subsets are not important. Just print them in different lines.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Size of input array\nLine 2 : Array elements separated by space\nLine 3 : K\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= n &lt;= 20\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>9\n5 12 3 17 1 18 15 3 17\n6\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>3 3\n5 1\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>void printSubsetSumToK(int input[], int size, int k)\n{\n    // Write your code here\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 8. Return all codes - String </strong></summary>\n<h1 id=\"8.-return-all-codes---string\">8. Return all codes - String <a class=\"heading-anchor-permalink\" href=\"#8.-return-all-codes---string\">#</a></h1>\n<pre><code>Assume that the value of a = 1, b = 2, c = 3, ... , z = 26. You are given a numeric string S. Write a program to return the list of all possible codes that can be generated from the given string.\nNote : The order of codes are not important. And input string does not contain 0s.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>A numeric string\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= Length of String S &lt;= 10\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>1123\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>aabc\nkbc\nalc\naaw\nkw\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>#include &lt;string.h&gt;\nusing namespace std;\n\nint getCodes(string input, string output[10000]) {\n    /*\n    You are given the input text and output string array. Find all possible codes and store in the output string array. Don’t print the codes.\n    Also, return the number of codes return to the output string. You do not need to print anything.\n    */\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 9. Print all codes - String </strong></summary>\n<h1 id=\"9.-print-all-codes---string\">9. Print all codes - String <a class=\"heading-anchor-permalink\" href=\"#9.-print-all-codes---string\">#</a></h1>\n<pre><code>Assume that the value of a = 1, b = 2, c = 3, ... , z = 26. You are given a numeric string S. Write a program to print the list of all possible codes that can be generated from the given string.\n\nNote : The order of codes are not important. Just print them in different lines.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>A numeric string S\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>All possible codes in different lines\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= Length of String S &lt;= 10\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>1123\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>aabc\nkbc\nalc\naaw\nkw\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>#include &lt;string.h&gt;\nusing namespace std;\n\nvoid printAllPossibleCodes(string input)\n{\n    /*\n    Given the input as a string, print all its possible combinations. You do not need to return anything.\n    */\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 10. Return Permutations - String </strong></summary>\n<h1 id=\"10.-return-permutations---string\">10. Return Permutations - String <a class=\"heading-anchor-permalink\" href=\"#10.-return-permutations---string\">#</a></h1>\n<pre><code>Given a string S, find and return all the possible permutations of the input string.\nNote 1 : The order of permutations is not important.\nNote 2 : If original string contains duplicate characters, permutations will also be duplicates.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>String S\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>abc\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>abc\nacb\nbac\nbca\ncab\ncba\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>#include &lt;string&gt;\nusing namespace std;\n\nint returnPermutations(string input, string output[])\n{\n   \t/* Don't write main() function.\n\t * Don't read input, it is passed as function argument.\n\t * Print output as specified in the question\n\t*/\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 11. Print Permutations - String </strong></summary>\n<h1 id=\"11.-print-permutations---string\">11. Print Permutations - String <a class=\"heading-anchor-permalink\" href=\"#11.-print-permutations---string\">#</a></h1>\n<pre><code>Given a string, find and print all the possible permutations of the input string.\n\nNote : The order of permutations are not important. Just print them in different lines.\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>abc\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>abc\nacb\nbac\nbca\ncab\ncba\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nvoid helper(string output, string input);\n\nvoid printPermutations(string input)\n{\n    if(input.size()==0)\n        return;\n    helper(&quot;&quot;, input);\n}\n\nvoid helper(string output, string input)\n{\n    if(input.size()==0)\n    {\n        cout &lt;&lt; output &lt;&lt; endl;\n        return;\n    }\n\n    int num = input.size();\n    // just the shift function\n    for(int i = 0; i &lt; num; i++)\n        helper(output + input[i], input.substr(0, i) + input.substr(i+1));\n\n}\n\n// in the second half of the call, we just do our move to front &quot;move&quot;\n</code></pre>\n</details>\n<hr>\n</details>\n",
      "id": 120
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/Test1.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/3._Recursion/Test1.html",
      "content": "# MCQs\n\n**1. Recurrence Relation for Tower of Hanoi Problem**\n\n    The recurrence relation capturing the optimal execution time of the Towers of Hanoi problem with n discs is :\n\n**Options**\n\n    a. T(n) = 2T(n − 2) + 2\n    b. T(n) = 2T(n − 1) + n\n    c. T(n) = 2T(n/2) + 1\n    d. T(n) = 2T(n − 1) + 1\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    d. T(n) = 2T(n − 1) + 1\n    Move the n-1 disc-heap to auxilary, move the heaviest disc to the destination. Then move the n-1 disc-heap to the destination.\n    T(n-1) + 1 + T(n-1) = 2T(n-1) + 1\n\n</details>\n\n---\n\n**Complexity of different operations in a sorted array.**\n\n    Which of the following operations is not O(1) for an array of sorted data. You may assume that array elements are distinct.\n\n**Options**\n\n    a. Find the ith largest element\n    b. Delete an element\n    c. Find the ith smallest element\n    d. All of the above\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. Delete an element\n    Catch all ops here are O(1) except delete because all elements are \"distinct\".\n\n</details>\n\n---\n\n**Complexity of a Recurrence Relation**\n\n    Which one of the following correctly determines the solution of the recurrence relation with T(1) = 1?\n\n    T(n) = 2T(n/2) + Logn\n\n**Options**\n\n    a. O(N)\n    b. O(NlogN)\n    c. O(N^2)\n    d. O(log N)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. O(N)\n    Make a recursion tree, add all values up\n\n</details>\n\n---\n\n# Coding Problems\n\n<details> <summary><strong> 1. Does s contain t ? </strong></summary>\n\n# 1. Does s contain t ?\n\n    Given two string s and t, write a function to check if s contains all characters of t (in the same order as they are in string t).\n\n    Return true or false.\n\n    Do it recursively.\n\n    E.g. : s = “abchjsgsuohhdhyrikkknddg” contains all characters of t=”coding” in the same order. So function will return true.\n\n**Input Format**\n\n    Line 1 : String s\n    Line 2 : String t\n\n**Output Format**\n\n    true or false\n\n**Sample Input 1**\n\n    abchjsgsuohhdhyrikkknddg\n    coding\n\n**Sample Output 1**\n\n    1\n\n**Sample Input 2**\n\n    abcde\n    aeb\n\n**Sample Output 2**\n\n    false\n\n<details> <summary><strong>Code</strong></summary>\n\n    bool checksequenece(char t[] , char*s)\n    {\n        if(*s==0)\n            return true; // i.e all found or nothing to (or left to) search\n\n        while(*t!=0 && *t!=*s)\n            t++;\n        if(*t==0)\n            return false; // search space ends but not found\n        return checksequenece(t+1, s+1);\n    }\n\n    // Time Complexity: O(n)\n    // Space Complexity: O(n)\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 2. Maximum Profit on App </strong></summary>\n\n# 2. Maximum Profit on App\n\n    You have made a smartphone app and want to set its price such that the profit earned is maximised. There are certain buyers who will buy your app only if their budget is greater than or equal to your price.\n\n    You will be provided with a list of size N having budgets of buyers and you need to return the maximum profit that you can earn.\n\n    Lets say you decide that price of your app is Rs. x and there are N number of buyers. So maximum profit you can earn is :\n\n        m * x\n\n    where m is total number of buyers whose budget is greater than or equal to x.\n\n**Input Format**\n\n    Line 1 : N (No. of buyers)\n    Line 2 : Budget of buyers (separated by space)\n\n**Output Format**\n\n    Maximum profit\n\n**Constraints**\n\n    1 <= N <= 10^6\n\n**Sample Input 1**\n\n    4\n    30 20 53 14\n\n**Sample Output 1**\n\n    60\n\n**Sample Output 1 Explanation**\n\n    Price of your app should be Rs. 20 or Rs. 30. For both prices, you can get the profit Rs. 60.\n\n**Sample Input 2**\n\n    5\n    34 78 90 15 67\n\n**Sample Output 2**\n\n    201\n\n**Sample Output 2 Explanation**\n\n    Price of your app should be Rs. 67. You can get the profit Rs. 201 (i.e. 3 * 67).\n\n<details> <summary><strong>Code</strong></summary>\n\n    #include<algorithm>\n    int maximumProfit(int budget[], int n)\n    {\n        std::sort(budget, budget+n);\n\n        int prev_profit = 0;\n        int price = 0;\n        int buyers = 0;\n\n        int i = 0;\n\n        while(i<n)\n        {\n            if(prev_profit < budget[i]*(n-i))\n            {\n                prev_profit = budget[i]*(n-i);\n                price = budget[i];\n                buyers = n-i;\n            }\n\n            while(i<=n-2 && budget[i]==budget[i+1]) // i<n-1 only for out of bounds check\n                i++;\n\n            i++; // on the different one\n        }\n\n        return price*buyers;\n    }\n\n    // T.C = O(nlogn)\n    // S.C = O(n)\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 3. Split Array </strong></summary>\n\n# 3. Split Array\n\n    Given an integer array A of size N, check if the input array can be splitted in two parts such that -\n\n        - Sum of both parts is equal\n        - All elements in the input, which are divisible by 5 should be in same group.\n        - All elements in the input, which are divisible by 3 (but not divisible by 5) should be in other group.\n        - Elements which are neither divisible by 5 nor by 3, can be put in any group.\n\n    Groups can be made with any set of elements, i.e. elements need not to be continuous. And you need to consider each and every element of input array in some group.\n\n    Return true, if array can be split according to the above rules, else return false.\n\n    Note : You will get marks only if all the test cases are passed.\n\n**Input Format**\n\n    Line 1 : Integer N (size of array)\n\n    Line 2 : Array A elements (separated by space)\n\n**Output Format**\n\n    true or false\n\n**Constraints**\n\n    1 <= N <= 50\n\n**Sample Input 1**\n\n    2\n    1 2\n\n**Sample Output 1**\n\n    false\n\n**Sample Input 2**\n\n    3\n    1 4 3\n\n**Sample Output 2**\n\n    true\n\n<details> <summary><strong>Code</strong></summary>\n\n    bool splitArray(int *input, int size)\n    {\n        /* Don't write main().\n         * Don't read input, it is passed as function argument.\n         * Return output and don't print it.\n         * Taking input and printing output is handled automatically.\n         */\n\n    }\n\n</details>\n\n---\n\n</details>\n",
      "html": "<h1 id=\"mcqs\">MCQs <a class=\"heading-anchor-permalink\" href=\"#mcqs\">#</a></h1>\n<p><strong>1. Recurrence Relation for Tower of Hanoi Problem</strong></p>\n<pre><code>The recurrence relation capturing the optimal execution time of the Towers of Hanoi problem with n discs is :\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. T(n) = 2T(n − 2) + 2\nb. T(n) = 2T(n − 1) + n\nc. T(n) = 2T(n/2) + 1\nd. T(n) = 2T(n − 1) + 1\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>d. T(n) = 2T(n − 1) + 1\nMove the n-1 disc-heap to auxilary, move the heaviest disc to the destination. Then move the n-1 disc-heap to the destination.\nT(n-1) + 1 + T(n-1) = 2T(n-1) + 1\n</code></pre>\n</details>\n<hr>\n<p><strong>Complexity of different operations in a sorted array.</strong></p>\n<pre><code>Which of the following operations is not O(1) for an array of sorted data. You may assume that array elements are distinct.\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Find the ith largest element\nb. Delete an element\nc. Find the ith smallest element\nd. All of the above\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. Delete an element\nCatch all ops here are O(1) except delete because all elements are &quot;distinct&quot;.\n</code></pre>\n</details>\n<hr>\n<p><strong>Complexity of a Recurrence Relation</strong></p>\n<pre><code>Which one of the following correctly determines the solution of the recurrence relation with T(1) = 1?\n\nT(n) = 2T(n/2) + Logn\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(N)\nb. O(NlogN)\nc. O(N^2)\nd. O(log N)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. O(N)\nMake a recursion tree, add all values up\n</code></pre>\n</details>\n<hr>\n<h1 id=\"coding-problems\">Coding Problems <a class=\"heading-anchor-permalink\" href=\"#coding-problems\">#</a></h1>\n<details> <summary><strong> 1. Does s contain t ? </strong></summary>\n<h1 id=\"1.-does-s-contain-t-%3F\">1. Does s contain t ? <a class=\"heading-anchor-permalink\" href=\"#1.-does-s-contain-t-%3F\">#</a></h1>\n<pre><code>Given two string s and t, write a function to check if s contains all characters of t (in the same order as they are in string t).\n\nReturn true or false.\n\nDo it recursively.\n\nE.g. : s = “abchjsgsuohhdhyrikkknddg” contains all characters of t=”coding” in the same order. So function will return true.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : String s\nLine 2 : String t\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>true or false\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>abchjsgsuohhdhyrikkknddg\ncoding\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>1\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>abcde\naeb\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>false\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>bool checksequenece(char t[] , char*s)\n{\n    if(*s==0)\n        return true; // i.e all found or nothing to (or left to) search\n\n    while(*t!=0 &amp;&amp; *t!=*s)\n        t++;\n    if(*t==0)\n        return false; // search space ends but not found\n    return checksequenece(t+1, s+1);\n}\n\n// Time Complexity: O(n)\n// Space Complexity: O(n)\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 2. Maximum Profit on App </strong></summary>\n<h1 id=\"2.-maximum-profit-on-app\">2. Maximum Profit on App <a class=\"heading-anchor-permalink\" href=\"#2.-maximum-profit-on-app\">#</a></h1>\n<pre><code>You have made a smartphone app and want to set its price such that the profit earned is maximised. There are certain buyers who will buy your app only if their budget is greater than or equal to your price.\n\nYou will be provided with a list of size N having budgets of buyers and you need to return the maximum profit that you can earn.\n\nLets say you decide that price of your app is Rs. x and there are N number of buyers. So maximum profit you can earn is :\n\n    m * x\n\nwhere m is total number of buyers whose budget is greater than or equal to x.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : N (No. of buyers)\nLine 2 : Budget of buyers (separated by space)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Maximum profit\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= N &lt;= 10^6\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>4\n30 20 53 14\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>60\n</code></pre>\n<p><strong>Sample Output 1 Explanation</strong></p>\n<pre><code>Price of your app should be Rs. 20 or Rs. 30. For both prices, you can get the profit Rs. 60.\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>5\n34 78 90 15 67\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>201\n</code></pre>\n<p><strong>Sample Output 2 Explanation</strong></p>\n<pre><code>Price of your app should be Rs. 67. You can get the profit Rs. 201 (i.e. 3 * 67).\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>#include&lt;algorithm&gt;\nint maximumProfit(int budget[], int n)\n{\n    std::sort(budget, budget+n);\n\n    int prev_profit = 0;\n    int price = 0;\n    int buyers = 0;\n\n    int i = 0;\n\n    while(i&lt;n)\n    {\n        if(prev_profit &lt; budget[i]*(n-i))\n        {\n            prev_profit = budget[i]*(n-i);\n            price = budget[i];\n            buyers = n-i;\n        }\n\n        while(i&lt;=n-2 &amp;&amp; budget[i]==budget[i+1]) // i&lt;n-1 only for out of bounds check\n            i++;\n\n        i++; // on the different one\n    }\n\n    return price*buyers;\n}\n\n// T.C = O(nlogn)\n// S.C = O(n)\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 3. Split Array </strong></summary>\n<h1 id=\"3.-split-array\">3. Split Array <a class=\"heading-anchor-permalink\" href=\"#3.-split-array\">#</a></h1>\n<pre><code>Given an integer array A of size N, check if the input array can be splitted in two parts such that -\n\n    - Sum of both parts is equal\n    - All elements in the input, which are divisible by 5 should be in same group.\n    - All elements in the input, which are divisible by 3 (but not divisible by 5) should be in other group.\n    - Elements which are neither divisible by 5 nor by 3, can be put in any group.\n\nGroups can be made with any set of elements, i.e. elements need not to be continuous. And you need to consider each and every element of input array in some group.\n\nReturn true, if array can be split according to the above rules, else return false.\n\nNote : You will get marks only if all the test cases are passed.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Integer N (size of array)\n\nLine 2 : Array A elements (separated by space)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>true or false\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= N &lt;= 50\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>2\n1 2\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>false\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>3\n1 4 3\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>true\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>bool splitArray(int *input, int size)\n{\n    /* Don't write main().\n     * Don't read input, it is passed as function argument.\n     * Return output and don't print it.\n     * Taking input and printing output is handled automatically.\n     */\n\n}\n</code></pre>\n</details>\n<hr>\n</details>\n",
      "id": 121
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/0_index.html",
      "content": "# 4. OOP Basics\nCreated Wednesday 08 January 2020\n\nSufficient for *using* classes and objects.\nNote: OOP has been used ahead in \"Data Structures\" section. Basic are sufficient.\n\nLanguage: C++17\n\n",
      "html": "<h1 id=\"4.-oop-basics\">4. OOP Basics <a class=\"heading-anchor-permalink\" href=\"#4.-oop-basics\">#</a></h1>\n<p>Created Wednesday 08 January 2020</p>\n<p>Sufficient for <em>using</em> classes and objects.\nNote: OOP has been used ahead in “Data Structures” section. Basic are sufficient.</p>\n<p>Language: C++17</p>\n",
      "id": 122
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/0_index.html",
      "content": "# 1. Intro and syntax\nCreated Wednesday 08 January 2020\n\n[Exercises](1._Intro_and_syntax/exercise_ques.md)\n[OOPS 1 Official Notes](1._Intro_and_syntax/OOPS1.pdf)\n\n\n*****\n\nAssignment - After finishing this section:\nFraction class:\n\n1. Simplify function, find gcd and divide both numerator and denominator.\n2. Add function. This is actually like f1 = f1+f2. i.e we are making **changes **to f1. As there's nothin to return, no new object is created.\n3. We should use references, i.e int & wherever possible, to avoid the copying overhead.\n4. Also it should be const, so that no change is made to the argument. This is not followed by mutators, because their very objective is to change the value.\n5. We should take care as to what is the use case, and use variables according to that.\n\n\nRead why const and references are together. <http://www.cplusplus.com/doc/tutorial/functions/>\n\nComplex Numbers [./complex_numbers.cpp](1._Intro_and_syntax/complex_numbers.cpp)\n\n",
      "html": "<h1 id=\"1.-intro-and-syntax\">1. Intro and syntax <a class=\"heading-anchor-permalink\" href=\"#1.-intro-and-syntax\">#</a></h1>\n<p>Created Wednesday 08 January 2020</p>\n<p><a href=\"1._Intro_and_syntax/exercise_ques.html\">Exercises</a>\n<a href=\"1._Intro_and_syntax/OOPS1.pdf\">OOPS 1 Official Notes</a></p>\n<hr>\n<p>Assignment - After finishing this section:\nFraction class:</p>\n<ol>\n<li>Simplify function, find gcd and divide both numerator and denominator.</li>\n<li>Add function. This is actually like f1 = f1+f2. i.e we are making **changes **to f1. As there’s nothin to return, no new object is created.</li>\n<li>We should use references, i.e int &amp; wherever possible, to avoid the copying overhead.</li>\n<li>Also it should be const, so that no change is made to the argument. This is not followed by mutators, because their very objective is to change the value.</li>\n<li>We should take care as to what is the use case, and use variables according to that.</li>\n</ol>\n<p>Read why const and references are together. <a href=\"http://www.cplusplus.com/doc/tutorial/functions/\">http://www.cplusplus.com/doc/tutorial/functions/</a></p>\n<p>Complex Numbers <a href=\"1._Intro_and_syntax/complex_numbers.cpp\">./complex_numbers.cpp</a></p>\n",
      "id": 123
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/1._Principles_of_OOP.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/1._Principles_of_OOP.html",
      "content": "# 1. Principles of OOP\nCreated Wednesday 08 January 2020\n\n#### What is OOP\n* OOP is just a programming paradigm.\n* OOP solves some major problems that arise in procedural programming.\n* As OOP is a reaction to the procedural style, its principles are nothing but solutions.\n\n\n#### Principles of OOP\nThere are 4:\n\n1. **Encapsulation** - practice of combining variables(data) and relevant functions into a single unit. \n\t* Solution - Minimizes parameters, consequently minimizing arguments.\n\t* Context in C++ - *class*\n2. **Abstraction** - process of hiding parts of the program for maintainability purposes.\n\t* Solution - Simplifies the interface. Reduces the impact of change, i.e we can have a complex and flexible web of helper functions, but the interface remains the same. \n\t* Context in C++ - Access control, viz *public*, *private* and *protected*, enforce 'data hiding', which is the 'tool' used to achieve abstraction.\n3. **Inheritance**\n\t* Solution - Eliminates redundant code.\n\t* Context in C++ - Parent class are specified when defining a class, using the ':' symbol.\n4. **Polymorphism**\n\t* Solution - Eliminates if/else and switch statements. Code context based functions.\n\t* Context in C++ - The compiler chooses the relevant version of the function. We don't have to specify while calling.\n\n\n#### Visibility - Abstraction\nVisibility(access of members using object) is controlled using three keywords:\n\n1. Public\n2. Private\n3. Protected\n\n\nFIXME: Modifers\n\n",
      "html": "<h1 id=\"1.-principles-of-oop\">1. Principles of OOP <a class=\"heading-anchor-permalink\" href=\"#1.-principles-of-oop\">#</a></h1>\n<p>Created Wednesday 08 January 2020</p>\n<h4 id=\"what-is-oop\">What is OOP <a class=\"heading-anchor-permalink\" href=\"#what-is-oop\">#</a></h4>\n<ul>\n<li>OOP is just a programming paradigm.</li>\n<li>OOP solves some major problems that arise in procedural programming.</li>\n<li>As OOP is a reaction to the procedural style, its principles are nothing but solutions.</li>\n</ul>\n<h4 id=\"principles-of-oop\">Principles of OOP <a class=\"heading-anchor-permalink\" href=\"#principles-of-oop\">#</a></h4>\n<p>There are 4:</p>\n<ol>\n<li><strong>Encapsulation</strong> - practice of combining variables(data) and relevant functions into a single unit.\n<ul>\n<li>Solution - Minimizes parameters, consequently minimizing arguments.</li>\n<li>Context in C++ - <em>class</em></li>\n</ul>\n</li>\n<li><strong>Abstraction</strong> - process of hiding parts of the program for maintainability purposes.\n<ul>\n<li>Solution - Simplifies the interface. Reduces the impact of change, i.e we can have a complex and flexible web of helper functions, but the interface remains the same.</li>\n<li>Context in C++ - Access control, viz <em>public</em>, <em>private</em> and <em>protected</em>, enforce ‘data hiding’, which is the ‘tool’ used to achieve abstraction.</li>\n</ul>\n</li>\n<li><strong>Inheritance</strong>\n<ul>\n<li>Solution - Eliminates redundant code.</li>\n<li>Context in C++ - Parent class are specified when defining a class, using the ‘:’ symbol.</li>\n</ul>\n</li>\n<li><strong>Polymorphism</strong>\n<ul>\n<li>Solution - Eliminates if/else and switch statements. Code context based functions.</li>\n<li>Context in C++ - The compiler chooses the relevant version of the function. We don’t have to specify while calling.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"visibility---abstraction\">Visibility - Abstraction <a class=\"heading-anchor-permalink\" href=\"#visibility---abstraction\">#</a></h4>\n<p>Visibility(access of members using object) is controlled using three keywords:</p>\n<ol>\n<li>Public</li>\n<li>Private</li>\n<li>Protected</li>\n</ol>\n<p>FIXME: Modifers</p>\n",
      "id": 124
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/2._Classes.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/2._Classes.html",
      "content": "# 2. Classes\nCreated Thursday 08 April 2021\n\n#### What is a class?\n* Idea of a class - It is just a blueprint of our custom data type. It has the data(variables) and functions.\n* Idea of an object - An **object** is an instance of a class, and **occupies** some memory. On the other hand, class is a blueprint, so it does not occupy any memory(except on the code-section, of course).\n\n#### Syntax to create a class\n```c++\nclass class_name\n{\n\tdata_type_1 attrib1;\n\tdata_type_2 attrib2;\n\t// only declarations, we can even do int marks[], i.e data structures/ other classes are also allowed\n};\n```",
      "html": "<h1 id=\"2.-classes\">2. Classes <a class=\"heading-anchor-permalink\" href=\"#2.-classes\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<h4 id=\"what-is-a-class%3F\">What is a class? <a class=\"heading-anchor-permalink\" href=\"#what-is-a-class%3F\">#</a></h4>\n<ul>\n<li>Idea of a class - It is just a blueprint of our custom data type. It has the data(variables) and functions.</li>\n<li>Idea of an object - An <strong>object</strong> is an instance of a class, and <strong>occupies</strong> some memory. On the other hand, class is a blueprint, so it does not occupy any memory(except on the code-section, of course).</li>\n</ul>\n<h4 id=\"syntax-to-create-a-class\">Syntax to create a class <a class=\"heading-anchor-permalink\" href=\"#syntax-to-create-a-class\">#</a></h4>\n<pre><code class=\"language-c++\">class class_name\n{\n\tdata_type_1 attrib1;\n\tdata_type_2 attrib2;\n\t// only declarations, we can even do int marks[], i.e data structures/ other classes are also allowed\n};\n</code></pre>\n",
      "id": 125
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/3._Objects.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/3._Objects.html",
      "content": "# 3. Objects\nCreated Wednesday 08 January 2020\n\n#### Syntax\n```\nclass_name object_name; // this allocates memory. variable of type student in the stack.\nclass_name * object_name = new class_name; \t// this creates a pointer in stack to a memory location in heap.\n```\n\n* This is **exactly **like we do for in-built data types.\n* Memory allocated for an object = sum of the memory of the attributes. **No meta data is stored in the objects, viz functions, static variables.**\n\n\n**Q**) Can we create an object anywhere we like?\n**A**) We can create anywhere after the class has been defined.\n\n* To include classes from other files, use this syntax.\n```\n#include \"absolute_path/class_file_name.extnsn\" // different directory\n#include \"file.extnsn\" // file in the current directory\n```\n\n* #include just copies text from the *class_file_name.extnsn *to the current file.\n\n*****\n#### Accessing members of an object\n\n* Variable\n```c++\nobj.name; // access 'name' attribute of 'obj' object\nobj.fact() // call fact() function of 'obj'\n// . is called the selector operator\n```\n\n* Pointer\n```c++\n(*p).name;\n(*p).fact();\n\n// C++  has a better way, a simple expression. Does exactly the same thing.\np->name;\np->fact();\n```\n\n*****\n#### **Concept of Access Specifier in C++**\n\n* Access Specifiers are keywords associated with members(attributes, functions) which modify the level of access.\n* They are applicable only outside the class, i.e they have no meaning inside the class.\n* There are three: *public*, *private* and protected.\n\nSyntax:\n```c++\nclass A{\n\tpublic:\n\t\tint a;\n\t\tint b;\n\tprivate:\n\t\tvoid f();\n};\n```\n\n* We can have multiple sections of the same specifier too.\n```c++\nclass A{\n\tpublic:\n\t\tint a;\n\t\tint b;\n\tprivate:\n\t\tvoid f();\n\tpublic: //allowed\n\t\tint c;\n};\n```\n\n**Notes:**\n* When not specified, all things are **private** by default in a class.\n```c++\nclass Car {\n  int a; // a is private\n};\n```\n* [The access modifiers work on class level, and not on object level](https://stackoverflow.com/questions/4117002/why-can-i-access-private-variables-in-the-copy-constructor) i.e, two objects of the same class can access each others private data.\n\n\n",
      "html": "<h1 id=\"3.-objects\">3. Objects <a class=\"heading-anchor-permalink\" href=\"#3.-objects\">#</a></h1>\n<p>Created Wednesday 08 January 2020</p>\n<h4 id=\"syntax\">Syntax <a class=\"heading-anchor-permalink\" href=\"#syntax\">#</a></h4>\n<pre><code>class_name object_name; // this allocates memory. variable of type student in the stack.\nclass_name * object_name = new class_name; \t// this creates a pointer in stack to a memory location in heap.\n</code></pre>\n<ul>\n<li>This is **exactly **like we do for in-built data types.</li>\n<li>Memory allocated for an object = sum of the memory of the attributes. <strong>No meta data is stored in the objects, viz functions, static variables.</strong></li>\n</ul>\n<p><strong>Q</strong>) Can we create an object anywhere we like?\n<strong>A</strong>) We can create anywhere after the class has been defined.</p>\n<ul>\n<li>To include classes from other files, use this syntax.</li>\n</ul>\n<pre><code>#include &quot;absolute_path/class_file_name.extnsn&quot; // different directory\n#include &quot;file.extnsn&quot; // file in the current directory\n</code></pre>\n<ul>\n<li>#include just copies text from the *class_file_name.extnsn *to the current file.</li>\n</ul>\n<hr>\n<h4 id=\"accessing-members-of-an-object\">Accessing members of an object <a class=\"heading-anchor-permalink\" href=\"#accessing-members-of-an-object\">#</a></h4>\n<ul>\n<li>Variable</li>\n</ul>\n<pre><code class=\"language-c++\">obj.name; // access 'name' attribute of 'obj' object\nobj.fact() // call fact() function of 'obj'\n// . is called the selector operator\n</code></pre>\n<ul>\n<li>Pointer</li>\n</ul>\n<pre><code class=\"language-c++\">(*p).name;\n(*p).fact();\n\n// C++  has a better way, a simple expression. Does exactly the same thing.\np-&gt;name;\np-&gt;fact();\n</code></pre>\n<hr>\n<h4 id=\"concept-of-access-specifier-in-c%2B%2B\"><strong>Concept of Access Specifier in C++</strong> <a class=\"heading-anchor-permalink\" href=\"#concept-of-access-specifier-in-c%2B%2B\">#</a></h4>\n<ul>\n<li>Access Specifiers are keywords associated with members(attributes, functions) which modify the level of access.</li>\n<li>They are applicable only outside the class, i.e they have no meaning inside the class.</li>\n<li>There are three: <em>public</em>, <em>private</em> and protected.</li>\n</ul>\n<p>Syntax:</p>\n<pre><code class=\"language-c++\">class A{\n\tpublic:\n\t\tint a;\n\t\tint b;\n\tprivate:\n\t\tvoid f();\n};\n</code></pre>\n<ul>\n<li>We can have multiple sections of the same specifier too.</li>\n</ul>\n<pre><code class=\"language-c++\">class A{\n\tpublic:\n\t\tint a;\n\t\tint b;\n\tprivate:\n\t\tvoid f();\n\tpublic: //allowed\n\t\tint c;\n};\n</code></pre>\n<p><strong>Notes:</strong></p>\n<ul>\n<li>When not specified, all things are <strong>private</strong> by default in a class.</li>\n</ul>\n<pre><code class=\"language-c++\">class Car {\n  int a; // a is private\n};\n</code></pre>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/4117002/why-can-i-access-private-variables-in-the-copy-constructor\">The access modifiers work on class level, and not on object level</a> i.e, two objects of the same class can access each others private data.</li>\n</ul>\n",
      "id": 126
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/4._Functions(in_class)/1._Getters_and_Setters/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/4._Functions(in_class)/1._Getters_and_Setters/0_index.html",
      "content": "# 1. Getters and Setters\n\nCreated Wednesday 08 January 2020\n\n#### What are setters and getters?\n\nThey are public functions created by us, which set the variables and return/print them to the outside(of the class)\n\n#### Why use getters(accessers) and setters(mutators)?\n\n- They are used for abstraction.\n- Setters can check constraints imposed by us.\n\n![](/assets/1._Getters_and_Setters-image-1.png)\n\n- Getters can return print data in a specified format.\n- It adds a layer of authorization. We may need to provide the passwords.\n\n![](/assets/1._Getters_and_Setters-image-2.png)\n\n---\n\n- When making a real world project, we **should **set important(complex, or irrelevant to the user) members as private, in order to avoid any problems.\n- The security here does not mean from outsiders. It is actually for achieving abstraction.\n",
      "html": "<h1 id=\"1.-getters-and-setters\">1. Getters and Setters <a class=\"heading-anchor-permalink\" href=\"#1.-getters-and-setters\">#</a></h1>\n<p>Created Wednesday 08 January 2020</p>\n<h4 id=\"what-are-setters-and-getters%3F\">What are setters and getters? <a class=\"heading-anchor-permalink\" href=\"#what-are-setters-and-getters%3F\">#</a></h4>\n<p>They are public functions created by us, which set the variables and return/print them to the outside(of the class)</p>\n<h4 id=\"why-use-getters(accessers)-and-setters(mutators)%3F\">Why use getters(accessers) and setters(mutators)? <a class=\"heading-anchor-permalink\" href=\"#why-use-getters(accessers)-and-setters(mutators)%3F\">#</a></h4>\n<ul>\n<li>They are used for abstraction.</li>\n<li>Setters can check constraints imposed by us.</li>\n</ul>\n<p><img src=\"/assets/1._Getters_and_Setters-image-1.png\" alt=\"\"></p>\n<ul>\n<li>Getters can return print data in a specified format.</li>\n<li>It adds a layer of authorization. We may need to provide the passwords.</li>\n</ul>\n<p><img src=\"/assets/1._Getters_and_Setters-image-2.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li>When making a real world project, we **should **set important(complex, or irrelevant to the user) members as private, in order to avoid any problems.</li>\n<li>The security here does not mean from outsiders. It is actually for achieving abstraction.</li>\n</ul>\n",
      "id": 127
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/4._Functions(in_class)/2._Core_member_functions.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/4._Functions(in_class)/2._Core_member_functions.html",
      "content": "# 2. Core member functions\nCreated Sunday 29 November 2020\n\n\n* Member functions of a class can be defined in two ways:\n\n\n1. Inside the class - this makes them **inline**, even if you don't use the keyword.\n```c++\nclass Box {\n   public:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n\n      double getVolume(void) {\n         return length * breadth * height;\n      }\n};\n```\n\n2. Outside the class - they are normal functions. The full name of the functions must be provided, using the scope resolution operator(::).\n```c++\nclass Box {\n   public:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n};\ndouble Box::getVolume(void) {\n   return length * breadth * height;\n}\n```\n\n*****\n\nIn C++, a class generally consists of two files:\n\n* ``.h`` file - contains headers\n* ``.cpp`` file - contains definitions\n\n\n### Why use two(or multiple) files\nThere are many reasons:\n\n1. [ODR](https://stackoverflow.com/questions/38030754/what-is-the-intention-of-odr/#answer-38031103) rule - C++ demands all entities be declared only once.\n2. Big programs compile faster, i.e compile only the files that have changed.\n3. Version control and collaboration is easy.\n4. Headers can be used as public facing API, i.e ``.cpp`` is obfuscated in proprietary software.\n\n\n",
      "html": "<h1 id=\"2.-core-member-functions\">2. Core member functions <a class=\"heading-anchor-permalink\" href=\"#2.-core-member-functions\">#</a></h1>\n<p>Created Sunday 29 November 2020</p>\n<ul>\n<li>Member functions of a class can be defined in two ways:</li>\n</ul>\n<ol>\n<li>Inside the class - this makes them <strong>inline</strong>, even if you don’t use the keyword.</li>\n</ol>\n<pre><code class=\"language-c++\">class Box {\n   public:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n\n      double getVolume(void) {\n         return length * breadth * height;\n      }\n};\n</code></pre>\n<ol start=\"2\">\n<li>Outside the class - they are normal functions. The full name of the functions must be provided, using the scope resolution operator(::).</li>\n</ol>\n<pre><code class=\"language-c++\">class Box {\n   public:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n};\ndouble Box::getVolume(void) {\n   return length * breadth * height;\n}\n</code></pre>\n<hr>\n<p>In C++, a class generally consists of two files:</p>\n<ul>\n<li><code>.h</code> file - contains headers</li>\n<li><code>.cpp</code> file - contains definitions</li>\n</ul>\n<h3 id=\"why-use-two(or-multiple)-files\">Why use two(or multiple) files <a class=\"heading-anchor-permalink\" href=\"#why-use-two(or-multiple)-files\">#</a></h3>\n<p>There are many reasons:</p>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/38030754/what-is-the-intention-of-odr/#answer-38031103\">ODR</a> rule - C++ demands all entities be declared only once.</li>\n<li>Big programs compile faster, i.e compile only the files that have changed.</li>\n<li>Version control and collaboration is easy.</li>\n<li>Headers can be used as public facing API, i.e <code>.cpp</code> is obfuscated in proprietary software.</li>\n</ol>\n",
      "id": 128
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/5._this_keyword.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/5._this_keyword.html",
      "content": "# 5. this keyword\nCreated Thursday 08 April 2021\n\n#### 'this' keyword\nA class may need to refer to itself.\n**Solve this problem** - Making setters/core functions.\nApproaches:\n\n1. To avoid naming issues, we have to come up with new parameter names for data members in all our member functions.\n```c++\nclass A{\n\tString name;\n\tvoid sayHello(String name_for_hello) // this name has to be invented for every attribute in all functions, which is a pain\n\t{\n\t\tcout << \"Hi, \" << name_for_hello << \"\\nI am \" << name << endl;\n\t}\n};\n```\n\n2. If we use the same name, then our data members will be shadowed by the formal parameters of the function.\n```c++\nclass A{\n\tString name;\n\tvoid sayHello(String name)\n\t{\n\t\tcout << \"Hi, \" << name << \"\\nI am \" << name << endl; // both refer to the argument, not A.name\n\t}\n};\n```\n3. If we use the object name to differentiate the data members, it will be absurd, because\n\t1. The class does not know an object before creation.\n\t2. The object name will have to be changed for each instance.\n```c++\nclass A{\n\tString name;\n\tvoid sayHello(String name_for_hello)\n\t{\n\t\tcout << \"Hi, \" << obj.name << \"\\nI am \" << name << endl; // this is absurd, object name can be anything\n\t}\n};\n```\n**Solution**: We have a keyword '**this**' which stores the pointer to the current object. This solves all the problems.\n**Syntax**: this -> *data_member/function*\nAbout **this: **It is available only inside the class, and only for non-static methods.\nNote:\n\n* using **this** for referring to class attributes is not compulsory.\n* We can still use *name *instead of *this->name*. But it will be useful only if there's no overshadowing, which we need to lookout for.\n\n\n",
      "html": "<h1 id=\"5.-this-keyword\">5. this keyword <a class=\"heading-anchor-permalink\" href=\"#5.-this-keyword\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<h4 id=\"%E2%80%98this%E2%80%99-keyword\">‘this’ keyword <a class=\"heading-anchor-permalink\" href=\"#%E2%80%98this%E2%80%99-keyword\">#</a></h4>\n<p>A class may need to refer to itself.\n<strong>Solve this problem</strong> - Making setters/core functions.\nApproaches:</p>\n<ol>\n<li>To avoid naming issues, we have to come up with new parameter names for data members in all our member functions.</li>\n</ol>\n<pre><code class=\"language-c++\">class A{\n\tString name;\n\tvoid sayHello(String name_for_hello) // this name has to be invented for every attribute in all functions, which is a pain\n\t{\n\t\tcout &lt;&lt; &quot;Hi, &quot; &lt;&lt; name_for_hello &lt;&lt; &quot;\\nI am &quot; &lt;&lt; name &lt;&lt; endl;\n\t}\n};\n</code></pre>\n<ol start=\"2\">\n<li>If we use the same name, then our data members will be shadowed by the formal parameters of the function.</li>\n</ol>\n<pre><code class=\"language-c++\">class A{\n\tString name;\n\tvoid sayHello(String name)\n\t{\n\t\tcout &lt;&lt; &quot;Hi, &quot; &lt;&lt; name &lt;&lt; &quot;\\nI am &quot; &lt;&lt; name &lt;&lt; endl; // both refer to the argument, not A.name\n\t}\n};\n</code></pre>\n<ol start=\"3\">\n<li>If we use the object name to differentiate the data members, it will be absurd, because\n<ol>\n<li>The class does not know an object before creation.</li>\n<li>The object name will have to be changed for each instance.</li>\n</ol>\n</li>\n</ol>\n<pre><code class=\"language-c++\">class A{\n\tString name;\n\tvoid sayHello(String name_for_hello)\n\t{\n\t\tcout &lt;&lt; &quot;Hi, &quot; &lt;&lt; obj.name &lt;&lt; &quot;\\nI am &quot; &lt;&lt; name &lt;&lt; endl; // this is absurd, object name can be anything\n\t}\n};\n</code></pre>\n<p><strong>Solution</strong>: We have a keyword ‘<strong>this</strong>’ which stores the pointer to the current object. This solves all the problems.\n<strong>Syntax</strong>: this -&gt; <em>data_member/function</em>\nAbout **this: **It is available only inside the class, and only for non-static methods.\nNote:</p>\n<ul>\n<li>using <strong>this</strong> for referring to class attributes is not compulsory.</li>\n<li>We can still use *name *instead of <em>this-&gt;name</em>. But it will be useful only if there’s no overshadowing, which we need to lookout for.</li>\n</ul>\n",
      "id": 129
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/exercise_ques.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/1._Intro_and_syntax/exercise_ques.html",
      "content": "# Lecture 1 and 2\n\n**Create objects**\n\n    Which of these statements is used to allocate memory for an object dynamically ?\n\n**Options**\n\n    a. malloc\n    b. alloc\n    c. new\n    d. give\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. new\n\n</details>\n\n---\n\n**Create object**\n\n    Which of the following is/are a valid statement(s) to create an object of class Bird in C++ ?\n\n**Options**\n\n    a. Bird b = new Bird;\n    b. Bird *b = new Bird;\n    c. Bird b;\n    d. new Bird b;\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. Bird *b = new Bird;\n    c. Bird b;\n\n    b for dynamic allocation, c for static.\n\n</details>\n\n---\n\n**Correct Statement**\n\n    Figure out the correct statement\n\n    class Car\n    {\n        public :\n        int price;\n    };\n\n    int main()\n    {\n        Car c;\n        //Figure out the correct statement to set the price of the car object referred to by c to “10000”\n    }\n\n**Options**\n\n    a. c->price = 10000\n    b. Car.price = 10000\n    c. c.price = 10000;\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. c.price = 10000;\n    Statically allocated object with public attribute being accessed.\n\n</details>\n\n---\n\n**What is the output**\n\n    What is the output -\n\n    #include <iostream>\n    using namespace std;\n\n    class Student\n    {\n        int rollNumber;\n    };\n\n    int main()\n    {\n        Student s;\n        cout << s.rollNumber;\n    }\n\n**Options**\n\n    a. GarbageValue\n    b. 0\n    c. Compilation Error\n    d. None\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. Compilation Error\n    The program won't compile, as we are trying to access a private member.\n    Default access modifier is private.\n\n</details>\n\n---\n\n**What is the output**\n\n    What is the output -\n\n    #include <iostream>\n    using namespace std;\n\n    class Student\n    {\n        int rollNumber;\n    };\n\n    int main()\n    {\n        Student s;\n        cout << s.rollNumber;\n    }\n\n**Options**\n\n    a. A public member of a class can be accessed outside the class.\n    b. A private member of a class cannot be accessed by the functions of the same class.\n    c. A private member of a class cannot be accessed outside the same class.\n    d. None of the above\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. A private member of a class cannot be accessed by the functions of the same class.\n    Private members can be accessed by the functions of the same class, irrespective of the function's access modifier.\n    If it was not so, the private members would've been useless.\n\n</details>\n\n---\n\n# Lecture 3(Getters and Setters) and 4(Constructors and 'this' keyword)\n\n**What is the output**\n\n    What will be the Output ?\n\n    #include <iostream>\n    using namespace std;\n\n    class Box\n    {\n    public:\n        int width;\n        int height;\n        int length;\n        void volume()\n        {\n            cout << length * width * height;\n        }\n    };\n\n    int main()\n    {\n        Box b;\n        b.height = 5;\n        b.width = 4;\n        b.volume();\n    }\n\n**Options**\n\n    a. Error\n    b. 0\n    c. 20\n    d. Garbage value\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    d. Garbage value\n    Height and width are initialised to 5 and 4 respectively but length is not initialised. Default value for an integer data member of a class is garbage value, hence length contains garbage value. Volume will thus be garbage value.\n\n</details>\n\n---\n\n**What is the output**\n\n    What will be the output of the following code ?\n\n    #include <iostream>\n    using namespace std;\n\n    class Student\n    {\n    public:\n        char *name;\n        int rollNo;\n        Student(int num)\n        {\n            rollNo = num;\n        }\n\n        void print()\n        {\n            cout << rollNo;\n        }\n    };\n\n    int main()\n    {\n        Student s(12);\n        s.print();\n    }\n\n**Type the answer**\n\n    ____\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    12\n    Constructor is called when an object is created, here when we create a Student object, corresponding student object is created and rollNo is assigned to 12. So output is 12.\n\n</details>\n\n---\n\n**What is the output**\n\n    What will be the output of the following code ?\n\n    #include <iostream>\n    using namespace std;\n\n    class Student\n    {\n    public:\n        char name;\n        int rollNo;\n\n        Student(int num)\n        {\n            rollNo = num;\n        }\n\n        void print()\n        {\n            cout << name << \" \" << rollNo;\n        }\n    };\n\n    int main()\n    {\n        Student *s = new Student();\n        s->name = 'A';\n        s->rollNo = 15;\n        s->print();\n    }\n\n**Options**\n\n    a. GarbageValue 0\n    b. GarbageValue 15\n    c. Compilation Error\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. Compilation Error\n\n    There is Compilation error - “constructor Student() is undefined” because the default constructor is available only till the point we don’t create our own constructor. So Student class has only one constructor which require roll number as argument, hence we should pass integer as argument while creating any Student object.\n\n</details>\n\n---\n\n**Find Incorrect Statement**\n\n    Which of the following statements are not true about destructor?\n\n    1. It is invoked when object goes out of the scope\n    2. Like constructor, it can also have parameters\n    3. It can be declared in private section\n    4. It bears same name as that of the class and precedes tilde sign.\n\n**Options**\n\n    a. Only 2, 4\n    b. Only 2, 3\n    c. Only 1, 3\n    d. Only 1, 4\n    e. Only 2\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    Only 2\n\n    Destructors may be private, but it is a problem.\n\n</details>\n\n---\n\n**Assume class DEMO. Which of the following statement(s) responsible to invoke copy constructor?**\n\n    1. DEMO D2(D1); //  Here D1 is an already created object of class  DEMO\n\n    2. D2 = D1; // Here D1, D2 are already created objects of class DEMO\n\n**Options**\n\n    a. Only 1\n    b. Only 2\n    c. Both 1 and 2\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. Only 1\n    Statement 2 is actually calling invoking the copy assignment operator and which is not a constructor, technically.\n\n</details>\n\n---\n\n**Copy Assignment Operator**\n\n    Consider following piece of code:\n\n    class Pair\n    {\n      public :\n      int first;\n      int second;\n    };\n\n    int main()\n    {\n\n      Pair *p1 = new Pair;\n      Pair p2;\n    }\n\n    Which of the following statement is feasible?\n\n**Options**\n\n    a. p2 = p1;\n    b. p2 = *p1;\n    c. Both 1 and 2 are correct.\n    d. None of the above\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. p2 = *p1;\n    Statement a. will given array, type mismatch(Pair, Pair*);\n    Statement b. is okay.\n\n</details>\n\n---\n\n**Copy Assignment Operator**\n\n    Consider following piece of code:\n\n    #include <iostream>\n    using namespace std;\n\n    class Pair\n    {\n    public:\n        int first;\n        int second;\n    };\n\n    int main()\n    {\n\n        Pair p1;\n        p1.first = 10;\n        p1.second = 20;\n        Pair p2;\n        p2 = p1;\n        cout << p2.first << \" \" << p2.second << endl;\n    }\n\n    Which of the following statement is feasible?\n\n**Options**\n\n    a. 10 20\n    b. Error\n    c. Garbage_value Garbage_value\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. 10 20\n    Perfectly normal. The copy assignement operator has been called.\n\n</details>\n\n---\n\n# Coding Problems\n\n<details> <summary><strong> 1. Does s contain t ? </strong></summary>\n\n# 1. Does s contain t ?\n\n    Given two string s and t, write a function to check if s contains all characters of t (in the same order as they are in string t).\n\n    Return true or false.\n\n    Do it recursively.\n\n    E.g. : s = “abchjsgsuohhdhyrikkknddg” contains all characters of t=”coding” in the same order. So function will return true.\n\n**Input Format**\n\n    Line 1 : String s\n    Line 2 : String t\n\n**Output Format**\n\n    true or false\n\n**Sample Input 1**\n\n    abchjsgsuohhdhyrikkknddg\n    coding\n\n**Sample Output 1**\n\n    1\n\n**Sample Input 2**\n\n    abcde\n    aeb\n\n**Sample Output 2**\n\n    false\n\n<details> <summary><strong>Code</strong></summary>\n\n    bool checksequenece(char large[] , char*small)\n    {\n        if(*small==0)\n            return true;\n\n        char x = *small;\n        while(large[0]!=x && large[0]!='\\0')\n            large++;\n\n        if(*large==0)\n            return false;\n        // else we have found it\n        return (large+1, small+1);\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 2. Maximum Profit on App </strong></summary>\n\n# 2. Maximum Profit on App\n\n    You have made a smartphone app and want to set its price such that the profit earned is maximised. There are certain buyers who will buy your app only if their budget is greater than or equal to your price.\n\n    You will be provided with a list of size N having budgets of buyers and you need to return the maximum profit that you can earn.\n\n    Lets say you decide that price of your app is Rs. x and there are N number of buyers. So maximum profit you can earn is :\n\n        m * x\n\n    where m is total number of buyers whose budget is greater than or equal to x.\n\n**Input Format**\n\n    Line 1 : N (No. of buyers)\n    Line 2 : Budget of buyers (separated by space)\n\n**Output Format**\n\n    Maximum profit\n\n**Constraints**\n\n    1 <= N <= 10^6\n\n**Sample Input 1**\n\n    4\n    30 20 53 14\n\n**Sample Output 1**\n\n    60\n\n**Sample Output 1 Explanation**\n\n    Price of your app should be Rs. 20 or Rs. 30. For both prices, you can get the profit Rs. 60.\n\n**Sample Input 2**\n\n    5\n    34 78 90 15 67\n\n**Sample Output 2**\n\n    201\n\n**Sample Output 2 Explanation**\n\n    Price of your app should be Rs. 67. You can get the profit Rs. 201 (i.e. 3 * 67).\n\n<details> <summary><strong>Code</strong></summary>\n\n    int maximumProfit(int budget[], int n)\n    {\n        // Write your code here\n\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 3. Split Array </strong></summary>\n\n# 3. Split Array\n\n    Given an integer array A of size N, check if the input array can be splitted in two parts such that -\n\n        - Sum of both parts is equal\n        - All elements in the input, which are divisible by 5 should be in same group.\n        - All elements in the input, which are divisible by 3 (but not divisible by 5) should be in other group.\n        - Elements which are neither divisible by 5 nor by 3, can be put in any group.\n\n    Groups can be made with any set of elements, i.e. elements need not to be continuous. And you need to consider each and every element of input array in some group.\n\n    Return true, if array can be split according to the above rules, else return false.\n\n    Note : You will get marks only if all the test cases are passed.\n\n**Input Format**\n\n    Line 1 : Integer N (size of array)\n\n    Line 2 : Array A elements (separated by space)\n\n**Output Format**\n\n    true or false\n\n**Constraints**\n\n    1 <= N <= 50\n\n**Sample Input 1**\n\n    2\n    1 2\n\n**Sample Output 1**\n\n    false\n\n**Sample Input 2**\n\n    3\n    1 4 3\n\n**Sample Output 2**\n\n    true\n\n<details> <summary><strong>Code</strong></summary>\n\n    bool splitArray(int *input, int size)\n    {\n        /* Don't write main().\n         * Don't read input, it is passed as function argument.\n         * Return output and don't print it.\n         * Taking input and printing output is handled automatically.\n         */\n\n    }\n\n</details>\n\n---\n\n</details>\n",
      "html": "<h1 id=\"lecture-1-and-2\">Lecture 1 and 2 <a class=\"heading-anchor-permalink\" href=\"#lecture-1-and-2\">#</a></h1>\n<p><strong>Create objects</strong></p>\n<pre><code>Which of these statements is used to allocate memory for an object dynamically ?\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. malloc\nb. alloc\nc. new\nd. give\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. new\n</code></pre>\n</details>\n<hr>\n<p><strong>Create object</strong></p>\n<pre><code>Which of the following is/are a valid statement(s) to create an object of class Bird in C++ ?\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Bird b = new Bird;\nb. Bird *b = new Bird;\nc. Bird b;\nd. new Bird b;\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. Bird *b = new Bird;\nc. Bird b;\n\nb for dynamic allocation, c for static.\n</code></pre>\n</details>\n<hr>\n<p><strong>Correct Statement</strong></p>\n<pre><code>Figure out the correct statement\n\nclass Car\n{\n    public :\n    int price;\n};\n\nint main()\n{\n    Car c;\n    //Figure out the correct statement to set the price of the car object referred to by c to “10000”\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. c-&gt;price = 10000\nb. Car.price = 10000\nc. c.price = 10000;\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. c.price = 10000;\nStatically allocated object with public attribute being accessed.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output</strong></p>\n<pre><code>What is the output -\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Student\n{\n    int rollNumber;\n};\n\nint main()\n{\n    Student s;\n    cout &lt;&lt; s.rollNumber;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. GarbageValue\nb. 0\nc. Compilation Error\nd. None\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. Compilation Error\nThe program won't compile, as we are trying to access a private member.\nDefault access modifier is private.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output</strong></p>\n<pre><code>What is the output -\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Student\n{\n    int rollNumber;\n};\n\nint main()\n{\n    Student s;\n    cout &lt;&lt; s.rollNumber;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. A public member of a class can be accessed outside the class.\nb. A private member of a class cannot be accessed by the functions of the same class.\nc. A private member of a class cannot be accessed outside the same class.\nd. None of the above\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. A private member of a class cannot be accessed by the functions of the same class.\nPrivate members can be accessed by the functions of the same class, irrespective of the function's access modifier.\nIf it was not so, the private members would've been useless.\n</code></pre>\n</details>\n<hr>\n<h1 id=\"lecture-3(getters-and-setters)-and-4(constructors-and-%E2%80%98this%E2%80%99-keyword)\">Lecture 3(Getters and Setters) and 4(Constructors and ‘this’ keyword) <a class=\"heading-anchor-permalink\" href=\"#lecture-3(getters-and-setters)-and-4(constructors-and-%E2%80%98this%E2%80%99-keyword)\">#</a></h1>\n<p><strong>What is the output</strong></p>\n<pre><code>What will be the Output ?\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Box\n{\npublic:\n    int width;\n    int height;\n    int length;\n    void volume()\n    {\n        cout &lt;&lt; length * width * height;\n    }\n};\n\nint main()\n{\n    Box b;\n    b.height = 5;\n    b.width = 4;\n    b.volume();\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Error\nb. 0\nc. 20\nd. Garbage value\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>d. Garbage value\nHeight and width are initialised to 5 and 4 respectively but length is not initialised. Default value for an integer data member of a class is garbage value, hence length contains garbage value. Volume will thus be garbage value.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output</strong></p>\n<pre><code>What will be the output of the following code ?\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Student\n{\npublic:\n    char *name;\n    int rollNo;\n    Student(int num)\n    {\n        rollNo = num;\n    }\n\n    void print()\n    {\n        cout &lt;&lt; rollNo;\n    }\n};\n\nint main()\n{\n    Student s(12);\n    s.print();\n}\n</code></pre>\n<p><strong>Type the answer</strong></p>\n<pre><code>____\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>12\nConstructor is called when an object is created, here when we create a Student object, corresponding student object is created and rollNo is assigned to 12. So output is 12.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output</strong></p>\n<pre><code>What will be the output of the following code ?\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Student\n{\npublic:\n    char name;\n    int rollNo;\n\n    Student(int num)\n    {\n        rollNo = num;\n    }\n\n    void print()\n    {\n        cout &lt;&lt; name &lt;&lt; &quot; &quot; &lt;&lt; rollNo;\n    }\n};\n\nint main()\n{\n    Student *s = new Student();\n    s-&gt;name = 'A';\n    s-&gt;rollNo = 15;\n    s-&gt;print();\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. GarbageValue 0\nb. GarbageValue 15\nc. Compilation Error\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. Compilation Error\n\nThere is Compilation error - “constructor Student() is undefined” because the default constructor is available only till the point we don’t create our own constructor. So Student class has only one constructor which require roll number as argument, hence we should pass integer as argument while creating any Student object.\n</code></pre>\n</details>\n<hr>\n<p><strong>Find Incorrect Statement</strong></p>\n<pre><code>Which of the following statements are not true about destructor?\n\n1. It is invoked when object goes out of the scope\n2. Like constructor, it can also have parameters\n3. It can be declared in private section\n4. It bears same name as that of the class and precedes tilde sign.\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Only 2, 4\nb. Only 2, 3\nc. Only 1, 3\nd. Only 1, 4\ne. Only 2\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>Only 2\n\nDestructors may be private, but it is a problem.\n</code></pre>\n</details>\n<hr>\n<p><strong>Assume class DEMO. Which of the following statement(s) responsible to invoke copy constructor?</strong></p>\n<pre><code>1. DEMO D2(D1); //  Here D1 is an already created object of class  DEMO\n\n2. D2 = D1; // Here D1, D2 are already created objects of class DEMO\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Only 1\nb. Only 2\nc. Both 1 and 2\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. Only 1\nStatement 2 is actually calling invoking the copy assignment operator and which is not a constructor, technically.\n</code></pre>\n</details>\n<hr>\n<p><strong>Copy Assignment Operator</strong></p>\n<pre><code>Consider following piece of code:\n\nclass Pair\n{\n  public :\n  int first;\n  int second;\n};\n\nint main()\n{\n\n  Pair *p1 = new Pair;\n  Pair p2;\n}\n\nWhich of the following statement is feasible?\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. p2 = p1;\nb. p2 = *p1;\nc. Both 1 and 2 are correct.\nd. None of the above\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. p2 = *p1;\nStatement a. will given array, type mismatch(Pair, Pair*);\nStatement b. is okay.\n</code></pre>\n</details>\n<hr>\n<p><strong>Copy Assignment Operator</strong></p>\n<pre><code>Consider following piece of code:\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Pair\n{\npublic:\n    int first;\n    int second;\n};\n\nint main()\n{\n\n    Pair p1;\n    p1.first = 10;\n    p1.second = 20;\n    Pair p2;\n    p2 = p1;\n    cout &lt;&lt; p2.first &lt;&lt; &quot; &quot; &lt;&lt; p2.second &lt;&lt; endl;\n}\n\nWhich of the following statement is feasible?\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 10 20\nb. Error\nc. Garbage_value Garbage_value\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. 10 20\nPerfectly normal. The copy assignement operator has been called.\n</code></pre>\n</details>\n<hr>\n<h1 id=\"coding-problems\">Coding Problems <a class=\"heading-anchor-permalink\" href=\"#coding-problems\">#</a></h1>\n<details> <summary><strong> 1. Does s contain t ? </strong></summary>\n<h1 id=\"1.-does-s-contain-t-%3F\">1. Does s contain t ? <a class=\"heading-anchor-permalink\" href=\"#1.-does-s-contain-t-%3F\">#</a></h1>\n<pre><code>Given two string s and t, write a function to check if s contains all characters of t (in the same order as they are in string t).\n\nReturn true or false.\n\nDo it recursively.\n\nE.g. : s = “abchjsgsuohhdhyrikkknddg” contains all characters of t=”coding” in the same order. So function will return true.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : String s\nLine 2 : String t\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>true or false\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>abchjsgsuohhdhyrikkknddg\ncoding\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>1\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>abcde\naeb\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>false\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>bool checksequenece(char large[] , char*small)\n{\n    if(*small==0)\n        return true;\n\n    char x = *small;\n    while(large[0]!=x &amp;&amp; large[0]!='\\0')\n        large++;\n\n    if(*large==0)\n        return false;\n    // else we have found it\n    return (large+1, small+1);\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 2. Maximum Profit on App </strong></summary>\n<h1 id=\"2.-maximum-profit-on-app\">2. Maximum Profit on App <a class=\"heading-anchor-permalink\" href=\"#2.-maximum-profit-on-app\">#</a></h1>\n<pre><code>You have made a smartphone app and want to set its price such that the profit earned is maximised. There are certain buyers who will buy your app only if their budget is greater than or equal to your price.\n\nYou will be provided with a list of size N having budgets of buyers and you need to return the maximum profit that you can earn.\n\nLets say you decide that price of your app is Rs. x and there are N number of buyers. So maximum profit you can earn is :\n\n    m * x\n\nwhere m is total number of buyers whose budget is greater than or equal to x.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : N (No. of buyers)\nLine 2 : Budget of buyers (separated by space)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Maximum profit\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= N &lt;= 10^6\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>4\n30 20 53 14\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>60\n</code></pre>\n<p><strong>Sample Output 1 Explanation</strong></p>\n<pre><code>Price of your app should be Rs. 20 or Rs. 30. For both prices, you can get the profit Rs. 60.\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>5\n34 78 90 15 67\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>201\n</code></pre>\n<p><strong>Sample Output 2 Explanation</strong></p>\n<pre><code>Price of your app should be Rs. 67. You can get the profit Rs. 201 (i.e. 3 * 67).\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int maximumProfit(int budget[], int n)\n{\n    // Write your code here\n\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 3. Split Array </strong></summary>\n<h1 id=\"3.-split-array\">3. Split Array <a class=\"heading-anchor-permalink\" href=\"#3.-split-array\">#</a></h1>\n<pre><code>Given an integer array A of size N, check if the input array can be splitted in two parts such that -\n\n    - Sum of both parts is equal\n    - All elements in the input, which are divisible by 5 should be in same group.\n    - All elements in the input, which are divisible by 3 (but not divisible by 5) should be in other group.\n    - Elements which are neither divisible by 5 nor by 3, can be put in any group.\n\nGroups can be made with any set of elements, i.e. elements need not to be continuous. And you need to consider each and every element of input array in some group.\n\nReturn true, if array can be split according to the above rules, else return false.\n\nNote : You will get marks only if all the test cases are passed.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Integer N (size of array)\n\nLine 2 : Array A elements (separated by space)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>true or false\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= N &lt;= 50\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>2\n1 2\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>false\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>3\n1 4 3\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>true\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>bool splitArray(int *input, int size)\n{\n    /* Don't write main().\n     * Don't read input, it is passed as function argument.\n     * Return output and don't print it.\n     * Taking input and printing output is handled automatically.\n     */\n\n}\n</code></pre>\n</details>\n<hr>\n</details>\n",
      "id": 130
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/0_index.html",
      "content": "# 2. Special Functions\nCreated Thursday 08 April 2021\n\n\"Special\" - provided by C++\n\n",
      "html": "<h1 id=\"2.-special-functions\">2. Special Functions <a class=\"heading-anchor-permalink\" href=\"#2.-special-functions\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<p>“Special” - provided by C++</p>\n",
      "id": 131
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/0_index.html",
      "content": "# 1. Constructor - idea and syntax\nCreated Wednesday 08 January 2020\n\n#### Idea of a constructor\n* A newly created object **should have **some initial value. Garbage values are undesired.\n* Constructor do exactly this - they initialize data.\n* Constructors are called automatically - this relieves us of initializing objects using setters.\n\n\n#### Properties of a constructor\n1. It is a function\n2. Name is the same as that of the class.\n3. Has no return type, not even void.\n4. Called only once in the life-time of an object.\n\n\n#### Types of constructors\n1. Default constructor - No arguments. **It is named default coz it takes no argument.**\n2. Parameterized constructor -  takes some argument.\n3. Copy constructor - Takes only one object of the same class as argument.\n\n\nNotes:\n* If **no** constructor(i.e. of any type) is defined, **then and only then** a default constructor will be supplied by the compiler(actually just an empty body).\n```\n// compiler provided constructor\nclass_name()\n{\n\n}\n```\n\n* If we define a constructor of any type, then this '**default'** constructor goes out of scope for us.\n* If a type of constructor is called, but not defined, although atleast one constructor(of some other type) has been defined. Then this is a compilation error, as no matching constructor could be found.\n\n<http://www.cplusplus.com/doc/tutorial/classes2/#default_constructor>\n\n* **Tip:** A parameterized constructor can be passed default arguments, so that there's no need of a separate default constructor. Takes care of the ambiguity, which can be a runtime error.\n* A constructor can be called explicitly, because this is useful.\n```c++\nint main()\n{\n\tCar c;\n\tstring name = \"Batman\";\n\tc.ride(Passenger(name)); // explicit call without declaration\n}\n```\n* A constructor can call other functions from inside it, no problem.\n* A program will **compile** **and run**, even if only a (non default param) parameterized constructor is defined. But it'll give runtime error if no params are given during its creation. **This is because we may not need a default constructor at all, due to presence of a parameterized constructor(which is not a default).**\n\n\n",
      "html": "<h1 id=\"1.-constructor---idea-and-syntax\">1. Constructor - idea and syntax <a class=\"heading-anchor-permalink\" href=\"#1.-constructor---idea-and-syntax\">#</a></h1>\n<p>Created Wednesday 08 January 2020</p>\n<h4 id=\"idea-of-a-constructor\">Idea of a constructor <a class=\"heading-anchor-permalink\" href=\"#idea-of-a-constructor\">#</a></h4>\n<ul>\n<li>A newly created object **should have **some initial value. Garbage values are undesired.</li>\n<li>Constructor do exactly this - they initialize data.</li>\n<li>Constructors are called automatically - this relieves us of initializing objects using setters.</li>\n</ul>\n<h4 id=\"properties-of-a-constructor\">Properties of a constructor <a class=\"heading-anchor-permalink\" href=\"#properties-of-a-constructor\">#</a></h4>\n<ol>\n<li>It is a function</li>\n<li>Name is the same as that of the class.</li>\n<li>Has no return type, not even void.</li>\n<li>Called only once in the life-time of an object.</li>\n</ol>\n<h4 id=\"types-of-constructors\">Types of constructors <a class=\"heading-anchor-permalink\" href=\"#types-of-constructors\">#</a></h4>\n<ol>\n<li>Default constructor - No arguments. <strong>It is named default coz it takes no argument.</strong></li>\n<li>Parameterized constructor -  takes some argument.</li>\n<li>Copy constructor - Takes only one object of the same class as argument.</li>\n</ol>\n<p>Notes:</p>\n<ul>\n<li>If <strong>no</strong> constructor(i.e. of any type) is defined, <strong>then and only then</strong> a default constructor will be supplied by the compiler(actually just an empty body).</li>\n</ul>\n<pre><code>// compiler provided constructor\nclass_name()\n{\n\n}\n</code></pre>\n<ul>\n<li>If we define a constructor of any type, then this '<strong>default’</strong> constructor goes out of scope for us.</li>\n<li>If a type of constructor is called, but not defined, although atleast one constructor(of some other type) has been defined. Then this is a compilation error, as no matching constructor could be found.</li>\n</ul>\n<p><a href=\"http://www.cplusplus.com/doc/tutorial/classes2/#default_constructor\">http://www.cplusplus.com/doc/tutorial/classes2/#default_constructor</a></p>\n<ul>\n<li><strong>Tip:</strong> A parameterized constructor can be passed default arguments, so that there’s no need of a separate default constructor. Takes care of the ambiguity, which can be a runtime error.</li>\n<li>A constructor can be called explicitly, because this is useful.</li>\n</ul>\n<pre><code class=\"language-c++\">int main()\n{\n\tCar c;\n\tstring name = &quot;Batman&quot;;\n\tc.ride(Passenger(name)); // explicit call without declaration\n}\n</code></pre>\n<ul>\n<li>A constructor can call other functions from inside it, no problem.</li>\n<li>A program will <strong>compile</strong> <strong>and run</strong>, even if only a (non default param) parameterized constructor is defined. But it’ll give runtime error if no params are given during its creation. <strong>This is because we may not need a default constructor at all, due to presence of a parameterized constructor(which is not a default).</strong></li>\n</ul>\n",
      "id": 132
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/1._The_Copy_constructor/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/1._The_Copy_constructor/0_index.html",
      "content": "# 1. The Copy constructor\n\nCreated Friday 10 January 2020\n\nThe compiler provided copy constructor does **shallow **copying.\n![](/assets/1._The_Copy_constructor-image-1.png)\nWe have to define a copy constructor with the part which deals with the memory as per our requirement.\n\n### Overriding the copy constructor\n\nNote:\n\n- Copy constructor will have params as const references, otherwise it'll be infinite loop.\n\n![](/assets/1._The_Copy_constructor-image-2.png) Loop.\n\n- Copy constructors will always need another type of constructor, since their very invocation requires that an object exist. i.e the **first **object can never be created by using a copy contsructor.\n",
      "html": "<h1 id=\"1.-the-copy-constructor\">1. The Copy constructor <a class=\"heading-anchor-permalink\" href=\"#1.-the-copy-constructor\">#</a></h1>\n<p>Created Friday 10 January 2020</p>\n<p>The compiler provided copy constructor does **shallow **copying.\n<img src=\"/assets/1._The_Copy_constructor-image-1.png\" alt=\"\">\nWe have to define a copy constructor with the part which deals with the memory as per our requirement.</p>\n<h3 id=\"overriding-the-copy-constructor\">Overriding the copy constructor <a class=\"heading-anchor-permalink\" href=\"#overriding-the-copy-constructor\">#</a></h3>\n<p>Note:</p>\n<ul>\n<li>Copy constructor will have params as const references, otherwise it’ll be infinite loop.</li>\n</ul>\n<p><img src=\"/assets/1._The_Copy_constructor-image-2.png\" alt=\"\"> Loop.</p>\n<ul>\n<li>Copy constructors will always need another type of constructor, since their very invocation requires that an object exist. i.e the **first **object can never be created by using a copy contsructor.</li>\n</ul>\n",
      "id": 133
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/1._The_Copy_constructor/1._Shallow_and_Deep_copy.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/1._The_Copy_constructor/1._Shallow_and_Deep_copy.html",
      "content": "# 1. Shallow and Deep copy\nCreated Friday 10 January 2020\n\nShallow vs deep copy?\n\n* Shallow copy refers to the default copying scenario, which is bit by bit in C++.\n* Deep copy means copying the contents of the object. Obviously, what is copied deeply is decided by the programmer.\n\n\n### Need for deep copy\n\n* For primitive types, shallow copy is okay. But if an object stores pointer to a data structure, and we just copy the pointer(without creating a copy of the data structure), then both objects will refer to the same place in memory when reading/writing to the data structure.\n* This is **not good**, as we actually a clone.\n\n\n### Context\n\n* Both copy constructor and copy assignment operator do shallow copy.\n* Hence we **need** to overload **both** the copy constructor and copy assignement operator if we wish to perform deep copy.\n\n\nExample - A dynamic array. Assume extra code is present wherever necessary.\n```c++\nclass DynamicArray\n{\n\tint size, capacity;\n\tint * arr;\n\t...\n\n\tDynamicArray(const& A) // deep copy\n\t{\n\t\tsize = A.size, capacity = A.capacity;\n\t\tarr = new int[capacity]; // allocate new memory\n\t\tfor(int i=0; i<size; i++)\n\t\t\tarr[i] = A.arr[i];\n\t}\n\n\tvoid operator=(const& B) // A = B\n\t{\n\t\tsize = B.size, capacity = B.capacity;\n\t\tdelete[] arr; // delete current memory\n\t\tarr = new int[capacity];\n\t\tfor(int i=0; i<size; i++)\n\t\t\tarr[i] = A.arr[i];\n\t}\n}\n```\n",
      "html": "<h1 id=\"1.-shallow-and-deep-copy\">1. Shallow and Deep copy <a class=\"heading-anchor-permalink\" href=\"#1.-shallow-and-deep-copy\">#</a></h1>\n<p>Created Friday 10 January 2020</p>\n<p>Shallow vs deep copy?</p>\n<ul>\n<li>Shallow copy refers to the default copying scenario, which is bit by bit in C++.</li>\n<li>Deep copy means copying the contents of the object. Obviously, what is copied deeply is decided by the programmer.</li>\n</ul>\n<h3 id=\"need-for-deep-copy\">Need for deep copy <a class=\"heading-anchor-permalink\" href=\"#need-for-deep-copy\">#</a></h3>\n<ul>\n<li>For primitive types, shallow copy is okay. But if an object stores pointer to a data structure, and we just copy the pointer(without creating a copy of the data structure), then both objects will refer to the same place in memory when reading/writing to the data structure.</li>\n<li>This is <strong>not good</strong>, as we actually a clone.</li>\n</ul>\n<h3 id=\"context\">Context <a class=\"heading-anchor-permalink\" href=\"#context\">#</a></h3>\n<ul>\n<li>Both copy constructor and copy assignment operator do shallow copy.</li>\n<li>Hence we <strong>need</strong> to overload <strong>both</strong> the copy constructor and copy assignement operator if we wish to perform deep copy.</li>\n</ul>\n<p>Example - A dynamic array. Assume extra code is present wherever necessary.</p>\n<pre><code class=\"language-c++\">class DynamicArray\n{\n\tint size, capacity;\n\tint * arr;\n\t...\n\n\tDynamicArray(const&amp; A) // deep copy\n\t{\n\t\tsize = A.size, capacity = A.capacity;\n\t\tarr = new int[capacity]; // allocate new memory\n\t\tfor(int i=0; i&lt;size; i++)\n\t\t\tarr[i] = A.arr[i];\n\t}\n\n\tvoid operator=(const&amp; B) // A = B\n\t{\n\t\tsize = B.size, capacity = B.capacity;\n\t\tdelete[] arr; // delete current memory\n\t\tarr = new int[capacity];\n\t\tfor(int i=0; i&lt;size; i++)\n\t\t\tarr[i] = A.arr[i];\n\t}\n}\n</code></pre>\n",
      "id": 134
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/2._Feature_-_Delegating_constructors.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/2._Feature_-_Delegating_constructors.html",
      "content": "# 2. Feature - Delegating constructors\nCreated Thursday 09 January 2020\n\nDelegating constructors - reusing constructors to avoid code duplication.\nThis is not obvious unlike Java where we can freely call ``this``() and ``super``() at will. - __OPTIONAL__\n\nSuppose we have the following code:\n```c++\nclass A\n{\n\tpublic:\n    \tA()\n    \t{\n     \t\t// code to do X\n    \t}\n\n    \tA(int value)\n    \t{\n    \t\t// code to do x // duplicate code\n      \t  \t// code to do y\n    \t}\n};\n```\n\nThe following solution will not work in C++:\n```c++\nclass A\n{\n\tpublic:\n    \tA()\n    \t{\n     \t\t// code to do X\n    \t}\n    \tA(int value)\n    \t{\n    \t\tA(); // OK - but useless - temp object created and destroyed\n      \t  \t// code to do y\n    \t}\n};\n```\n\nC++ way to do this is called \"constructor delegation\".\n**Syntax** -  Just include extra constructor calls in the intializer list.\n```c++\nA(int value): A() // A() affects current onject. Nice.\n{\n\t// code to do y\n};\n```\n**Important** - a constructor that delegates to another constructor is not allowed to do member initialization in the initialization list. So constructors can either delegate or use initialization lists for member initialization, but not both.\n\n",
      "html": "<h1 id=\"2.-feature---delegating-constructors\">2. Feature - Delegating constructors <a class=\"heading-anchor-permalink\" href=\"#2.-feature---delegating-constructors\">#</a></h1>\n<p>Created Thursday 09 January 2020</p>\n<p>Delegating constructors - reusing constructors to avoid code duplication.\nThis is not obvious unlike Java where we can freely call <code>this</code>() and <code>super</code>() at will. - <strong>OPTIONAL</strong></p>\n<p>Suppose we have the following code:</p>\n<pre><code class=\"language-c++\">class A\n{\n\tpublic:\n    \tA()\n    \t{\n     \t\t// code to do X\n    \t}\n\n    \tA(int value)\n    \t{\n    \t\t// code to do x // duplicate code\n      \t  \t// code to do y\n    \t}\n};\n</code></pre>\n<p>The following solution will not work in C++:</p>\n<pre><code class=\"language-c++\">class A\n{\n\tpublic:\n    \tA()\n    \t{\n     \t\t// code to do X\n    \t}\n    \tA(int value)\n    \t{\n    \t\tA(); // OK - but useless - temp object created and destroyed\n      \t  \t// code to do y\n    \t}\n};\n</code></pre>\n<p>C++ way to do this is called “constructor delegation”.\n<strong>Syntax</strong> -  Just include extra constructor calls in the intializer list.</p>\n<pre><code class=\"language-c++\">A(int value): A() // A() affects current onject. Nice.\n{\n\t// code to do y\n};\n</code></pre>\n<p><strong>Important</strong> - a constructor that delegates to another constructor is not allowed to do member initialization in the initialization list. So constructors can either delegate or use initialization lists for member initialization, but not both.</p>\n",
      "id": 135
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/2._Destructor.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/2._Destructor.html",
      "content": "# 2. Destructor\n\nCreated Thursday 09 January 2020\n\n**Goal of the destructor:** To deallocate memory of an object.\n\n#### Properties of a destructor\n\n1. Has the name same as that of the class.\n2. Returns nothing.\n3. Takes no arguments.\n\n### Comparison with constructor\n\n1. has to have `~` preceding the destructor_name(in the definition).\n2. There's only one destructor per class, this follows logically from the properties.\n\n**Note**\n\n- If no destructor has been defined, the compiler provides one with an empty body. This provided destructor is not visible if we have defined our own destructor.\n- Destructors can all other functions since the object isn’t destroyed until after the destructor executes.\n- Don't call the destructor explicitly, except if the object was dynamically created. This is allowed but considered bad practice.\n\n**When is the destructor called?**\nA) There are two cases:\n\n1. Static objects: The destructor is automatically when the function ends.\n2. Dynamic objects: When we go out of scope for a dynamic object, only the pointer on the stack is freed, not the object's memory in heap. So the destructor is never called. The destructor is called only when we deallocate the memory(using _delete_).\n\n---\n\ne.g\n![](../../../../../assets/2._Destructor-image-1.png)\nHere the destructor is called only for object s1 and s3, but not for s3.\n\n- The destructor will be invoked only if we explicitly delete s3;\n- Any DS's used by the class will be cleared only if we do it explicitly in the destructor, i.e provide it.\n",
      "html": "<h1 id=\"2.-destructor\">2. Destructor <a class=\"heading-anchor-permalink\" href=\"#2.-destructor\">#</a></h1>\n<p>Created Thursday 09 January 2020</p>\n<p><strong>Goal of the destructor:</strong> To deallocate memory of an object.</p>\n<h4 id=\"properties-of-a-destructor\">Properties of a destructor <a class=\"heading-anchor-permalink\" href=\"#properties-of-a-destructor\">#</a></h4>\n<ol>\n<li>Has the name same as that of the class.</li>\n<li>Returns nothing.</li>\n<li>Takes no arguments.</li>\n</ol>\n<h3 id=\"comparison-with-constructor\">Comparison with constructor <a class=\"heading-anchor-permalink\" href=\"#comparison-with-constructor\">#</a></h3>\n<ol>\n<li>has to have <code>~</code> preceding the destructor_name(in the definition).</li>\n<li>There’s only one destructor per class, this follows logically from the properties.</li>\n</ol>\n<p><strong>Note</strong></p>\n<ul>\n<li>If no destructor has been defined, the compiler provides one with an empty body. This provided destructor is not visible if we have defined our own destructor.</li>\n<li>Destructors can all other functions since the object isn’t destroyed until after the destructor executes.</li>\n<li>Don’t call the destructor explicitly, except if the object was dynamically created. This is allowed but considered bad practice.</li>\n</ul>\n<p><strong>When is the destructor called?</strong>\nA) There are two cases:</p>\n<ol>\n<li>Static objects: The destructor is automatically when the function ends.</li>\n<li>Dynamic objects: When we go out of scope for a dynamic object, only the pointer on the stack is freed, not the object’s memory in heap. So the destructor is never called. The destructor is called only when we deallocate the memory(using <em>delete</em>).</li>\n</ol>\n<hr>\n<p>e.g\n<img src=\"../../../../../assets/2._Destructor-image-1.png\" alt=\"\">\nHere the destructor is called only for object s1 and s3, but not for s3.</p>\n<ul>\n<li>The destructor will be invoked only if we explicitly delete s3;</li>\n<li>Any DS’s used by the class will be cleared only if we do it explicitly in the destructor, i.e provide it.</li>\n</ul>\n",
      "id": 136
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/3._Special_functions_details/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/2._Special_Functions/3._Special_functions_details/0_index.html",
      "content": "# 3. Special functions details\nCreated Wednesday 08 January 2020\n\nThe compiler is able to provide 4 special functions:\n\n1. Default constructor\n2. Copy constructor\n3. Destructor\n4. Copy assignment operator\n\nNumber 1 - conditionally given by the compiler\nNumber 2, 3, 4 - always given\n\n* All special functions can be overriden.\n\n*****\n1. **Default constructor** does not need any invocation. It is used to initialize attributes. Provided by the compiler iff no(i.e of any type) constructor has been defined. It is simply an empty body.\n\nNote:\n* A program which has no default constructor(i.e it has been overshadowed), also compiles and runs as long as there's no call for the default constructor.\n\n*****\n**Parameterized** constructor has argument(s).\nStatic :\t`Student obj1(val1, val2...);`\nDynamic :\t`Student *obj1  = new Student(val1, val2...);`\n\n* Never given by the compiler.\n\n*****\n2. **Copy constructor:**\nIt's a constructor(given by the compiler at all times) which takes an object as the argument, and copies all the data members to the new object. This copying is done in a *bit by bit* fashion. i.e **It does shallow copy.**\n\n* We create an object which has all data_members the same as that of another pre-existing object called obj1.\n\nSyntax:  just add a parenthesis to the class_name with the argument.\n```c++\nint main()\n{\n\tRectangle r1;\n\tRectangle r2(r1); // copy constructor is called\n}\n```\nNote:\n* **Empty parenthesis should not be used. They are a part of C++'s **[Most Vexing Parse](https://stackoverflow.com/questions/180172/default-constructor-with-empty-brackets)  **wherein every empty () is treated as being a function declaration wherever it can be treated as such.**\n* Although doing 'new Student()' is the same as 'new Student' - because cannot be misinterpreted as a function definition, as **new **is not a return type.\n* All 4 possible cases while using the copy constructor for object creation:\n\nS ≡ Stack, D ≡ Dynamic memory(heap)\nS from S:\t    `Student obj1(obj0);`\nD from S:\t`Student *obj1  = new Student(obj0);`\nS from D:\t`Student obj2(*obj1);`\nD from D:\t`Student *obj3 = new Student(*obj1);`\n**Doubt/Motivation: Why don't we just copy each attribute expilcity, why have a copy constructor at all?**\nWe cannot, because:\n\n* Some private attributes, may not have a proper getter at all. e.g We can only print the age, not access it via a variable.\n* It is very tedious.\n* It acts as an easy duplicate/clone button.\n\n**Note: **\n\n* If we wish to override the compiler-given copy constructor, it is important to use (const Student &t) as the formal param.\n* Read : <http://www.cplusplus.com/doc/tutorial/classes2/#copy_constructor>\n\n*****\n4. **Copy assignment operator.**\nIf we need to copy data from one object to the other. Intuitively we'd want to use =.\n'=' has actually been overloaded to implement *bit by bit* copying from rvalue location to the lvalue location.\nNote: Beware of static and dynamically allocated objects, please **dereference** before using this operator.\n\n* = does **shallow** copy.\n\nSyntax examples(All 4 cases);\nSS:   s1 = s2;\nSD: \ts1 = *s2;\nDS: \t*s1 = s2;\nDD:\t*s1 = *s2;\n\n**Doubt: How does it differ with the copy constructor?**\n**A)** This(=) operator is useful only if the two objects already exist. If one of them does not(i.e during declarization), then the copy constructor is called, not the assignment operator. i.e = will become a copy constructor in this case. [Copy vs Copy assignment operator.cpp](3._Special_functions_details/copy_vs_copy_assignment.cpp)\ne.g\nStudent x1 = x0; // this looks like copy assignment operator, but it is not. Copy constructor is called in this case, because x0 exists but x1 does not.\n<http://www.cplusplus.com/doc/tutorial/classes2/#copy_assignment>\n\n* Remember copy constructor is **more primitive** than assignment operator. The assignment operator resorts to the copy constructor and not the other way around. **Remember this.** Example:\n```c++\nMyClass obj2 = obj1; // actually calls the copy constructor\n// so copy constructor is more primitive than assignment operator\n```\n* Never use an object assignment inside a copy constructor or a copy assignment operator. coz they form an infinite loop.",
      "html": "<h1 id=\"3.-special-functions-details\">3. Special functions details <a class=\"heading-anchor-permalink\" href=\"#3.-special-functions-details\">#</a></h1>\n<p>Created Wednesday 08 January 2020</p>\n<p>The compiler is able to provide 4 special functions:</p>\n<ol>\n<li>Default constructor</li>\n<li>Copy constructor</li>\n<li>Destructor</li>\n<li>Copy assignment operator</li>\n</ol>\n<p>Number 1 - conditionally given by the compiler\nNumber 2, 3, 4 - always given</p>\n<ul>\n<li>All special functions can be overriden.</li>\n</ul>\n<hr>\n<ol>\n<li><strong>Default constructor</strong> does not need any invocation. It is used to initialize attributes. Provided by the compiler iff no(i.e of any type) constructor has been defined. It is simply an empty body.</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>A program which has no default constructor(i.e it has been overshadowed), also compiles and runs as long as there’s no call for the default constructor.</li>\n</ul>\n<hr>\n<p><strong>Parameterized</strong> constructor has argument(s).\nStatic :\t<code>Student obj1(val1, val2...);</code>\nDynamic :\t<code>Student *obj1 = new Student(val1, val2...);</code></p>\n<ul>\n<li>Never given by the compiler.</li>\n</ul>\n<hr>\n<ol start=\"2\">\n<li><strong>Copy constructor:</strong>\nIt’s a constructor(given by the compiler at all times) which takes an object as the argument, and copies all the data members to the new object. This copying is done in a <em>bit by bit</em> fashion. i.e <strong>It does shallow copy.</strong></li>\n</ol>\n<ul>\n<li>We create an object which has all data_members the same as that of another pre-existing object called obj1.</li>\n</ul>\n<p>Syntax:  just add a parenthesis to the class_name with the argument.</p>\n<pre><code class=\"language-c++\">int main()\n{\n\tRectangle r1;\n\tRectangle r2(r1); // copy constructor is called\n}\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>**Empty parenthesis should not be used. They are a part of C++'s **<a href=\"https://stackoverflow.com/questions/180172/default-constructor-with-empty-brackets\">Most Vexing Parse</a>  <strong>wherein every empty () is treated as being a function declaration wherever it can be treated as such.</strong></li>\n<li>Although doing ‘new Student()’ is the same as ‘new Student’ - because cannot be misinterpreted as a function definition, as **new **is not a return type.</li>\n<li>All 4 possible cases while using the copy constructor for object creation:</li>\n</ul>\n<p>S ≡ Stack, D ≡ Dynamic memory(heap)\nS from S:\t    <code>Student obj1(obj0);</code>\nD from S:\t<code>Student *obj1 = new Student(obj0);</code>\nS from D:\t<code>Student obj2(*obj1);</code>\nD from D:\t<code>Student *obj3 = new Student(*obj1);</code>\n<strong>Doubt/Motivation: Why don’t we just copy each attribute expilcity, why have a copy constructor at all?</strong>\nWe cannot, because:</p>\n<ul>\n<li>Some private attributes, may not have a proper getter at all. e.g We can only print the age, not access it via a variable.</li>\n<li>It is very tedious.</li>\n<li>It acts as an easy duplicate/clone button.</li>\n</ul>\n<p>**Note: **</p>\n<ul>\n<li>If we wish to override the compiler-given copy constructor, it is important to use (const Student &amp;t) as the formal param.</li>\n<li>Read : <a href=\"http://www.cplusplus.com/doc/tutorial/classes2/#copy_constructor\">http://www.cplusplus.com/doc/tutorial/classes2/#copy_constructor</a></li>\n</ul>\n<hr>\n<ol start=\"4\">\n<li><strong>Copy assignment operator.</strong>\nIf we need to copy data from one object to the other. Intuitively we’d want to use =.\n‘=’ has actually been overloaded to implement <em>bit by bit</em> copying from rvalue location to the lvalue location.\nNote: Beware of static and dynamically allocated objects, please <strong>dereference</strong> before using this operator.</li>\n</ol>\n<ul>\n<li>= does <strong>shallow</strong> copy.</li>\n</ul>\n<p>Syntax examples(All 4 cases);\nSS:   s1 = s2;\nSD: \ts1 = *s2;\nDS: \t*s1 = s2;\nDD:\t*s1 = *s2;</p>\n<p><strong>Doubt: How does it differ with the copy constructor?</strong>\n<strong>A)</strong> This(=) operator is useful only if the two objects already exist. If one of them does not(i.e during declarization), then the copy constructor is called, not the assignment operator. i.e = will become a copy constructor in this case. <a href=\"3._Special_functions_details/copy_vs_copy_assignment.cpp\">Copy vs Copy assignment operator.cpp</a>\ne.g\nStudent x1 = x0; // this looks like copy assignment operator, but it is not. Copy constructor is called in this case, because x0 exists but x1 does not.\n<a href=\"http://www.cplusplus.com/doc/tutorial/classes2/#copy_assignment\">http://www.cplusplus.com/doc/tutorial/classes2/#copy_assignment</a></p>\n<ul>\n<li>Remember copy constructor is <strong>more primitive</strong> than assignment operator. The assignment operator resorts to the copy constructor and not the other way around. <strong>Remember this.</strong> Example:</li>\n</ul>\n<pre><code class=\"language-c++\">MyClass obj2 = obj1; // actually calls the copy constructor\n// so copy constructor is more primitive than assignment operator\n</code></pre>\n<ul>\n<li>Never use an object assignment inside a copy constructor or a copy assignment operator. coz they form an infinite loop.</li>\n</ul>\n",
      "id": 137
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/3._Member_constraints/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/3._Member_constraints/0_index.html",
      "content": "# 3. Member constraints\nCreated Thursday 08 April 2021\n\nThese \"restrictions\" are ways to modify the behavior of class members. The restrictions affect:\n\n1. Write access - const\n2. Variable life-time - static\n\n\n",
      "html": "<h1 id=\"3.-member-constraints\">3. Member constraints <a class=\"heading-anchor-permalink\" href=\"#3.-member-constraints\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<p>These “restrictions” are ways to modify the behavior of class members. The restrictions affect:</p>\n<ol>\n<li>Write access - const</li>\n<li>Variable life-time - static</li>\n</ol>\n",
      "id": 138
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/3._Member_constraints/1._const/1._const_fields_-_Intialization_List.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/3._Member_constraints/1._const/1._const_fields_-_Intialization_List.html",
      "content": "# 1. const fields - Intialization List\nCreated Saturday 11 January 2020\n\n\n* How do we work with **const** data members?\nIf we don't initialize, then the value is stuck and will be the same for all objects.\n\n* C++ does not allow initialization outside a function.\n\nTo solve this problem, we need to use **initialization lists.**\n\n*****\n**Syntax**\n```c++\nclass A{\n\tint a, b;\n\tconst string c;\n\tint d[4];\n\t...\n\tvoid f() : a(2), b(a), c(\"Sanjar\"), d{1,2,3,4} // intialization list\n\t{\n\t\t...\n\t}\n\t...\n};\n```\n* We can initialize any data member using i-lists\n* It is the first thing that is run, when an object is being created.\n* Variables in the i-list are not initialized in the order that they are specified in the i-list. Instead, they are initialized in the order in which they are declared in the class.\n* Making a constructor(with initialization list) is a must if at least one data member is const or reference.\n* We should not write 'this' in the initialization list, **except for a reference variable**. That would give an error. The names are not overshadowed here.\n\n*****\n**Use case:**\n1. If we want a const data member.\n2. If our class has reference data members.\n(Both need to be declarized).\n\n*****\n* In C++11 and higher, we can initialize const and references just outside the constructor too.\n* Even here, the initialization list is evaluated first.",
      "html": "<h1 id=\"1.-const-fields---intialization-list\">1. const fields - Intialization List <a class=\"heading-anchor-permalink\" href=\"#1.-const-fields---intialization-list\">#</a></h1>\n<p>Created Saturday 11 January 2020</p>\n<ul>\n<li>\n<p>How do we work with <strong>const</strong> data members?\nIf we don’t initialize, then the value is stuck and will be the same for all objects.</p>\n</li>\n<li>\n<p>C++ does not allow initialization outside a function.</p>\n</li>\n</ul>\n<p>To solve this problem, we need to use <strong>initialization lists.</strong></p>\n<hr>\n<p><strong>Syntax</strong></p>\n<pre><code class=\"language-c++\">class A{\n\tint a, b;\n\tconst string c;\n\tint d[4];\n\t...\n\tvoid f() : a(2), b(a), c(&quot;Sanjar&quot;), d{1,2,3,4} // intialization list\n\t{\n\t\t...\n\t}\n\t...\n};\n</code></pre>\n<ul>\n<li>We can initialize any data member using i-lists</li>\n<li>It is the first thing that is run, when an object is being created.</li>\n<li>Variables in the i-list are not initialized in the order that they are specified in the i-list. Instead, they are initialized in the order in which they are declared in the class.</li>\n<li>Making a constructor(with initialization list) is a must if at least one data member is const or reference.</li>\n<li>We should not write ‘this’ in the initialization list, <strong>except for a reference variable</strong>. That would give an error. The names are not overshadowed here.</li>\n</ul>\n<hr>\n<p><strong>Use case:</strong></p>\n<ol>\n<li>If we want a const data member.</li>\n<li>If our class has reference data members.\n(Both need to be declarized).</li>\n</ol>\n<hr>\n<ul>\n<li>In C++11 and higher, we can initialize const and references just outside the constructor too.</li>\n<li>Even here, the initialization list is evaluated first.</li>\n</ul>\n",
      "id": 139
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/3._Member_constraints/1._const/2._const_member_functions.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/3._Member_constraints/1._const/2._const_member_functions.html",
      "content": "# 2. const member functions\nCreated Saturday 11 January 2020\n\n#### What is const in OOP?\n\n* A ``const`` **object** - an object whose data-members are all *const*. **This is by definition.**\n* A ``const`` **member function** is a member function that guarantees it will not modify the object or call any non-const member functions (as they may modify the object).\n\n\n#### How to make a function 'const'\n\n* If our const mark(on the function) is fake(i.e it changes the object), then the const binding of the data member will be give an error.\n* How to tag a function as *const*. Put *const* after the parentheses, before the definition code block.\n\n```c++\nclass A\n{\n\t...\n\tvoid foo() const\n\t{\n\t\t// code\n\t}\n\t...\n};\n```\n**Note**\n\n1. Const functions can be invoked through both const and non const objects.\n2. Const objects can access only const functions, i.e const objects are limited in their actions.\n3. A const function **can** change attributes for a non-const param passed to it. The only restriction is changing the caller object.\n4. Special functions(like constructors, destructor and copy assignment operator) cannot be made ``const``.\n5. A function can be [overloaded](https://www.learncpp.com/cpp-tutorial/810-const-class-objects-and-member-functions/#urvanov-syntax-highlighter-5fc3d172dab82489944693) to have a ``const`` function and a non-``const``, both are considered different, because constness is part of the function signature. Here a ``const`` object will call the ``const``  function, otherwise the normal function is called.\n\n\n#### How does const work\nconst functions just have a** const T* **instead of a normal** this. **\n\n#### [Changing](https://stackoverflow.com/questions/6852717/what-can-a-const-method-change/6853421#6853421) a data structures in a const function\nWhy use as constant functions?: <https://en.wikibooks.org/wiki/C%2B%2B_Programming/Programming_Languages/C%2B%2B/Code/Keywords/return>\n\n\n* Remember const first takes value then tags the path constant.\n\n<https://stackoverflow.com>\n\n",
      "html": "<h1 id=\"2.-const-member-functions\">2. const member functions <a class=\"heading-anchor-permalink\" href=\"#2.-const-member-functions\">#</a></h1>\n<p>Created Saturday 11 January 2020</p>\n<h4 id=\"what-is-const-in-oop%3F\">What is const in OOP? <a class=\"heading-anchor-permalink\" href=\"#what-is-const-in-oop%3F\">#</a></h4>\n<ul>\n<li>A <code>const</code> <strong>object</strong> - an object whose data-members are all <em>const</em>. <strong>This is by definition.</strong></li>\n<li>A <code>const</code> <strong>member function</strong> is a member function that guarantees it will not modify the object or call any non-const member functions (as they may modify the object).</li>\n</ul>\n<h4 id=\"how-to-make-a-function-%E2%80%98const%E2%80%99\">How to make a function ‘const’ <a class=\"heading-anchor-permalink\" href=\"#how-to-make-a-function-%E2%80%98const%E2%80%99\">#</a></h4>\n<ul>\n<li>If our const mark(on the function) is fake(i.e it changes the object), then the const binding of the data member will be give an error.</li>\n<li>How to tag a function as <em>const</em>. Put <em>const</em> after the parentheses, before the definition code block.</li>\n</ul>\n<pre><code class=\"language-c++\">class A\n{\n\t...\n\tvoid foo() const\n\t{\n\t\t// code\n\t}\n\t...\n};\n</code></pre>\n<p><strong>Note</strong></p>\n<ol>\n<li>Const functions can be invoked through both const and non const objects.</li>\n<li>Const objects can access only const functions, i.e const objects are limited in their actions.</li>\n<li>A const function <strong>can</strong> change attributes for a non-const param passed to it. The only restriction is changing the caller object.</li>\n<li>Special functions(like constructors, destructor and copy assignment operator) cannot be made <code>const</code>.</li>\n<li>A function can be <a href=\"https://www.learncpp.com/cpp-tutorial/810-const-class-objects-and-member-functions/#urvanov-syntax-highlighter-5fc3d172dab82489944693\">overloaded</a> to have a <code>const</code> function and a non-<code>const</code>, both are considered different, because constness is part of the function signature. Here a <code>const</code> object will call the <code>const</code>  function, otherwise the normal function is called.</li>\n</ol>\n<h4 id=\"how-does-const-work\">How does const work <a class=\"heading-anchor-permalink\" href=\"#how-does-const-work\">#</a></h4>\n<p>const functions just have a** const T* <strong>instead of a normal</strong> this. **</p>\n<h4 id=\"changing-a-data-structures-in-a-const-function\"><a href=\"https://stackoverflow.com/questions/6852717/what-can-a-const-method-change/6853421#6853421\">Changing</a> a data structures in a const function <a class=\"heading-anchor-permalink\" href=\"#changing-a-data-structures-in-a-const-function\">#</a></h4>\n<p>Why use as constant functions?: <a href=\"https://en.wikibooks.org/wiki/C%2B%2B_Programming/Programming_Languages/C%2B%2B/Code/Keywords/return\">https://en.wikibooks.org/wiki/C%2B%2B_Programming/Programming_Languages/C%2B%2B/Code/Keywords/return</a></p>\n<ul>\n<li>Remember const first takes value then tags the path constant.</li>\n</ul>\n<p><a href=\"https://stackoverflow.com\">https://stackoverflow.com</a></p>\n",
      "id": 140
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/3._Member_constraints/2._static.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/3._Member_constraints/2._static.html",
      "content": "# 2. static\nCreated Saturday 11 January 2020\n\nHere, we'll study about use of ``static`` w.r.t OOP in C++ .\nWhen we declare a member of a class as static it means no matter how many objects of the class are created, there is only one copy of the static member.\n\n### Static Data Members\n* A static member is shared by all objects of the class.\n* They are not associated with any object, i.e they don't occupy an objects memory.\n* They are **present** even if no objects have been made. i.e they can be called/accessed using ``class_name::member`` even before any object is made.\n* They can be const, i.e ``static const`` variables are possible.\n* They **had to be** initialized outside the class(before C++11), using the scope resolution operator. i.e ``data_type class_name :: static_variable_name = value;``. This was done to avoid duplicate initializations at place wherever the class header has been copied. The static data member may be a private one.\n* But in C++11 we can initialize them [inside](https://en.cppreference.com/w/cpp/language/static#Static_data_members), by using the ``inline`` modifier.\n\n```c++\ninline static int x = 2;\n```\n\n**Complete vs Incomplete** declaration.\n\n* Changes can be made using the objects too, but should be **avoided**.\n* A constructor can be used to keep track of number of objects created. This is an appilcation.\n\n\n### Static Member Functions\n* Static member functions can work only on ``static`` values and hence don't need an object to be invoked(you can do so if you wish). They can be invoked using the class_name itself(if public).\n* Static objects/functions **don't have access to 'this'**. But can create their own non-static objects if required. i.e They cannot make changes to the caller object.\n* static member functions [cannot](https://stackoverflow.com/questions/7035356/c-why-static-member-function-cant-be-created-with-const-qualifier) be tagged ``const``. Because ``const`` will need to generate a const T* = ``this``, but ``this`` is inaccessible for static functions. **Pretty useless too.**\n* C++ does not support static constructor.\n* Static member functions can even be called without an object, like this:\n```c++\nMyClass::f(); // f is a static member function\n```\n\n\n",
      "html": "<h1 id=\"2.-static\">2. static <a class=\"heading-anchor-permalink\" href=\"#2.-static\">#</a></h1>\n<p>Created Saturday 11 January 2020</p>\n<p>Here, we’ll study about use of <code>static</code> w.r.t OOP in C++ .\nWhen we declare a member of a class as static it means no matter how many objects of the class are created, there is only one copy of the static member.</p>\n<h3 id=\"static-data-members\">Static Data Members <a class=\"heading-anchor-permalink\" href=\"#static-data-members\">#</a></h3>\n<ul>\n<li>A static member is shared by all objects of the class.</li>\n<li>They are not associated with any object, i.e they don’t occupy an objects memory.</li>\n<li>They are <strong>present</strong> even if no objects have been made. i.e they can be called/accessed using <code>class_name::member</code> even before any object is made.</li>\n<li>They can be const, i.e <code>static const</code> variables are possible.</li>\n<li>They <strong>had to be</strong> initialized outside the class(before C++11), using the scope resolution operator. i.e <code>data_type class_name :: static_variable_name = value;</code>. This was done to avoid duplicate initializations at place wherever the class header has been copied. The static data member may be a private one.</li>\n<li>But in C++11 we can initialize them <a href=\"https://en.cppreference.com/w/cpp/language/static#Static_data_members\">inside</a>, by using the <code>inline</code> modifier.</li>\n</ul>\n<pre><code class=\"language-c++\">inline static int x = 2;\n</code></pre>\n<p><strong>Complete vs Incomplete</strong> declaration.</p>\n<ul>\n<li>Changes can be made using the objects too, but should be <strong>avoided</strong>.</li>\n<li>A constructor can be used to keep track of number of objects created. This is an appilcation.</li>\n</ul>\n<h3 id=\"static-member-functions\">Static Member Functions <a class=\"heading-anchor-permalink\" href=\"#static-member-functions\">#</a></h3>\n<ul>\n<li>Static member functions can work only on <code>static</code> values and hence don’t need an object to be invoked(you can do so if you wish). They can be invoked using the class_name itself(if public).</li>\n<li>Static objects/functions <strong>don’t have access to ‘this’</strong>. But can create their own non-static objects if required. i.e They cannot make changes to the caller object.</li>\n<li>static member functions <a href=\"https://stackoverflow.com/questions/7035356/c-why-static-member-function-cant-be-created-with-const-qualifier\">cannot</a> be tagged <code>const</code>. Because <code>const</code> will need to generate a const T* = <code>this</code>, but <code>this</code> is inaccessible for static functions. <strong>Pretty useless too.</strong></li>\n<li>C++ does not support static constructor.</li>\n<li>Static member functions can even be called without an object, like this:</li>\n</ul>\n<pre><code class=\"language-c++\">MyClass::f(); // f is a static member function\n</code></pre>\n",
      "id": 141
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/0_index.html",
      "content": "# 4. Operator overloading\nCreated Friday 10 January 2020\n\nThis is very powerful, evolving over procedural programming.\n\n[./exercises.md](4._Operator_overloading/exercises.md)\n\n",
      "html": "<h1 id=\"4.-operator-overloading\">4. Operator overloading <a class=\"heading-anchor-permalink\" href=\"#4.-operator-overloading\">#</a></h1>\n<p>Created Friday 10 January 2020</p>\n<p>This is very powerful, evolving over procedural programming.</p>\n<p><a href=\"4._Operator_overloading/exercises.html\">./exercises.md</a></p>\n",
      "id": 142
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/1._Binary_operator.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/1._Binary_operator.html",
      "content": "# 1. Binary operator\nCreated Saturday 11 January 2020\n\n**Rationale:**\n\n* ``f1+f2``, mathematically can be written as ``f1.add(f2)``\n* This can be improvised to ``f1+f2`` in code.\n* Instead of ``Fraction add(const Fraction & t)``, write ``Fraction operator+(const Fraction &t)``.\n\nBody is the same for both.\n\n* Think this like, ``object1.`` is replaced by ``operator+`` and ``+`` is basically the function name.\n\nNotes:\n\n* **No space** should be present between **operator and symbol.**\n* The whole expression is replaced by the return type.\n* We can make the operator function as a const, if it does not change anything from the object.\n\n\nIn C++ we can overload most operators like ``+``, ``-``, ``[]``, ``->`` etc. But we cannot overload all the operators. Some of the operators cannot be overloaded, viz:\n\n1. ``.`` Dot operator\n2. ``? :`` Ternary operator\n3. ``::`` Scope resolution operator\n4. ``.*`` Pointer to member operator\n5. ``sizeof`` object size operator\n6. ``typeid`` object type operator\n\n**DTSPST**\nThese operators cannot be overloaded because if we overload them it will make serious programming issues.\n\nFor an example the sizeof operator returns the size of the object or datatype as an operand. This is evaluated by the compiler. It cannot be evaluated during runtime. So we cannot overload it.\n\nSome examples:\n```c++\nFraction operator+(Fraction const &f2)\n{\n    Fraction ret(*this);\n    int lcm = denominator * f2.denominator;\n    int x = lcm / denominator;\n    int y = lcm / f2.denominator;\n    ret.numerator = x * numerator + (y * f2.numerator);\n    ret.denominator = lcm;\n    ret.simplify();\n    return ret;\n}\n// Replace + by ==, -, *,/ . All these are binary functions.\n```\n",
      "html": "<h1 id=\"1.-binary-operator\">1. Binary operator <a class=\"heading-anchor-permalink\" href=\"#1.-binary-operator\">#</a></h1>\n<p>Created Saturday 11 January 2020</p>\n<p><strong>Rationale:</strong></p>\n<ul>\n<li><code>f1+f2</code>, mathematically can be written as <code>f1.add(f2)</code></li>\n<li>This can be improvised to <code>f1+f2</code> in code.</li>\n<li>Instead of <code>Fraction add(const Fraction &amp; t)</code>, write <code>Fraction operator+(const Fraction &amp;t)</code>.</li>\n</ul>\n<p>Body is the same for both.</p>\n<ul>\n<li>Think this like, <code>object1.</code> is replaced by <code>operator+</code> and <code>+</code> is basically the function name.</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li><strong>No space</strong> should be present between <strong>operator and symbol.</strong></li>\n<li>The whole expression is replaced by the return type.</li>\n<li>We can make the operator function as a const, if it does not change anything from the object.</li>\n</ul>\n<p>In C++ we can overload most operators like <code>+</code>, <code>-</code>, <code>[]</code>, <code>-&gt;</code> etc. But we cannot overload all the operators. Some of the operators cannot be overloaded, viz:</p>\n<ol>\n<li><code>.</code> Dot operator</li>\n<li><code>? :</code> Ternary operator</li>\n<li><code>::</code> Scope resolution operator</li>\n<li><code>.*</code> Pointer to member operator</li>\n<li><code>sizeof</code> object size operator</li>\n<li><code>typeid</code> object type operator</li>\n</ol>\n<p><strong>DTSPST</strong>\nThese operators cannot be overloaded because if we overload them it will make serious programming issues.</p>\n<p>For an example the sizeof operator returns the size of the object or datatype as an operand. This is evaluated by the compiler. It cannot be evaluated during runtime. So we cannot overload it.</p>\n<p>Some examples:</p>\n<pre><code class=\"language-c++\">Fraction operator+(Fraction const &amp;f2)\n{\n    Fraction ret(*this);\n    int lcm = denominator * f2.denominator;\n    int x = lcm / denominator;\n    int y = lcm / f2.denominator;\n    ret.numerator = x * numerator + (y * f2.numerator);\n    ret.denominator = lcm;\n    ret.simplify();\n    return ret;\n}\n// Replace + by ==, -, *,/ . All these are binary functions.\n</code></pre>\n",
      "id": 143
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/2._Unary_post/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/2._Unary_post/0_index.html",
      "content": "# 2. Unary post\nCreated Sunday 12 January 2020\n\n\n17. Both pre and post use the same symbol, how to differentiate pre and post in code?\n18. Write ``data_type`` in parentheses. This indicates that the operator is a post(i.e appears on the right side of the operand).\n\n\n\n* Rember that we don't need nesting in post operations, i.e return type ``void``.\n\n\nExample\n```c++\nclass A\n{\n    public:\n        int a;\n        A(int a)\n        {\n            this->a = a;\n        }\n\n        void operator++(int) // ++ as postfix\n        {\n            a++;\n            cout << \"post\\n\";\n            return a;\n        }\n\n        A& operator++() // ++ as prefix, nesting is present return reference\n        {\n            cout << \"pre\\n\";\n            ++a;\n            return a;\n        }\n};\n```\n",
      "html": "<h1 id=\"2.-unary-post\">2. Unary post <a class=\"heading-anchor-permalink\" href=\"#2.-unary-post\">#</a></h1>\n<p>Created Sunday 12 January 2020</p>\n<ol start=\"17\">\n<li>Both pre and post use the same symbol, how to differentiate pre and post in code?</li>\n<li>Write <code>data_type</code> in parentheses. This indicates that the operator is a post(i.e appears on the right side of the operand).</li>\n</ol>\n<ul>\n<li>Rember that we don’t need nesting in post operations, i.e return type <code>void</code>.</li>\n</ul>\n<p>Example</p>\n<pre><code class=\"language-c++\">class A\n{\n    public:\n        int a;\n        A(int a)\n        {\n            this-&gt;a = a;\n        }\n\n        void operator++(int) // ++ as postfix\n        {\n            a++;\n            cout &lt;&lt; &quot;post\\n&quot;;\n            return a;\n        }\n\n        A&amp; operator++() // ++ as prefix, nesting is present return reference\n        {\n            cout &lt;&lt; &quot;pre\\n&quot;;\n            ++a;\n            return a;\n        }\n};\n</code></pre>\n",
      "id": 144
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/3._Unary_pre.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/3._Unary_pre.html",
      "content": "# 3. Unary pre\nCreated Saturday 11 January 2020\n\n#### Important Questions\n\n* How is return working in the memory for a function?\n* If we overload ++, is it prefix or postfix?\n* Unary vs binary vs ternary in OOP?\n\n\n#### Unary\nThere are two possibilities\n**Without Nesting**\n```c++\nvoid operator++()\n{\n  a++;\n}\n```\n\n**With Nesting**\n```c++\nNumber operator++()\n{\n\ta++;\n\treturn *this;\n}\n```\n\n17. This is very interesting. If we try ++(++obj), value gets increased by 1 and not 2. Why?\n18. System buffers are responsible for this\n\t* When we return an object, only it's value is returned. i.e Return by value is the norm. Hence any changes on the returned value will not cause a change in the original variable.This can be avoided by using pointers. But that'd be complex(when using the function). Instead, we set the return **type as reference**.\n\t* This is required in order to facilitate **nesting of operators. **We need to hold the value, until we are done working on it.\n\t* **Solution** - Return ``Number&``, i.e no extra buffer is created, an alias will be returned. This means that we are working on the same object.\n\n\n",
      "html": "<h1 id=\"3.-unary-pre\">3. Unary pre <a class=\"heading-anchor-permalink\" href=\"#3.-unary-pre\">#</a></h1>\n<p>Created Saturday 11 January 2020</p>\n<h4 id=\"important-questions\">Important Questions <a class=\"heading-anchor-permalink\" href=\"#important-questions\">#</a></h4>\n<ul>\n<li>How is return working in the memory for a function?</li>\n<li>If we overload ++, is it prefix or postfix?</li>\n<li>Unary vs binary vs ternary in OOP?</li>\n</ul>\n<h4 id=\"unary\">Unary <a class=\"heading-anchor-permalink\" href=\"#unary\">#</a></h4>\n<p>There are two possibilities\n<strong>Without Nesting</strong></p>\n<pre><code class=\"language-c++\">void operator++()\n{\n  a++;\n}\n</code></pre>\n<p><strong>With Nesting</strong></p>\n<pre><code class=\"language-c++\">Number operator++()\n{\n\ta++;\n\treturn *this;\n}\n</code></pre>\n<ol start=\"17\">\n<li>This is very interesting. If we try ++(++obj), value gets increased by 1 and not 2. Why?</li>\n<li>System buffers are responsible for this\n<ul>\n<li>When we return an object, only it’s value is returned. i.e Return by value is the norm. Hence any changes on the returned value will not cause a change in the original variable.This can be avoided by using pointers. But that’d be complex(when using the function). Instead, we set the return <strong>type as reference</strong>.</li>\n<li>This is required in order to facilitate **nesting of operators. **We need to hold the value, until we are done working on it.</li>\n<li><strong>Solution</strong> - Return <code>Number&amp;</code>, i.e no extra buffer is created, an alias will be returned. This means that we are working on the same object.</li>\n</ul>\n</li>\n</ol>\n",
      "id": 145
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/exercises.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/exercises.html",
      "content": "# Lecture 1: Deep and Shallow copy\n\n**What is the output**\n\n    What will be the output of the following code ?\n\n    #include <iostream>\n    using namespace std;\n    #include <cstring>\n\n    class Student\n    {\n    public:\n        char *name;\n        int rollNo;\n\n        // Constructor 1\n        Student(int num)\n        {\n            rollNo = num;\n            name = new char[10];\n            strcpy(name, \"abc\");\n        }\n\n        // Constructor 2\n        Student(int num, char *str)\n        {\n            rollNo = num;\n            name = new char[strlen(str) + 1];\n            strcpy(name, str);\n        }\n\n        void print()\n        {\n            cout << name << \" \" << rollNo << \" \";\n        }\n    };\n\n    int main()\n    {\n        Student s1(101);\n        s1.print();\n        Student *s2 = new Student(150, \"xyz\");\n        s2->print();\n    }\n\n**Options**\n\n    a. Error\n    b. GarbageValue 101 xyz 150\n    c. abc 101 xyz 150\n    d. None\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. abc 101 xyz 150\n    Basics\n\n</details>\n\n---\n\n**What is the output**\n\n    #include <iostream>\n    using namespace std;\n\n    class Student\n    {\n    public:\n        char *name;\n        int rollNo;\n\n        void print()\n        {\n            cout << name << \" \" << rollNo << \" \";\n        }\n    };\n\n    int main()\n    {\n        char name[] = \"Misha\";\n        Student s1;\n        s1.name = name;\n        s1.rollNo = 101;\n\n        name[0] = 'N';\n        Student s2;\n        s2.name = name;\n        s2.rollNo = 102;\n\n        s1.print();\n        s2.print();\n    }\n\n**Options**\n\n    a. Misha 101 Nisha 102\n    b. Nisha 101 Nisha 102\n    c. Misha 101 Misha 102\n    d. Nisha 101 Misha 102\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. Nisha 101 Nisha 102\n    Basics\n\n</details>\n\n---\n\n# Copy constructor and initialization lists\n\n**What is the output**\n\n    class Student\n    {\n    public:\n        const int rollNumber;\n        int age;\n    };\n\n    int main()\n    {\n        Student s1;\n        s1.rollNumber = 101;\n        s1.age = 20;\n\n        cout << s1.rollNumber << \" \" << s1.age;\n    }\n\n**Options**\n\n    a. 101 20\n    b. Garbage\n    c. Compilation Error\n    d. None\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. Compilation Error\n    const needs to be declarized. Not allowed. Useless anyway.\n\n</details>\n\n---\n\n**What is the output**\n\n    class Student\n    {\n    public:\n        const int rollNumber;\n        int age;\n\n        Student(int r, int a) : rollNumber(r), age(a)\n        {\n        }\n    };\n\n    int main()\n    {\n        Student s1(100, 23);\n        cout << s1.rollNumber << \" \" << s1.age;\n    }\n\n**Options**\n\n    a. Error\n    b. 100 Garbage\n    c. 100 23\n    d. Garbage Garbage\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. 100 23\n    Basics of initialization lists.\n\n</details>\n\n---\n\n**What is the output**\n\n    class Student\n    {\n    public:\n        const int rollNumber;\n        int age;\n\n        int &x;\n\n        Student(int r, int a) : rollNumber(r), age(a)\n        {\n        }\n    };\n\n    int main()\n    {\n        Student s1(100, 23);\n        s1.x = age;\n        cout << s1.rollNumber << \" \" << s1.age << \" \" << s1.x;\n    }\n\n\n        int main()\n        {\n            Student s1(100, 23);\n            cout << s1.rollNumber << \" \" << s1.age;\n        }\n\n**Options**\n\n    a. 100 23 23\n    b. 100 23 Garbage\n    c. Error\n    d. None\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. Error\n    this keyword is missing in initialization list for the integer reference x;\n\n</details>\n\n---\n\n# Constant Member Functions\n\n**Member function**\n\n    If a member function does not alter any data in the class, that may be declared as ....................\n\n**Options**\n\n    a. constant member function\n    b. private member function\n    c. static member function\n    d. None\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. constant member function\n    Basics\n\n</details>\n\n---\n\n**What is the output**\n\n    class Student\n    {\n    public:\n        int rollNumber;\n        int age;\n    };\n\n    int main()\n    {\n        Student s1;\n\n        Student const s2 = s1;\n\n        s1.rollNumber = 101;\n        s1.age = 20;\n\n        cout << s2.rollNumber << \" \" << s2.age;\n    }\n\n**Options**\n\n    a. 101 20\n    b. Error\n    c. Garbage Garbage\n    d. None\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. Counting the number of unit operations\n    Basics\n\n</details>\n\n---\n\n**What is the output**\n\n    class Student\n    {\n        int rollNumber;\n\n    public:\n        int age;\n\n        Student(int r)\n        {\n            rollNumber = r;\n        }\n\n        int getRollNumber()\n        {\n            return rollNumber;\n        }\n    };\n\n    int main()\n    {\n        Student s1(101);\n        s1.age = 20;\n\n        Student const s2 = s1;\n        cout << s2.getRollNumber();\n    }\n\n**Options**\n\n    a. 101\n    b. 0\n    c. Garbage\n    d. Error\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    d. Error\n    As s2 is a const object, so only constant member functions can be called through it. And that's not the case here.\n\n</details>\n\n---\n\n**Correct statement**\n\n    class Student\n    {\n    public:\n        int rollNumber;\n        static int totalStudents;\n    };\n\n    int Student::totalStudent = 20;\n\n    int main()\n    {\n        Student s;\n        // Correct statement to access totalStudents\n    }\n\n**Options**\n\n    a. totalStudents\n    b. s.totalStudents\n    c. Student.totalStudents\n    d. Student :: totalStudents\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    d. Student :: totalStudents\n    b would have also worked, but that is not a good practice.\n\n</details>\n\n---\n\n**What is the output**\n\n    class Student\n    {\n    public:\n        int rollNumber;\n\n        static int getRollNumber()\n        {\n            return rollNumber;\n        }\n    };\n\n    int main()\n    {\n        Student s;\n        s.rollNumber = 101;\n        cout << s.getRollNumber() << endl;\n    }\n\n**Options**\n\n\n    a. 101\n    b. 0\n    c. Compilation Error\n    d. Error\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. Compilation Error\n    Static functions cannot operate on non static parts(data members and member functions).\n    But non static can use static parts.\n\n</details>\n\n---\n\n**Fill the output**\n\n    class Student\n    {\n    public:\n        int rollNumber;\n        static int totalStudents;\n\n        Student()\n        {\n            totalStudents++;\n        }\n    };\n\n    int Student::totalStudents = 20;\n\n    int main()\n    {\n        Student s1, s2, s3, s4;\n        cout << Student ::totalStudents;\n    }\n\n**Answer**\n\n    Type here ____\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    24\n    The constructor is called 4 times. So the static increases by 4.\n\n</details>\n\n---\n\n**Recurrence for Merge Sort**\n\n    What is the recurrence relation for merge sort :\n\n**Options**\n\n    a. T(n) = 2T(n/2)\n    b. T(n) = 2T(n/2) + k\n    c. T(n) = 2T(n/2) + O(n)\n    d. T(n) = 2T(n/2) + O(log n)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. T(n) = 2T(n/2) + O(n)\n    After we have successfully sorted the two halves, merge them O(n/2+/2) = O(n)\n\n</details>\n\n---\n\n**Merge Sort**\n\n    What is the time complexity of merge sort :\n\n**Options**\n\n    a. O(n)\n    b. O(n^2)\n    c. O(nlogn)\n    d. O(log n)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. T(n) = 2T(n/2) + O(n)\n    After we have successfully sorted the two halves, merge them, copy them k1*n + O(n/2+/2) = O(n)\n\n</details>\n\n---\n\n**What is time complexity**\n\n    What is the time complexity of following code ?\n\n    int multiplyRec(int m, int n)\n    {\n        if(n == 1)\n            return m;\n        return m + multiplyRec(m,  n - 1);\n    }\n\n**Options**\n\n    a. O(m*n)\n    b. O(n)\n    c. O(n^2)\n    d. O(m)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. O(n)\n    f(n) = k + f(n-1); f(n) = n*k + 0 = O(n)\n\n</details>\n\n---\n\n**What is time complexity**\n\n    int sumOfDigits(int n)\n    {\n            int sum;\n            if(n < 10)\n            {\n                return n;\n            }\n            sum = (n % 10) + sumOfDigits(n / 10);\n            return sum;\n    }\n\n**Options**\n\n    a. O(logn) - log is to the base 10\n    b. O(n)\n    c. O(n^2)\n    d. None of these\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. O(logn) - log is to the base 10\n    Basics\n\n</details>\n\n---\n\n**Fibonacci**\n\n    What is the time complexity of following code for calculating nth fibonacci number\n    long fib(int n)\n    {\n        if(n == 0 || n == 1)\n        {\n            return n;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n\n**Options**\n\n    a. O(n)\n    b. O(n^2)\n    c. O(2^n)\n    d. O(n^3)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. O(2^n)\n    assume n-2  ~ n-1 -> f(n) = 2*f(n-1)\n    Exponential\n\n</details>\n\n---\n\n# Lecture 8 and 9\n\n**Merge Sort space**\n\n    The space complexity for merge sort is :\n\n**Options**\n\n    a. O(n)\n    b. O(n^2)\n    c. O(nlogn)\n    d. O(log n)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. O(n)\n\n    A doubt: Why not take into account the memory of the stack?\n    Ans: Maximum stack memory is 12*log(n) = (8 Bytes + 4Bytes ~ pointer + size) * logn. But for the array it is much greater i.e max(12logn, 4n) = O(n)\n\n</details>\n\n---\n\n**Fibonacci**\n\n    The space complexity for finding nth fibonacci number using recursion is :\n\n**Options**\n\n    a. O(n)\n    b. O(2^n)\n    c. O(log n)\n    d. O(n^2)\n    e. O(nlogn)\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. O(n)\n    The max height, corresponding to the left most branch(if we do f(n-1) before f(n-2), from left to right). Only for the single variable.\n\n</details>\n\n---\n",
      "html": "<h1 id=\"lecture-1%3A-deep-and-shallow-copy\">Lecture 1: Deep and Shallow copy <a class=\"heading-anchor-permalink\" href=\"#lecture-1%3A-deep-and-shallow-copy\">#</a></h1>\n<p><strong>What is the output</strong></p>\n<pre><code>What will be the output of the following code ?\n\n#include &lt;iostream&gt;\nusing namespace std;\n#include &lt;cstring&gt;\n\nclass Student\n{\npublic:\n    char *name;\n    int rollNo;\n\n    // Constructor 1\n    Student(int num)\n    {\n        rollNo = num;\n        name = new char[10];\n        strcpy(name, &quot;abc&quot;);\n    }\n\n    // Constructor 2\n    Student(int num, char *str)\n    {\n        rollNo = num;\n        name = new char[strlen(str) + 1];\n        strcpy(name, str);\n    }\n\n    void print()\n    {\n        cout &lt;&lt; name &lt;&lt; &quot; &quot; &lt;&lt; rollNo &lt;&lt; &quot; &quot;;\n    }\n};\n\nint main()\n{\n    Student s1(101);\n    s1.print();\n    Student *s2 = new Student(150, &quot;xyz&quot;);\n    s2-&gt;print();\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Error\nb. GarbageValue 101 xyz 150\nc. abc 101 xyz 150\nd. None\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. abc 101 xyz 150\nBasics\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Student\n{\npublic:\n    char *name;\n    int rollNo;\n\n    void print()\n    {\n        cout &lt;&lt; name &lt;&lt; &quot; &quot; &lt;&lt; rollNo &lt;&lt; &quot; &quot;;\n    }\n};\n\nint main()\n{\n    char name[] = &quot;Misha&quot;;\n    Student s1;\n    s1.name = name;\n    s1.rollNo = 101;\n\n    name[0] = 'N';\n    Student s2;\n    s2.name = name;\n    s2.rollNo = 102;\n\n    s1.print();\n    s2.print();\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Misha 101 Nisha 102\nb. Nisha 101 Nisha 102\nc. Misha 101 Misha 102\nd. Nisha 101 Misha 102\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. Nisha 101 Nisha 102\nBasics\n</code></pre>\n</details>\n<hr>\n<h1 id=\"copy-constructor-and-initialization-lists\">Copy constructor and initialization lists <a class=\"heading-anchor-permalink\" href=\"#copy-constructor-and-initialization-lists\">#</a></h1>\n<p><strong>What is the output</strong></p>\n<pre><code>class Student\n{\npublic:\n    const int rollNumber;\n    int age;\n};\n\nint main()\n{\n    Student s1;\n    s1.rollNumber = 101;\n    s1.age = 20;\n\n    cout &lt;&lt; s1.rollNumber &lt;&lt; &quot; &quot; &lt;&lt; s1.age;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 101 20\nb. Garbage\nc. Compilation Error\nd. None\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. Compilation Error\nconst needs to be declarized. Not allowed. Useless anyway.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output</strong></p>\n<pre><code>class Student\n{\npublic:\n    const int rollNumber;\n    int age;\n\n    Student(int r, int a) : rollNumber(r), age(a)\n    {\n    }\n};\n\nint main()\n{\n    Student s1(100, 23);\n    cout &lt;&lt; s1.rollNumber &lt;&lt; &quot; &quot; &lt;&lt; s1.age;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Error\nb. 100 Garbage\nc. 100 23\nd. Garbage Garbage\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. 100 23\nBasics of initialization lists.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output</strong></p>\n<pre><code>class Student\n{\npublic:\n    const int rollNumber;\n    int age;\n\n    int &amp;x;\n\n    Student(int r, int a) : rollNumber(r), age(a)\n    {\n    }\n};\n\nint main()\n{\n    Student s1(100, 23);\n    s1.x = age;\n    cout &lt;&lt; s1.rollNumber &lt;&lt; &quot; &quot; &lt;&lt; s1.age &lt;&lt; &quot; &quot; &lt;&lt; s1.x;\n}\n\n\n    int main()\n    {\n        Student s1(100, 23);\n        cout &lt;&lt; s1.rollNumber &lt;&lt; &quot; &quot; &lt;&lt; s1.age;\n    }\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 100 23 23\nb. 100 23 Garbage\nc. Error\nd. None\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. Error\nthis keyword is missing in initialization list for the integer reference x;\n</code></pre>\n</details>\n<hr>\n<h1 id=\"constant-member-functions\">Constant Member Functions <a class=\"heading-anchor-permalink\" href=\"#constant-member-functions\">#</a></h1>\n<p><strong>Member function</strong></p>\n<pre><code>If a member function does not alter any data in the class, that may be declared as ....................\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. constant member function\nb. private member function\nc. static member function\nd. None\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. constant member function\nBasics\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output</strong></p>\n<pre><code>class Student\n{\npublic:\n    int rollNumber;\n    int age;\n};\n\nint main()\n{\n    Student s1;\n\n    Student const s2 = s1;\n\n    s1.rollNumber = 101;\n    s1.age = 20;\n\n    cout &lt;&lt; s2.rollNumber &lt;&lt; &quot; &quot; &lt;&lt; s2.age;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 101 20\nb. Error\nc. Garbage Garbage\nd. None\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. Counting the number of unit operations\nBasics\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output</strong></p>\n<pre><code>class Student\n{\n    int rollNumber;\n\npublic:\n    int age;\n\n    Student(int r)\n    {\n        rollNumber = r;\n    }\n\n    int getRollNumber()\n    {\n        return rollNumber;\n    }\n};\n\nint main()\n{\n    Student s1(101);\n    s1.age = 20;\n\n    Student const s2 = s1;\n    cout &lt;&lt; s2.getRollNumber();\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 101\nb. 0\nc. Garbage\nd. Error\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>d. Error\nAs s2 is a const object, so only constant member functions can be called through it. And that's not the case here.\n</code></pre>\n</details>\n<hr>\n<p><strong>Correct statement</strong></p>\n<pre><code>class Student\n{\npublic:\n    int rollNumber;\n    static int totalStudents;\n};\n\nint Student::totalStudent = 20;\n\nint main()\n{\n    Student s;\n    // Correct statement to access totalStudents\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. totalStudents\nb. s.totalStudents\nc. Student.totalStudents\nd. Student :: totalStudents\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>d. Student :: totalStudents\nb would have also worked, but that is not a good practice.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output</strong></p>\n<pre><code>class Student\n{\npublic:\n    int rollNumber;\n\n    static int getRollNumber()\n    {\n        return rollNumber;\n    }\n};\n\nint main()\n{\n    Student s;\n    s.rollNumber = 101;\n    cout &lt;&lt; s.getRollNumber() &lt;&lt; endl;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 101\nb. 0\nc. Compilation Error\nd. Error\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. Compilation Error\nStatic functions cannot operate on non static parts(data members and member functions).\nBut non static can use static parts.\n</code></pre>\n</details>\n<hr>\n<p><strong>Fill the output</strong></p>\n<pre><code>class Student\n{\npublic:\n    int rollNumber;\n    static int totalStudents;\n\n    Student()\n    {\n        totalStudents++;\n    }\n};\n\nint Student::totalStudents = 20;\n\nint main()\n{\n    Student s1, s2, s3, s4;\n    cout &lt;&lt; Student ::totalStudents;\n}\n</code></pre>\n<p><strong>Answer</strong></p>\n<pre><code>Type here ____\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>24\nThe constructor is called 4 times. So the static increases by 4.\n</code></pre>\n</details>\n<hr>\n<p><strong>Recurrence for Merge Sort</strong></p>\n<pre><code>What is the recurrence relation for merge sort :\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. T(n) = 2T(n/2)\nb. T(n) = 2T(n/2) + k\nc. T(n) = 2T(n/2) + O(n)\nd. T(n) = 2T(n/2) + O(log n)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. T(n) = 2T(n/2) + O(n)\nAfter we have successfully sorted the two halves, merge them O(n/2+/2) = O(n)\n</code></pre>\n</details>\n<hr>\n<p><strong>Merge Sort</strong></p>\n<pre><code>What is the time complexity of merge sort :\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(n)\nb. O(n^2)\nc. O(nlogn)\nd. O(log n)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. T(n) = 2T(n/2) + O(n)\nAfter we have successfully sorted the two halves, merge them, copy them k1*n + O(n/2+/2) = O(n)\n</code></pre>\n</details>\n<hr>\n<p><strong>What is time complexity</strong></p>\n<pre><code>What is the time complexity of following code ?\n\nint multiplyRec(int m, int n)\n{\n    if(n == 1)\n        return m;\n    return m + multiplyRec(m,  n - 1);\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(m*n)\nb. O(n)\nc. O(n^2)\nd. O(m)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. O(n)\nf(n) = k + f(n-1); f(n) = n*k + 0 = O(n)\n</code></pre>\n</details>\n<hr>\n<p><strong>What is time complexity</strong></p>\n<pre><code>int sumOfDigits(int n)\n{\n        int sum;\n        if(n &lt; 10)\n        {\n            return n;\n        }\n        sum = (n % 10) + sumOfDigits(n / 10);\n        return sum;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(logn) - log is to the base 10\nb. O(n)\nc. O(n^2)\nd. None of these\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. O(logn) - log is to the base 10\nBasics\n</code></pre>\n</details>\n<hr>\n<p><strong>Fibonacci</strong></p>\n<pre><code>What is the time complexity of following code for calculating nth fibonacci number\nlong fib(int n)\n{\n    if(n == 0 || n == 1)\n    {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(n)\nb. O(n^2)\nc. O(2^n)\nd. O(n^3)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. O(2^n)\nassume n-2  ~ n-1 -&gt; f(n) = 2*f(n-1)\nExponential\n</code></pre>\n</details>\n<hr>\n<h1 id=\"lecture-8-and-9\">Lecture 8 and 9 <a class=\"heading-anchor-permalink\" href=\"#lecture-8-and-9\">#</a></h1>\n<p><strong>Merge Sort space</strong></p>\n<pre><code>The space complexity for merge sort is :\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(n)\nb. O(n^2)\nc. O(nlogn)\nd. O(log n)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. O(n)\n\nA doubt: Why not take into account the memory of the stack?\nAns: Maximum stack memory is 12*log(n) = (8 Bytes + 4Bytes ~ pointer + size) * logn. But for the array it is much greater i.e max(12logn, 4n) = O(n)\n</code></pre>\n</details>\n<hr>\n<p><strong>Fibonacci</strong></p>\n<pre><code>The space complexity for finding nth fibonacci number using recursion is :\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. O(n)\nb. O(2^n)\nc. O(log n)\nd. O(n^2)\ne. O(nlogn)\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. O(n)\nThe max height, corresponding to the left most branch(if we do f(n-1) before f(n-2), from left to right). Only for the single variable.\n</code></pre>\n</details>\n<hr>\n",
      "id": 146
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/zAssignment_-_Polynomial_class/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/4._Operator_overloading/zAssignment_-_Polynomial_class/0_index.html",
      "content": "# zAssignment - Polynomial class\nCreated Tuesday 14 January 2020\n\n**Polynomial**\nImplement 3 functions\n[main_for_polynominal.cpp](zAssignment_-_Polynomial_class/main_for_polynominal.cpp)\n[Polynomial_Class.cpp](zAssignment_-_Polynomial_class/Polynomial_Class.cpp)\n[CodingNinjas_Polynomial_soln.cpp](zAssignment_-_Polynomial_class/CodingNinjas_Polynomial_soln.cpp)\n\n* [Fourier transform](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2015/lecture-videos/lecture-3-divide-conquer-fft/) can be used for efficient multiplication\n\n\n**Dynamic Array**\n\n* We need an array that can change the size as required, according to the user.\n* How will we do this:\n\n\n1. We start with an arbitrary value of our choice.\n2. When the user adds an element, the add(int index, int element).\n\t1. we will put it if we have space. \n\t2. Else we will double the size of the array.\n\t3. We are not taking the number of elements he/she is adding. \n\t4. They can also say where they want to add the element. We should check size here too. Do step b.\n\t5. If no such value is provided, we will append the element.\n\n\n* Learnt that overloading is very useful, default arguments cannot take it's place;\n* Remember to mark functions const wherever possible.\n\n[./DynamicArray.cpp](zAssignment_-_Polynomial_class/DynamicArray.cpp)\n\n",
      "html": "<h1 id=\"zassignment---polynomial-class\">zAssignment - Polynomial class <a class=\"heading-anchor-permalink\" href=\"#zassignment---polynomial-class\">#</a></h1>\n<p>Created Tuesday 14 January 2020</p>\n<p><strong>Polynomial</strong>\nImplement 3 functions\n<a href=\"zAssignment_-_Polynomial_class/main_for_polynominal.cpp\">main_for_polynominal.cpp</a>\n<a href=\"zAssignment_-_Polynomial_class/Polynomial_Class.cpp\">Polynomial_Class.cpp</a>\n<a href=\"zAssignment_-_Polynomial_class/CodingNinjas_Polynomial_soln.cpp\">CodingNinjas_Polynomial_soln.cpp</a></p>\n<ul>\n<li><a href=\"https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2015/lecture-videos/lecture-3-divide-conquer-fft/\">Fourier transform</a> can be used for efficient multiplication</li>\n</ul>\n<p><strong>Dynamic Array</strong></p>\n<ul>\n<li>We need an array that can change the size as required, according to the user.</li>\n<li>How will we do this:</li>\n</ul>\n<ol>\n<li>We start with an arbitrary value of our choice.</li>\n<li>When the user adds an element, the add(int index, int element).\n<ol>\n<li>we will put it if we have space.</li>\n<li>Else we will double the size of the array.</li>\n<li>We are not taking the number of elements he/she is adding.</li>\n<li>They can also say where they want to add the element. We should check size here too. Do step b.</li>\n<li>If no such value is provided, we will append the element.</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>Learnt that overloading is very useful, default arguments cannot take it’s place;</li>\n<li>Remember to mark functions const wherever possible.</li>\n</ul>\n<p><a href=\"zAssignment_-_Polynomial_class/DynamicArray.cpp\">./DynamicArray.cpp</a></p>\n",
      "id": 147
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/5._Separate_Compilation.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/5._Separate_Compilation.html",
      "content": "# 5. Separate Compilation\n\nCreated Sunday 30 January 2022\n\n### Why separate compilation\n\nThis is done to achieve an aspect of encapsulation: separate design and use of a class.\n\nThere are 3 kinds of files involved in the whole application:\n\n1. **Interface files** - the class with just member declarations. The file usually ends with a `.h` extension.\n2. **Implementation files** - contains the member function definitions. File extension is `.cpp`.\n3. **Application file** - contains the `main` function. FIle extension is `.cpp`.\n\n### How is separate compilation done?\n\nIt's a 3 step procedure:\n\n1. Both the implementation and application file need to `include` the interface file.\n2. The implementation and application files are compiled separately.\n3. The compiled files are then [\"linked\"](<https://en.wikipedia.org/wiki/Linker_(computing)>) together to create the executable.\n\n- For linking in separate compilation to be possible, both the implemenatation and application file need to `include` the interafce file.\n- The commands in \\*nix like systems are:\n  - Compile: `g++ -c Circle.cpp` and `g++ -c App.cpp`. This generates object files named `Circle.o` and `App.o`. `-c` is for compilation.\n  - Link: `g++ -o Application Circle.o App.o`. `-o` is the flag to create an executable named `Application`, in this case.\n  - Run the application using `./Application`.\n\n#### What are benefits of separate compilation\n\n1. Independedence of compiled files from the source code. That is, source code does not need to be revealed in order for the application code to be written.\n   - This is key for the working of proprietary software, i.e. source code remains private and only the comiled version with the interface file is made public.\n   - Releasing the interface file and the compiled implementation is enough for writing and compiling the application file.\n2. It interface file is protected from change - as the original interface is already used in compiling the implementation files, so linking can only happen with the original interface file.\n3. The implementation file cannot be changed because it's very difficult to \"de-compile\" the implementation's compiled version.\n4. For very large applications, not all files have to be compiled if there's a change at some place. Contrast this with a single file application, one would need to recompile the whole app for any change.\n\nThe effect of 1, 2, 3 is that the whole OOP design is protected from change by the end user.\n\n---\n\nHere's an illustration of separate compilation:\n![](/assets/5._Separate_Compilation-image-1.png)\n",
      "html": "<h1 id=\"5.-separate-compilation\">5. Separate Compilation <a class=\"heading-anchor-permalink\" href=\"#5.-separate-compilation\">#</a></h1>\n<p>Created Sunday 30 January 2022</p>\n<h3 id=\"why-separate-compilation\">Why separate compilation <a class=\"heading-anchor-permalink\" href=\"#why-separate-compilation\">#</a></h3>\n<p>This is done to achieve an aspect of encapsulation: separate design and use of a class.</p>\n<p>There are 3 kinds of files involved in the whole application:</p>\n<ol>\n<li><strong>Interface files</strong> - the class with just member declarations. The file usually ends with a <code>.h</code> extension.</li>\n<li><strong>Implementation files</strong> - contains the member function definitions. File extension is <code>.cpp</code>.</li>\n<li><strong>Application file</strong> - contains the <code>main</code> function. FIle extension is <code>.cpp</code>.</li>\n</ol>\n<h3 id=\"how-is-separate-compilation-done%3F\">How is separate compilation done? <a class=\"heading-anchor-permalink\" href=\"#how-is-separate-compilation-done%3F\">#</a></h3>\n<p>It’s a 3 step procedure:</p>\n<ol>\n<li>Both the implementation and application file need to <code>include</code> the interface file.</li>\n<li>The implementation and application files are compiled separately.</li>\n<li>The compiled files are then <a href=\"https://en.wikipedia.org/wiki/Linker_(computing)\">“linked”</a> together to create the executable.</li>\n</ol>\n<ul>\n<li>For linking in separate compilation to be possible, both the implemenatation and application file need to <code>include</code> the interafce file.</li>\n<li>The commands in *nix like systems are:\n<ul>\n<li>Compile: <code>g++ -c Circle.cpp</code> and <code>g++ -c App.cpp</code>. This generates object files named <code>Circle.o</code> and <code>App.o</code>. <code>-c</code> is for compilation.</li>\n<li>Link: <code>g++ -o Application Circle.o App.o</code>. <code>-o</code> is the flag to create an executable named <code>Application</code>, in this case.</li>\n<li>Run the application using <code>./Application</code>.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"what-are-benefits-of-separate-compilation\">What are benefits of separate compilation <a class=\"heading-anchor-permalink\" href=\"#what-are-benefits-of-separate-compilation\">#</a></h4>\n<ol>\n<li>Independedence of compiled files from the source code. That is, source code does not need to be revealed in order for the application code to be written.\n<ul>\n<li>This is key for the working of proprietary software, i.e. source code remains private and only the comiled version with the interface file is made public.</li>\n<li>Releasing the interface file and the compiled implementation is enough for writing and compiling the application file.</li>\n</ul>\n</li>\n<li>It interface file is protected from change - as the original interface is already used in compiling the implementation files, so linking can only happen with the original interface file.</li>\n<li>The implementation file cannot be changed because it’s very difficult to “de-compile” the implementation’s compiled version.</li>\n<li>For very large applications, not all files have to be compiled if there’s a change at some place. Contrast this with a single file application, one would need to recompile the whole app for any change.</li>\n</ol>\n<p>The effect of 1, 2, 3 is that the whole OOP design is protected from change by the end user.</p>\n<hr>\n<p>Here’s an illustration of separate compilation:\n<img src=\"/assets/5._Separate_Compilation-image-1.png\" alt=\"\"></p>\n",
      "id": 148
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/6._Approach_for_writing_a_class.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/4._OOP_Basics/6._Approach_for_writing_a_class.html",
      "content": "# 5. Approach for writing a class\nCreated Monday 13 January 2020\n\nHow to make a class:\n\n1. Decide **data** members. Check if there is a need for **static** and **constants**. If yes, include them.\n2. Constructors and Destructors.\n\t1. Provide a default constructor, set it as per contextual defaults.\n\t2. Check if a parameterized constructor is required.\n\t3. Check if any level 2 memory(i.e DS) requirement is present, if yes, provide a *deepened* **copy constructor** and *deepened* **copy assignment operator**.\n\t4. Destructors: check if a level 2 memory is present, if yes, free it.\n3. Grouping functions is important, write their names and objectives only:\n\t\t1. Getters aka **Accessors**\n\t\t2. Setters aka **Mutators**\n\t\t3. Checkers aka **Inspectors**. is_fff()  __ignorable__\n\t\t4. Overloaded **Operators.\t**__ignorable__\n\t\t5. Content aka **Facilitators. // logic part\t**\n4. Decide the operators to be overloaded, if required. Add them to the list of of functions.\n5. For each function, write skeleton, then:\n\t1. **Return type and qualifier**: \n\t\t1. Does it need to returns a copy or changes the same object. **Return by **reference/value?\n\t\t2. Nestability in operators. **Return by **reference/value?\n\t\t3. If it works with static data members **only** (i.e no this parts are accessed). Write the **static **qualifier. \n\t2. **Parameters:**\n\t\t1. For the parameters which don't need a change, take them as const references.\n\t\t2. For the objects where we do need a change, take them as references.\n\t3. If any const data members are present, initialize them using the **initialization list**.\n\t4. **For **__operators__** only**, check if it is a post or pre. For unary post operators, write (int) in the param list.\n\t5. Write the code.\n\t\t1. Make sure objects **to be returned** are created inside the function. Return by value. If we need to return **this**, then return by reference. Buffer(rvalue optimization) will handle the rest.\n\t\t2. Use copy constructor as much as possible. If a deepened version is present.\n\t6. Check if returned value is at par with the return type.\n\t7. Finally, mark the function **const**, if it's possible do so. (This is not allowed for constructor, destructors and static functions).\n6. Leave notes for initializing any static data members.\n\n\n\n\n",
      "html": "<h1 id=\"5.-approach-for-writing-a-class\">5. Approach for writing a class <a class=\"heading-anchor-permalink\" href=\"#5.-approach-for-writing-a-class\">#</a></h1>\n<p>Created Monday 13 January 2020</p>\n<p>How to make a class:</p>\n<ol>\n<li>Decide <strong>data</strong> members. Check if there is a need for <strong>static</strong> and <strong>constants</strong>. If yes, include them.</li>\n<li>Constructors and Destructors.\n<ol>\n<li>Provide a default constructor, set it as per contextual defaults.</li>\n<li>Check if a parameterized constructor is required.</li>\n<li>Check if any level 2 memory(i.e DS) requirement is present, if yes, provide a <em>deepened</em> <strong>copy constructor</strong> and <em>deepened</em> <strong>copy assignment operator</strong>.</li>\n<li>Destructors: check if a level 2 memory is present, if yes, free it.</li>\n</ol>\n</li>\n<li>Grouping functions is important, write their names and objectives only:\n1. Getters aka <strong>Accessors</strong>\n2. Setters aka <strong>Mutators</strong>\n3. Checkers aka <strong>Inspectors</strong>. is_fff()  <strong>ignorable</strong>\n4. Overloaded **Operators.\t**<strong>ignorable</strong>\n5. Content aka **Facilitators. // logic part\t**</li>\n<li>Decide the operators to be overloaded, if required. Add them to the list of of functions.</li>\n<li>For each function, write skeleton, then:\n<ol>\n<li><strong>Return type and qualifier</strong>:\n<ol>\n<li>Does it need to returns a copy or changes the same object. **Return by **reference/value?</li>\n<li>Nestability in operators. **Return by **reference/value?</li>\n<li>If it works with static data members <strong>only</strong> (i.e no this parts are accessed). Write the **static **qualifier.</li>\n</ol>\n</li>\n<li><strong>Parameters:</strong>\n<ol>\n<li>For the parameters which don’t need a change, take them as const references.</li>\n<li>For the objects where we do need a change, take them as references.</li>\n</ol>\n</li>\n<li>If any const data members are present, initialize them using the <strong>initialization list</strong>.</li>\n<li><strong>For <strong><strong>operators</strong></strong> only</strong>, check if it is a post or pre. For unary post operators, write (int) in the param list.</li>\n<li>Write the code.\n<ol>\n<li>Make sure objects <strong>to be returned</strong> are created inside the function. Return by value. If we need to return <strong>this</strong>, then return by reference. Buffer(rvalue optimization) will handle the rest.</li>\n<li>Use copy constructor as much as possible. If a deepened version is present.</li>\n</ol>\n</li>\n<li>Check if returned value is at par with the return type.</li>\n<li>Finally, mark the function <strong>const</strong>, if it’s possible do so. (This is not allowed for constructor, destructors and static functions).</li>\n</ol>\n</li>\n<li>Leave notes for initializing any static data members.</li>\n</ol>\n",
      "id": 149
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/1._Vector_aka_Dynamic_Array.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/1._Vector_aka_Dynamic_Array.html",
      "content": "# 1. Vector aka Dynamic Array\nCreated Friday 24 January 2020\n\nVector is just another name of our Dynamic Array. Exactly the same as our implementation.\n\n* It has been implemented in STL.\n* Doubles the size when the size is less.\n* Keeps a size variable.\n* Keeps a capacity variable.\n* Starts from size 0, i.e NULL.\n* Can be used dynamically and statically.\n\nheader: **<vector>**\nDeclaration:\nvector <data_type> v; \tstatic\nvector <data_type>* v = new vector<int>();\t//note the parentheses\n// We can specify initial capacity by providing an integer paremeter to the constructor. e.g vector<int> pq(23); **Remember that this inserts a garbage of type int, i.e size()==capacity().**\nMethods:\n\n1. vector_name.**push_back(T)** - append. We **must **use this function only, as it checks for capacity and updates size.\n2. vector_name.**at(i)** - access/modify value at index i, if within size. **Can be used as lvalue too.**\n3. v[i] can also be used, but it is not safer for **insertion**, as it does no range checking. Use it only when you are sure of the index.\n4. v.**size() **- returns the number of elements in the vector.\n5. v.**capacity() **- returns the capacity of the vector. i.e maxium elements which can be taken without resizing.\n\n\nLearnt on my own:\n\n6. v.**reserve(int i)** - makes the initial capacity as the i places.\n7. **clear() - **makes size = 0. size() does not return an lvalue.\n8. v.**insert(position, value) **inserts the value at index position and returns the iterator to the place where it has inserted val.\n9. v.**begin**() - returns iterator to the first element\n10. v.**end**() - returns iterator to **one place after** the last element. i.e iterator to v.at(i+1). It may not exist though.\n11. = operator does a **deep** copy of the vector.\n12. To slice a vector, use the vector's **constructor**(v.begin(), v.end())\n\n\nNote: Just don't try to break the abstraction.\nAdvantages:\n\n1. Very space efficient. Least wastage.\n2. Fastest access.\n3. Doubling decreases the sporadic insertion time. Can be compensated with reserve().\n\n\n",
      "html": "<h1 id=\"1.-vector-aka-dynamic-array\">1. Vector aka Dynamic Array <a class=\"heading-anchor-permalink\" href=\"#1.-vector-aka-dynamic-array\">#</a></h1>\n<p>Created Friday 24 January 2020</p>\n<p>Vector is just another name of our Dynamic Array. Exactly the same as our implementation.</p>\n<ul>\n<li>It has been implemented in STL.</li>\n<li>Doubles the size when the size is less.</li>\n<li>Keeps a size variable.</li>\n<li>Keeps a capacity variable.</li>\n<li>Starts from size 0, i.e NULL.</li>\n<li>Can be used dynamically and statically.</li>\n</ul>\n<p>header: <strong><vector></strong>\nDeclaration:\nvector &lt;data_type&gt; v; \tstatic\nvector &lt;data_type&gt;* v = new vector<int>();\t//note the parentheses\n// We can specify initial capacity by providing an integer paremeter to the constructor. e.g vector<int> pq(23); <strong>Remember that this inserts a garbage of type int, i.e size()==capacity().</strong>\nMethods:</p>\n<ol>\n<li>vector_name.<strong>push_back(T)</strong> - append. We **must **use this function only, as it checks for capacity and updates size.</li>\n<li>vector_name.<strong>at(i)</strong> - access/modify value at index i, if within size. <strong>Can be used as lvalue too.</strong></li>\n<li>v[i] can also be used, but it is not safer for <strong>insertion</strong>, as it does no range checking. Use it only when you are sure of the index.</li>\n<li>v.**size() **- returns the number of elements in the vector.</li>\n<li>v.**capacity() **- returns the capacity of the vector. i.e maxium elements which can be taken without resizing.</li>\n</ol>\n<p>Learnt on my own:</p>\n<ol start=\"6\">\n<li>v.<strong>reserve(int i)</strong> - makes the initial capacity as the i places.</li>\n<li>**clear() - **makes size = 0. size() does not return an lvalue.</li>\n<li>v.**insert(position, value) **inserts the value at index position and returns the iterator to the place where it has inserted val.</li>\n<li>v.<strong>begin</strong>() - returns iterator to the first element</li>\n<li>v.<strong>end</strong>() - returns iterator to <strong>one place after</strong> the last element. i.e iterator to <a href=\"http://v.at\">v.at</a>(i+1). It may not exist though.</li>\n<li>= operator does a <strong>deep</strong> copy of the vector.</li>\n<li>To slice a vector, use the vector’s <strong>constructor</strong>(v.begin(), v.end())</li>\n</ol>\n<p>Note: Just don’t try to break the abstraction.\nAdvantages:</p>\n<ol>\n<li>Very space efficient. Least wastage.</li>\n<li>Fastest access.</li>\n<li>Doubling decreases the sporadic insertion time. Can be compensated with reserve().</li>\n</ol>\n",
      "id": 150
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/0_index.html",
      "content": "# 1. Linked List Basics\nCreated Tuesday 14 January 2020\n\n[Codes](./1._Linked_List_Basics/Codes)\n[Exercises](./1._Linked_List_Basics/Quizzes&Exercises/Exercises.md)\n[Coding Exercises](./1._Linked_List_Basics/Quizzes&Exercises/CodingExercises.md)\n[Assignments.md](1._Linked_List_Basics/zAssignments/Assignments.md)\n\n",
      "html": "<h1 id=\"1.-linked-list-basics\">1. Linked List Basics <a class=\"heading-anchor-permalink\" href=\"#1.-linked-list-basics\">#</a></h1>\n<p>Created Tuesday 14 January 2020</p>\n<p><a href=\"./1._Linked_List_Basics/Codes\">Codes</a>\n<a href=\"./1._Linked_List_Basics/Quizzes&amp;Exercises/Exercises.html\">Exercises</a>\n<a href=\"./1._Linked_List_Basics/Quizzes&amp;Exercises/CodingExercises.html\">Coding Exercises</a>\n<a href=\"1._Linked_List_Basics/zAssignments/Assignments.html\">Assignments.md</a></p>\n",
      "id": 151
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/1._What_are_data_structures_and_why_are_they_important.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/1._What_are_data_structures_and_why_are_they_important.html",
      "content": "# 1. What are data structures and why are they important\nCreated Tuesday 14 January 2020\n\n\n* Data structures are just **ways **of storing and organizing data.\n\n\nSolving a problem: When we are given some input and we work on that according to the requirement, there are many ways to store the input and to work the output. These are Data Structures and Algorithms respectively. \n\n* How we store our data is very important. Hence, Data structures are very important.\n* Different situations require using different data structures depending on the cost of operations/requirement/availability.\n* Choice of data structure is the most important thing.\n\ne.g if user gives us some inputs, and they wants to know what they gave before. Here we will use stack. Any other data structure will not be as good as a stack here.\n\n\n* **All ADTs use LL or array as the physical data structure.**\n\nData structure = ADT + LL/Array\n\n",
      "html": "<h1 id=\"1.-what-are-data-structures-and-why-are-they-important\">1. What are data structures and why are they important <a class=\"heading-anchor-permalink\" href=\"#1.-what-are-data-structures-and-why-are-they-important\">#</a></h1>\n<p>Created Tuesday 14 January 2020</p>\n<ul>\n<li>Data structures are just **ways **of storing and organizing data.</li>\n</ul>\n<p>Solving a problem: When we are given some input and we work on that according to the requirement, there are many ways to store the input and to work the output. These are Data Structures and Algorithms respectively.</p>\n<ul>\n<li>How we store our data is very important. Hence, Data structures are very important.</li>\n<li>Different situations require using different data structures depending on the cost of operations/requirement/availability.</li>\n<li>Choice of data structure is the most important thing.</li>\n</ul>\n<p>e.g if user gives us some inputs, and they wants to know what they gave before. Here we will use stack. Any other data structure will not be as good as a stack here.</p>\n<ul>\n<li><strong>All ADTs use LL or array as the physical data structure.</strong></li>\n</ul>\n<p>Data structure = ADT + LL/Array</p>\n",
      "id": 152
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/2._What_is_a_linked_list.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/2._What_is_a_linked_list.html",
      "content": "# 2. What is a linked list\nCreated Tuesday 14 January 2020\n\n\n* Arrays always need continguos memory, which may not be available every time. This is because gaps in memory are present normally.\n\n\n\n* Linked list is the way to go.\n* It has a basic unit called node, which stores the data and the address(i.e pointer) of the next node.\n\n\nThere are 2 kinds of lists:\n\n1. Singly linked lists. Have the address of the next node.\n2. Douby linked lists. Have the address of the next and the previous node.\n\n\n* To operate with nodes, we need our own data structure, as none of the primitive data types support it.\n* We make a node class with data members \n\t1. data(int)\n\t2. address(Node*)\n\nDoubt: Node * seems infinitely recursive. If it had been Node, it would be recursive. But Node* is not, it is just a pointer with a jump = sizeof(int + pointer), and jump is everything that a pointer stores, except of course the start address, which will be given by the OS.\n[Node class, for linked list](./2._What_is_a_linked_list/LinkedList_Node.hpp)\n\nJargon:\n\n1. Head node. The first Node.\n2. Tail Node. The last Node. It points to NULL.\n\n\n\n* We will use this class only as a node. Everything else is done in a functional way.\n\n\n\n",
      "html": "<h1 id=\"2.-what-is-a-linked-list\">2. What is a linked list <a class=\"heading-anchor-permalink\" href=\"#2.-what-is-a-linked-list\">#</a></h1>\n<p>Created Tuesday 14 January 2020</p>\n<ul>\n<li>\n<p>Arrays always need continguos memory, which may not be available every time. This is because gaps in memory are present normally.</p>\n</li>\n<li>\n<p>Linked list is the way to go.</p>\n</li>\n<li>\n<p>It has a basic unit called node, which stores the data and the address(i.e pointer) of the next node.</p>\n</li>\n</ul>\n<p>There are 2 kinds of lists:</p>\n<ol>\n<li>Singly linked lists. Have the address of the next node.</li>\n<li>Douby linked lists. Have the address of the next and the previous node.</li>\n</ol>\n<ul>\n<li>To operate with nodes, we need our own data structure, as none of the primitive data types support it.</li>\n<li>We make a node class with data members\n<ol>\n<li>data(int)</li>\n<li>address(Node*)</li>\n</ol>\n</li>\n</ul>\n<p>Doubt: Node * seems infinitely recursive. If it had been Node, it would be recursive. But Node* is not, it is just a pointer with a jump = sizeof(int + pointer), and jump is everything that a pointer stores, except of course the start address, which will be given by the OS.\n<a href=\"./2._What_is_a_linked_list/LinkedList_Node.hpp\">Node class, for linked list</a></p>\n<p>Jargon:</p>\n<ol>\n<li>Head node. The first Node.</li>\n<li>Tail Node. The last Node. It points to NULL.</li>\n</ol>\n<ul>\n<li>We will use this class only as a node. Everything else is done in a functional way.</li>\n</ul>\n",
      "id": 153
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/1._Length_of_LL_(recursive).md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/1._Length_of_LL_(recursive).html",
      "content": "# 6. Length of LL (recursive)\nCreated Thursday 16 January 2020\n\nif(head==NULL)\nreturn 0;\nreturn 1 + f(head->next);\n\t\n\n",
      "html": "<h1 id=\"6.-length-of-ll-(recursive)\">6. Length of LL (recursive) <a class=\"heading-anchor-permalink\" href=\"#6.-length-of-ll-(recursive)\">#</a></h1>\n<p>Created Thursday 16 January 2020</p>\n<p>if(head==NULL)\nreturn 0;\nreturn 1 + f(head-&gt;next);</p>\n",
      "id": 154
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/2._Insert_node_at_the_ith_position.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/2._Insert_node_at_the_ith_position.html",
      "content": "# 4. Insert node at the ith position\nCreated Wednesday 15 January 2020\n\nThere are 2 variables:\n\n1. Existence: head==NULL or not\n2. Index: wether 0 or not\n\t1. 0\n\t2. >0\n\n\n* Wrote the general algorithm, then the exceptions. Only requirements, no need for optimizations here.\n\n\n\n1. index 0 is always valid, heads need to be updated.\n2. index > 0 has two cases: \n\t1. Within bound\n\t2. Greater than length\n\t3. negative indices\n\n\n*****\n\nvoid insertNode(Node *&head, int index, int data)\n{\n/* cases possible\n\n\n1. Empty list\n\t1. Index at 0, i.e make the first node\n\t2. Index != 0 do nothing\n2. Non Empty list\n\t1. index at 0, Make the node shift the head\n\nhow to prevent negative indices ?\n\n2. index < length -1, reach the (i-1)th node, create a node\n3. index > length - 1 , do nothing\n\n\nConclusion: 1. 1.a and 2. a are the same thing, create a node at the beginning\n\n2. 1.b is different // impossible\n3. 2.b and 2.c are intertwined  //\n\n*/\n\nif (index == 0) // case 1.a and 2.a done\n{\nNode *newnode = new Node(data);\nnewnode->next = head; // handles both cases, i.e empty and non-empty lists\nhead = newnode;\nreturn;\n}\n\nif (head == NULL) // case 1. b done\nreturn;\n\n// case 2.b and 2.c\nNode *trav = head;\nfor (int i = 0; i < index - 1 && trav != NULL; i++, trav = trav->next) // also prevents negative indices\n;\n\n// 2.c handled\nif (trav == NULL) // the construction site is null, this is possible if index > length-1\nreturn;\n\nNode *newnode = new Node(data);\nnewnode->next = trav->next;\ntrav->next = newnode;\nreturn;\n}--------------------\n\n\n\n",
      "html": "<h1 id=\"4.-insert-node-at-the-ith-position\">4. Insert node at the ith position <a class=\"heading-anchor-permalink\" href=\"#4.-insert-node-at-the-ith-position\">#</a></h1>\n<p>Created Wednesday 15 January 2020</p>\n<p>There are 2 variables:</p>\n<ol>\n<li>Existence: head==NULL or not</li>\n<li>Index: wether 0 or not\n<ol>\n<li>0</li>\n<li>\n<blockquote>\n<p>0</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>Wrote the general algorithm, then the exceptions. Only requirements, no need for optimizations here.</li>\n</ul>\n<ol>\n<li>index 0 is always valid, heads need to be updated.</li>\n<li>index &gt; 0 has two cases:\n<ol>\n<li>Within bound</li>\n<li>Greater than length</li>\n<li>negative indices</li>\n</ol>\n</li>\n</ol>\n<hr>\n<p>void insertNode(Node <em>&amp;head, int index, int data)\n{\n/</em> cases possible</p>\n<ol>\n<li>Empty list\n<ol>\n<li>Index at 0, i.e make the first node</li>\n<li>Index != 0 do nothing</li>\n</ol>\n</li>\n<li>Non Empty list\n<ol>\n<li>index at 0, Make the node shift the head</li>\n</ol>\n</li>\n</ol>\n<p>how to prevent negative indices ?</p>\n<ol start=\"2\">\n<li>index &lt; length -1, reach the (i-1)th node, create a node</li>\n<li>index &gt; length - 1 , do nothing</li>\n</ol>\n<p>Conclusion: 1. 1.a and 2. a are the same thing, create a node at the beginning</p>\n<ol start=\"2\">\n<li>1.b is different // impossible</li>\n<li>2.b and 2.c are intertwined  //</li>\n</ol>\n<p>*/</p>\n<p>if (index == 0) // case 1.a and 2.a done\n{\nNode *newnode = new Node(data);\nnewnode-&gt;next = head; // handles both cases, i.e empty and non-empty lists\nhead = newnode;\nreturn;\n}</p>\n<p>if (head == NULL) // case 1. b done\nreturn;</p>\n<p>// case 2.b and 2.c\nNode *trav = head;\nfor (int i = 0; i &lt; index - 1 &amp;&amp; trav != NULL; i++, trav = trav-&gt;next) // also prevents negative indices\n;</p>\n<p>// 2.c handled\nif (trav == NULL) // the construction site is null, this is possible if index &gt; length-1\nreturn;</p>\n<p>Node *newnode = new Node(data);\nnewnode-&gt;next = trav-&gt;next;\ntrav-&gt;next = newnode;\nreturn;\n}--------------------</p>\n",
      "id": 155
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/3._Delete_Node.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/3._Delete_Node.html",
      "content": "# 5. Delete Node\nCreated Thursday 16 January 2020\n\n1. If trav = NULL or index<0. Do nothing.\n2. else If index 0. Special case. Easy\n\nNode* p = head;\nhead = head -> next;\ndelete p;\nreturn head;\n\n3. For deleting the ith node, we need to go to the ith node and ensure that the ith node is not empty)\n\nfor(int i=0; i<index-1 && trav->next!=NULL; i++) // we are already at trav which is non null\ntrav = trav->next;\nif(trav->next==NULL), i.e ith node is null or that our ll is short\nreturn head;\nNode* p = trav->next; // address of the ith node\n trav->next = p ->next; // p is not null, no errors here.\ndelete p;\nreturn head;\n\n",
      "html": "<h1 id=\"5.-delete-node\">5. Delete Node <a class=\"heading-anchor-permalink\" href=\"#5.-delete-node\">#</a></h1>\n<p>Created Thursday 16 January 2020</p>\n<ol>\n<li>If trav = NULL or index&lt;0. Do nothing.</li>\n<li>else If index 0. Special case. Easy</li>\n</ol>\n<p>Node* p = head;\nhead = head -&gt; next;\ndelete p;\nreturn head;</p>\n<ol start=\"3\">\n<li>For deleting the ith node, we need to go to the ith node and ensure that the ith node is not empty)</li>\n</ol>\n<p>for(int i=0; i&lt;index-1 &amp;&amp; trav-&gt;next!=NULL; i++) // we are already at trav which is non null\ntrav = trav-&gt;next;\nif(trav-&gt;next==NULL), i.e ith node is null or that our ll is short\nreturn head;\nNode* p = trav-&gt;next; // address of the ith node\ntrav-&gt;next = p -&gt;next; // p is not null, no errors here.\ndelete p;\nreturn head;</p>\n",
      "id": 156
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/4._Delete_Node_recursive.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/4._Delete_Node_recursive.html",
      "content": "# 8. Delete Node recursive\nCreated Friday 17 January 2020\n\nNode* deleteNodeRec(Node *head, int i) \n{\nif(head==NULL && i!=0)\nreturn head;\n    \nif(i==0)\n{\nif(head==NULL)\nreturn NULL;\n        \nNode* p = head->next;\ndelete head;\nreturn p;\n}\n    \nhead -> next = deleteNodeRec(head->next, i-1);\n}\n\n\n* Using the same invariant for LL's as in insertNodeRec.\n* If head is NULL, return NULL; handles both cases for overrun or empty null. Being NULL has only one consequence.\n* deleteNodeRec has only one** one base** case, and a warning case(that's not a base case as such, it's an invalid input thing).\n* We are deleting the node we are sitting on. So we wait for i to be 0.\n\n\n\n",
      "html": "<h1 id=\"8.-delete-node-recursive\">8. Delete Node recursive <a class=\"heading-anchor-permalink\" href=\"#8.-delete-node-recursive\">#</a></h1>\n<p>Created Friday 17 January 2020</p>\n<p>Node* deleteNodeRec(Node *head, int i)\n{\nif(head==NULL &amp;&amp; i!=0)\nreturn head;</p>\n<p>if(i==0)\n{\nif(head==NULL)\nreturn NULL;</p>\n<p>Node* p = head-&gt;next;\ndelete head;\nreturn p;\n}</p>\n<p>head -&gt; next = deleteNodeRec(head-&gt;next, i-1);\n}</p>\n<ul>\n<li>Using the same invariant for LL’s as in insertNodeRec.</li>\n<li>If head is NULL, return NULL; handles both cases for overrun or empty null. Being NULL has only one consequence.</li>\n<li>deleteNodeRec has only one** one base** case, and a warning case(that’s not a base case as such, it’s an invalid input thing).</li>\n<li>We are deleting the node we are sitting on. So we wait for i to be 0.</li>\n</ul>\n",
      "id": 157
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/5._Insert_Node_recursive.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/5._Insert_Node_recursive.html",
      "content": "# 7. Insert Node recursive\nCreated Friday 17 January 2020\n\nNode* insertNodeRec(Node *head, int i, int data) \n{\nif(head==NULL && i!=0)\nreturn head;\nif(i==0)\n{\nNode* newnode = new Node(data);\nnewnode->next  = head;\nreturn newnode; // insertion at the beginning\n}\n    \nhead->next =  insertNodeRec(head->next, i-1, data); // traverses to the next element, makes a connection to the list which is present\nreturn head;\n}\n\n**How does it work?**\nA) We insert at the beginning only. This is the base case case and easy to check. Return the newnode's address.\n\n* Another part of the base case is if head==NULL, but index!=0. Stop. Overrun. Return head.\n* Recursion step: Here head!=null **and** index!=0 is true. \n\nhead->next = the starting of the remaining list = f(head->next, data, index).\n\n* It is important to remember that remaking this already connection, i.e a system's property helps us write the recursion without making a helper function. \n* Hence we don't have to use a helper function.\n\n**New(?intuition) skill learnt !!** \n\n\n",
      "html": "<h1 id=\"7.-insert-node-recursive\">7. Insert Node recursive <a class=\"heading-anchor-permalink\" href=\"#7.-insert-node-recursive\">#</a></h1>\n<p>Created Friday 17 January 2020</p>\n<p>Node* insertNodeRec(Node <em>head, int i, int data)\n{\nif(head==NULL &amp;&amp; i!=0)\nreturn head;\nif(i==0)\n{\nNode</em> newnode = new Node(data);\nnewnode-&gt;next  = head;\nreturn newnode; // insertion at the beginning\n}</p>\n<p>head-&gt;next =  insertNodeRec(head-&gt;next, i-1, data); // traverses to the next element, makes a connection to the list which is present\nreturn head;\n}</p>\n<p><strong>How does it work?</strong>\nA) We insert at the beginning only. This is the base case case and easy to check. Return the newnode’s address.</p>\n<ul>\n<li>Another part of the base case is if head==NULL, but index!=0. Stop. Overrun. Return head.</li>\n<li>Recursion step: Here head!=null <strong>and</strong> index!=0 is true.</li>\n</ul>\n<p>head-&gt;next = the starting of the remaining list = f(head-&gt;next, data, index).</p>\n<ul>\n<li>It is important to remember that remaking this already connection, i.e a system’s property helps us write the recursion without making a helper function.</li>\n<li>Hence we don’t have to use a helper function.</li>\n</ul>\n<p><strong>New(?intuition) skill learnt !!</strong></p>\n",
      "id": 158
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/6._Print_the_Linked_List.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/6._Print_the_Linked_List.html",
      "content": "# 3. Print the Linked List\nCreated Tuesday 14 January 2020\n\n\n1. Check if temp is not null, print and move.\n\n\n",
      "html": "<h1 id=\"3.-print-the-linked-list\">3. Print the Linked List <a class=\"heading-anchor-permalink\" href=\"#3.-print-the-linked-list\">#</a></h1>\n<p>Created Tuesday 14 January 2020</p>\n<ol>\n<li>Check if temp is not null, print and move.</li>\n</ol>\n",
      "id": 159
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/8._Variations_of_LL.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/8._Variations_of_LL.html",
      "content": "# 8. Variations of LL\nCreated Saturday 18 January 2020\n\n\n1. Singly Linked list.\n2. Doubly linked list\n3. Circular singly linked list. saved 8 bytes. Any node can be used to travel the whole list.\n4. Circular doubly linked list. Increases size by length*sizeof(node*). Any node can be used to travel the whole list.\n\n\n",
      "html": "<h1 id=\"8.-variations-of-ll\">8. Variations of LL <a class=\"heading-anchor-permalink\" href=\"#8.-variations-of-ll\">#</a></h1>\n<p>Created Saturday 18 January 2020</p>\n<ol>\n<li>Singly Linked list.</li>\n<li>Doubly linked list</li>\n<li>Circular singly linked list. saved 8 bytes. Any node can be used to travel the whole list.</li>\n<li>Circular doubly linked list. Increases size by length<em>sizeof(node</em>). Any node can be used to travel the whole list.</li>\n</ol>\n",
      "id": 160
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/Exercises.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/Exercises.html",
      "content": "# Lectures 1(What are Data Structures), 2(What is Linked List) and 3(Print the Linked List)\n\n**1. Linked List Usecase**\n\n    Linked List are best suited:\n\n**Options**\n\n    a. for relatively permanent collections of data.\n    b. for the size of the structure is constantly changing.\n    c. for random Access of elements\n    d. None of these\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. for the size of the structure is constantly changing.\n    Basics\n\n</details>\n\n---\n\n**2. What is the output**\n\n    class Node\n    {\n    public:\n        int data;\n        Node *next;\n\n        Node(int data)\n        {\n            this->data = data;\n            this->next = NULL;\n        }\n    };\n\n    void print(Node *head)\n    {\n        Node *temp = head;\n\n        while (temp != NULL)\n        {\n            cout << temp->data << \" \";\n            temp = temp->next;\n        }\n        cout << endl;\n    }\n\n    void increment(Node *head)\n    {\n        Node *temp = head;\n        while (temp != NULL)\n        {\n            temp->data++;\n            temp = temp->next;\n        }\n    }\n\n    int main()\n    {\n\n        Node *node1 = new Node(10);\n        Node *node2 = new Node(20);\n        node1->next = node2;\n        increment(node1);\n        print(node1);\n    }\n\n**Options**\n\n    a. 10 20\n    b. 11 21\n    c. Error\n    d. None\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. 11 21\n    Basics\n\n</details>\n\n---\n\n**3. What is the output**\n\n    class Node\n    {\n    public:\n        int data;\n        Node *next;\n\n        Node(int data)\n        {\n            this->data = data;\n            this->next = NULL;\n        }\n    };\n\n    void print(Node *head)\n    {\n        Node *temp = head;\n\n        while (temp != NULL)\n        {\n            cout << temp->data << \" \";\n            temp = temp->next;\n        }\n        cout << endl;\n    }\n\n    int main()\n    {\n\n        Node *node1 = new Node(10);\n        Node *node2 = new Node(20);\n        node2->next = node1;\n        print(node2);\n    }\n\n**Options**\n\n    a. 10 20\n    b. 20 10\n    c. Error\n    d. None of these\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. 20 10\n    Basics\n\n</details>\n\n---\n\n**4. What is the output**\n\n    class Node\n    {\n    public:\n        int data;\n        Node *next;\n        Node(int data)\n        {\n            this->data = data;\n            this->next = NULL;\n        }\n    };\n\n    void print(Node *head)\n    {\n        Node *temp = head;\n\n        while (temp != NULL)\n        {\n            cout << temp->data << \" \";\n            temp = temp->next;\n        }\n        cout << endl;\n    }\n\n    int main()\n    {\n\n        Node *node1 = new Node(10);\n        Node *node2 = new Node(20);\n        Node *node3 = new Node(20);\n        Node *node4 = new Node(20);\n        node1->next = node2;\n        node2->next = node3;\n        node3->next = node4;\n        print(node2);\n    }\n\n**Options**\n\n    a. 10 20 30 40\n    b. 20 30 40\n    c. Error\n    d. None\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    d. None\n    20 20 20\n    Basics\n\n</details>\n\n---\n\n# Lecture 4\n",
      "html": "<h1 id=\"lectures-1(what-are-data-structures)%2C-2(what-is-linked-list)-and-3(print-the-linked-list)\">Lectures 1(What are Data Structures), 2(What is Linked List) and 3(Print the Linked List) <a class=\"heading-anchor-permalink\" href=\"#lectures-1(what-are-data-structures)%2C-2(what-is-linked-list)-and-3(print-the-linked-list)\">#</a></h1>\n<p><strong>1. Linked List Usecase</strong></p>\n<pre><code>Linked List are best suited:\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. for relatively permanent collections of data.\nb. for the size of the structure is constantly changing.\nc. for random Access of elements\nd. None of these\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. for the size of the structure is constantly changing.\nBasics\n</code></pre>\n</details>\n<hr>\n<p><strong>2. What is the output</strong></p>\n<pre><code>class Node\n{\npublic:\n    int data;\n    Node *next;\n\n    Node(int data)\n    {\n        this-&gt;data = data;\n        this-&gt;next = NULL;\n    }\n};\n\nvoid print(Node *head)\n{\n    Node *temp = head;\n\n    while (temp != NULL)\n    {\n        cout &lt;&lt; temp-&gt;data &lt;&lt; &quot; &quot;;\n        temp = temp-&gt;next;\n    }\n    cout &lt;&lt; endl;\n}\n\nvoid increment(Node *head)\n{\n    Node *temp = head;\n    while (temp != NULL)\n    {\n        temp-&gt;data++;\n        temp = temp-&gt;next;\n    }\n}\n\nint main()\n{\n\n    Node *node1 = new Node(10);\n    Node *node2 = new Node(20);\n    node1-&gt;next = node2;\n    increment(node1);\n    print(node1);\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 10 20\nb. 11 21\nc. Error\nd. None\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. 11 21\nBasics\n</code></pre>\n</details>\n<hr>\n<p><strong>3. What is the output</strong></p>\n<pre><code>class Node\n{\npublic:\n    int data;\n    Node *next;\n\n    Node(int data)\n    {\n        this-&gt;data = data;\n        this-&gt;next = NULL;\n    }\n};\n\nvoid print(Node *head)\n{\n    Node *temp = head;\n\n    while (temp != NULL)\n    {\n        cout &lt;&lt; temp-&gt;data &lt;&lt; &quot; &quot;;\n        temp = temp-&gt;next;\n    }\n    cout &lt;&lt; endl;\n}\n\nint main()\n{\n\n    Node *node1 = new Node(10);\n    Node *node2 = new Node(20);\n    node2-&gt;next = node1;\n    print(node2);\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 10 20\nb. 20 10\nc. Error\nd. None of these\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. 20 10\nBasics\n</code></pre>\n</details>\n<hr>\n<p><strong>4. What is the output</strong></p>\n<pre><code>class Node\n{\npublic:\n    int data;\n    Node *next;\n    Node(int data)\n    {\n        this-&gt;data = data;\n        this-&gt;next = NULL;\n    }\n};\n\nvoid print(Node *head)\n{\n    Node *temp = head;\n\n    while (temp != NULL)\n    {\n        cout &lt;&lt; temp-&gt;data &lt;&lt; &quot; &quot;;\n        temp = temp-&gt;next;\n    }\n    cout &lt;&lt; endl;\n}\n\nint main()\n{\n\n    Node *node1 = new Node(10);\n    Node *node2 = new Node(20);\n    Node *node3 = new Node(20);\n    Node *node4 = new Node(20);\n    node1-&gt;next = node2;\n    node2-&gt;next = node3;\n    node3-&gt;next = node4;\n    print(node2);\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 10 20 30 40\nb. 20 30 40\nc. Error\nd. None\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>d. None\n20 20 20\nBasics\n</code></pre>\n</details>\n<hr>\n<h1 id=\"lecture-4\">Lecture 4 <a class=\"heading-anchor-permalink\" href=\"#lecture-4\">#</a></h1>\n",
      "id": 161
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/0_index.html",
      "content": "# zAssignments\nCreated Saturday 18 January 2020\n\n[Assignments](zAssignments/Assignments.md)\nUni or empty clear all the corner cases. Optimize the code too.\n\n",
      "html": "<h1 id=\"zassignments\">zAssignments <a class=\"heading-anchor-permalink\" href=\"#zassignments\">#</a></h1>\n<p>Created Saturday 18 January 2020</p>\n<p><a href=\"zAssignments/Assignments.html\">Assignments</a>\nUni or empty clear all the corner cases. Optimize the code too.</p>\n",
      "id": 162
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/1._Linear_Search_in_LL.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/1._Linear_Search_in_LL.html",
      "content": "# 1. Linear Search in LL\nCreated Friday 17 January 2020\n\nint indexOfNIter(Node *head, int n) \n{\nNode* trav = head;\nfor(int i=0; trav!=NULL; i++) // i is only for counting the indexes\n{\nif(trav->data==n)\nreturn i;\ntrav = trav -> next;\n}\n// Node not present or empty list\nreturn -1;\n}\n\n\n* Easy.\n\n\n",
      "html": "<h1 id=\"1.-linear-search-in-ll\">1. Linear Search in LL <a class=\"heading-anchor-permalink\" href=\"#1.-linear-search-in-ll\">#</a></h1>\n<p>Created Friday 17 January 2020</p>\n<p>int indexOfNIter(Node <em>head, int n)\n{\nNode</em> trav = head;\nfor(int i=0; trav!=NULL; i++) // i is only for counting the indexes\n{\nif(trav-&gt;data==n)\nreturn i;\ntrav = trav -&gt; next;\n}\n// Node not present or empty list\nreturn -1;\n}</p>\n<ul>\n<li>Easy.</li>\n</ul>\n",
      "id": 163
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/2._AppendLastNToFirst.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/2._AppendLastNToFirst.html",
      "content": "# 2. AppendLastNToFirst\nCreated Friday 17 January 2020\n\n\n* for empty or uni list, return.\n* Traverse the array to find the length;\n* Stop at the last node, connect it to the first node.\n* Traverse  to index l-n-1\n* change head value\n* make l-n-1 ->next = NULL\n\n\n",
      "html": "<h1 id=\"2.-appendlastntofirst\">2. AppendLastNToFirst <a class=\"heading-anchor-permalink\" href=\"#2.-appendlastntofirst\">#</a></h1>\n<p>Created Friday 17 January 2020</p>\n<ul>\n<li>for empty or uni list, return.</li>\n<li>Traverse the array to find the length;</li>\n<li>Stop at the last node, connect it to the first node.</li>\n<li>Traverse  to index l-n-1</li>\n<li>change head value</li>\n<li>make l-n-1 -&gt;next = NULL</li>\n</ul>\n",
      "id": 164
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/3._Eliminate_dupicates_from_the_array.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/3._Eliminate_dupicates_from_the_array.html",
      "content": "# 3. Eliminate dupicates from the array\nCreated Saturday 18 January 2020\n\n\n* Doing step by step.\n* For empty or uni list return;\n* We are going to delete the next element from the current. The empty and uni takes care that the head is never deleted.\n* while(trav->next!=NULL), i.e till we are the last node.\n\n{\nif (trav->next->data = trav->data)\n{\nnode* to_be_deleted = trav->next;\ntrav->next = trav->next->next;\ndelete to_be_deleted;\n}\n// do not move forward as there may be more than 2 duplicates in a row. Move only if we find that the next is different.\nelse\ntrav = trav->next;\n}\n\n",
      "html": "<h1 id=\"3.-eliminate-dupicates-from-the-array\">3. Eliminate dupicates from the array <a class=\"heading-anchor-permalink\" href=\"#3.-eliminate-dupicates-from-the-array\">#</a></h1>\n<p>Created Saturday 18 January 2020</p>\n<ul>\n<li>Doing step by step.</li>\n<li>For empty or uni list return;</li>\n<li>We are going to delete the next element from the current. The empty and uni takes care that the head is never deleted.</li>\n<li>while(trav-&gt;next!=NULL), i.e till we are the last node.</li>\n</ul>\n<p>{\nif (trav-&gt;next-&gt;data = trav-&gt;data)\n{\nnode* to_be_deleted = trav-&gt;next;\ntrav-&gt;next = trav-&gt;next-&gt;next;\ndelete to_be_deleted;\n}\n// do not move forward as there may be more than 2 duplicates in a row. Move only if we find that the next is different.\nelse\ntrav = trav-&gt;next;\n}</p>\n",
      "id": 165
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/4._Print_LL_in_reverse.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/4._Print_LL_in_reverse.html",
      "content": "# 4. Print LL in reverse\nCreated Saturday 18 January 2020\n\n\n* If uni or empty, return;\n* Solve using stack. Better use recursion. But we could also make an LL.\n\n\n1. Iterative\n\t* Make a node pointer named phead\n\t* Traverse the original LL till head equals NULL. \n\t\t* create a new node with data as (head). \n\t\t* newnode->next = phead; // first one points to NULL, as it'll be the last.\n\t\t* phead = newnode, where we will point in the next iteration.\n\t\t* At the end, there would be no iteration. \n\t\t* phead is the head of the reversed linked list(as in-place reversing was not allowed on the original list, otherwise we would have reversed it in the first place).\n\t* Traverse the reversedLL, create a to_be_deleted pointer.\n\t\t* to_be_deleted = phead;\n\t\t* phead = phead -> next;\n\t\t* cout << to_be_deleted << \" \";\n\t\t* delete to_be_deleted.\n2. Recursive solution:\n\nif(head==NULL)\nreturn;\nf(head->next);\ncout << head ->data;\n\t\n\n\n\n",
      "html": "<h1 id=\"4.-print-ll-in-reverse\">4. Print LL in reverse <a class=\"heading-anchor-permalink\" href=\"#4.-print-ll-in-reverse\">#</a></h1>\n<p>Created Saturday 18 January 2020</p>\n<ul>\n<li>If uni or empty, return;</li>\n<li>Solve using stack. Better use recursion. But we could also make an LL.</li>\n</ul>\n<ol>\n<li>Iterative\n<ul>\n<li>Make a node pointer named phead</li>\n<li>Traverse the original LL till head equals NULL.\n<ul>\n<li>create a new node with data as (head).</li>\n<li>newnode-&gt;next = phead; // first one points to NULL, as it’ll be the last.</li>\n<li>phead = newnode, where we will point in the next iteration.</li>\n<li>At the end, there would be no iteration.</li>\n<li>phead is the head of the reversed linked list(as in-place reversing was not allowed on the original list, otherwise we would have reversed it in the first place).</li>\n</ul>\n</li>\n<li>Traverse the reversedLL, create a to_be_deleted pointer.\n<ul>\n<li>to_be_deleted = phead;</li>\n<li>phead = phead -&gt; next;</li>\n<li>cout &lt;&lt; to_be_deleted &lt;&lt; &quot; &quot;;</li>\n<li>delete to_be_deleted.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Recursive solution:</li>\n</ol>\n<p>if(head==NULL)\nreturn;\nf(head-&gt;next);\ncout &lt;&lt; head -&gt;data;</p>\n",
      "id": 166
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/5._Palindrome_Linked_List.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/5._Palindrome_Linked_List.html",
      "content": "# 5. Palindrome Linked List\nCreated Saturday 18 January 2020\n\n\n* For uni or empty, return true.\n* Move to the first half.\n* Check if odd or even. Move to the first node of the right side LL. \n* Start reversing from this part of the LL.\n* Once done, traverse from head to NULL and for the reverse LL.\n* Both the trav will now hit NULL at the same time, so checking any one is fine.\n* Continue the iteration as long as the values are equal, if they aren't, return false.\n* When you exit the loop return true.\n\n\n",
      "html": "<h1 id=\"5.-palindrome-linked-list\">5. Palindrome Linked List <a class=\"heading-anchor-permalink\" href=\"#5.-palindrome-linked-list\">#</a></h1>\n<p>Created Saturday 18 January 2020</p>\n<ul>\n<li>For uni or empty, return true.</li>\n<li>Move to the first half.</li>\n<li>Check if odd or even. Move to the first node of the right side LL.</li>\n<li>Start reversing from this part of the LL.</li>\n<li>Once done, traverse from head to NULL and for the reverse LL.</li>\n<li>Both the trav will now hit NULL at the same time, so checking any one is fine.</li>\n<li>Continue the iteration as long as the values are equal, if they aren’t, return false.</li>\n<li>When you exit the loop return true.</li>\n</ul>\n",
      "id": 167
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/Assignments.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/Assignments.html",
      "content": "# Assignments\n\n<details> <summary><strong> 1. Find a node in LL </strong></summary>\n\n# 1. Find a node in LL\n\n    Given a linked list and an integer n you need to find and return index where n is present in the LL. Do this iteratively.\n\n    Return -1 if n is not present in the LL.\n\n    Indexing of nodes starts from 0.\n\n**Input format**\n\n    Line 1 : Linked list elements (separated by space and terminated by -1)\n\n    Line 2 : Integer n\n\n**Output format**\n\n    Index\n\n**Sample Input 1**\n\n    3 4 5 2 6 1 9 -1\n    5\n\n**Sample Output 1**\n\n    2\n\n**Sample Input 2**\n\n    3 4 5 2 6 1 9 -1\n    6\n\n**Sample Output 1**\n\n    4\n\n<details> <summary><strong>Code</strong></summary>\n\n    int length(Node *head)\n    {\n        int length = 0;\n        while (head != NULL)\n            head = head->next, length++;\n        return length;\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 2. AppendLastNToFirst </strong></summary>\n\n# 2. AppendLastNToFirst\n\n    Given a linked list and an integer n, append the last n elements of the LL to front.\n\n    Indexing starts from 0. You don't need to print the elements, just update the elements and return the head of updated LL.\n\n    Assume given n will be smaller than length of LL.\n\n**Input Format**\n\n    Line 1 : Linked list elements (separated by space and terminated by -1)\n\n**Output Format**\n\n    Element at ith position\n\n**Sample Input**\n\n    1 2 3 4 5 -1\n    3\n\n**Sample Output**\n\n    3 4 5 1 2\n\n<details> <summary><strong>Code</strong></summary>\n\n    node *append_LinkedList(node *head, int n)\n    {\n        if (head == NULL || head->next == NULL) // if only one element is there no need to do anything\n            return head;\n\n        int length = 0;\n\n        node *trav = head;\n\n        while (trav->next != NULL) // coz we need the second last node\n        {\n            trav = trav->next;\n            length++;\n        }\n\n        length++; // we stopped at the last node\n\n        if (length - n <= 0) // this is assumed to be Okay as per the question\n            return head;\n\n        trav->next = head; // connected the last to the head\n\n        // go to the start\n        trav = head;\n\n        for (int i = 0; i < length - n - 1; i++)\n            trav = trav->next;\n\n        head = trav->next; // the new head, to be returned\n\n        trav->next = NULL;\n        return head;\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 3. Eliminate duplicates from LL </strong></summary>\n\n# 3. Eliminate duplicates from LL\n\n    Given a sorted linked list (elements are sorted in ascending order). Eliminate duplicates from the given LL, such that output LL contains only unique elements.\n\n    You don't need to print the elements, just remove duplicates and return the head of updated LL.\n\n**Input Format**\n\n    Linked list elements (separated by space and terminated by -1)\n\n**Output Format**\n\n    Updated LL elements (separated by space)\n\n**Sample Input**\n\n    1 2 3 3 3 4 4 5 5 5 7 -1\n\n**Sample Output**\n\n    1 2 3 4 5 7\n\n<details> <summary><strong>Code</strong></summary>\n\n    node *eliminate_duplicate(node *head)\n    {\n        // sorted list\n        if (head == NULL || head->next == NULL)\n            return head;\n\n        node *trav = head;\n\n        // step by step elimination, deleting at index 1 from the current.\n        // this means we don't have to delete the first node ever, so no need of the special case\n\n        while (trav->next != NULL) // stop when you are the last man standing\n        {\n            if (trav->data == trav->next->data)\n            {\n                node *to_be_deleted = trav->next;\n                trav->next = trav->next->next;\n                delete to_be_deleted; // trav not changed\n            }\n            else\n                trav = trav->next;\n        }\n\n        return head;\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 4. Print reverse LinkedList </strong></summary>\n\n# 4. Print reverse LinkedList\n\n    Print a given linked list in reverse order. You need to print the tail first and head last. You can�t change any pointer in the linked list, just print it in reverse order.\n\n**Input Format**\n\n    Linked List elements (separated by space and terminated by -1)\n\n**Output Format**\n\n    Linked List elements in reverse order (separated by space)\n\n**Sample Input 1**\n\n    1 2 3 4 5 -1\n\n**Sample Output 1**\n\n    5 4 3 2 1\n\n**Sample Input 2**\n\n    1 2 3 -1\n\n**Sample Output 2**\n\n    3 2 1\n\n<details> <summary><strong>Code</strong></summary>\n\n    // Iterative Approach\n\n    void print_linkedlist_spl(node *head)\n    {\n        if (head == NULL)\n            return; // uni loop is a palindrome\n\n        // making a new linked list;\n\n        node *phead = NULL; // we need to point here for the first node\n\n        while (head != NULL)\n        {\n            node *newnode = new node(head->data); // creates a node with data from the original list\n            newnode->next = phead;                // node points to phead\n            phead = newnode;                      // phead becomes the node we need to point to in the next iteration\n\n            head = head->next; // traverse the original list by one step\n        }\n\n        // head at null, phead at the last node of the original list. Hence it is the head.\n\n        // Now, just travel the list with phead, and deallocate memory for each block.\n\n        node* to_be_deleted = 0;\n        while(phead!=NULL)\n        {\n            to_be_deleted = phead;\n\n            cout << to_be_deleted -> data << \" \";\n            delete to_be_deleted;\n\n            phead = phead->next;\n            to_be_deleted = phead;\n        }\n    }\n    ---------------------\n    // Recursive Approach\n\n    void print_linkedlist_spl(node *head)\n    {\n        if (head == NULL)\n            return;\n        print_linkedlist_spl(head->next);\n        cout << head->data << \" \";\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 5. Palindrome LinkedList </strong></summary>\n\n# 5. Palindrome LinkedList\n\n    Check if a given linked list is palindrome or not. Return true or false.\n    Indexing starts from 0.\n\n**Input Format**\n\n    Linked list elements (separated by space and terminated by -1)\n\n**Sample Input 1**\n\n    9 2 3 3 2 9 -1\n\n**Sample Output 1**\n\n    true\n\n**Sample Input 2**\n\n    0 2 3 2 5 -1\n\n**Sample Output 2**\n\nfalse\n\n<details> <summary><strong>Code</strong></summary>\n\n    bool check_palindrome(node *head)\n    {\n        // for doing in o(1) space we need to reverse the list from the middle\n        if (head == NULL || head->next == NULL)\n            return true;\n\n        node *travx = head, *trav2x = head;\n\n        while (trav2x != NULL && trav2x->next != NULL)\n        {\n            trav2x = trav2x->next->next;\n            travx = travx->next;\n        }\n        // trav2x reaches the end while travx reaches the first half's last, or the middle\n\n        /* even size = 1 2 3 4 5 6\n            pass - (travx, trav2x)\n            1 - (1, 2)\n            2 - (2, 4)\n            3 - (3, 6)\n\n            Conclusion: 1st half of the list\n            Proof: PMI\n            --------------------\n\n            odd size = 1 2 3 4 5\n            pass - (travx, trav2x)\n            1 - (1, 2)\n            2 - (2, 4)\n            stop\n            Conclusion: 1st half of the list\n            Proof: PMI\n\n            // how to acertain:\n            if trav2x == NULL, it is an odd size list. do travx = trav -> next -> next; you are on the 1st of the right side list\n\n            else // (i.e trav->next==NULL)\n                trav = trav -> next, you are on the first of the right half\n        */\n\n        // reverse the second half of the list, remember p is the element not in the list\n        // q, r is the head of the reversed linked list\n\n        node *r = 0, *q = 0, *p = travx;\n\n        while (p != NULL)\n        {\n            q = p;       // q comes at p\n            p = p->next; // p moves over befor the current node loses the next\n\n            q->next = r; // join made\n            r = q;       // r moves over\n        }\n\n        node *trav = r;\n        // both head and trav follow the same distance, so checking any one would suffice\n\n        while (trav != NULL)\n        {\n            if (trav->data != head->data)\n                return false;\n\n            trav = trav->next;\n            head = head->next;\n        }\n\n        return true;\n    }\n\n</details>\n\n---\n\n</details>\n",
      "html": "<h1 id=\"assignments\">Assignments <a class=\"heading-anchor-permalink\" href=\"#assignments\">#</a></h1>\n<details> <summary><strong> 1. Find a node in LL </strong></summary>\n<h1 id=\"1.-find-a-node-in-ll\">1. Find a node in LL <a class=\"heading-anchor-permalink\" href=\"#1.-find-a-node-in-ll\">#</a></h1>\n<pre><code>Given a linked list and an integer n you need to find and return index where n is present in the LL. Do this iteratively.\n\nReturn -1 if n is not present in the LL.\n\nIndexing of nodes starts from 0.\n</code></pre>\n<p><strong>Input format</strong></p>\n<pre><code>Line 1 : Linked list elements (separated by space and terminated by -1)\n\nLine 2 : Integer n\n</code></pre>\n<p><strong>Output format</strong></p>\n<pre><code>Index\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>3 4 5 2 6 1 9 -1\n5\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>2\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>3 4 5 2 6 1 9 -1\n6\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>4\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int length(Node *head)\n{\n    int length = 0;\n    while (head != NULL)\n        head = head-&gt;next, length++;\n    return length;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 2. AppendLastNToFirst </strong></summary>\n<h1 id=\"2.-appendlastntofirst\">2. AppendLastNToFirst <a class=\"heading-anchor-permalink\" href=\"#2.-appendlastntofirst\">#</a></h1>\n<pre><code>Given a linked list and an integer n, append the last n elements of the LL to front.\n\nIndexing starts from 0. You don't need to print the elements, just update the elements and return the head of updated LL.\n\nAssume given n will be smaller than length of LL.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Linked list elements (separated by space and terminated by -1)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Element at ith position\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>1 2 3 4 5 -1\n3\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>3 4 5 1 2\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>node *append_LinkedList(node *head, int n)\n{\n    if (head == NULL || head-&gt;next == NULL) // if only one element is there no need to do anything\n        return head;\n\n    int length = 0;\n\n    node *trav = head;\n\n    while (trav-&gt;next != NULL) // coz we need the second last node\n    {\n        trav = trav-&gt;next;\n        length++;\n    }\n\n    length++; // we stopped at the last node\n\n    if (length - n &lt;= 0) // this is assumed to be Okay as per the question\n        return head;\n\n    trav-&gt;next = head; // connected the last to the head\n\n    // go to the start\n    trav = head;\n\n    for (int i = 0; i &lt; length - n - 1; i++)\n        trav = trav-&gt;next;\n\n    head = trav-&gt;next; // the new head, to be returned\n\n    trav-&gt;next = NULL;\n    return head;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 3. Eliminate duplicates from LL </strong></summary>\n<h1 id=\"3.-eliminate-duplicates-from-ll\">3. Eliminate duplicates from LL <a class=\"heading-anchor-permalink\" href=\"#3.-eliminate-duplicates-from-ll\">#</a></h1>\n<pre><code>Given a sorted linked list (elements are sorted in ascending order). Eliminate duplicates from the given LL, such that output LL contains only unique elements.\n\nYou don't need to print the elements, just remove duplicates and return the head of updated LL.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Linked list elements (separated by space and terminated by -1)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Updated LL elements (separated by space)\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>1 2 3 3 3 4 4 5 5 5 7 -1\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>1 2 3 4 5 7\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>node *eliminate_duplicate(node *head)\n{\n    // sorted list\n    if (head == NULL || head-&gt;next == NULL)\n        return head;\n\n    node *trav = head;\n\n    // step by step elimination, deleting at index 1 from the current.\n    // this means we don't have to delete the first node ever, so no need of the special case\n\n    while (trav-&gt;next != NULL) // stop when you are the last man standing\n    {\n        if (trav-&gt;data == trav-&gt;next-&gt;data)\n        {\n            node *to_be_deleted = trav-&gt;next;\n            trav-&gt;next = trav-&gt;next-&gt;next;\n            delete to_be_deleted; // trav not changed\n        }\n        else\n            trav = trav-&gt;next;\n    }\n\n    return head;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 4. Print reverse LinkedList </strong></summary>\n<h1 id=\"4.-print-reverse-linkedlist\">4. Print reverse LinkedList <a class=\"heading-anchor-permalink\" href=\"#4.-print-reverse-linkedlist\">#</a></h1>\n<pre><code>Print a given linked list in reverse order. You need to print the tail first and head last. You can�t change any pointer in the linked list, just print it in reverse order.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Linked List elements (separated by space and terminated by -1)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Linked List elements in reverse order (separated by space)\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>1 2 3 4 5 -1\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>5 4 3 2 1\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>1 2 3 -1\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>3 2 1\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// Iterative Approach\n\nvoid print_linkedlist_spl(node *head)\n{\n    if (head == NULL)\n        return; // uni loop is a palindrome\n\n    // making a new linked list;\n\n    node *phead = NULL; // we need to point here for the first node\n\n    while (head != NULL)\n    {\n        node *newnode = new node(head-&gt;data); // creates a node with data from the original list\n        newnode-&gt;next = phead;                // node points to phead\n        phead = newnode;                      // phead becomes the node we need to point to in the next iteration\n\n        head = head-&gt;next; // traverse the original list by one step\n    }\n\n    // head at null, phead at the last node of the original list. Hence it is the head.\n\n    // Now, just travel the list with phead, and deallocate memory for each block.\n\n    node* to_be_deleted = 0;\n    while(phead!=NULL)\n    {\n        to_be_deleted = phead;\n\n        cout &lt;&lt; to_be_deleted -&gt; data &lt;&lt; &quot; &quot;;\n        delete to_be_deleted;\n\n        phead = phead-&gt;next;\n        to_be_deleted = phead;\n    }\n}\n---------------------\n// Recursive Approach\n\nvoid print_linkedlist_spl(node *head)\n{\n    if (head == NULL)\n        return;\n    print_linkedlist_spl(head-&gt;next);\n    cout &lt;&lt; head-&gt;data &lt;&lt; &quot; &quot;;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 5. Palindrome LinkedList </strong></summary>\n<h1 id=\"5.-palindrome-linkedlist\">5. Palindrome LinkedList <a class=\"heading-anchor-permalink\" href=\"#5.-palindrome-linkedlist\">#</a></h1>\n<pre><code>Check if a given linked list is palindrome or not. Return true or false.\nIndexing starts from 0.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Linked list elements (separated by space and terminated by -1)\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>9 2 3 3 2 9 -1\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>true\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>0 2 3 2 5 -1\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<p>false</p>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>bool check_palindrome(node *head)\n{\n    // for doing in o(1) space we need to reverse the list from the middle\n    if (head == NULL || head-&gt;next == NULL)\n        return true;\n\n    node *travx = head, *trav2x = head;\n\n    while (trav2x != NULL &amp;&amp; trav2x-&gt;next != NULL)\n    {\n        trav2x = trav2x-&gt;next-&gt;next;\n        travx = travx-&gt;next;\n    }\n    // trav2x reaches the end while travx reaches the first half's last, or the middle\n\n    /* even size = 1 2 3 4 5 6\n        pass - (travx, trav2x)\n        1 - (1, 2)\n        2 - (2, 4)\n        3 - (3, 6)\n\n        Conclusion: 1st half of the list\n        Proof: PMI\n        --------------------\n\n        odd size = 1 2 3 4 5\n        pass - (travx, trav2x)\n        1 - (1, 2)\n        2 - (2, 4)\n        stop\n        Conclusion: 1st half of the list\n        Proof: PMI\n\n        // how to acertain:\n        if trav2x == NULL, it is an odd size list. do travx = trav -&gt; next -&gt; next; you are on the 1st of the right side list\n\n        else // (i.e trav-&gt;next==NULL)\n            trav = trav -&gt; next, you are on the first of the right half\n    */\n\n    // reverse the second half of the list, remember p is the element not in the list\n    // q, r is the head of the reversed linked list\n\n    node *r = 0, *q = 0, *p = travx;\n\n    while (p != NULL)\n    {\n        q = p;       // q comes at p\n        p = p-&gt;next; // p moves over befor the current node loses the next\n\n        q-&gt;next = r; // join made\n        r = q;       // r moves over\n    }\n\n    node *trav = r;\n    // both head and trav follow the same distance, so checking any one would suffice\n\n    while (trav != NULL)\n    {\n        if (trav-&gt;data != head-&gt;data)\n            return false;\n\n        trav = trav-&gt;next;\n        head = head-&gt;next;\n    }\n\n    return true;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n",
      "id": 168
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/0_index.html",
      "content": "# 2. Popular LL problems\nCreated Saturday 18 January 2020\n\nRemember while making an LL recursively, it's better to add nodes at the beginning as you have to return the node anyways.\n\n[Codes](./2._Popular_LL_problems/Codes)\n[Exercises.md](./2._Popular_LL_problems/Quizzes&Exercises/Exercises.md)\n[CodingExercises.md](./2._Popular_LL_problems/Quizzes&Exercises/CodingExercises.md)\n[Assignments.md](2._Popular_LL_problems/zAssignments/Assignments.md)\n\n",
      "html": "<h1 id=\"2.-popular-ll-problems\">2. Popular LL problems <a class=\"heading-anchor-permalink\" href=\"#2.-popular-ll-problems\">#</a></h1>\n<p>Created Saturday 18 January 2020</p>\n<p>Remember while making an LL recursively, it’s better to add nodes at the beginning as you have to return the node anyways.</p>\n<p><a href=\"./2._Popular_LL_problems/Codes\">Codes</a>\n<a href=\"./2._Popular_LL_problems/Quizzes&amp;Exercises/Exercises.html\">Exercises.md</a>\n<a href=\"./2._Popular_LL_problems/Quizzes&amp;Exercises/CodingExercises.html\">CodingExercises.md</a>\n<a href=\"2._Popular_LL_problems/zAssignments/Assignments.html\">Assignments.md</a></p>\n",
      "id": 169
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/1._Midpoint_of_the_LL.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/1._Midpoint_of_the_LL.html",
      "content": "# 1. Midpoint of the LL\nCreated Saturday 18 January 2020\n\nRemember the middle element is floor((length-1)/2)\n\n\n* For uni or empty return head.\n* Make two pointers travx and trav2x. Both initialized as head.\n* while(travx->next!=NULL and trav2x->next->next!=NULL)\t// no other way, we will miss the even case.\n\ntravx = travx -> next;\ntrav2x = trav2x -> next -> next;\n// we don't need to check the case where trav2x == NULL, i.e we have never made that move.\n\t\n\n* When the loop ends. We are at the list of the first element. Stop operations.\n\t1. For odd sized list. We are at the middle element;\n\t2. For even size. We are at the element that is.\n\n**Length is not necessary to be calculated for getting the middle element.**\nProof: Intuition and PMI\n\n",
      "html": "<h1 id=\"1.-midpoint-of-the-ll\">1. Midpoint of the LL <a class=\"heading-anchor-permalink\" href=\"#1.-midpoint-of-the-ll\">#</a></h1>\n<p>Created Saturday 18 January 2020</p>\n<p>Remember the middle element is floor((length-1)/2)</p>\n<ul>\n<li>For uni or empty return head.</li>\n<li>Make two pointers travx and trav2x. Both initialized as head.</li>\n<li>while(travx-&gt;next!=NULL and trav2x-&gt;next-&gt;next!=NULL)\t// no other way, we will miss the even case.</li>\n</ul>\n<p>travx = travx -&gt; next;\ntrav2x = trav2x -&gt; next -&gt; next;\n// we don’t need to check the case where trav2x == NULL, i.e we have never made that move.</p>\n<ul>\n<li>When the loop ends. We are at the list of the first element. Stop operations.\n<ol>\n<li>For odd sized list. We are at the middle element;</li>\n<li>For even size. We are at the element that is.</li>\n</ol>\n</li>\n</ul>\n<p><strong>Length is not necessary to be calculated for getting the middle element.</strong>\nProof: Intuition and PMI</p>\n",
      "id": 170
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/2._Merging_two_sorted_LLs.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/2._Merging_two_sorted_LLs.html",
      "content": "# 2. Merging two sorted LLs\nCreated Saturday 18 January 2020\n\n\n* Need 4 variables, 2 iterators. 1 head of the merged list. 1 last node.\n* Add elements to the end of the array.\n\n\n",
      "html": "<h1 id=\"2.-merging-two-sorted-lls\">2. Merging two sorted LLs <a class=\"heading-anchor-permalink\" href=\"#2.-merging-two-sorted-lls\">#</a></h1>\n<p>Created Saturday 18 January 2020</p>\n<ul>\n<li>Need 4 variables, 2 iterators. 1 head of the merged list. 1 last node.</li>\n<li>Add elements to the end of the array.</li>\n</ul>\n",
      "id": 171
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/3._Merge_Sort_on_LL.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/3._Merge_Sort_on_LL.html",
      "content": "# 3. Merge Sort on LL\nCreated Saturday 18 January 2020\n\nMerge sort is equally optimal for an LL as a it is for an array.\n\n",
      "html": "<h1 id=\"3.-merge-sort-on-ll\">3. Merge Sort on LL <a class=\"heading-anchor-permalink\" href=\"#3.-merge-sort-on-ll\">#</a></h1>\n<p>Created Saturday 18 January 2020</p>\n<p>Merge sort is equally optimal for an LL as a it is for an array.</p>\n",
      "id": 172
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/4._Reverse_LL(recursive).md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/4._Reverse_LL(recursive).html",
      "content": "# 4. Reverse LL(recursive)\nCreated Saturday 18 January 2020\n\nThis is the most plain recursive method.\n\n* Here we return the head of the LL.\n* Connect the node in the current activation record and add it to the end, yes we would require traversing the LL for this.\n* Put the head->next = NULL. As it has become the last node of the LL.\n* Return the head of the LL.\n\nTime Complexity  = o(n^2^)\nThis could be sped up, return the head and the last pointer both. i.e two pointers\n\n",
      "html": "<h1 id=\"4.-reverse-ll(recursive)\">4. Reverse LL(recursive) <a class=\"heading-anchor-permalink\" href=\"#4.-reverse-ll(recursive)\">#</a></h1>\n<p>Created Saturday 18 January 2020</p>\n<p>This is the most plain recursive method.</p>\n<ul>\n<li>Here we return the head of the LL.</li>\n<li>Connect the node in the current activation record and add it to the end, yes we would require traversing the LL for this.</li>\n<li>Put the head-&gt;next = NULL. As it has become the last node of the LL.</li>\n<li>Return the head of the LL.</li>\n</ul>\n<p>Time Complexity  = o(n^2^)\nThis could be sped up, return the head and the last pointer both. i.e two pointers</p>\n",
      "id": 173
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/5._Reverse_LL_using_2_pointers.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/5._Reverse_LL_using_2_pointers.html",
      "content": "# 5. Reverse LL using 2 pointers\nCreated Saturday 18 January 2020\n\n\n* Method in no.4 can be made o(n) by storing the last pointer, rather than finding it every time.\n* We create a public class which has two pointers, head and last. Which store head of the reversed linked lista and the last node's address.\n* We return this class called 'Pair' using a helper function which takes in only the value head.\n* **As shown in the video, as this is a skewed tree recursion, we can return the value without making a new value.**\n\n\n",
      "html": "<h1 id=\"5.-reverse-ll-using-2-pointers\">5. Reverse LL using 2 pointers <a class=\"heading-anchor-permalink\" href=\"#5.-reverse-ll-using-2-pointers\">#</a></h1>\n<p>Created Saturday 18 January 2020</p>\n<ul>\n<li>Method in no.4 can be made o(n) by storing the last pointer, rather than finding it every time.</li>\n<li>We create a public class which has two pointers, head and last. Which store head of the reversed linked lista and the last node’s address.</li>\n<li>We return this class called ‘Pair’ using a helper function which takes in only the value head.</li>\n<li><strong>As shown in the video, as this is a skewed tree recursion, we can return the value without making a new value.</strong></li>\n</ul>\n",
      "id": 174
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/6._Reverse_LL_recursive_-_easiest.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/6._Reverse_LL_recursive_-_easiest.html",
      "content": "# 6. Reverse LL recursive - easiest\nCreated Saturday 18 January 2020\n\nIn the two approaches before, we had o(n^2^) and another was returning two values using a public class.\n\n* We observe that for LLs, even after the reversing of the right side part, the ACR's head's next still has the rLL's lastnode. So we don't need to store it.\n* Doubt? Okay, but how do we ensure that the first element points to NULL.\n\nThis is very easy to solve, as the ACR's node has the address of the lastnode of the rLL, we don't mind the lastnode pointing to NULL. \ni.e at every step coming back we have a complete LL, and we have the last node pointing to NULL.\nWhen this happens on the oldest ACR, we have the first point to NULL. So the list is reversed.\nTime O(n), S.C:  O(n)\n\n\n",
      "html": "<h1 id=\"6.-reverse-ll-recursive---easiest\">6. Reverse LL recursive - easiest <a class=\"heading-anchor-permalink\" href=\"#6.-reverse-ll-recursive---easiest\">#</a></h1>\n<p>Created Saturday 18 January 2020</p>\n<p>In the two approaches before, we had o(n^2^) and another was returning two values using a public class.</p>\n<ul>\n<li>We observe that for LLs, even after the reversing of the right side part, the ACR’s head’s next still has the rLL’s lastnode. So we don’t need to store it.</li>\n<li>Doubt? Okay, but how do we ensure that the first element points to NULL.</li>\n</ul>\n<p>This is very easy to solve, as the ACR’s node has the address of the lastnode of the rLL, we don’t mind the lastnode pointing to NULL.\ni.e at every step coming back we have a complete LL, and we have the last node pointing to NULL.\nWhen this happens on the oldest ACR, we have the first point to NULL. So the list is reversed.\nTime O(n), S.C:  O(n)</p>\n",
      "id": 175
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/7._Reverse_LL_Iterative.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/7._Reverse_LL_Iterative.html",
      "content": "# 7. Reverse LL Iterative\nCreated Saturday 18 January 2020\n\nThe classic.\n\n",
      "html": "<h1 id=\"7.-reverse-ll-iterative\">7. Reverse LL Iterative <a class=\"heading-anchor-permalink\" href=\"#7.-reverse-ll-iterative\">#</a></h1>\n<p>Created Saturday 18 January 2020</p>\n<p>The classic.</p>\n",
      "id": 176
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/zAssignments/Assignments.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/zAssignments/Assignments.html",
      "content": "# Assignments\n\n<details> <summary><strong> 1. Find a node in LL (recursive) </strong></summary>\n\n# 1. Find a node in LL (recursive)\n\n    Given a linked list and an integer n you need to find and return index where n is present in the LL. Do this iteratively.\n\n    Return -1 if n is not present in the LL.\n\n    Indexing of nodes starts from 0.\n\n**Input format**\n\n    Line 1 : Linked list elements (separated by space and terminated by -1)\n\n    Line 2 : Integer n\n\n**Output format**\n\n    Index\n\n**Sample Input 1**\n\n    3 4 5 2 6 1 9 -1\n    5\n\n**Sample Output 1**\n\n    2\n\n**Sample Input 2**\n\n    3 4 5 2 6 1 9 -1\n    6\n\n**Sample Output 1**\n\n    4\n\n<details> <summary><strong>Code</strong></summary>\n\n    int indexOfNRecursive(Node *head, int n)\n    {\n        if (head == NULL)\n            return -1; // base case 1\n\n        if (head->data == n)\n            return 0; // base case 2\n\n        //recursive step\n        int result = indexOfNRecursive(head->next, n);\n\n        //small calc\n        if (result == -1)\n            return -1;\n        return 1 + result;\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 2. Even after Odd LinkedList </strong></summary>\n\n# 2. Even after Odd LinkedList\n\n    Arrange elements in a given Linked List such that, all even numbers are placed after odd numbers. Respective order of elements should remain same.\n\n    Note: Input and Output has already managed for you. You don't need to print the elements, instead return the head of updated LL.\n\n**Input Format**\n\n    Line 1 : Linked list elements (separated by space and terminated by -1)\n\n**Output Format**\n\n    Print the elements of updated Linked list.\n\n**Sample Input**\n\n    1 4 5 2 -1\n\n**Sample Output**\n\n    1 5 4 2\n\n**Sample Input**\n\n    1 11 3 6 8 0 9 -1\n\n**Sample Output**\n\n    1 11 3 9 6 8 0\n\n<details> <summary><strong>Code</strong></summary>\n\n    // Following is the node structure\n    /**************\n    class node{\n    public:\n        int data;\n        node * next;\n        node(int data){\n            this->data=data;\n            this->next=NULL;\n        }\n    };\n    ***************/\n\n    node *arrange_LinkedList(node *head)\n    {\n        if (head == NULL || head->next == NULL)\n            return head; // uni and empty taken care of\n\n        // initializing the oddhead and the evenhead is a special case\n\n        int k = head->data % 2;\n\n        node *trav = head;\n        while (trav->next != NULL && trav->next->data % 2 == k)\n            trav = trav->next; // trav is the head before the mismatch\n\n        if (trav->next == NULL)\n            return head; // the LL is homogeneous\n\n        // storing heads of the odd and even lists\n        node *oddhead = k == 1 ? head : trav->next; // trav->next is the mismatch\n        node *evenhead = k == 0 ? head : trav->next;\n\n        // storing lastnodes of the odd and even lists, as any new nodes will be added here\n        node *lastnode_odd = trav, *lastnode_even = trav; // initializing as trav as one will retain value\n\n        // the other's last node\n        if (k == 0)\n            lastnode_odd = trav->next; // if k == 0, trav is correct as head of lastnode_even. Hence odd should change.\n        else\n            lastnode_even = trav->next;\n\n        // we are at the first head of the remaining list now\n        trav = trav->next->next;\n\n        // ending the odd and even LLs\n        lastnode_odd->next = NULL;\n        lastnode_even->next = NULL;\n\n        // attach nodes to the LL's as per nature\n        while (trav != NULL)\n        {\n            if (trav->data % 2 == 0)\n            {\n                lastnode_even->next = trav; // connected the new node\n                lastnode_even = trav;       // updated the last node\n            }\n            else\n            {\n                lastnode_odd->next = trav;\n                lastnode_odd = trav;\n            }\n            trav = trav->next;\n        }\n        //doubt, don't worry about ending the LL's at each iteration. Because they were seperated just before the while loop started.\n        // Hence lastnodes take care of the end\n\n        lastnode_even->next = NULL;\n        lastnode_odd->next = evenhead;\n\n        return oddhead;\n    }\n\n    // Insights:\n    // 1. By taking a 2 step stance, our algorithm is adaptive. This wouldn't have been the case for the mixed approach, where every node is worked upon for even being suspected.\n    // 2. We saved a lot of comparisons(i.e oddhead==NULL || evenhead==NULL) because we made starting the first node a special case. This is what helped no. 1\n    // 3. Readable and understandable\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 3. Delete every N nodes </strong></summary>\n\n# 3. Delete every N nodes\n\n    Given a linked list and two integers M and N. Traverse the linked list such that you retain M nodes then delete next N nodes, continue the same until end of the linked list. That is, in the given linked list you need to delete N nodes after every M nodes.\n\n**Input Format**\n\n    Line 1 : Linked list elements (separated by space and terminated by -1)\n\n    Line 2 : M\n\n    Line 3 : N\n\n**Output Format**\n\n    Updated LL elements (separated by space)\n\n**Sample Input 1**\n\n    1 2 3 4 5 6 7 8 -1\n    2\n    2\n\n**Sample Output 1**\n\n    1 2 5 6\n\n**Sample Input 2**\n\n    1 2 3 4 5 6 7 8 -1\n    2\n    3\n\n**Sample Output 2**\n\n    1 2 6 7\n\n<details> <summary><strong>Code</strong></summary>\n\n    node *skipMdeleteN(node *head, int m, int n)\n    {\n        // 4 cases are possible for prelim\n        if (m == 0) // retain none\n            return NULL;\n        if (n == 0) // delete none, retain some - retain all\n            return head;\n\n        // as skipping is first hence head is never changed, i.e deletion at head node is not carrired out.\n        node *trav = head, *dtrav = head;\n        int i = 0;\n\n        while (trav != NULL)\n        {\n            for (i = 0; trav != NULL && i < m - 1; i++) // travelling to the m-1th node\n                trav = trav->next;\n\n            if (trav == NULL || trav->next == NULL) // overrun check\n                return head;                        // i.e retain less than 'm' at last Okay\n\n            dtrav = trav;   // deleter traverses tothe position where we need to go if n are deleted. trav is the last node\n\n            for (i = 0; dtrav != NULL && i < n; i++)    // go\n                dtrav = dtrav->next;\n\n            if (dtrav == NULL) // safe deletion and exit, i.e delete last elements < n\n            {\n                trav->next = dtrav;\n                return head;\n            }\n\n            trav->next = dtrav->next; // lastnode_retained-> lastnode_deleted->next;\n            trav = trav->next;        // move the iterator like for the first iteration\n        }\n        return head;\n    }\n    /*\n    Insights: Function names are very important, skipping and retaining are not the same when it comes to empty list.\n        Retain none: Okay return empty LL;\n        Skip none: Return LL as it is.\n    */\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 4. Swap two Node of LL </strong></summary>\n\n# 4. Swap two Node of LL\n\n    Given a linked list, i & j, swap the nodes that are present at i & j position in the LL. You need to swap the entire nodes, not just the data.\n\n    Indexing starts from 0. You don't need to print the elements, just swap and return the head of updated LL.\n\n    Assume i & j given will be within limits. And i can be greater than j also.\n\n**Input Format**\n\n    Line 1 : Linked list elements (separated by space and terminated by -1)\n\n    Line 2 : i and j (separated by space)\n\n**Output Format**\n\n    Linked List elements in reverse order (separated by space)\n\n**Sample Input 1**\n\n    3 4 5 2 6 1 9 -1\n    3 4\n\n**Sample Output 1**\n\n    3 4 5 6 2 1 9\n\n**Sample Input 2**\n\n    3 4 5 2 6 1 9 -1\n    2 4\n\n**Sample Output 2**\n\n    3 4 6 2 5 1 9\n\n<details> <summary><strong>Code</strong></summary>\n\n    // Approach 1\n    node *swap_nodes(node *head, int i, int j)\n    {\n        // base case\n        if (head == NULL || head->next == NULL || i == j || i < 0 || j < 0)\n            return head;\n\n        // we've got atleast two nodes now.\n        // case 1: 0 and something else\n        // case 2: non zero and non zero\n        if (i > j)\n        {\n            int temp = i;\n            i = j;\n            j = temp;\n        }\n\n        // i is less than j.\n\n        if (i == 0)\n        {\n            // add a buffer\n            node *newnode = new node(0);\n            newnode->next = head;\n            node *ret = swap_nodes(newnode, 1, j + 1); // head is now the second\n            ret = ret->next;\n            delete newnode; // deallocated one node\n            return ret;\n        } // 1 step recursion\n\n        node *iprev = head, *jprev = head;\n\n        int a = 0; //same counter for both the traversals\n        for (; a < i - 1 && iprev != NULL; a++, iprev = iprev->next, jprev = iprev)\n            ;   // iprev at i-1th index\n                // check overrun\n        if (iprev == NULL || iprev->next == NULL)\n            return head;\n        for (; a < j - 1 && jprev != NULL; a++, jprev = jprev->next)\n            ; // jprev at j-1 th index\n\n        // check overrun\n        if (jprev == NULL || jprev->next == NULL)\n            return head;\n\n        // swapping procedure, handles cases of\n        node *ith = iprev->next;\n        node *jth = jprev->next;\n\n        node *inext = iprev->next->next;\n        node *jnext = jprev->next->next;\n\n        iprev->next = jth;\n        jprev->next = ith;\n        ith->next = jnext;\n        jth->next = inext;\n        if (jprev == ith) //contiguos element\n        {\n            jth->next = ith;\n        }\n        return head;\n        // duplicating code: finding the j-1 th term, swapping is the same, why not add a buffer and call the function again. Just call recursion\n    }\n\n\n    // Approach 2\n\n    node *swap_nodes(node *head, int i, int j)\n    {\n        // base case\n        if (head == NULL || head->next == NULL || i == j || i < 0 || j < 0)\n            return head;\n\n        // case 1: i = 0 and contiguous\n        // case 2: i = 0 and non-contiguous\n        // case 3: i = not zero and contiguous\n        // case 4: i = not zero and non contiguos\n\n        if (i > j)\n        {\n            int temp = i;\n            i = j;\n            j = temp;\n        }\n\n        // i is < j now.\n        if (i == 0)\n        {\n            // contiguos\n            if (j == 1)\n            {\n                node *p = head->next;\n                head->next = p->next;\n                p->next = head;\n                return p;\n            }\n            else // zero and non contiguos\n            {\n                node *jprev = head;\n                for (int a = 0; a < j - 1 && jprev != NULL; a++)\n                    jprev = jprev->next;\n\n                if (jprev == NULL || jprev->next == NULL) //overrun\n                    return head;\n\n                node *jth = jprev->next;\n                node *headn = head->next;\n\n                jprev->next = head;\n                head->next = jth->next;\n                jth->next = headn;\n                return jth; // it's the head now\n            }\n        }\n        else\n        {\n            if (j == i + 1) // contiguous\n            {\n                // go to the ith node\n                node *iprev = head;\n                for (int a = 0; a < i - 1 && iprev != NULL; a++)\n                    iprev = iprev->next;\n\n                if (iprev == NULL || iprev->next == NULL || iprev->next->next == NULL) // overrun check\n                    return head;\n\n                node *ith = iprev->next;\n                node *jth = ith->next;\n                node *jnext = jth->next;\n\n                ith->next = jnext;\n                jth->next = ith;\n                iprev->next = jth;\n                return head;\n            }\n            else\n            {\n                node *iprev = head;\n                int a = 0;\n\n                for (a = 0; a < i - 1 && iprev != NULL; a++)\n                    iprev = iprev->next;\n\n                if (iprev == NULL || iprev->next == NULL) //overrun check\n                    return head;\n\n                node *jprev = iprev;\n\n                for (; a < j - 1 && jprev != NULL; a++)\n                    jprev = jprev->next;\n\n                if (jprev == NULL || jprev->next == NULL) // oevrrun check\n                    return head;\n\n                node *ith = iprev->next;\n                node *jth = jprev->next;\n                node *inext = ith->next;\n                node *jnext = jth->next;\n\n                iprev->next = jth;\n                jprev->next = ith;\n                ith->next = jnext;\n                jth->next = inext;\n\n                return head;\n            }\n        }\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 5. Palindrome LinkedList </strong></summary>\n\n# 5. kReverse\n\n    Implement kReverse( int k ) in a linked list i.e. you need to reverse first K elements then reverse next k elements and join the linked list and so on.\n\n    Indexing starts from 0. If less than k elements left in the last, you need to reverse them as well. If k is greater than length of LL, reverse the complete LL.\n\n    You don't need to print the elements, just return the head of updated LL.\n\n**Input Format**\n\n    Line 1 : Linked list elements (separated by space and terminated by -1)\n\n    Line 2 : k\n\n**Output Format**\n\n    Linked List elements in reverse order (separated by space)\n\n**Sample Input 1**\n\n    1 2 3 4 5 6 7 8 9 10 -1\n    4\n\n**Sample Output 1**\n\n    4 3 2 1 8 7 6 5 10 9\n\n**Sample Input 2**\n\n    1 2 3 4 5 -1\n    2\n\n**Sample Output 2**\n\n    2 1 4 3 5\n\n**Sample Input 3**\n\n    1 2 3 4 5 6 7 -1\n    3\n\n**Sample Output 3**\n\n    3 2 1 6 5 4 7\n\n<details> <summary><strong>Code</strong></summary>\n\n    node *kReverse(node *head, int n)\n    {\n        // node* last = reverse(head, n);\n        if (head == NULL)\n            return head;\n        node *ret = NULL;\n        node *lastnode_prev = NULL, *lastnode_curr = NULL;\n        node *r = NULL, *q = NULL, *p = head;\n        while (p != NULL)\n        {\n            r = NULL, q = NULL;\n            lastnode_curr = p; // last node\n            for (int i = 0; i < n && p != NULL; i++)\n            {\n                q = p;\n                p = p->next;\n                q->next = r;\n                r = q;\n            } // we've got the LL with head at r\n\n            if (lastnode_prev == 0)\n            {\n                ret = r;\n                lastnode_prev = lastnode_curr;\n            }\n            lastnode_prev->next = r;\n            lastnode_prev = lastnode_curr;\n        }\n        return ret;\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 6. Bubble Sort (Iterative) LinkedList </strong></summary>\n\n# 6. Bubble Sort (Iterative) LinkedList\n\n    Sort a given linked list using Bubble Sort (iteratively). While sorting, you need to swap the entire nodes, not just the data.\n\n    You don't need to print the elements, just sort the elements and return the head of updated LL.\n\n**Input Format**\n\n    Line 1 : Linked list elements (separated by space and terminated by -1)\n\n**Output Format**\n\n    Updated LL elements (separated by space)\n\n**Sample Input**\n\n    1 4 5 2 -1\n\n**Sample Output**\n\n    1 2 4 5\n\n<details> <summary><strong>Code</strong></summary>\n\n    node *swapnext(node *head, node *trav) // swaps trav and trav->next\n    {\n        if (head == 0 || head->next == NULL)\n            return head;\n\n        if (head == trav)\n        {\n            node *p = head->next;\n            head->next = p->next;\n            p->next = head;\n            return p;\n        }\n        else\n        {\n            node *iprev = head;\n            while (iprev->next != trav) // iprev is not null as head is not NULL\n                iprev = iprev->next;\n\n            if (iprev == NULL || iprev->next == NULL || iprev->next->next == NULL) // overrun check\n                return head;\n\n            node *ith = iprev->next;\n            node *jth = ith->next;\n            node *jnext = jth->next;\n\n            ith->next = jnext;\n            jth->next = ith;\n            iprev->next = jth;\n            return head;\n        }\n    }\n\n    node *bubble_sort_LinkedList_itr(node *head)\n    {\n        if (head == NULL || head->next == NULL)\n            return head;\n\n        node *trav = head;\n        bool flag = true;\n        while (1)\n        {\n            flag = true;\n            trav = head;\n\n            while (trav->next != NULL) // no need to check if trav is the last or if we have reached the last node\n            // nether trav nor trav->next is null intially as checker by the worst case condition\n            {\n                if (trav->data > trav->next->data) // trav always means the least of the two values of the pair window\n                {\n                    flag = false;\n                    head = swapnext(head, trav); // trav goes automatically to the next node\n                }\n                else\n                    trav = trav->next; // trav has to be taken to the next node\n            }\n            if (flag == true)\n                return head;\n        }\n        // This is not optimized, i.e till n-i. As we cannot keep record of that\n    }\n\n</details>\n\n---\n\n</details>\n",
      "html": "<h1 id=\"assignments\">Assignments <a class=\"heading-anchor-permalink\" href=\"#assignments\">#</a></h1>\n<details> <summary><strong> 1. Find a node in LL (recursive) </strong></summary>\n<h1 id=\"1.-find-a-node-in-ll-(recursive)\">1. Find a node in LL (recursive) <a class=\"heading-anchor-permalink\" href=\"#1.-find-a-node-in-ll-(recursive)\">#</a></h1>\n<pre><code>Given a linked list and an integer n you need to find and return index where n is present in the LL. Do this iteratively.\n\nReturn -1 if n is not present in the LL.\n\nIndexing of nodes starts from 0.\n</code></pre>\n<p><strong>Input format</strong></p>\n<pre><code>Line 1 : Linked list elements (separated by space and terminated by -1)\n\nLine 2 : Integer n\n</code></pre>\n<p><strong>Output format</strong></p>\n<pre><code>Index\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>3 4 5 2 6 1 9 -1\n5\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>2\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>3 4 5 2 6 1 9 -1\n6\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>4\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>int indexOfNRecursive(Node *head, int n)\n{\n    if (head == NULL)\n        return -1; // base case 1\n\n    if (head-&gt;data == n)\n        return 0; // base case 2\n\n    //recursive step\n    int result = indexOfNRecursive(head-&gt;next, n);\n\n    //small calc\n    if (result == -1)\n        return -1;\n    return 1 + result;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 2. Even after Odd LinkedList </strong></summary>\n<h1 id=\"2.-even-after-odd-linkedlist\">2. Even after Odd LinkedList <a class=\"heading-anchor-permalink\" href=\"#2.-even-after-odd-linkedlist\">#</a></h1>\n<pre><code>Arrange elements in a given Linked List such that, all even numbers are placed after odd numbers. Respective order of elements should remain same.\n\nNote: Input and Output has already managed for you. You don't need to print the elements, instead return the head of updated LL.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Linked list elements (separated by space and terminated by -1)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Print the elements of updated Linked list.\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>1 4 5 2 -1\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>1 5 4 2\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>1 11 3 6 8 0 9 -1\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>1 11 3 9 6 8 0\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// Following is the node structure\n/**************\nclass node{\npublic:\n    int data;\n    node * next;\n    node(int data){\n        this-&gt;data=data;\n        this-&gt;next=NULL;\n    }\n};\n***************/\n\nnode *arrange_LinkedList(node *head)\n{\n    if (head == NULL || head-&gt;next == NULL)\n        return head; // uni and empty taken care of\n\n    // initializing the oddhead and the evenhead is a special case\n\n    int k = head-&gt;data % 2;\n\n    node *trav = head;\n    while (trav-&gt;next != NULL &amp;&amp; trav-&gt;next-&gt;data % 2 == k)\n        trav = trav-&gt;next; // trav is the head before the mismatch\n\n    if (trav-&gt;next == NULL)\n        return head; // the LL is homogeneous\n\n    // storing heads of the odd and even lists\n    node *oddhead = k == 1 ? head : trav-&gt;next; // trav-&gt;next is the mismatch\n    node *evenhead = k == 0 ? head : trav-&gt;next;\n\n    // storing lastnodes of the odd and even lists, as any new nodes will be added here\n    node *lastnode_odd = trav, *lastnode_even = trav; // initializing as trav as one will retain value\n\n    // the other's last node\n    if (k == 0)\n        lastnode_odd = trav-&gt;next; // if k == 0, trav is correct as head of lastnode_even. Hence odd should change.\n    else\n        lastnode_even = trav-&gt;next;\n\n    // we are at the first head of the remaining list now\n    trav = trav-&gt;next-&gt;next;\n\n    // ending the odd and even LLs\n    lastnode_odd-&gt;next = NULL;\n    lastnode_even-&gt;next = NULL;\n\n    // attach nodes to the LL's as per nature\n    while (trav != NULL)\n    {\n        if (trav-&gt;data % 2 == 0)\n        {\n            lastnode_even-&gt;next = trav; // connected the new node\n            lastnode_even = trav;       // updated the last node\n        }\n        else\n        {\n            lastnode_odd-&gt;next = trav;\n            lastnode_odd = trav;\n        }\n        trav = trav-&gt;next;\n    }\n    //doubt, don't worry about ending the LL's at each iteration. Because they were seperated just before the while loop started.\n    // Hence lastnodes take care of the end\n\n    lastnode_even-&gt;next = NULL;\n    lastnode_odd-&gt;next = evenhead;\n\n    return oddhead;\n}\n\n// Insights:\n// 1. By taking a 2 step stance, our algorithm is adaptive. This wouldn't have been the case for the mixed approach, where every node is worked upon for even being suspected.\n// 2. We saved a lot of comparisons(i.e oddhead==NULL || evenhead==NULL) because we made starting the first node a special case. This is what helped no. 1\n// 3. Readable and understandable\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 3. Delete every N nodes </strong></summary>\n<h1 id=\"3.-delete-every-n-nodes\">3. Delete every N nodes <a class=\"heading-anchor-permalink\" href=\"#3.-delete-every-n-nodes\">#</a></h1>\n<pre><code>Given a linked list and two integers M and N. Traverse the linked list such that you retain M nodes then delete next N nodes, continue the same until end of the linked list. That is, in the given linked list you need to delete N nodes after every M nodes.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Linked list elements (separated by space and terminated by -1)\n\nLine 2 : M\n\nLine 3 : N\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Updated LL elements (separated by space)\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>1 2 3 4 5 6 7 8 -1\n2\n2\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>1 2 5 6\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>1 2 3 4 5 6 7 8 -1\n2\n3\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>1 2 6 7\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>node *skipMdeleteN(node *head, int m, int n)\n{\n    // 4 cases are possible for prelim\n    if (m == 0) // retain none\n        return NULL;\n    if (n == 0) // delete none, retain some - retain all\n        return head;\n\n    // as skipping is first hence head is never changed, i.e deletion at head node is not carrired out.\n    node *trav = head, *dtrav = head;\n    int i = 0;\n\n    while (trav != NULL)\n    {\n        for (i = 0; trav != NULL &amp;&amp; i &lt; m - 1; i++) // travelling to the m-1th node\n            trav = trav-&gt;next;\n\n        if (trav == NULL || trav-&gt;next == NULL) // overrun check\n            return head;                        // i.e retain less than 'm' at last Okay\n\n        dtrav = trav;   // deleter traverses tothe position where we need to go if n are deleted. trav is the last node\n\n        for (i = 0; dtrav != NULL &amp;&amp; i &lt; n; i++)    // go\n            dtrav = dtrav-&gt;next;\n\n        if (dtrav == NULL) // safe deletion and exit, i.e delete last elements &lt; n\n        {\n            trav-&gt;next = dtrav;\n            return head;\n        }\n\n        trav-&gt;next = dtrav-&gt;next; // lastnode_retained-&gt; lastnode_deleted-&gt;next;\n        trav = trav-&gt;next;        // move the iterator like for the first iteration\n    }\n    return head;\n}\n/*\nInsights: Function names are very important, skipping and retaining are not the same when it comes to empty list.\n    Retain none: Okay return empty LL;\n    Skip none: Return LL as it is.\n*/\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 4. Swap two Node of LL </strong></summary>\n<h1 id=\"4.-swap-two-node-of-ll\">4. Swap two Node of LL <a class=\"heading-anchor-permalink\" href=\"#4.-swap-two-node-of-ll\">#</a></h1>\n<pre><code>Given a linked list, i &amp; j, swap the nodes that are present at i &amp; j position in the LL. You need to swap the entire nodes, not just the data.\n\nIndexing starts from 0. You don't need to print the elements, just swap and return the head of updated LL.\n\nAssume i &amp; j given will be within limits. And i can be greater than j also.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Linked list elements (separated by space and terminated by -1)\n\nLine 2 : i and j (separated by space)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Linked List elements in reverse order (separated by space)\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>3 4 5 2 6 1 9 -1\n3 4\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>3 4 5 6 2 1 9\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>3 4 5 2 6 1 9 -1\n2 4\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>3 4 6 2 5 1 9\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// Approach 1\nnode *swap_nodes(node *head, int i, int j)\n{\n    // base case\n    if (head == NULL || head-&gt;next == NULL || i == j || i &lt; 0 || j &lt; 0)\n        return head;\n\n    // we've got atleast two nodes now.\n    // case 1: 0 and something else\n    // case 2: non zero and non zero\n    if (i &gt; j)\n    {\n        int temp = i;\n        i = j;\n        j = temp;\n    }\n\n    // i is less than j.\n\n    if (i == 0)\n    {\n        // add a buffer\n        node *newnode = new node(0);\n        newnode-&gt;next = head;\n        node *ret = swap_nodes(newnode, 1, j + 1); // head is now the second\n        ret = ret-&gt;next;\n        delete newnode; // deallocated one node\n        return ret;\n    } // 1 step recursion\n\n    node *iprev = head, *jprev = head;\n\n    int a = 0; //same counter for both the traversals\n    for (; a &lt; i - 1 &amp;&amp; iprev != NULL; a++, iprev = iprev-&gt;next, jprev = iprev)\n        ;   // iprev at i-1th index\n            // check overrun\n    if (iprev == NULL || iprev-&gt;next == NULL)\n        return head;\n    for (; a &lt; j - 1 &amp;&amp; jprev != NULL; a++, jprev = jprev-&gt;next)\n        ; // jprev at j-1 th index\n\n    // check overrun\n    if (jprev == NULL || jprev-&gt;next == NULL)\n        return head;\n\n    // swapping procedure, handles cases of\n    node *ith = iprev-&gt;next;\n    node *jth = jprev-&gt;next;\n\n    node *inext = iprev-&gt;next-&gt;next;\n    node *jnext = jprev-&gt;next-&gt;next;\n\n    iprev-&gt;next = jth;\n    jprev-&gt;next = ith;\n    ith-&gt;next = jnext;\n    jth-&gt;next = inext;\n    if (jprev == ith) //contiguos element\n    {\n        jth-&gt;next = ith;\n    }\n    return head;\n    // duplicating code: finding the j-1 th term, swapping is the same, why not add a buffer and call the function again. Just call recursion\n}\n\n\n// Approach 2\n\nnode *swap_nodes(node *head, int i, int j)\n{\n    // base case\n    if (head == NULL || head-&gt;next == NULL || i == j || i &lt; 0 || j &lt; 0)\n        return head;\n\n    // case 1: i = 0 and contiguous\n    // case 2: i = 0 and non-contiguous\n    // case 3: i = not zero and contiguous\n    // case 4: i = not zero and non contiguos\n\n    if (i &gt; j)\n    {\n        int temp = i;\n        i = j;\n        j = temp;\n    }\n\n    // i is &lt; j now.\n    if (i == 0)\n    {\n        // contiguos\n        if (j == 1)\n        {\n            node *p = head-&gt;next;\n            head-&gt;next = p-&gt;next;\n            p-&gt;next = head;\n            return p;\n        }\n        else // zero and non contiguos\n        {\n            node *jprev = head;\n            for (int a = 0; a &lt; j - 1 &amp;&amp; jprev != NULL; a++)\n                jprev = jprev-&gt;next;\n\n            if (jprev == NULL || jprev-&gt;next == NULL) //overrun\n                return head;\n\n            node *jth = jprev-&gt;next;\n            node *headn = head-&gt;next;\n\n            jprev-&gt;next = head;\n            head-&gt;next = jth-&gt;next;\n            jth-&gt;next = headn;\n            return jth; // it's the head now\n        }\n    }\n    else\n    {\n        if (j == i + 1) // contiguous\n        {\n            // go to the ith node\n            node *iprev = head;\n            for (int a = 0; a &lt; i - 1 &amp;&amp; iprev != NULL; a++)\n                iprev = iprev-&gt;next;\n\n            if (iprev == NULL || iprev-&gt;next == NULL || iprev-&gt;next-&gt;next == NULL) // overrun check\n                return head;\n\n            node *ith = iprev-&gt;next;\n            node *jth = ith-&gt;next;\n            node *jnext = jth-&gt;next;\n\n            ith-&gt;next = jnext;\n            jth-&gt;next = ith;\n            iprev-&gt;next = jth;\n            return head;\n        }\n        else\n        {\n            node *iprev = head;\n            int a = 0;\n\n            for (a = 0; a &lt; i - 1 &amp;&amp; iprev != NULL; a++)\n                iprev = iprev-&gt;next;\n\n            if (iprev == NULL || iprev-&gt;next == NULL) //overrun check\n                return head;\n\n            node *jprev = iprev;\n\n            for (; a &lt; j - 1 &amp;&amp; jprev != NULL; a++)\n                jprev = jprev-&gt;next;\n\n            if (jprev == NULL || jprev-&gt;next == NULL) // oevrrun check\n                return head;\n\n            node *ith = iprev-&gt;next;\n            node *jth = jprev-&gt;next;\n            node *inext = ith-&gt;next;\n            node *jnext = jth-&gt;next;\n\n            iprev-&gt;next = jth;\n            jprev-&gt;next = ith;\n            ith-&gt;next = jnext;\n            jth-&gt;next = inext;\n\n            return head;\n        }\n    }\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 5. Palindrome LinkedList </strong></summary>\n<h1 id=\"5.-kreverse\">5. kReverse <a class=\"heading-anchor-permalink\" href=\"#5.-kreverse\">#</a></h1>\n<pre><code>Implement kReverse( int k ) in a linked list i.e. you need to reverse first K elements then reverse next k elements and join the linked list and so on.\n\nIndexing starts from 0. If less than k elements left in the last, you need to reverse them as well. If k is greater than length of LL, reverse the complete LL.\n\nYou don't need to print the elements, just return the head of updated LL.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Linked list elements (separated by space and terminated by -1)\n\nLine 2 : k\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Linked List elements in reverse order (separated by space)\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>1 2 3 4 5 6 7 8 9 10 -1\n4\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>4 3 2 1 8 7 6 5 10 9\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>1 2 3 4 5 -1\n2\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>2 1 4 3 5\n</code></pre>\n<p><strong>Sample Input 3</strong></p>\n<pre><code>1 2 3 4 5 6 7 -1\n3\n</code></pre>\n<p><strong>Sample Output 3</strong></p>\n<pre><code>3 2 1 6 5 4 7\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>node *kReverse(node *head, int n)\n{\n    // node* last = reverse(head, n);\n    if (head == NULL)\n        return head;\n    node *ret = NULL;\n    node *lastnode_prev = NULL, *lastnode_curr = NULL;\n    node *r = NULL, *q = NULL, *p = head;\n    while (p != NULL)\n    {\n        r = NULL, q = NULL;\n        lastnode_curr = p; // last node\n        for (int i = 0; i &lt; n &amp;&amp; p != NULL; i++)\n        {\n            q = p;\n            p = p-&gt;next;\n            q-&gt;next = r;\n            r = q;\n        } // we've got the LL with head at r\n\n        if (lastnode_prev == 0)\n        {\n            ret = r;\n            lastnode_prev = lastnode_curr;\n        }\n        lastnode_prev-&gt;next = r;\n        lastnode_prev = lastnode_curr;\n    }\n    return ret;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 6. Bubble Sort (Iterative) LinkedList </strong></summary>\n<h1 id=\"6.-bubble-sort-(iterative)-linkedlist\">6. Bubble Sort (Iterative) LinkedList <a class=\"heading-anchor-permalink\" href=\"#6.-bubble-sort-(iterative)-linkedlist\">#</a></h1>\n<pre><code>Sort a given linked list using Bubble Sort (iteratively). While sorting, you need to swap the entire nodes, not just the data.\n\nYou don't need to print the elements, just sort the elements and return the head of updated LL.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Linked list elements (separated by space and terminated by -1)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Updated LL elements (separated by space)\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>1 4 5 2 -1\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>1 2 4 5\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>node *swapnext(node *head, node *trav) // swaps trav and trav-&gt;next\n{\n    if (head == 0 || head-&gt;next == NULL)\n        return head;\n\n    if (head == trav)\n    {\n        node *p = head-&gt;next;\n        head-&gt;next = p-&gt;next;\n        p-&gt;next = head;\n        return p;\n    }\n    else\n    {\n        node *iprev = head;\n        while (iprev-&gt;next != trav) // iprev is not null as head is not NULL\n            iprev = iprev-&gt;next;\n\n        if (iprev == NULL || iprev-&gt;next == NULL || iprev-&gt;next-&gt;next == NULL) // overrun check\n            return head;\n\n        node *ith = iprev-&gt;next;\n        node *jth = ith-&gt;next;\n        node *jnext = jth-&gt;next;\n\n        ith-&gt;next = jnext;\n        jth-&gt;next = ith;\n        iprev-&gt;next = jth;\n        return head;\n    }\n}\n\nnode *bubble_sort_LinkedList_itr(node *head)\n{\n    if (head == NULL || head-&gt;next == NULL)\n        return head;\n\n    node *trav = head;\n    bool flag = true;\n    while (1)\n    {\n        flag = true;\n        trav = head;\n\n        while (trav-&gt;next != NULL) // no need to check if trav is the last or if we have reached the last node\n        // nether trav nor trav-&gt;next is null intially as checker by the worst case condition\n        {\n            if (trav-&gt;data &gt; trav-&gt;next-&gt;data) // trav always means the least of the two values of the pair window\n            {\n                flag = false;\n                head = swapnext(head, trav); // trav goes automatically to the next node\n            }\n            else\n                trav = trav-&gt;next; // trav has to be taken to the next node\n        }\n        if (flag == true)\n            return head;\n    }\n    // This is not optimized, i.e till n-i. As we cannot keep record of that\n}\n</code></pre>\n</details>\n<hr>\n</details>\n",
      "id": 177
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/0_index.html",
      "content": "# 3. Stack\nCreated Wednesday 22 January 2020\n\n[Codes](./3._Stack/Codes)\n[Exercises.](./3._Stack/Quizzes&Exercises/Exercises.md)[md](./3._Stack/Quizzes&Exercises/Exercises.md)\n[CodingExercises.md](./3._Stack/Quizzes&Exercises/CodingExercises.md)\n[Assignments.md](./3._Stack/zAssignments/Assignments.md)\n\n",
      "html": "<h1 id=\"3.-stack\">3. Stack <a class=\"heading-anchor-permalink\" href=\"#3.-stack\">#</a></h1>\n<p>Created Wednesday 22 January 2020</p>\n<p><a href=\"./3._Stack/Codes\">Codes</a>\n<a href=\"./3._Stack/Quizzes&amp;Exercises/Exercises.html\">Exercises.</a><a href=\"./3._Stack/Quizzes&amp;Exercises/Exercises.html\">md</a>\n<a href=\"./3._Stack/Quizzes&amp;Exercises/CodingExercises.html\">CodingExercises.md</a>\n<a href=\"./3._Stack/zAssignments/Assignments.html\">Assignments.md</a></p>\n",
      "id": 178
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/1._Introduction_to_Stacks.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/1._Introduction_to_Stacks.html",
      "content": "# 1. Introduction to Stacks\nCreated Wednesday 22 January 2020\n\nEvery DS has its pros and cons:\n\n1. Variables can store and acess elements, but not more than one.\n2. Arrays store many variables all at once, but cannot be resized due. This is not applicable to vectors.\n3. Linked list solves the issue of no. of elements, i.e no space is wasted. Non contiguity is allowed. But we cannot go back and forth, in a singly linked list.\n\nWe can compare access, insertion and removal for all the possible cases. \n\nStack is an Abstract Data Type. i.e LIFO(from the elements POV) owill be followed for any operations. Both LL and Arrays can be used here.\n\n* As it is an ADT, the internal physical DS's arrays and LLs are not to worried about.\n* Visualize as a vertical stack.\n* FIFO means that entry and exit points are same. And that they change with each deletion and insertion.\n\n\n**Working**\n\n* We will block direct access by making the DS's address as private.\n* Only the interface functions are available to the user\n\n\n**Jargon(Stack interface)**:\n\n1. push - insertion into the stack\n2. pop - deletes an(the element at top) element and returns the value.\n3. top() - Access the top most element. Returns a copy of the topmost element. No changes made in the stack.  \n4. size() - returns number of elements in the stack.\n5. isEmpty() - returns boolean true if stack is empty, else false.\n\n\n\n* Recursion requires stack ADT. The elements are the activation records.\n\n\n",
      "html": "<h1 id=\"1.-introduction-to-stacks\">1. Introduction to Stacks <a class=\"heading-anchor-permalink\" href=\"#1.-introduction-to-stacks\">#</a></h1>\n<p>Created Wednesday 22 January 2020</p>\n<p>Every DS has its pros and cons:</p>\n<ol>\n<li>Variables can store and acess elements, but not more than one.</li>\n<li>Arrays store many variables all at once, but cannot be resized due. This is not applicable to vectors.</li>\n<li>Linked list solves the issue of no. of elements, i.e no space is wasted. Non contiguity is allowed. But we cannot go back and forth, in a singly linked list.</li>\n</ol>\n<p>We can compare access, insertion and removal for all the possible cases.</p>\n<p>Stack is an Abstract Data Type. i.e LIFO(from the elements POV) owill be followed for any operations. Both LL and Arrays can be used here.</p>\n<ul>\n<li>As it is an ADT, the internal physical DS’s arrays and LLs are not to worried about.</li>\n<li>Visualize as a vertical stack.</li>\n<li>FIFO means that entry and exit points are same. And that they change with each deletion and insertion.</li>\n</ul>\n<p><strong>Working</strong></p>\n<ul>\n<li>We will block direct access by making the DS’s address as private.</li>\n<li>Only the interface functions are available to the user</li>\n</ul>\n<p><strong>Jargon(Stack interface)</strong>:</p>\n<ol>\n<li>push - insertion into the stack</li>\n<li>pop - deletes an(the element at top) element and returns the value.</li>\n<li>top() - Access the top most element. Returns a copy of the topmost element. No changes made in the stack.</li>\n<li>size() - returns number of elements in the stack.</li>\n<li>isEmpty() - returns boolean true if stack is empty, else false.</li>\n</ol>\n<ul>\n<li>Recursion requires stack ADT. The elements are the activation records.</li>\n</ul>\n",
      "id": 179
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/2._Stack_using_arrays/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/2._Stack_using_arrays/0_index.html",
      "content": "# 2. Stack using arrays\nCreated Wednesday 22 January 2020\n\nWe want to create a stack using a static array, whose capacity will be set by the user.\n\nWe are controlling the ADT by using a class. Where only the interface functions are public, everything else is private.\n\nWorking:\nOur head is the lastIndex, as insertion and removal is O(1).\nWe store this top(i.e lastIndex).\n[stackUsingArray.cpp](2._Stack_using_arrays/stackUsingArray.cpp)\n[stackMain.cpp](2._Stack_using_arrays/stackMain.cpp)\n\n",
      "html": "<h1 id=\"2.-stack-using-arrays\">2. Stack using arrays <a class=\"heading-anchor-permalink\" href=\"#2.-stack-using-arrays\">#</a></h1>\n<p>Created Wednesday 22 January 2020</p>\n<p>We want to create a stack using a static array, whose capacity will be set by the user.</p>\n<p>We are controlling the ADT by using a class. Where only the interface functions are public, everything else is private.</p>\n<p>Working:\nOur head is the lastIndex, as insertion and removal is O(1).\nWe store this top(i.e lastIndex).\n<a href=\"2._Stack_using_arrays/stackUsingArray.cpp\">stackUsingArray.cpp</a>\n<a href=\"2._Stack_using_arrays/stackMain.cpp\">stackMain.cpp</a></p>\n",
      "id": 180
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/3._Stack_using_dynamic_arrays/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/3._Stack_using_dynamic_arrays/0_index.html",
      "content": "# 3. Stack using dynamic arrays\nCreated Wednesday 22 January 2020\n\n\n* User does not have to specify the initial size.\n* changes:\n\t1. Parameterised constructor is not required.\n\n2.push has to be changed to resize(by doubling the size) if capacity is full.\n\n* **No changes** are required in copy constructor and the copy assignment operator. \n\n\n[stackUsingDynamicArray.cpp](3._Stack_using_dynamic_arrays/stackUsingDynamicArray.cpp)\n[stackMain.cpp](3._Stack_using_dynamic_arrays/stackMain.cpp)\n\n",
      "html": "<h1 id=\"3.-stack-using-dynamic-arrays\">3. Stack using dynamic arrays <a class=\"heading-anchor-permalink\" href=\"#3.-stack-using-dynamic-arrays\">#</a></h1>\n<p>Created Wednesday 22 January 2020</p>\n<ul>\n<li>User does not have to specify the initial size.</li>\n<li>changes:\n<ol>\n<li>Parameterised constructor is not required.</li>\n</ol>\n</li>\n</ul>\n<p>2.push has to be changed to resize(by doubling the size) if capacity is full.</p>\n<ul>\n<li><strong>No changes</strong> are required in copy constructor and the copy assignment operator.</li>\n</ul>\n<p><a href=\"3._Stack_using_dynamic_arrays/stackUsingDynamicArray.cpp\">stackUsingDynamicArray.cpp</a>\n<a href=\"3._Stack_using_dynamic_arrays/stackMain.cpp\">stackMain.cpp</a></p>\n",
      "id": 181
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/4._Templates/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/4._Templates/0_index.html",
      "content": "# 4. Templates\n\nCreated Wednesday 22 January 2020\n\n- These are used to help us when data types are the only thing that change in a class's private members or function's parameters.\n- typename just replaces T everywhere, nothing more nothing less.\n\nsyntax:\n\n- For template definition:\n\ntemplate <_typename_ type*variable1, \\_typename* type_variable2>\nfunction or class.\n\n- For declaring templated class object:\n\n_classname _<data_type1, data_type2...> objectname;\nFor using objects, no further template spec is required.\n\n- For using template functions:\n\nfunction_name <data_type1, data_type2> (arg1, arg2);\n\nThe following things are allowed:\n\n1. The param variable's data type may be anything - user defined classes too.\n2. Using default values for the type_variable, i.e just write typename = data_type.\n3. **All rules of default functions hold**. **Except** that default type_variables on the left can be used to initialize the the typevariables on the left. **This is allowed as we are not dealing with values, but only data types.**\n4. We can omit the places where the default type has been given. for single typename, omit any mention of <>if you don't have to.\n5. In declaration of objects, cascading is allowed to any level we wish.\n\ne.g Pair <Pair<int, int>, char>\nNote that\n\n1. Pair<int, int> is a valid data type.\n2. We have to call functions in a cascading fashion too, to get the innermost levels.\n3. This is used if Pair was given and we wanted a triplet.\n\n4. We can write return types also using the<> notation.\n5. About templates, when we write an object inside a templated class, it is automatically assume to be of type T, unless stated otherwise.\n\n![](/assets/4._Templates-image-1.png)![](/assets/4._Templates-image-2.png)\nFirst one is implicit, while the second one is explicit.\n\nNote:\n\n1. We need to write the template declaration over every class and function.\n\n---\n\n[templateDemo.cpp](4._Templates/templateDemo.cpp)\n",
      "html": "<h1 id=\"4.-templates\">4. Templates <a class=\"heading-anchor-permalink\" href=\"#4.-templates\">#</a></h1>\n<p>Created Wednesday 22 January 2020</p>\n<ul>\n<li>These are used to help us when data types are the only thing that change in a class’s private members or function’s parameters.</li>\n<li>typename just replaces T everywhere, nothing more nothing less.</li>\n</ul>\n<p>syntax:</p>\n<ul>\n<li>For template definition:</li>\n</ul>\n<p>template &lt;<em>typename</em> type<em>variable1, _typename</em> type_variable2&gt;\nfunction or class.</p>\n<ul>\n<li>For declaring templated class object:</li>\n</ul>\n<p>_classname _&lt;data_type1, data_type2…&gt; objectname;\nFor using objects, no further template spec is required.</p>\n<ul>\n<li>For using template functions:</li>\n</ul>\n<p>function_name &lt;data_type1, data_type2&gt; (arg1, arg2);</p>\n<p>The following things are allowed:</p>\n<ol>\n<li>The param variable’s data type may be anything - user defined classes too.</li>\n<li>Using default values for the type_variable, i.e just write typename = data_type.</li>\n<li><strong>All rules of default functions hold</strong>. <strong>Except</strong> that default type_variables on the left can be used to initialize the the typevariables on the left. <strong>This is allowed as we are not dealing with values, but only data types.</strong></li>\n<li>We can omit the places where the default type has been given. for single typename, omit any mention of &lt;&gt;if you don’t have to.</li>\n<li>In declaration of objects, cascading is allowed to any level we wish.</li>\n</ol>\n<p>e.g Pair &lt;Pair&lt;int, int&gt;, char&gt;\nNote that</p>\n<ol>\n<li>\n<p>Pair&lt;int, int&gt; is a valid data type.</p>\n</li>\n<li>\n<p>We have to call functions in a cascading fashion too, to get the innermost levels.</p>\n</li>\n<li>\n<p>This is used if Pair was given and we wanted a triplet.</p>\n</li>\n<li>\n<p>We can write return types also using the&lt;&gt; notation.</p>\n</li>\n<li>\n<p>About templates, when we write an object inside a templated class, it is automatically assume to be of type T, unless stated otherwise.</p>\n</li>\n</ol>\n<p><img src=\"/assets/4._Templates-image-1.png\" alt=\"\"><img src=\"/assets/4._Templates-image-2.png\" alt=\"\">\nFirst one is implicit, while the second one is explicit.</p>\n<p>Note:</p>\n<ol>\n<li>We need to write the template declaration over every class and function.</li>\n</ol>\n<hr>\n<p><a href=\"4._Templates/templateDemo.cpp\">templateDemo.cpp</a></p>\n",
      "id": 182
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/5._Stacks_with_templates/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/5._Stacks_with_templates/0_index.html",
      "content": "# 5. Stacks with templates\nCreated Wednesday 22 January 2020\n\nChanges required in Stack class:\n\n1. int* data to T* data\n2. In push\n3. In pop, replace INT_MIN, change it to 0 for the time being.\n4. In top, replace INT_MIN by zero, coz it is universal.\n\nNo changes in:\n\n1. nextIndex and capacity are always integers.\n\n\n**From now on, we are well equipped with templates as well. We will use it as we want.**\nThis is important as Data structures work for any data type, i.e they are data type independent. So templates are very important. This encourages **reuse **over **duplication!!** \n\n",
      "html": "<h1 id=\"5.-stacks-with-templates\">5. Stacks with templates <a class=\"heading-anchor-permalink\" href=\"#5.-stacks-with-templates\">#</a></h1>\n<p>Created Wednesday 22 January 2020</p>\n<p>Changes required in Stack class:</p>\n<ol>\n<li>int* data to T* data</li>\n<li>In push</li>\n<li>In pop, replace INT_MIN, change it to 0 for the time being.</li>\n<li>In top, replace INT_MIN by zero, coz it is universal.</li>\n</ol>\n<p>No changes in:</p>\n<ol>\n<li>nextIndex and capacity are always integers.</li>\n</ol>\n<p><strong>From now on, we are well equipped with templates as well. We will use it as we want.</strong>\nThis is important as Data structures work for any data type, i.e they are data type independent. So templates are very important. This encourages **reuse **over <strong>duplication!!</strong></p>\n",
      "id": 183
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/6._Stack_using_LL/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/6._Stack_using_LL/0_index.html",
      "content": "# 6. Stack using LL\nCreated Wednesday 22 January 2020\n\n\n* We should make the stack ADT using LL such that the user shouldn't  be able to guess(i.e it is very efficient)  \n\nNote: We did not need to know inheritance, that is only for attributes. You don't need it to use it for working with many classes together.\n\nWorking:\n\n1. We should make the top as head, as this will ensure O(1) push() and pop(). \n2. Doing otherwise is O(n), as we have to take care of tail which needs to be updated, for which a traversal is required when removing. i.e if we add/delete on the tail element, insertion is O(1) but deletion is O(n).\n\n\n",
      "html": "<h1 id=\"6.-stack-using-ll\">6. Stack using LL <a class=\"heading-anchor-permalink\" href=\"#6.-stack-using-ll\">#</a></h1>\n<p>Created Wednesday 22 January 2020</p>\n<ul>\n<li>We should make the stack ADT using LL such that the user shouldn’t  be able to guess(i.e it is very efficient)</li>\n</ul>\n<p>Note: We did not need to know inheritance, that is only for attributes. You don’t need it to use it for working with many classes together.</p>\n<p>Working:</p>\n<ol>\n<li>We should make the top as head, as this will ensure O(1) push() and pop().</li>\n<li>Doing otherwise is O(n), as we have to take care of tail which needs to be updated, for which a traversal is required when removing. i.e if we add/delete on the tail element, insertion is O(1) but deletion is O(n).</li>\n</ol>\n",
      "id": 184
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/7._Inbuilt_stack_STL/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/3._Stack/7._Inbuilt_stack_STL/0_index.html",
      "content": "# 7. Inbuilt stack STL\nCreated Wednesday 22 January 2020\n\n[stack_STL.cpp](7._Inbuilt_stack_STL/stack_STL.cpp)\n\n\n* Stacks and has are already been implemented in C++ STL. **<stack>**\n* We will learn to use it.\n\n\n1. It's better that we use **.h** now. We do this so as to avoid making main() inside the .h, as this is not allowed.\n2. If we write \"something\".h, the header is in the directory of the main file. For anywhere else, specify the complete address or use . and .. if that does the job.\n3. Inbuilt headers are included using <>\n\n\nFor stacks header is: <stack> which is a template type.\n\n\n* What we have implemented is more or less the same. The interface is:\n\t0. stack is the name of the class Stack.\n\t1. push() is the same , i.e void push(T element);\n\t2. pop() is **different**, it is a void.\n\t3. top() is the same. returns the element on the top.\n\t4. empty() is the **changed** name in STL, same as our implementation.\n\t5. size() is the same.\n\nNote: There's no need for any other thing execpt that told here.\n\n\n",
      "html": "<h1 id=\"7.-inbuilt-stack-stl\">7. Inbuilt stack STL <a class=\"heading-anchor-permalink\" href=\"#7.-inbuilt-stack-stl\">#</a></h1>\n<p>Created Wednesday 22 January 2020</p>\n<p><a href=\"7._Inbuilt_stack_STL/stack_STL.cpp\">stack_STL.cpp</a></p>\n<ul>\n<li>Stacks and has are already been implemented in C++ STL. <strong><stack></strong></li>\n<li>We will learn to use it.</li>\n</ul>\n<ol>\n<li>It’s better that we use <strong>.h</strong> now. We do this so as to avoid making main() inside the .h, as this is not allowed.</li>\n<li>If we write “something”.h, the header is in the directory of the main file. For anywhere else, specify the complete address or use . and … if that does the job.</li>\n<li>Inbuilt headers are included using &lt;&gt;</li>\n</ol>\n<p>For stacks header is: <stack> which is a template type.</p>\n<ul>\n<li>What we have implemented is more or less the same. The interface is:\n<ol start=\"0\">\n<li>stack is the name of the class Stack.</li>\n<li>push() is the same , i.e void push(T element);</li>\n<li>pop() is <strong>different</strong>, it is a void.</li>\n<li>top() is the same. returns the element on the top.</li>\n<li>empty() is the <strong>changed</strong> name in STL, same as our implementation.</li>\n<li>size() is the same.</li>\n</ol>\n</li>\n</ul>\n<p>Note: There’s no need for any other thing execpt that told here.</p>\n",
      "id": 185
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/0_index.html",
      "content": "# 4. Queue\nCreated Wednesday 22 January 2020\n\n[Codes](./4._Queue/Codes)\n[Exercises.md](./4._Queue/Quizzes&Exercises/Exercises.md)\n[CodingExercises.md](./4._Queue/Quizzes&Exercises/CodingExercises.md)\n[Assignments.md](./4._Queue/zAssignments/Assignments.md)\n\n",
      "html": "<h1 id=\"4.-queue\">4. Queue <a class=\"heading-anchor-permalink\" href=\"#4.-queue\">#</a></h1>\n<p>Created Wednesday 22 January 2020</p>\n<p><a href=\"./4._Queue/Codes\">Codes</a>\n<a href=\"./4._Queue/Quizzes&amp;Exercises/Exercises.html\">Exercises.md</a>\n<a href=\"./4._Queue/Quizzes&amp;Exercises/CodingExercises.html\">CodingExercises.md</a>\n<a href=\"./4._Queue/zAssignments/Assignments.html\">Assignments.md</a></p>\n",
      "id": 186
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/1._Queue_Introduction/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/1._Queue_Introduction/0_index.html",
      "content": "# 1. Queue Introduction\nCreated Wednesday 22 January 2020\n\n\n* Queues are a fundamental ADT.\n* It follows FIFO.\n* A queue two ends, entry and exit.\n* The interface is:\n\t1. enqueue(data) - inserts the data at the entry. Returns nothing.\n\t2. front() - returns the element near exit. It is a void function.\n\t3. dequeue() - deletes and returns(in our version) the element at exit.\n\t4. isEmpty() returns true for empty queue, else false.\n\t5. size() returns the size.\n\n\nIn case of arrays, the problem of space wastage can be solved by the following methods:\n\n1. Shift all elements to the left. Very very time consuming.\n2. Use a circular system.\n\n\nWe use only 2 as 1 is very inefficient.\n\n",
      "html": "<h1 id=\"1.-queue-introduction\">1. Queue Introduction <a class=\"heading-anchor-permalink\" href=\"#1.-queue-introduction\">#</a></h1>\n<p>Created Wednesday 22 January 2020</p>\n<ul>\n<li>Queues are a fundamental ADT.</li>\n<li>It follows FIFO.</li>\n<li>A queue two ends, entry and exit.</li>\n<li>The interface is:\n<ol>\n<li>enqueue(data) - inserts the data at the entry. Returns nothing.</li>\n<li>front() - returns the element near exit. It is a void function.</li>\n<li>dequeue() - deletes and returns(in our version) the element at exit.</li>\n<li>isEmpty() returns true for empty queue, else false.</li>\n<li>size() returns the size.</li>\n</ol>\n</li>\n</ul>\n<p>In case of arrays, the problem of space wastage can be solved by the following methods:</p>\n<ol>\n<li>Shift all elements to the left. Very very time consuming.</li>\n<li>Use a circular system.</li>\n</ol>\n<p>We use only 2 as 1 is very inefficient.</p>\n",
      "id": 187
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/2._Queue_using_Array_-_Code/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/2._Queue_using_Array_-_Code/0_index.html",
      "content": "# 2. Queue using Array - Code\nCreated Thursday 23 January 2020\n\n[queueMain.cpp](2._Queue_using_Array_-_Code/queueMain.cpp)\n[queueUsingArray.h](2._Queue_using_Array_-_Code/queueUsingArray.h)\n\n\n1. enqueue(T idata) function:\n\nif(size==0) // for the start\n{\nsize = 1;\nfirstIndex = 0;\nnextIndex = 1;\ndata[firstIndex] = idata;\nreturn;\n}\n\t\nelse if(size==capacity)\n{\nmessage();\nreturn;\n}\nelse\n{\nwe need to insert element at nextIndex, move it to the next circularly\ndata[nextIndex] = idata;\nnextIndex = (nextIndex+1)%capacity; // no change at head\nsize++;\n}\n\n\n2. Dequeue function:\n\nif(size==0)\n{\nmessage();\nreturn generic_value;\n}\nelse if(size==1) // for debugging purposes, covered in the else case too\n{\nT ans = data[firstIndex];\nfirstIndex = -1;\nnextndex = 0;\nsize = 0;\nreturn T;\n}\nelse\n{\nT ans = data[firstIndex];\nfirstIndex = (firstIndex+1) % capacity;\nsize--;\nreturn ans;\n}\n\n3. int getSize():\n\n{\nreturn size;\n}\n\n3. bool isEmpty()\n\n{\nreturn size==0;\n}\n\n5. T front():\n\n{\nif(size==0)\nreturn generic_value;\nreturn data[firstIndex];\n}\n\n6. void print():\n\n// very interesting, we have to move circularly size number of times\n{\ncout << \"f[\";\nfor(int i=firstIndex, count = 0; count<size; i = (i+1)%capacity)\ncout << data[i] << \", \";\nif(size=0)\ncout << \"]b\\n\";\nelse\ncout << \"\\b\\b]b\\n\";\n }\n\n\n\n\n\n\n",
      "html": "<h1 id=\"2.-queue-using-array---code\">2. Queue using Array - Code <a class=\"heading-anchor-permalink\" href=\"#2.-queue-using-array---code\">#</a></h1>\n<p>Created Thursday 23 January 2020</p>\n<p><a href=\"2._Queue_using_Array_-_Code/queueMain.cpp\">queueMain.cpp</a>\n<a href=\"2._Queue_using_Array_-_Code/queueUsingArray.h\">queueUsingArray.h</a></p>\n<ol>\n<li>enqueue(T idata) function:</li>\n</ol>\n<p>if(size==0) // for the start\n{\nsize = 1;\nfirstIndex = 0;\nnextIndex = 1;\ndata[firstIndex] = idata;\nreturn;\n}</p>\n<p>else if(size==capacity)\n{\nmessage();\nreturn;\n}\nelse\n{\nwe need to insert element at nextIndex, move it to the next circularly\ndata[nextIndex] = idata;\nnextIndex = (nextIndex+1)%capacity; // no change at head\nsize++;\n}</p>\n<ol start=\"2\">\n<li>Dequeue function:</li>\n</ol>\n<p>if(size==0)\n{\nmessage();\nreturn generic_value;\n}\nelse if(size==1) // for debugging purposes, covered in the else case too\n{\nT ans = data[firstIndex];\nfirstIndex = -1;\nnextndex = 0;\nsize = 0;\nreturn T;\n}\nelse\n{\nT ans = data[firstIndex];\nfirstIndex = (firstIndex+1) % capacity;\nsize–;\nreturn ans;\n}</p>\n<ol start=\"3\">\n<li>int getSize():</li>\n</ol>\n<p>{\nreturn size;\n}</p>\n<ol start=\"3\">\n<li>bool isEmpty()</li>\n</ol>\n<p>{\nreturn size==0;\n}</p>\n<ol start=\"5\">\n<li>T front():</li>\n</ol>\n<p>{\nif(size==0)\nreturn generic_value;\nreturn data[firstIndex];\n}</p>\n<ol start=\"6\">\n<li>void print():</li>\n</ol>\n<p>// very interesting, we have to move circularly size number of times\n{\ncout &lt;&lt; “f[”;\nfor(int i=firstIndex, count = 0; count&lt;size; i = (i+1)%capacity)\ncout &lt;&lt; data[i] &lt;&lt; &quot;, &quot;;\nif(size=0)\ncout &lt;&lt; “]b\\n”;\nelse\ncout &lt;&lt; “\\b\\b]b\\n”;\n}</p>\n",
      "id": 188
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/3._Queue_using_Dynamic_Array_-_Code/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/3._Queue_using_Dynamic_Array_-_Code/0_index.html",
      "content": "# 3. Queue using Dynamic Array - Code\nCreated Thursday 23 January 2020\n\n[queueMain.cpp](3._Queue_using_Dynamic_Array_-_Code/queueMain.cpp)\n[queueUsingDynamicArray.h](3._Queue_using_Dynamic_Array_-_Code/queueUsingDynamicArray.h)\n\n\n* Circularity is important here too, as doubling is onlt if size>=capacity.\n\n\n\n* The only change required is in the enqueue function, that too in the case when size==capacity. Note that a rearrangement is required if this has to be carried out. To ensure that circularity is maintained.\n\n\n\n1. enqueue(T idata) function:\n\nif(size==0) // for the start\n{\nsize = 1;\nfirstIndex = 0;\nnextIndex = 1;\ndata[firstIndex] = idata;\nreturn;\n}\n\t\nelse if(size==capacity)\n{\n//\tassuming capacity is always > 0\nT* newData = new T[capacity*2];\n\t\t\n// rearrange the circular queue as a normal queue, we need a value going from 0 to capacity-1 and also need to travel all the elements.\nfor(int i=firstIndex, count = 0; count < capacity; i =(i+1)%capacity, count++)\nnewData[count] = data[i];\nnewData[capacity] = idata;\n//delete the old array\ndelete[] data;\ndata = newData;\n// set the attributes as that of a linear queue\nsize++;\nfirstIndex = 0;\nlastIndex = size;\t// effectively capacity + 1\ncapacity*=2;\n}\nelse\n{\nwe need to insert element at nextIndex, move it to the next circularly\ndata[nextIndex] = idata;\nnextIndex = (nextIndex+1)%capacity;\t// no change at head\n}\n\n*****\n\n\n* Every other function is the same.\n\n\n",
      "html": "<h1 id=\"3.-queue-using-dynamic-array---code\">3. Queue using Dynamic Array - Code <a class=\"heading-anchor-permalink\" href=\"#3.-queue-using-dynamic-array---code\">#</a></h1>\n<p>Created Thursday 23 January 2020</p>\n<p><a href=\"3._Queue_using_Dynamic_Array_-_Code/queueMain.cpp\">queueMain.cpp</a>\n<a href=\"3._Queue_using_Dynamic_Array_-_Code/queueUsingDynamicArray.h\">queueUsingDynamicArray.h</a></p>\n<ul>\n<li>\n<p>Circularity is important here too, as doubling is onlt if size&gt;=capacity.</p>\n</li>\n<li>\n<p>The only change required is in the enqueue function, that too in the case when size==capacity. Note that a rearrangement is required if this has to be carried out. To ensure that circularity is maintained.</p>\n</li>\n</ul>\n<ol>\n<li>enqueue(T idata) function:</li>\n</ol>\n<p>if(size==0) // for the start\n{\nsize = 1;\nfirstIndex = 0;\nnextIndex = 1;\ndata[firstIndex] = idata;\nreturn;\n}</p>\n<p>else if(size==capacity)\n{\n//\tassuming capacity is always &gt; 0\nT* newData = new T[capacity*2];</p>\n<p>// rearrange the circular queue as a normal queue, we need a value going from 0 to capacity-1 and also need to travel all the elements.\nfor(int i=firstIndex, count = 0; count &lt; capacity; i =(i+1)%capacity, count++)\nnewData[count] = data[i];\nnewData[capacity] = idata;\n//delete the old array\ndelete[] data;\ndata = newData;\n// set the attributes as that of a linear queue\nsize++;\nfirstIndex = 0;\nlastIndex = size;\t// effectively capacity + 1\ncapacity*=2;\n}\nelse\n{\nwe need to insert element at nextIndex, move it to the next circularly\ndata[nextIndex] = idata;\nnextIndex = (nextIndex+1)%capacity;\t// no change at head\n}</p>\n<hr>\n<ul>\n<li>Every other function is the same.</li>\n</ul>\n",
      "id": 189
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/3._zNamespaces.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/3._zNamespaces.html",
      "content": "# 3. zNamespaces\nCreated Thursday 23 January 2020\n\n<https://www.studytonight.com/cpp/namespace-in-cpp.php>\nVery good and informative.\nNamespaces can be unioned.\n\nThree ways:\n\n1. Using explicit ::\n2. using directive, everything is availble. i.e mapped.\n3. using declartion, parts are available. i.e mapped.\n\n\nNote: Member functions and data members don't need to be specified a namespace, as the object is already mapped. Remember two objects cannot have the same name. **But two namespace can have the same name, they are unioned, not overridden.**\n\n",
      "html": "<h1 id=\"3.-znamespaces\">3. zNamespaces <a class=\"heading-anchor-permalink\" href=\"#3.-znamespaces\">#</a></h1>\n<p>Created Thursday 23 January 2020</p>\n<p><a href=\"https://www.studytonight.com/cpp/namespace-in-cpp.php\">https://www.studytonight.com/cpp/namespace-in-cpp.php</a>\nVery good and informative.\nNamespaces can be unioned.</p>\n<p>Three ways:</p>\n<ol>\n<li>Using explicit ::</li>\n<li>using directive, everything is availble. i.e mapped.</li>\n<li>using declartion, parts are available. i.e mapped.</li>\n</ol>\n<p>Note: Member functions and data members don’t need to be specified a namespace, as the object is already mapped. Remember two objects cannot have the same name. <strong>But two namespace can have the same name, they are unioned, not overridden.</strong></p>\n",
      "id": 190
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/4._Queue_using_LL/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/4._Queue_using_LL/0_index.html",
      "content": "# 4. Queue using LL\nCreated Thursday 23 January 2020\n\n[queueMain.cpp](4._Queue_using_LL/queueMain.cpp)\n[queueUsingLL.h](4._Queue_using_LL/queueUsingLL.h)\n\nAs per the interface:\n\n1. We need to keep size\n2. For o(1) insertion, we always insert at the tail So a tail is required. Tail points to the last node in the queue.\n3. For o(1) deletion, we remove from head. So we need a head. Head points to the first node in the queue.\n4. front is also o(1) as we just need to print the head's data, if it exists.\n\n\n\n* There's no need for being circular here. All operations are o(1), except print which is o(N) for both arrays and index.\n* Hence it is established that basic stack and queues equally efficient in both their implementaions, arrays and LL.\n\n\n",
      "html": "<h1 id=\"4.-queue-using-ll\">4. Queue using LL <a class=\"heading-anchor-permalink\" href=\"#4.-queue-using-ll\">#</a></h1>\n<p>Created Thursday 23 January 2020</p>\n<p><a href=\"4._Queue_using_LL/queueMain.cpp\">queueMain.cpp</a>\n<a href=\"4._Queue_using_LL/queueUsingLL.h\">queueUsingLL.h</a></p>\n<p>As per the interface:</p>\n<ol>\n<li>We need to keep size</li>\n<li>For o(1) insertion, we always insert at the tail So a tail is required. Tail points to the last node in the queue.</li>\n<li>For o(1) deletion, we remove from head. So we need a head. Head points to the first node in the queue.</li>\n<li>front is also o(1) as we just need to print the head’s data, if it exists.</li>\n</ol>\n<ul>\n<li>There’s no need for being circular here. All operations are o(1), except print which is o(N) for both arrays and index.</li>\n<li>Hence it is established that basic stack and queues equally efficient in both their implementaions, arrays and LL.</li>\n</ul>\n",
      "id": 191
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/5._Inbuilt_queue_STL/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/4._Queue/5._Inbuilt_queue_STL/0_index.html",
      "content": "# 5. Inbuilt queue STL\nCreated Thursday 23 January 2020\n\n\n* Now we will focus only on the interface.\n* Queue has been implemented in C++ STL. We will use only that now.\n\n\n\n* header **<queue>**\n* It's a simple one sided queue\n* declaration is small 'q', queue <> variable_name.\n\nInterface:\n\n1. push(data) - the same as our enqueue(). Inserts the element in the queue.\n2. front() - returns the element at head if it exists, else generic value.\n3. void pop() - deletes an element but does not return the deleted value. It is a void.\n4. size() - same as our getSize(). Returns the size of the queue.\n5. empty() - returns true if empty, else false.\n6. back() - returns the element at the back.\n\n\nNote: Both stack and queue have the exact same interfaces. With the same signatures. Only the working changes. **pop and front are different!**\n\n* Print was not discussed here.\n\n\nFor both sides insertion and deletion, use <deque>.\n\n",
      "html": "<h1 id=\"5.-inbuilt-queue-stl\">5. Inbuilt queue STL <a class=\"heading-anchor-permalink\" href=\"#5.-inbuilt-queue-stl\">#</a></h1>\n<p>Created Thursday 23 January 2020</p>\n<ul>\n<li>\n<p>Now we will focus only on the interface.</p>\n</li>\n<li>\n<p>Queue has been implemented in C++ STL. We will use only that now.</p>\n</li>\n<li>\n<p>header <strong><queue></strong></p>\n</li>\n<li>\n<p>It’s a simple one sided queue</p>\n</li>\n<li>\n<p>declaration is small ‘q’, queue &lt;&gt; variable_name.</p>\n</li>\n</ul>\n<p>Interface:</p>\n<ol>\n<li>push(data) - the same as our enqueue(). Inserts the element in the queue.</li>\n<li>front() - returns the element at head if it exists, else generic value.</li>\n<li>void pop() - deletes an element but does not return the deleted value. It is a void.</li>\n<li>size() - same as our getSize(). Returns the size of the queue.</li>\n<li>empty() - returns true if empty, else false.</li>\n<li>back() - returns the element at the back.</li>\n</ol>\n<p>Note: Both stack and queue have the exact same interfaces. With the same signatures. Only the working changes. <strong>pop and front are different!</strong></p>\n<ul>\n<li>Print was not discussed here.</li>\n</ul>\n<p>For both sides insertion and deletion, use <deque>.</p>\n",
      "id": 192
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/zTest_2/Test2.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/1._Linear_Data_Structures/zTest_2/Test2.html",
      "content": "# Coding Problems\n\n<details> <summary><strong> 1. Next Number ? </strong></summary>\n\n# 1. Next Number ?\n\n    Given a large number represented in the form of a linked list. Write code to increment the number by 1 in-place(i.e. without using extra space).\n\n    Note: You don't need to print the elements, just update the elements and return the head of updated LL.\n\n**Input Constraints**\n\n    1 <= Length of Linked List <=10^6.\n\n**Input Format**\n\n    Line 1 : Linked list elements (separated by space and terminated by -1)\n\n**Output Format**\n\n    Line 1: Updated linked list elements\n\n**Sample Input 1**\n\n    3 9 2 5 -1\n\n**Sample Output 1**\n\n    3 9 2 6\n\n**Sample Input 2**\n\n    9 9 9 -1\n\n**Sample Output 2**\n\n    1 0 0 0\n\n<details> <summary><strong>Code</strong></summary>\n\n    Node *NextLargeNumber(Node *head)\n    {\n        if (head == NULL)\n            return head;\n\n        // traverse and check last node\n        Node *trav = head;\n\n        while (trav->next != NULL)\n            trav = trav->next;\n\n        if (trav->data < 9)\n        {\n            trav->data += 1;    // last digit is non 9, add by 1 and we are done\n            return head;\n        }\n        else\n        {\n            // unit digit is 9\n            // reverse the LL\n            // to implement elementary addition\n            Node *r = NULL, *q = NULL, *p = head;\n            while (p != NULL)\n            {\n                q = p;\n                p = p->next;\n                q->next = r;\n                r = q;\n            }\n            head = r;\n            // r stores head of the reversed LL\n\n            //reuse trav\n            trav = head;\n            while (trav->next != NULL && trav->data == 9)\n            {\n                trav->data = 0;\n                trav = trav->next;\n            }\n\n            // we reached a non 9 value or we reached the end\n\n            if (trav->next != NULL) //we have reached a non 9 value\n                trav->data += 1;\n            else    // reached the end, the MST can be both 9 and non 9\n            { // trav->next==NULL\n                if (trav->data == 9)    //MST is 9\n                {\n                    Node *newNode = new Node(1);\n                    trav->data = 0;\n                    trav->next = newNode;\n                    newNode->next = NULL;\n                }\n                else    // MST not 9\n                    trav->data += 1;\n            }\n\n            //reverse the LL back, to get the original number\n            r = NULL;\n            q = NULL;\n            p = head;\n            while (p != NULL)\n            {\n                q = p;\n                p = p->next;\n                q->next = r;\n                r = q;\n            }\n            head = r;   // head points to the number\n        }\n\n        return head;\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 2. Dequeue </strong></summary>\n\n# 2. Dequeue\n\n    You need to implement a class for Dequeue i.e. for double ended queue. In this queue, elements can be inserted and deleted from both the ends.\n\n    You don't need to double the capacity.\n\n    You need to implement the following functions -\n    1. constructor\n    You need to create the appropriate constructor. Size for the queue passed is 10.\n    2. insertFront -\n    This function takes an element as input and insert the element at the front of queue. Insert the element only if queue is not full. And if queue is full, print -1 and return.\n    3. insertRear -\n    This function takes an element as input and insert the element at the end of queue. Insert the element only if queue is not full. And if queue is full, print -1 and return.\n    4. deleteFront -\n    This function removes an element from the front of queue. Print -1 if queue is empty.\n    5. deleteRear -\n    This function removes an element from the end of queue. Print -1 if queue is empty.\n    6. getFront -\n    Returns the element which is at front of the queue. Return -1 if queue is empty.\n    7. getRear -\n    Returns the element which is at end of the queue. Return -1 if queue is empty.\n\n**Input Format**\n\n    Line 1 : choice and/or argument\n    terminated by -1\n\n**Output Format**\n\n    Printing taken care of by main()\n\n**Sample Input 1**\n\n    5 1 49 1 64 2 99 5 6 -1\n\n**Sample Output 1**\n\n    -1\n    64\n    99\n\n**Sample Input 2**\n\n    2 32 3 5 4 6 1 109 2 100 5 6 -1\n\n**Sample Output 2**\n\n    -1\n    -1\n    -1\n    109\n    100\n\n**Sample Input 3**\n\n    2 32 3 5 4 6 1 109 2 100 5 -1\n\n**Sample Output 3**\n\n    -1\n    -1\n    -1\n    109\n\n<details> <summary><strong>Code</strong></summary>\n\n    /**********\n\n    Following is the main function we are using internally.\n    Refer this for completing the Dequeue class.\n\n\n    int main()\n    {\n    Deque dq(10);\n    int choice,input;\n    while(true) {\n    cin >> choice;\n    switch (choice) {\n    case 1:\n    cin >> input;\n    dq.insertfront(input);\n    break;\n    case 2:\n    cin >> input;\n    dq.insertrear(input);\n    break;\n    case 3:\n    dq.deletefront();\n    break;\n    case 4:\n    dq.deleterear();\n    break;\n    case 5:\n    cout << dq.getFront() << \"\\n\";\n    break;\n    case 6:\n    cout << dq.getRear() << \"\\n\";\n    break;\n    default:\n    return 0;\n    }\n    }\n\n    return 0;\n    }\n\n    ************/\n\n    class Deque\n    {\n        // Complete this class\n    public:\n        int *arr;\n        int size, capacity;\n        int firstIndex, nextIndex;\n        Deque(int cap = 0)\n        {\n            arr = new int[cap];\n            size = 0;\n            capacity = cap;\n            firstIndex = cap - 1; // front of the queue\n            nextIndex = 0;        // ready to be written at\n        }\n\n        void insertRear(int data)\n        {\n            if (size == capacity)\n            {\n                cout << -1 << endl;\n                return;\n            }\n            if (size == 0)\n            {\n                firstIndex = capacity - 1;\n                arr[0] = data;\n                nextIndex = 1;\n            }\n            else\n            {\n                arr[nextIndex] = data;\n                nextIndex = (nextIndex + 1) % capacity;\n            }\n            size++;\n        }\n\n        void insertFront(int data)\n        {\n            if (size == capacity)\n            {\n                cout << -1 << endl;\n                return;\n            }\n            if (size == 0)\n            {\n                arr[capacity - 1] = data;\n                firstIndex = capacity - 2;\n                nextIndex = 0;\n            }\n            else\n            {\n                arr[firstIndex] = data;\n\n                if (firstIndex == 0)\n                    firstIndex = capacity - 1;\n                else\n                    firstIndex--;\n            }\n            size++;\n        }\n\n        void deleteFront()\n        {\n            if (size == 0)\n            {\n                cout << -1 << endl;\n                return;\n            }\n            firstIndex = (firstIndex + 1) % capacity;\n            size--;\n        }\n\n        void deleteRear()\n        {\n            if (size == 0)\n            {\n                cout << -1 << endl;\n                return;\n            }\n            if (nextIndex == 0)\n                nextIndex = capacity - 1;\n            else\n                nextIndex--;\n            size--;\n        }\n\n        int getFront()\n        {\n            if (size == 0)\n                return -1;\n            // int front = (firstIndex+1)%capacity;\n            return arr[(firstIndex + 1) % capacity];\n        }\n\n        int getRear()\n        {\n            if (size == 0)\n                return -1;\n            if (nextIndex == 0)\n                return arr[capacity - 1];\n            else\n                return arr[nextIndex - 1];\n        }\n\n        ~Deque()\n        {\n            delete[] arr;\n        }\n    };\n    /*\n        Insights:\n            1. Don't worry about corner cases, they will come to you, once you've practiced enough.\n            2. We have kept both firstIndex and nextIndex as write ready heads\n            3. Just reset the config when size 0, in the insert function\n    */\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 3. Delete alternate nodes </strong></summary>\n\n# 3. Delete alternate nodes\n\n    Given a linked list, delete all alternate nodes in the list. That means given Linked List is -\n    10 20 30 40 50 60\n\n    you need to delete nodes - 20, 40 and 60\n\n    Note : Head of the list will remain same. Don't need to print or return anything.\n\n**Input Constraints**\n\n    1 <= Length of Linked List <=10^6.\n\n**Input Format**\n\n    Linked list elements (separated by space and terminated by -1)\n\n**Output Format**\n\n    Updated linked list elements, taken care of by main()\n\n**Constraints**\n\n    1 <= N <= 50\n\n**Sample Input 1**\n\n    1 2 3 4 5 -1\n\n**Sample Output**\n\n    1 3 5\n\n<details> <summary><strong>Code</strong></summary>\n\n    // Following is the node structure\n    /**************\n    class Node {\n    public:\n        int data;\n        Node * next;\n        Node(int data){\n            this -> data = data;\n            this -> next = NULL;\n        }\n\n        ~Node() {\n            if(next) {\n                delete next;\n            }\n        }\n    };\n    ***************/\n\n    void delete_alternate_node_LinkedList(Node *head)\n    {\n        if (head == NULL || head->next == NULL)\n            return;\n\n        Node *trav = head;\n\n        while (trav != NULL && trav->next != NULL)\n        {\n            Node *p = trav->next;\n            trav->next = trav->next->next;\n            trav = trav->next;\n        }\n    }\n\n</details>\n\n---\n\n</details>\n",
      "html": "<h1 id=\"coding-problems\">Coding Problems <a class=\"heading-anchor-permalink\" href=\"#coding-problems\">#</a></h1>\n<details> <summary><strong> 1. Next Number ? </strong></summary>\n<h1 id=\"1.-next-number-%3F\">1. Next Number ? <a class=\"heading-anchor-permalink\" href=\"#1.-next-number-%3F\">#</a></h1>\n<pre><code>Given a large number represented in the form of a linked list. Write code to increment the number by 1 in-place(i.e. without using extra space).\n\nNote: You don't need to print the elements, just update the elements and return the head of updated LL.\n</code></pre>\n<p><strong>Input Constraints</strong></p>\n<pre><code>1 &lt;= Length of Linked List &lt;=10^6.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : Linked list elements (separated by space and terminated by -1)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Line 1: Updated linked list elements\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>3 9 2 5 -1\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>3 9 2 6\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>9 9 9 -1\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>1 0 0 0\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>Node *NextLargeNumber(Node *head)\n{\n    if (head == NULL)\n        return head;\n\n    // traverse and check last node\n    Node *trav = head;\n\n    while (trav-&gt;next != NULL)\n        trav = trav-&gt;next;\n\n    if (trav-&gt;data &lt; 9)\n    {\n        trav-&gt;data += 1;    // last digit is non 9, add by 1 and we are done\n        return head;\n    }\n    else\n    {\n        // unit digit is 9\n        // reverse the LL\n        // to implement elementary addition\n        Node *r = NULL, *q = NULL, *p = head;\n        while (p != NULL)\n        {\n            q = p;\n            p = p-&gt;next;\n            q-&gt;next = r;\n            r = q;\n        }\n        head = r;\n        // r stores head of the reversed LL\n\n        //reuse trav\n        trav = head;\n        while (trav-&gt;next != NULL &amp;&amp; trav-&gt;data == 9)\n        {\n            trav-&gt;data = 0;\n            trav = trav-&gt;next;\n        }\n\n        // we reached a non 9 value or we reached the end\n\n        if (trav-&gt;next != NULL) //we have reached a non 9 value\n            trav-&gt;data += 1;\n        else    // reached the end, the MST can be both 9 and non 9\n        { // trav-&gt;next==NULL\n            if (trav-&gt;data == 9)    //MST is 9\n            {\n                Node *newNode = new Node(1);\n                trav-&gt;data = 0;\n                trav-&gt;next = newNode;\n                newNode-&gt;next = NULL;\n            }\n            else    // MST not 9\n                trav-&gt;data += 1;\n        }\n\n        //reverse the LL back, to get the original number\n        r = NULL;\n        q = NULL;\n        p = head;\n        while (p != NULL)\n        {\n            q = p;\n            p = p-&gt;next;\n            q-&gt;next = r;\n            r = q;\n        }\n        head = r;   // head points to the number\n    }\n\n    return head;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 2. Dequeue </strong></summary>\n<h1 id=\"2.-dequeue\">2. Dequeue <a class=\"heading-anchor-permalink\" href=\"#2.-dequeue\">#</a></h1>\n<pre><code>You need to implement a class for Dequeue i.e. for double ended queue. In this queue, elements can be inserted and deleted from both the ends.\n\nYou don't need to double the capacity.\n\nYou need to implement the following functions -\n1. constructor\nYou need to create the appropriate constructor. Size for the queue passed is 10.\n2. insertFront -\nThis function takes an element as input and insert the element at the front of queue. Insert the element only if queue is not full. And if queue is full, print -1 and return.\n3. insertRear -\nThis function takes an element as input and insert the element at the end of queue. Insert the element only if queue is not full. And if queue is full, print -1 and return.\n4. deleteFront -\nThis function removes an element from the front of queue. Print -1 if queue is empty.\n5. deleteRear -\nThis function removes an element from the end of queue. Print -1 if queue is empty.\n6. getFront -\nReturns the element which is at front of the queue. Return -1 if queue is empty.\n7. getRear -\nReturns the element which is at end of the queue. Return -1 if queue is empty.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Line 1 : choice and/or argument\nterminated by -1\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Printing taken care of by main()\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>5 1 49 1 64 2 99 5 6 -1\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>-1\n64\n99\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>2 32 3 5 4 6 1 109 2 100 5 6 -1\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>-1\n-1\n-1\n109\n100\n</code></pre>\n<p><strong>Sample Input 3</strong></p>\n<pre><code>2 32 3 5 4 6 1 109 2 100 5 -1\n</code></pre>\n<p><strong>Sample Output 3</strong></p>\n<pre><code>-1\n-1\n-1\n109\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>/**********\n\nFollowing is the main function we are using internally.\nRefer this for completing the Dequeue class.\n\n\nint main()\n{\nDeque dq(10);\nint choice,input;\nwhile(true) {\ncin &gt;&gt; choice;\nswitch (choice) {\ncase 1:\ncin &gt;&gt; input;\ndq.insertfront(input);\nbreak;\ncase 2:\ncin &gt;&gt; input;\ndq.insertrear(input);\nbreak;\ncase 3:\ndq.deletefront();\nbreak;\ncase 4:\ndq.deleterear();\nbreak;\ncase 5:\ncout &lt;&lt; dq.getFront() &lt;&lt; &quot;\\n&quot;;\nbreak;\ncase 6:\ncout &lt;&lt; dq.getRear() &lt;&lt; &quot;\\n&quot;;\nbreak;\ndefault:\nreturn 0;\n}\n}\n\nreturn 0;\n}\n\n************/\n\nclass Deque\n{\n    // Complete this class\npublic:\n    int *arr;\n    int size, capacity;\n    int firstIndex, nextIndex;\n    Deque(int cap = 0)\n    {\n        arr = new int[cap];\n        size = 0;\n        capacity = cap;\n        firstIndex = cap - 1; // front of the queue\n        nextIndex = 0;        // ready to be written at\n    }\n\n    void insertRear(int data)\n    {\n        if (size == capacity)\n        {\n            cout &lt;&lt; -1 &lt;&lt; endl;\n            return;\n        }\n        if (size == 0)\n        {\n            firstIndex = capacity - 1;\n            arr[0] = data;\n            nextIndex = 1;\n        }\n        else\n        {\n            arr[nextIndex] = data;\n            nextIndex = (nextIndex + 1) % capacity;\n        }\n        size++;\n    }\n\n    void insertFront(int data)\n    {\n        if (size == capacity)\n        {\n            cout &lt;&lt; -1 &lt;&lt; endl;\n            return;\n        }\n        if (size == 0)\n        {\n            arr[capacity - 1] = data;\n            firstIndex = capacity - 2;\n            nextIndex = 0;\n        }\n        else\n        {\n            arr[firstIndex] = data;\n\n            if (firstIndex == 0)\n                firstIndex = capacity - 1;\n            else\n                firstIndex--;\n        }\n        size++;\n    }\n\n    void deleteFront()\n    {\n        if (size == 0)\n        {\n            cout &lt;&lt; -1 &lt;&lt; endl;\n            return;\n        }\n        firstIndex = (firstIndex + 1) % capacity;\n        size--;\n    }\n\n    void deleteRear()\n    {\n        if (size == 0)\n        {\n            cout &lt;&lt; -1 &lt;&lt; endl;\n            return;\n        }\n        if (nextIndex == 0)\n            nextIndex = capacity - 1;\n        else\n            nextIndex--;\n        size--;\n    }\n\n    int getFront()\n    {\n        if (size == 0)\n            return -1;\n        // int front = (firstIndex+1)%capacity;\n        return arr[(firstIndex + 1) % capacity];\n    }\n\n    int getRear()\n    {\n        if (size == 0)\n            return -1;\n        if (nextIndex == 0)\n            return arr[capacity - 1];\n        else\n            return arr[nextIndex - 1];\n    }\n\n    ~Deque()\n    {\n        delete[] arr;\n    }\n};\n/*\n    Insights:\n        1. Don't worry about corner cases, they will come to you, once you've practiced enough.\n        2. We have kept both firstIndex and nextIndex as write ready heads\n        3. Just reset the config when size 0, in the insert function\n*/\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 3. Delete alternate nodes </strong></summary>\n<h1 id=\"3.-delete-alternate-nodes\">3. Delete alternate nodes <a class=\"heading-anchor-permalink\" href=\"#3.-delete-alternate-nodes\">#</a></h1>\n<pre><code>Given a linked list, delete all alternate nodes in the list. That means given Linked List is -\n10 20 30 40 50 60\n\nyou need to delete nodes - 20, 40 and 60\n\nNote : Head of the list will remain same. Don't need to print or return anything.\n</code></pre>\n<p><strong>Input Constraints</strong></p>\n<pre><code>1 &lt;= Length of Linked List &lt;=10^6.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Linked list elements (separated by space and terminated by -1)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Updated linked list elements, taken care of by main()\n</code></pre>\n<p><strong>Constraints</strong></p>\n<pre><code>1 &lt;= N &lt;= 50\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>1 2 3 4 5 -1\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>1 3 5\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// Following is the node structure\n/**************\nclass Node {\npublic:\n    int data;\n    Node * next;\n    Node(int data){\n        this -&gt; data = data;\n        this -&gt; next = NULL;\n    }\n\n    ~Node() {\n        if(next) {\n            delete next;\n        }\n    }\n};\n***************/\n\nvoid delete_alternate_node_LinkedList(Node *head)\n{\n    if (head == NULL || head-&gt;next == NULL)\n        return;\n\n    Node *trav = head;\n\n    while (trav != NULL &amp;&amp; trav-&gt;next != NULL)\n    {\n        Node *p = trav-&gt;next;\n        trav-&gt;next = trav-&gt;next-&gt;next;\n        trav = trav-&gt;next;\n    }\n}\n</code></pre>\n</details>\n<hr>\n</details>\n",
      "id": 193
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/0_index.html",
      "content": "# 1. Generic Trees\nCreated Friday 24 January 2020\n\n[Exercises](./1._Generic_Trees/Quizzes&Exercises/Exercises.md)\n[CodingExercises](./1._Generic_Trees/Quizzes&Exercises/CodingExercises.md)\n[Assignments](./1._Generic_Trees/zAssignments/Assignments.md)\n\nRemember this visualization. Tame the chaos.\n\n\n",
      "html": "<h1 id=\"1.-generic-trees\">1. Generic Trees <a class=\"heading-anchor-permalink\" href=\"#1.-generic-trees\">#</a></h1>\n<p>Created Friday 24 January 2020</p>\n<p><a href=\"./1._Generic_Trees/Quizzes&amp;Exercises/Exercises.html\">Exercises</a>\n<a href=\"./1._Generic_Trees/Quizzes&amp;Exercises/CodingExercises.html\">CodingExercises</a>\n<a href=\"./1._Generic_Trees/zAssignments/Assignments.html\">Assignments</a></p>\n<p>Remember this visualization. Tame the chaos.</p>\n",
      "id": 194
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/1._Introduction_to_trees.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/1._Introduction_to_trees.html",
      "content": "# 1. Introduction to trees\n\nCreated Friday 24 January 2020\n\n- There are two kinds of data structures:\n\n1. Physical Data structures - Arrays, LL's, Trees - Changes in memory structure.\n2. ADTs - Stack, vector, Queue. No change in memory structure.\n\n- **Trees are a physical(basic) data structures.**\n- Hence neither array or LL's can describe them. They are something in their own right.\n\nJargon:\n\n1. Root\n2. Children and Parents.\n3. Siblings - nodes with the same parent\n4. Leaf(A node with no children)\n5. Subtree, the tree emanating from a node is called a subtree of the tree where the node is a child. Every tree is a subtree of itself.\n6. Descendants - All nodes of the subtrees of the given node's children(including them).\n\n- **Why are they called trees?**\n\n![](/assets/1._Introduction_to_trees-image-1.png)\n",
      "html": "<h1 id=\"1.-introduction-to-trees\">1. Introduction to trees <a class=\"heading-anchor-permalink\" href=\"#1.-introduction-to-trees\">#</a></h1>\n<p>Created Friday 24 January 2020</p>\n<ul>\n<li>There are two kinds of data structures:</li>\n</ul>\n<ol>\n<li>Physical Data structures - Arrays, LL’s, Trees - Changes in memory structure.</li>\n<li>ADTs - Stack, vector, Queue. No change in memory structure.</li>\n</ol>\n<ul>\n<li><strong>Trees are a physical(basic) data structures.</strong></li>\n<li>Hence neither array or LL’s can describe them. They are something in their own right.</li>\n</ul>\n<p>Jargon:</p>\n<ol>\n<li>Root</li>\n<li>Children and Parents.</li>\n<li>Siblings - nodes with the same parent</li>\n<li>Leaf(A node with no children)</li>\n<li>Subtree, the tree emanating from a node is called a subtree of the tree where the node is a child. Every tree is a subtree of itself.</li>\n<li>Descendants - All nodes of the subtrees of the given node’s children(including them).</li>\n</ol>\n<ul>\n<li><strong>Why are they called trees?</strong></li>\n</ul>\n<p><img src=\"/assets/1._Introduction_to_trees-image-1.png\" alt=\"\"></p>\n",
      "id": 195
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/1._TreeNode_class/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/1._TreeNode_class/0_index.html",
      "content": "# 1. TreeNode class\n\nCreated Saturday 25 January 2020\n\n- We'll keep the root node with us. Like we keep head for an LL.\n\nOne way to make the loop can be to keep to keep the address of of children. Options that we have:\n\n1. Use an array to keep the addresses of the children. Updation is diffcult. Size problem.\n2. Use a LL to store the addresses of the children. Acessing the children is very costly. O(n).\n3. vector: We won't have to specify size at all. O(1) access. We can make a tradeoff with the resizing time. As this resizing is less sporadic.\n\n- **Children are stored in a vector.**\n- We will call the node for a tree TreeNode, to avoid confusion with Node from a linked list.\n\n[TreeNode.h](1._TreeNode_class/TreeNode.h)\n[treeMain.cpp](1._TreeNode_class/treeMain.cpp)\n\n- About templates, when we write an object inside a templated class, it is automatically assume to be of type T, unless stated otherwise.\n\n![](/assets/1._TreeNode_class-image-1.png) ![](/assets/1._TreeNode_class-image-2.png)\nFirst one is implicit, while the second one is explicit.\nKeep it explicit where it is supposed to be.\n\nWhat all is deducable? c++17 is better, it can deduce type.\nTreeNode<int>\\* p = new TreeNode(2); will work in c++17 but not in old versions. new TreeNode<int>(2) is required.\n<https://en.cppreference.com/w/cpp/language/class_template_argument_deduction>\n",
      "html": "<h1 id=\"1.-treenode-class\">1. TreeNode class <a class=\"heading-anchor-permalink\" href=\"#1.-treenode-class\">#</a></h1>\n<p>Created Saturday 25 January 2020</p>\n<ul>\n<li>We’ll keep the root node with us. Like we keep head for an LL.</li>\n</ul>\n<p>One way to make the loop can be to keep to keep the address of of children. Options that we have:</p>\n<ol>\n<li>Use an array to keep the addresses of the children. Updation is diffcult. Size problem.</li>\n<li>Use a LL to store the addresses of the children. Acessing the children is very costly. O(n).</li>\n<li>vector: We won’t have to specify size at all. O(1) access. We can make a tradeoff with the resizing time. As this resizing is less sporadic.</li>\n</ol>\n<ul>\n<li><strong>Children are stored in a vector.</strong></li>\n<li>We will call the node for a tree TreeNode, to avoid confusion with Node from a linked list.</li>\n</ul>\n<p><a href=\"1._TreeNode_class/TreeNode.h\">TreeNode.h</a>\n<a href=\"1._TreeNode_class/treeMain.cpp\">treeMain.cpp</a></p>\n<ul>\n<li>About templates, when we write an object inside a templated class, it is automatically assume to be of type T, unless stated otherwise.</li>\n</ul>\n<p><img src=\"/assets/1._TreeNode_class-image-1.png\" alt=\"\"> <img src=\"/assets/1._TreeNode_class-image-2.png\" alt=\"\">\nFirst one is implicit, while the second one is explicit.\nKeep it explicit where it is supposed to be.</p>\n<p>What all is deducable? c++17 is better, it can deduce type.\nTreeNode<int>* p = new TreeNode(2); will work in c++17 but not in old versions. new TreeNode<int>(2) is required.\n<a href=\"https://en.cppreference.com/w/cpp/language/class_template_argument_deduction\">https://en.cppreference.com/w/cpp/language/class_template_argument_deduction</a></p>\n",
      "id": 196
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/2._Destructor.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/2._Destructor.html",
      "content": "# 2. Destructor\n\nCreated Thursday 30 January 2020\n\nHow to destroy the tree?\n\n- Process once done with deallocates memory after the program ends? The problem is memory deallocation while the program is runnning.\n- When we write delete obj_name, the destructor is called first. Here memory is deallocated for the attributes. Any DS's inside need to be cleared explicitly. Taught in **OOPS 1**.\n- Works like post order traversal.\n- Base case does not need to be passed explicitly. When we come out of the for loop, the memory pointed by **this** is deallcoated. Hence every TreeNode is deallocated.\n- Used the destructor recursively.\n\n**MashaAllah, we had created this recursive destructor at the first time when we created the TreeNode class. Congrats on the new skill 👍️.**\n\n![](/assets/tmp1695106576290_2._Destructor-image-1.png)\n\nSame as Ankush sir.\n![](../../../../../../../assets/tmp1695107116760_2._Destructor-image-1.png)\n",
      "html": "<h1 id=\"2.-destructor\">2. Destructor <a class=\"heading-anchor-permalink\" href=\"#2.-destructor\">#</a></h1>\n<p>Created Thursday 30 January 2020</p>\n<p>How to destroy the tree?</p>\n<ul>\n<li>Process once done with deallocates memory after the program ends? The problem is memory deallocation while the program is runnning.</li>\n<li>When we write delete obj_name, the destructor is called first. Here memory is deallocated for the attributes. Any DS’s inside need to be cleared explicitly. Taught in <strong>OOPS 1</strong>.</li>\n<li>Works like post order traversal.</li>\n<li>Base case does not need to be passed explicitly. When we come out of the for loop, the memory pointed by <strong>this</strong> is deallcoated. Hence every TreeNode is deallocated.</li>\n<li>Used the destructor recursively.</li>\n</ul>\n<p><strong>MashaAllah, we had created this recursive destructor at the first time when we created the TreeNode class. Congrats on the new skill 👍️.</strong></p>\n<p><img src=\"/assets/tmp1695106576290_2._Destructor-image-1.png\" alt=\"\"></p>\n<p>Same as Ankush sir.\n<img src=\"../../../../../../../assets/tmp1695107116760_2._Destructor-image-1.png\" alt=\"\"></p>\n",
      "id": 197
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees/1._Take_input_and_print_recursive/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees/1._Take_input_and_print_recursive/0_index.html",
      "content": "# 1. Take input and print recursive\nCreated Saturday 25 January 2020\n\nWe want to achieve two things:\n\n1. Print function - void printTree(TreeNode<T>* root)\n\n\n\n* Tree has a very easy and intuitive structure, i.e print the root an call print on all the subtrees.\n* We don't require **base cases** in generic trees, checking for NULL is an **edge case**. Both are different. Base case nake a recursion stop, while edge cases break the program or cause an error/exception.\n* We don't require a base case coz we never hit a coming back point.\n* The caller works as base case. \n* We never call from a NULL, coz we are using vectors, so we never use a garbage or empty list.\n\n\n\n2. Input function\n\nTreeNode<int>* takeInput()\n{\n// ask root data\n// no. of children\n// call takeInput three, 3 subtrees done.\n} \n\n* We create a node, only when we ask the value for it. This we don't have to keep a track of the variables for the children and all.\n* No need of base case as input will be taken if no.of children > 0. Else it will hit brace. i.e we won't go any further.\n* The function creates atleast one node.\n* takeInput() is easy to make, but using it is difficult.\n\n\nWe'll be using recursion in 95% of the tree problems. \n[TreeNode_Input_and_Print.h](1._Take_input_and_print_recursive/TreeNode_Input_and_Print.h)\n[treeMain.cpp](1._Take_input_and_print_recursive/treeMain.cpp)\n\n",
      "html": "<h1 id=\"1.-take-input-and-print-recursive\">1. Take input and print recursive <a class=\"heading-anchor-permalink\" href=\"#1.-take-input-and-print-recursive\">#</a></h1>\n<p>Created Saturday 25 January 2020</p>\n<p>We want to achieve two things:</p>\n<ol>\n<li>Print function - void printTree(TreeNode<T>* root)</li>\n</ol>\n<ul>\n<li>Tree has a very easy and intuitive structure, i.e print the root an call print on all the subtrees.</li>\n<li>We don’t require <strong>base cases</strong> in generic trees, checking for NULL is an <strong>edge case</strong>. Both are different. Base case nake a recursion stop, while edge cases break the program or cause an error/exception.</li>\n<li>We don’t require a base case coz we never hit a coming back point.</li>\n<li>The caller works as base case.</li>\n<li>We never call from a NULL, coz we are using vectors, so we never use a garbage or empty list.</li>\n</ul>\n<ol start=\"2\">\n<li>Input function</li>\n</ol>\n<p>TreeNode<int>* takeInput()\n{\n// ask root data\n// no. of children\n// call takeInput three, 3 subtrees done.\n}</p>\n<ul>\n<li>We create a node, only when we ask the value for it. This we don’t have to keep a track of the variables for the children and all.</li>\n<li>No need of base case as input will be taken if no.of children &gt; 0. Else it will hit brace. i.e we won’t go any further.</li>\n<li>The function creates atleast one node.</li>\n<li>takeInput() is easy to make, but using it is difficult.</li>\n</ul>\n<p>We’ll be using recursion in 95% of the tree problems.\n<a href=\"1._Take_input_and_print_recursive/TreeNode_Input_and_Print.h\">TreeNode_Input_and_Print.h</a>\n<a href=\"1._Take_input_and_print_recursive/treeMain.cpp\">treeMain.cpp</a></p>\n",
      "id": 198
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees/2._Take_input_levelwise.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees/2._Take_input_levelwise.html",
      "content": "# 2. Take input levelwise\nCreated Monday 27 January 2020\n\n\n* takeInput() was difficult to use, the user had to know recursion to use it. \n* Asking by generation.\n* **Very very easy.**\n\ncode:\ntemplate <typename T>\nTreeNode<T> *levelwise_Input()\n{\n//make the root\ncout << \"Data for root node: \";\nint data;\ncin >> data;\n\nTreeNode<T> *root = new TreeNode<T>(data);\n\nqueue<TreeNode<T> *> nodesPending;\nnodesPending.push(root); // obviously pending\n\nwhile (nodesPending.size() != 0)\n{\ndata = nodesPending.front()->data; // cureent root's data\ncout << \"Number of children for \" << data << \" : \";\nint n;\ncin >> n;\nfor (int i = 0; i < n; i++)\n{\ncout << \"Data for \" << data << \"'s \" << i << \"th child: \";\nTreeNode<T> *child = new TreeNode<T>;\ncin >> child->data;\nnodesPending.front()->children.push_back(child);\nnodesPending.push(child);\n}\nnodesPending.pop();\n}\nreturn root;\n// When you are a leaf\n/*\nInsights: Takes in a BFS way, is an implicit queue.\nEasy to use.\nMaid: Do things in the order of arrival, queue\nDescription:\nGoes to a node, takes all data for its children.\nThen starts from the first child. When that is over goes to the second child. Ans so on.\n*/\n}\n\n\n\n",
      "html": "<h1 id=\"2.-take-input-levelwise\">2. Take input levelwise <a class=\"heading-anchor-permalink\" href=\"#2.-take-input-levelwise\">#</a></h1>\n<p>Created Monday 27 January 2020</p>\n<ul>\n<li>takeInput() was difficult to use, the user had to know recursion to use it.</li>\n<li>Asking by generation.</li>\n<li><strong>Very very easy.</strong></li>\n</ul>\n<p>code:\ntemplate <typename T>\nTreeNode<T> *levelwise_Input()\n{\n//make the root\ncout &lt;&lt; &quot;Data for root node: &quot;;\nint data;\ncin &gt;&gt; data;</p>\n<p>TreeNode<T> *root = new TreeNode<T>(data);</p>\n<p>queue&lt;TreeNode<T> *&gt; nodesPending;\nnodesPending.push(root); // obviously pending</p>\n<p>while (nodesPending.size() != 0)\n{\ndata = nodesPending.front()-&gt;data; // cureent root’s data\ncout &lt;&lt; &quot;Number of children for &quot; &lt;&lt; data &lt;&lt; &quot; : &quot;;\nint n;\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; i++)\n{\ncout &lt;&lt; &quot;Data for &quot; &lt;&lt; data &lt;&lt; &quot;'s &quot; &lt;&lt; i &lt;&lt; &quot;th child: &quot;;\nTreeNode<T> <em>child = new TreeNode<T>;\ncin &gt;&gt; child-&gt;data;\nnodesPending.front()-&gt;children.push_back(child);\nnodesPending.push(child);\n}\nnodesPending.pop();\n}\nreturn root;\n// When you are a leaf\n/</em>\nInsights: Takes in a BFS way, is an implicit queue.\nEasy to use.\nMaid: Do things in the order of arrival, queue\nDescription:\nGoes to a node, takes all data for its children.\nThen starts from the first child. When that is over goes to the second child. Ans so on.\n*/\n}</p>\n",
      "id": 199
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees/3._Output_level_wise.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees/3._Output_level_wise.html",
      "content": "# 3. Output level wise\nCreated Monday 27 January 2020\n\nAs we did in the take level part, use the queue STL. And do it.\n\ncode:\ntemplate <typename T>\nvoid levelwise_printTree(TreeNode<int> *root)\n{\n//prank check\nif (root == NULL)\nreturn;\n\nqueue<TreeNode<int> *> nodesPending;\n\nnodesPending.push(root); // obviously pending, we have not printed it's children.\n\n// Another reason is that if we don't do this, then queue will not be systematic.\n\n// for optimization\nint data;                   // for relevance\nint n;                      // number of children\nTreeNode<int> *node = NULL; // the parent node\n\n// start printing the children\nwhile (nodesPending.size() != 0)\n{\nnode = nodesPending.front(); // current root's data\nn = node->children.size();\ndata = node->data;\n\nif (n == 0)\ncout << node->data << \": Leaf\\n\";\nelse\n{\ncout << \"Children of \" << data << \": \";\nfor (int i = 0; i < n; i++)\n{\ncout << node->children.at(i)->data << \", \";\nnodesPending.push(node->children.at(i));\n}\ncout << \"\\b\\b  \\n\";\n}\n\nnodesPending.pop();\n}\n}\n\n",
      "html": "<h1 id=\"3.-output-level-wise\">3. Output level wise <a class=\"heading-anchor-permalink\" href=\"#3.-output-level-wise\">#</a></h1>\n<p>Created Monday 27 January 2020</p>\n<p>As we did in the take level part, use the queue STL. And do it.</p>\n<p>code:\ntemplate <typename T>\nvoid levelwise_printTree(TreeNode<int> *root)\n{\n//prank check\nif (root == NULL)\nreturn;</p>\n<p>queue&lt;TreeNode<int> *&gt; nodesPending;</p>\n<p>nodesPending.push(root); // obviously pending, we have not printed it’s children.</p>\n<p>// Another reason is that if we don’t do this, then queue will not be systematic.</p>\n<p>// for optimization\nint data;                   // for relevance\nint n;                      // number of children\nTreeNode<int> *node = NULL; // the parent node</p>\n<p>// start printing the children\nwhile (nodesPending.size() != 0)\n{\nnode = nodesPending.front(); // current root’s data\nn = node-&gt;children.size();\ndata = node-&gt;data;</p>\n<p>if (n == 0)\ncout &lt;&lt; node-&gt;data &lt;&lt; “: Leaf\\n”;\nelse\n{\ncout &lt;&lt; &quot;Children of &quot; &lt;&lt; data &lt;&lt; &quot;: &quot;;\nfor (int i = 0; i &lt; n; i++)\n{\ncout &lt;&lt; node-&gt;<a href=\"http://children.at\">children.at</a>(i)-&gt;data &lt;&lt; &quot;, &quot;;\nnodesPending.push(node-&gt;<a href=\"http://children.at\">children.at</a>(i));\n}\ncout &lt;&lt; “\\b\\b  \\n”;\n}</p>\n<p>nodesPending.pop();\n}\n}</p>\n",
      "id": 200
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/1._Number_of_nodes.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/1._Number_of_nodes.html",
      "content": "# 1. Number of nodes\n\nCreated Monday 27 January 2020\n\n- Tree problems are very easy just **imagine **them like.\n\n![](/assets/1._Number_of_nodes-image-1.png)\nRight side is the correct visualization. Left side is the wrong one.\n\nVery easy, plain recursion:\ntemplate <typename T>\nint countNodes(TreeNode<T> \\*root)\n{\n// prank check\nif (root == NULL)\nreturn 0;\n\n// base case\nif (root->children.size() == 0)\nreturn 1; // leaf node\n\n// recursion, return nodes for all children + the root\nint sum = 0;\nint children_num = root->children.size();\nfor (int i = 0; i < children_num; i++)\nsum += (countNodes(root->children.at(i)));\n\nreturn sum + 1; // 1 is for the root\n}\n\n- Recursion is a great tool, use it.\n",
      "html": "<h1 id=\"1.-number-of-nodes\">1. Number of nodes <a class=\"heading-anchor-permalink\" href=\"#1.-number-of-nodes\">#</a></h1>\n<p>Created Monday 27 January 2020</p>\n<ul>\n<li>Tree problems are very easy just **imagine **them like.</li>\n</ul>\n<p><img src=\"/assets/1._Number_of_nodes-image-1.png\" alt=\"\">\nRight side is the correct visualization. Left side is the wrong one.</p>\n<p>Very easy, plain recursion:\ntemplate <typename T>\nint countNodes(TreeNode<T> *root)\n{\n// prank check\nif (root == NULL)\nreturn 0;</p>\n<p>// base case\nif (root-&gt;children.size() == 0)\nreturn 1; // leaf node</p>\n<p>// recursion, return nodes for all children + the root\nint sum = 0;\nint children_num = root-&gt;children.size();\nfor (int i = 0; i &lt; children_num; i++)\nsum += (countNodes(root-&gt;<a href=\"http://children.at\">children.at</a>(i)));</p>\n<p>return sum + 1; // 1 is for the root\n}</p>\n<ul>\n<li>Recursion is a great tool, use it.</li>\n</ul>\n",
      "id": 201
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/2._Height_of_a_tree_Exercise.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/2._Height_of_a_tree_Exercise.html",
      "content": "# 2. Height of a tree Exercise\nCreated Monday 27 January 2020\n\n\n* Concept: Height is just the maximum number of levels in the tree.\n\n\n\n* **We can say a single node is height 0 and also height 1. Definition is ***flexible***. There's no convention here.**\n* If we want to avoid negative numbers, we will be saying a **single node** is height **1**. As we will return 0 for NULL.\n\n\n\n",
      "html": "<h1 id=\"2.-height-of-a-tree-exercise\">2. Height of a tree Exercise <a class=\"heading-anchor-permalink\" href=\"#2.-height-of-a-tree-exercise\">#</a></h1>\n<p>Created Monday 27 January 2020</p>\n<ul>\n<li>\n<p>Concept: Height is just the maximum number of levels in the tree.</p>\n</li>\n<li>\n<p><strong>We can say a single node is height 0 and also height 1. Definition is <em><strong>flexible</strong></em>. There’s no convention here.</strong></p>\n</li>\n<li>\n<p>If we want to avoid negative numbers, we will be saying a <strong>single node</strong> is height <strong>1</strong>. As we will return 0 for NULL.</p>\n</li>\n</ul>\n",
      "id": 202
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/3._Depth_of_a_Node/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/3._Depth_of_a_Node/0_index.html",
      "content": "# 3. Depth of a Node\nCreated Wednesday 29 January 2020\n\nDepth: Level wise distance from root. \nhence depth(root) = 0.\n\n* Height = depth + 1\n* Depth is the level, starting from zero.\n\n\nQ) Print all node at depth d.\nA) Recursion for 95 %. Whenever is seems intractable, use what we know. \nf(k, root) = for i in root.children:\nf(k-1, root->children.at(i));\nif(k==0)\ncout << root->data << \" \";\n// if it is a leaf node for is not executed. Returned.\n\t\nfor(int i=0; i < root->children.size(); i++)\nf(root->children.at(i), k-1);\n\n\n* Doubt: Can we ever have a negative value, no, because \n\t1. If we reach a leaf midway(i.e cannot go further), the for loop is not executed, hence we return without making any further calls\n\t2. If we don't reach a leaf, we print and then return at k ==0.  i.e this is a **controlled recursion.**\n* Tip: We may have a an edge case where k is passed as negative.\n\n\n",
      "html": "<h1 id=\"3.-depth-of-a-node\">3. Depth of a Node <a class=\"heading-anchor-permalink\" href=\"#3.-depth-of-a-node\">#</a></h1>\n<p>Created Wednesday 29 January 2020</p>\n<p>Depth: Level wise distance from root.\nhence depth(root) = 0.</p>\n<ul>\n<li>Height = depth + 1</li>\n<li>Depth is the level, starting from zero.</li>\n</ul>\n<p>Q) Print all node at depth d.\nA) Recursion for 95 %. Whenever is seems intractable, use what we know.\nf(k, root) = for i in root.children:\nf(k-1, root-&gt;<a href=\"http://children.at\">children.at</a>(i));\nif(k==0)\ncout &lt;&lt; root-&gt;data &lt;&lt; &quot; &quot;;\n// if it is a leaf node for is not executed. Returned.</p>\n<p>for(int i=0; i &lt; root-&gt;children.size(); i++)\nf(root-&gt;<a href=\"http://children.at\">children.at</a>(i), k-1);</p>\n<ul>\n<li>Doubt: Can we ever have a negative value, no, because\n<ol>\n<li>If we reach a leaf midway(i.e cannot go further), the for loop is not executed, hence we return without making any further calls</li>\n<li>If we don’t reach a leaf, we print and then return at k ==0.  i.e this is a <strong>controlled recursion.</strong></li>\n</ol>\n</li>\n<li>Tip: We may have a an edge case where k is passed as negative.</li>\n</ul>\n",
      "id": 203
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/4._Number_of_leaf_nodes/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/4._Number_of_leaf_nodes/0_index.html",
      "content": "# 4. Number of leaf nodes\nCreated Wednesday 29 January 2020\n\n\n* f(root) = sum of f(root->children.at(i));\n* return 1 if root->children.size()==0.\n\n\n",
      "html": "<h1 id=\"4.-number-of-leaf-nodes\">4. Number of leaf nodes <a class=\"heading-anchor-permalink\" href=\"#4.-number-of-leaf-nodes\">#</a></h1>\n<p>Created Wednesday 29 January 2020</p>\n<ul>\n<li>f(root) = sum of f(root-&gt;<a href=\"http://children.at\">children.at</a>(i));</li>\n<li>return 1 if root-&gt;children.size()==0.</li>\n</ul>\n",
      "id": 204
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/4._Tree_Traversals/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/1._Generic_Trees/4._Tree_Traversals/0_index.html",
      "content": "# 4. Tree Traversals\nCreated Wednesday 29 January 2020\n\nWe have already done these\n\n1. Print basic, print root, then print left subtree and then the other subtrees.  - **PreOrder (NLR)**\n2. Level wise, using queue - **LevelOrder **(Independent).\n\n\nTrees are having simple problems mostly. Recursion is the primary weapon.\n\n\n3. inOrder traversals: Print the left(immediate i.e at(0)) subtree, print the root, print the other subtrees. **abdul bari sir's method is not useful.**\n4. postOrder traversals: Print all the subtrees then print the root.\n\n\n\n* **left right is a bad terminology for trees, children number is better. We will use elder of children which come first, i.e towards left in the vector.**\n\n\n",
      "html": "<h1 id=\"4.-tree-traversals\">4. Tree Traversals <a class=\"heading-anchor-permalink\" href=\"#4.-tree-traversals\">#</a></h1>\n<p>Created Wednesday 29 January 2020</p>\n<p>We have already done these</p>\n<ol>\n<li>Print basic, print root, then print left subtree and then the other subtrees.  - <strong>PreOrder (NLR)</strong></li>\n<li>Level wise, using queue - **LevelOrder **(Independent).</li>\n</ol>\n<p>Trees are having simple problems mostly. Recursion is the primary weapon.</p>\n<ol start=\"3\">\n<li>inOrder traversals: Print the left(immediate i.e at(0)) subtree, print the root, print the other subtrees. <strong>abdul bari sir’s method is not useful.</strong></li>\n<li>postOrder traversals: Print all the subtrees then print the root.</li>\n</ol>\n<ul>\n<li><strong>left right is a bad terminology for trees, children number is better. We will use elder of children which come first, i.e towards left in the vector.</strong></li>\n</ul>\n",
      "id": 205
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/0_index.html",
      "content": "# 2 .Binary trees\nCreated Thursday 30 January 2020\n\n[Experiments](./2_.Binary_trees/Codes/experiments)\n[Exercises.md](./2_.Binary_trees/Quizzes&Exercises/Exercises.md)\n[CodingExercises.md](./2_.Binary_trees/Quizzes&Exercises/CodingExercises.md)\n[Assignments.md](2_.Binary_trees/zAssignments/Assignments.md)\n\n",
      "html": "<h1 id=\"2-.binary-trees\">2 .Binary trees <a class=\"heading-anchor-permalink\" href=\"#2-.binary-trees\">#</a></h1>\n<p>Created Thursday 30 January 2020</p>\n<p><a href=\"./2_.Binary_trees/Codes/experiments\">Experiments</a>\n<a href=\"./2_.Binary_trees/Quizzes&amp;Exercises/Exercises.html\">Exercises.md</a>\n<a href=\"./2_.Binary_trees/Quizzes&amp;Exercises/CodingExercises.html\">CodingExercises.md</a>\n<a href=\"2_.Binary_trees/zAssignments/Assignments.html\">Assignments.md</a></p>\n",
      "id": 206
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/1._Intro_to_Binary_trees.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/1._Intro_to_Binary_trees.html",
      "content": "# 1. Intro to Binary trees\nCreated Thursday 30 January 2020\n\n\n* A special kind of tree, i.e each node has at most 2 children. i.e 0(leaf) 1 or 2.\n* They are used in many scenarios. In interviews as well.\n\n\n\n* How does it impact our TreeNode class?\n\t1. Children.capacity() <= 2. It is finite.\n\t2. Hence store them as 'left' and 'right' nodes addresses.\n\t3. vector is no longer a requirement.\n* To avoid confusion, we have BinaryTreeNode\n\n{\nT data;\nBinaryTreeNode<T>* left, right;\n}\n\nNote:\n 1  and 1\n/\t\t    \\\n 2\t\t     \t\t2 are **different(bit by bit)** here. **They are the same even in generic trees. Order did matter there too.**\n\n* The problem is that the skewed tree is different because the size of the child structure is fixed to 2. Hence two possibilities are present.\n\n\n\n* We have created left and right due to restriction in the system, arbitarirness of left and right, this will be useful later.\n\n\n\n\n",
      "html": "<h1 id=\"1.-intro-to-binary-trees\">1. Intro to Binary trees <a class=\"heading-anchor-permalink\" href=\"#1.-intro-to-binary-trees\">#</a></h1>\n<p>Created Thursday 30 January 2020</p>\n<ul>\n<li>\n<p>A special kind of tree, i.e each node has at most 2 children. i.e 0(leaf) 1 or 2.</p>\n</li>\n<li>\n<p>They are used in many scenarios. In interviews as well.</p>\n</li>\n<li>\n<p>How does it impact our TreeNode class?</p>\n<ol>\n<li>Children.capacity() &lt;= 2. It is finite.</li>\n<li>Hence store them as ‘left’ and ‘right’ nodes addresses.</li>\n<li>vector is no longer a requirement.</li>\n</ol>\n</li>\n<li>\n<p>To avoid confusion, we have BinaryTreeNode</p>\n</li>\n</ul>\n<p>{\nT data;\nBinaryTreeNode<T>* left, right;\n}</p>\n<p>Note:\n1  and 1\n/\t\t    <br>\n2\t\t     \t\t2 are <strong>different(bit by bit)</strong> here. <strong>They are the same even in generic trees. Order did matter there too.</strong></p>\n<ul>\n<li>\n<p>The problem is that the skewed tree is different because the size of the child structure is fixed to 2. Hence two possibilities are present.</p>\n</li>\n<li>\n<p>We have created left and right due to restriction in the system, arbitarirness of left and right, this will be useful later.</p>\n</li>\n</ul>\n",
      "id": 207
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/2._Coding_a_Binary_Tree/2._Input/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/2._Coding_a_Binary_Tree/2._Input/0_index.html",
      "content": "# 2. Input\nCreated Saturday 01 February \n\n\n* create queue\n* this is iterative\n* take the root->data if it exists\n* take the left child. attach it if given. push.\n* take the right child. attach it if given. push.\n\nKeep the root and trav different, as we need to return the root.\n\n**Why do we use a queue?**\nWe have to process the nodes as they come, so this is the perfect place for a queue. \n[BinaryTreeNode.h](2._Input/BinaryTreeNode.h)\n[treeMain.cpp](2._Input/treeMain.cpp)\n\n",
      "html": "<h1 id=\"2.-input\">2. Input <a class=\"heading-anchor-permalink\" href=\"#2.-input\">#</a></h1>\n<p>Created Saturday 01 February</p>\n<ul>\n<li>create queue</li>\n<li>this is iterative</li>\n<li>take the root-&gt;data if it exists</li>\n<li>take the left child. attach it if given. push.</li>\n<li>take the right child. attach it if given. push.</li>\n</ul>\n<p>Keep the root and trav different, as we need to return the root.</p>\n<p><strong>Why do we use a queue?</strong>\nWe have to process the nodes as they come, so this is the perfect place for a queue.\n<a href=\"2._Input/BinaryTreeNode.h\">BinaryTreeNode.h</a>\n<a href=\"2._Input/treeMain.cpp\">treeMain.cpp</a></p>\n",
      "id": 208
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/2._Coding_a_Binary_Tree/3._Printing_a_tree/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/2._Coding_a_Binary_Tree/3._Printing_a_tree/0_index.html",
      "content": "# 3. Printing a tree\nCreated Thursday 30 January 2020\n\n// raw print. Do preorder\n[treeMain.cpp](3._Printing_a_tree/treeMain.cpp)\n[BinaryTreeNode.h](3._Printing_a_tree/BinaryTreeNode.h)\n\ntwo versions of print are possible\n\n1. plain old preorder\n2. print node and node->left and node->right then proceed preorder.\n\n\n",
      "html": "<h1 id=\"3.-printing-a-tree\">3. Printing a tree <a class=\"heading-anchor-permalink\" href=\"#3.-printing-a-tree\">#</a></h1>\n<p>Created Thursday 30 January 2020</p>\n<p>// raw print. Do preorder\n<a href=\"3._Printing_a_tree/treeMain.cpp\">treeMain.cpp</a>\n<a href=\"3._Printing_a_tree/BinaryTreeNode.h\">BinaryTreeNode.h</a></p>\n<p>two versions of print are possible</p>\n<ol>\n<li>plain old preorder</li>\n<li>print node and node-&gt;left and node-&gt;right then proceed preorder.</li>\n</ol>\n",
      "id": 209
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/3._Params/1._Count_nodes.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/3._Params/1._Count_nodes.html",
      "content": "# 1. Count nodes\nCreated Saturday 01 February 2020\n\nf(root) = 1 + f(root->left) + f(root->right); 0 if root is nULL;\n\n",
      "html": "<h1 id=\"1.-count-nodes\">1. Count nodes <a class=\"heading-anchor-permalink\" href=\"#1.-count-nodes\">#</a></h1>\n<p>Created Saturday 01 February 2020</p>\n<p>f(root) = 1 + f(root-&gt;left) + f(root-&gt;right); 0 if root is nULL;</p>\n",
      "id": 210
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/3._Params/2._Diameter_of_a_BInary_tree.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/3._Params/2._Diameter_of_a_BInary_tree.html",
      "content": "# 2. Diameter of a BInary tree\nCreated Thursday 06 February 2020\n\n\n* See from BT visualization\n\ntwo cases are possible:\n\n1. Both extremum on different sides,  height(root->left) + height(root->right).\n2. Both on the the same side, max(diameter(root->left), diameter(root->right));\n\n\nthis is the same as **max**(diameter**(**root->left)**,** max**(**diameter(root->right)**,** height(root->left) **+** height(root->right)**))**\n\n\n* This is having very bad TC, because we repeat the same work. We could have saved the data somewhere.\n* So we better return a <diameter, height> pair.\n* For NULL, height = 0, diameter(distance to itself is 0).\n\n```c++\npair<int, int> diameterOfBinaryTreehelper(TreeNode* root)\n{\n\tif(root==NULL)\n\t{\n\t\tpair<int, int> ret(0, 0);\n\t\treturn ret;\n\t}\n\tpair<int, int> dhleft = diameterOfBinaryTreehelper(root->left);\n\tpair<int, int> dhright = diameterOfBinaryTreehelper(root->right);\n\n\t// check if max diameter is > h1 + h2\n\t// diameter = max(diameter1, diameter2, h1+h2)\n\t// height = max\n\tpair <int, int> ret;\n\tret.first = max(dhleft.first, max(dhright.first, dhleft.second+dhright.second));// diameter\n\tret.second = 1 + max(dhleft.second, dhright.second); // height, the usual height thing\n\treturn ret;\n}\n\n int diameterOfBinaryTree(TreeNode* root)\n{\n\treturn diameterOfBinaryTreehelper(root).first;\n}\n```\n\n\n* LeetCode uses the same height terminology.\n\n\nHeight = 0 for NULL\nHeight = 1 for leaf.\n\n",
      "html": "<h1 id=\"2.-diameter-of-a-binary-tree\">2. Diameter of a BInary tree <a class=\"heading-anchor-permalink\" href=\"#2.-diameter-of-a-binary-tree\">#</a></h1>\n<p>Created Thursday 06 February 2020</p>\n<ul>\n<li>See from BT visualization</li>\n</ul>\n<p>two cases are possible:</p>\n<ol>\n<li>Both extremum on different sides,  height(root-&gt;left) + height(root-&gt;right).</li>\n<li>Both on the the same side, max(diameter(root-&gt;left), diameter(root-&gt;right));</li>\n</ol>\n<p>this is the same as <strong>max</strong>(diameter**(<strong>root-&gt;left)</strong>,** max**(<strong>diameter(root-&gt;right)</strong>,** height(root-&gt;left) <strong>+</strong> height(root-&gt;right)<strong>))</strong></p>\n<ul>\n<li>This is having very bad TC, because we repeat the same work. We could have saved the data somewhere.</li>\n<li>So we better return a &lt;diameter, height&gt; pair.</li>\n<li>For NULL, height = 0, diameter(distance to itself is 0).</li>\n</ul>\n<pre><code class=\"language-c++\">pair&lt;int, int&gt; diameterOfBinaryTreehelper(TreeNode* root)\n{\n\tif(root==NULL)\n\t{\n\t\tpair&lt;int, int&gt; ret(0, 0);\n\t\treturn ret;\n\t}\n\tpair&lt;int, int&gt; dhleft = diameterOfBinaryTreehelper(root-&gt;left);\n\tpair&lt;int, int&gt; dhright = diameterOfBinaryTreehelper(root-&gt;right);\n\n\t// check if max diameter is &gt; h1 + h2\n\t// diameter = max(diameter1, diameter2, h1+h2)\n\t// height = max\n\tpair &lt;int, int&gt; ret;\n\tret.first = max(dhleft.first, max(dhright.first, dhleft.second+dhright.second));// diameter\n\tret.second = 1 + max(dhleft.second, dhright.second); // height, the usual height thing\n\treturn ret;\n}\n\n int diameterOfBinaryTree(TreeNode* root)\n{\n\treturn diameterOfBinaryTreehelper(root).first;\n}\n</code></pre>\n<ul>\n<li>LeetCode uses the same height terminology.</li>\n</ul>\n<p>Height = 0 for NULL\nHeight = 1 for leaf.</p>\n",
      "id": 211
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/4._Traversals/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/4._Traversals/0_index.html",
      "content": "# 4. Traversals\nCreated Saturday 01 February 2020\n\n\n1. PreOrder traversal: Node LeftSubtree RightSubtree.\n2. InOrder traversal:  LeftSubTree Node  RightSubtree. Binary tree exclusive.\n3. Postorder traversal: LeftSubtree RightSubtree Node.\n4. LevelOrder traversal: use a queue.\n\n\n[BinaryTreeNode.h](4._Traversals/BinaryTreeNode.h)\n[treeMain.cpp](4._Traversals/treeMain.cpp)\n\n",
      "html": "<h1 id=\"4.-traversals\">4. Traversals <a class=\"heading-anchor-permalink\" href=\"#4.-traversals\">#</a></h1>\n<p>Created Saturday 01 February 2020</p>\n<ol>\n<li>PreOrder traversal: Node LeftSubtree RightSubtree.</li>\n<li>InOrder traversal:  LeftSubTree Node  RightSubtree. Binary tree exclusive.</li>\n<li>Postorder traversal: LeftSubtree RightSubtree Node.</li>\n<li>LevelOrder traversal: use a queue.</li>\n</ol>\n<p><a href=\"4._Traversals/BinaryTreeNode.h\">BinaryTreeNode.h</a>\n<a href=\"4._Traversals/treeMain.cpp\">treeMain.cpp</a></p>\n",
      "id": 212
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal/1._Pre_and_In/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal/1._Pre_and_In/0_index.html",
      "content": "# 1. Pre and In\nCreated Saturday 01 February 2020\n\nPre has the first element as the root. **Root finder**\nIn has all left to the root as left subtree. **Space segregator.**\n\nAre both needed, yes. Why?\n\n1. Root finder helps find nodes.\n2. Space segregator helps in giving them correct left and right subtrees.\n\n1 and 2 are sufficient for making the tree.\nRemoving any of these, makes the construction impossible(due to muliple different having the same 1 or 2). \nHence 1 and 2 are necessary.\n\nProof by contradiction.\nProved: 1 and 2 are necessary and sufficient for a unique tree, as each step of the recursion is unique for all trees, a yielding unique tree. \n\n// This is the best way, coz we get a node at each activation record. Which the best any algorithm can do. It has to be recursive as we need to work on more than one level.\n\n**Caveat: No duplicate nodes should be present when using this method.**\n Code in exercise no.\n\n",
      "html": "<h1 id=\"1.-pre-and-in\">1. Pre and In <a class=\"heading-anchor-permalink\" href=\"#1.-pre-and-in\">#</a></h1>\n<p>Created Saturday 01 February 2020</p>\n<p>Pre has the first element as the root. <strong>Root finder</strong>\nIn has all left to the root as left subtree. <strong>Space segregator.</strong></p>\n<p>Are both needed, yes. Why?</p>\n<ol>\n<li>Root finder helps find nodes.</li>\n<li>Space segregator helps in giving them correct left and right subtrees.</li>\n</ol>\n<p>1 and 2 are sufficient for making the tree.\nRemoving any of these, makes the construction impossible(due to muliple different having the same 1 or 2).\nHence 1 and 2 are necessary.</p>\n<p>Proof by contradiction.\nProved: 1 and 2 are necessary and sufficient for a unique tree, as each step of the recursion is unique for all trees, a yielding unique tree.</p>\n<p>// This is the best way, coz we get a node at each activation record. Which the best any algorithm can do. It has to be recursive as we need to work on more than one level.</p>\n<p><strong>Caveat: No duplicate nodes should be present when using this method.</strong>\nCode in exercise no.</p>\n",
      "id": 213
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal/2._Post_and_In.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal/2._Post_and_In.html",
      "content": "# 2. Post and In\nCreated Saturday 01 February 2020\n\nPost has the first element as the root. **Root finder**\nIn has all left to the root as left subtree. **Space segregator.**\n\nAre both needed, yes. Why?\n\n1. Root finder helps find nodes.\n2. Space segregator helps in giving them correct left and right subtrees.\n\n1 and 2 are sufficient for making the tree.\nRemoving any of these, makes the construction impossible(due to muliple different having the same 1 or 2). \nHence 1 and 2 are necessary.\n\nProof by contradiction.\nProved: 1 and 2 are necessary and sufficient for a unique tree, as each step of the recursion is unique for all trees, a yielding unique tree. \n\n// This is the best way, coz we get a node at each activation record. Which the best any algorithm can do. It has to be recursive as we need to work on more than one level.\n\n**Caveat: No duplicate nodes should be present when using this method.**\n\nDoubt: Can pre and post be used to make a tree.\nNo: We need a segregator and a root finder.\n1 is satisfied but we cannot make out the segraegation.\n\n",
      "html": "<h1 id=\"2.-post-and-in\">2. Post and In <a class=\"heading-anchor-permalink\" href=\"#2.-post-and-in\">#</a></h1>\n<p>Created Saturday 01 February 2020</p>\n<p>Post has the first element as the root. <strong>Root finder</strong>\nIn has all left to the root as left subtree. <strong>Space segregator.</strong></p>\n<p>Are both needed, yes. Why?</p>\n<ol>\n<li>Root finder helps find nodes.</li>\n<li>Space segregator helps in giving them correct left and right subtrees.</li>\n</ol>\n<p>1 and 2 are sufficient for making the tree.\nRemoving any of these, makes the construction impossible(due to muliple different having the same 1 or 2).\nHence 1 and 2 are necessary.</p>\n<p>Proof by contradiction.\nProved: 1 and 2 are necessary and sufficient for a unique tree, as each step of the recursion is unique for all trees, a yielding unique tree.</p>\n<p>// This is the best way, coz we get a node at each activation record. Which the best any algorithm can do. It has to be recursive as we need to work on more than one level.</p>\n<p><strong>Caveat: No duplicate nodes should be present when using this method.</strong></p>\n<p>Doubt: Can pre and post be used to make a tree.\nNo: We need a segregator and a root finder.\n1 is satisfied but we cannot make out the segraegation.</p>\n",
      "id": 214
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal/3._Level_and_In.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal/3._Level_and_In.html",
      "content": "# 3. Level and In\nCreated Monday 03 February 2020\n\n\n* Space segregator: InOrder as usual. Subtrees divided by the root.\n* Root finder: Level order. First is the root.\n\n\nSufficiency and necessity is proven similar to Lecture 6 and 7.\n\nProcedure:\n\n1. root = in.front()\n2. in_left_subtree = in[0:rootIndex]\n3. in_right_subtree = in[rootIndex+1:]\n4. level_left = level - all occurrences of the right subtree elements - o(nlogn), sorting, 2 pointer\n5. level_right = level - all occurences of the left subtree elements - o(nogn), sorting, 2 pointer\n6. root->left = f(level_left, in_left_subtree, int l1, int l2)\n7. root->right = f(level_right, in_right_subtree, int l1, int l2)\n8. Stop if root==NULL\n\n\n\n",
      "html": "<h1 id=\"3.-level-and-in\">3. Level and In <a class=\"heading-anchor-permalink\" href=\"#3.-level-and-in\">#</a></h1>\n<p>Created Monday 03 February 2020</p>\n<ul>\n<li>Space segregator: InOrder as usual. Subtrees divided by the root.</li>\n<li>Root finder: Level order. First is the root.</li>\n</ul>\n<p>Sufficiency and necessity is proven similar to Lecture 6 and 7.</p>\n<p>Procedure:</p>\n<ol>\n<li>root = in.front()</li>\n<li>in_left_subtree = in[0:rootIndex]</li>\n<li>in_right_subtree = in[rootIndex+1:]</li>\n<li>level_left = level - all occurrences of the right subtree elements - o(nlogn), sorting, 2 pointer</li>\n<li>level_right = level - all occurences of the left subtree elements - o(nogn), sorting, 2 pointer</li>\n<li>root-&gt;left = f(level_left, in_left_subtree, int l1, int l2)</li>\n<li>root-&gt;right = f(level_right, in_right_subtree, int l1, int l2)</li>\n<li>Stop if root==NULL</li>\n</ol>\n",
      "id": 215
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/zAssignments/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/zAssignments/0_index.html",
      "content": "# zAssignments\nCreated Wednesday 05 February 2020\n\nWhy do we use a queue?\n\n* Because it shows us when to stop, and there's no such thing in a vector(required precomputation of the entire tree). Using vector is the same, except that we get a chanec to see our nodes.\n* A queue takes up less space then a vector. O(n) in both the cases. But it is a difference of 50%.\n\n\n\n* For level wise things do the following, make root and push null. When we hit null, we are done with pushing all the childre. So push a NULL.\n* This way we can very easily do level wise stuff.\n* This method is the **fastest** way to do this.\n* Why don't we use the depth criteria? That can be done, but this is also a property of the system. Which we exploit here.\n\n\nFor choosing the data structure: Think about the fundamental operations and the philosophy. We can combine things.\n\n* min and max are in the iostream class.\n\n\nFor minimizing work, we can return pair of objects when needed. So that we don't have to do work again and again. **Kind of a dynamic programming approach.**\n\n int diameterOfBinaryTree(TreeNode* root) \n{\nreturn diameterOfBinaryTreehelper(root).first;\n}\n    \npair<int, int> diameterOfBinaryTreehelper(TreeNode* root) \n{\nif(root==NULL)\n{\npair<int, int> ret(0, 0);\nreturn ret;\n}\npair<int, int> dhleft = diameterOfBinaryTreehelper(root->left); \npair<int, int> dhright = diameterOfBinaryTreehelper(root->right); \n        \n// check if max diameter is > h1 + h2\n// diameter = max(diameter1, diameter2, h1+h2)\n// height = max\npair <int, int> ret;\nret.first = max(dhleft.first, max(dhright.first, dhleft.second+dhright.second));// diameter\nret.second = 1+max(dhleft.second, dhright.second);\nreturn ret;\n}\n\n",
      "html": "<h1 id=\"zassignments\">zAssignments <a class=\"heading-anchor-permalink\" href=\"#zassignments\">#</a></h1>\n<p>Created Wednesday 05 February 2020</p>\n<p>Why do we use a queue?</p>\n<ul>\n<li>\n<p>Because it shows us when to stop, and there’s no such thing in a vector(required precomputation of the entire tree). Using vector is the same, except that we get a chanec to see our nodes.</p>\n</li>\n<li>\n<p>A queue takes up less space then a vector. O(n) in both the cases. But it is a difference of 50%.</p>\n</li>\n<li>\n<p>For level wise things do the following, make root and push null. When we hit null, we are done with pushing all the childre. So push a NULL.</p>\n</li>\n<li>\n<p>This way we can very easily do level wise stuff.</p>\n</li>\n<li>\n<p>This method is the <strong>fastest</strong> way to do this.</p>\n</li>\n<li>\n<p>Why don’t we use the depth criteria? That can be done, but this is also a property of the system. Which we exploit here.</p>\n</li>\n</ul>\n<p>For choosing the data structure: Think about the fundamental operations and the philosophy. We can combine things.</p>\n<ul>\n<li>min and max are in the iostream class.</li>\n</ul>\n<p>For minimizing work, we can return pair of objects when needed. So that we don’t have to do work again and again. <strong>Kind of a dynamic programming approach.</strong></p>\n<p>int diameterOfBinaryTree(TreeNode* root)\n{\nreturn diameterOfBinaryTreehelper(root).first;\n}</p>\n<p>pair&lt;int, int&gt; diameterOfBinaryTreehelper(TreeNode* root)\n{\nif(root==NULL)\n{\npair&lt;int, int&gt; ret(0, 0);\nreturn ret;\n}\npair&lt;int, int&gt; dhleft = diameterOfBinaryTreehelper(root-&gt;left);\npair&lt;int, int&gt; dhright = diameterOfBinaryTreehelper(root-&gt;right);</p>\n<p>// check if max diameter is &gt; h1 + h2\n// diameter = max(diameter1, diameter2, h1+h2)\n// height = max\npair &lt;int, int&gt; ret;\nret.first = max(dhleft.first, max(dhright.first, dhleft.second+dhright.second));// diameter\nret.second = 1+max(dhleft.second, dhright.second);\nreturn ret;\n}</p>\n",
      "id": 216
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/zAssignments/Assignments.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/2_.Binary_trees/zAssignments/Assignments.html",
      "content": "# Assignments\n\n<details> <summary><strong> 1. Sum of all nodes </strong></summary>\n\n# 1. Sum of all nodes\n\n    Given a binary tree, find and return the sum of all nodes.\n\n**Input format**\n\n    Elements in level order form (separated by space). If any node does not have left or right child, take -1 in its place.\n\n**Sample Input**\n\n    5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1\n\n**Sample Output**\n\n    35\n\n<details> <summary><strong>Code</strong></summary>\n\n    // Following is the Binary Tree node structure\n    /**************\n    class BinaryTreeNode {\n        public :\n        T data;\n        BinaryTreeNode<T> *left;\n        BinaryTreeNode<T> *right;\n\n        BinaryTreeNode(T data) {\n            this -> data = data;\n            left = NULL;\n            right = NULL;\n        }\n    };\n    ***************/\n\n    int sumOfAllNodes(BinaryTreeNode<int> *root)\n    {\n        // preorder traversal\n        if (root == NULL)\n            return 0;\n\n        return root->data + sumOfAllNodes(root->left) + sumOfAllNodes(root->right);\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 2. is Balanced </strong></summary>\n\n# 2. is Balanced\n\n    Given a binary tree, check if its balanced i.e. depth of left and right subtrees of every node differ by at max 1. Return true if given binary tree is balanced, false otherwise.\n\n**Input Format**\n\n    Elements in level order form (separated by space). If any node does not have left or right child, take -1 in its place.\n\n**Sample Input 1**\n\n    5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1\n\n**Sample Output 1**\n\n    false\n\n**Sample Input 2**\n\n    1 2 3 -1 -1 -1 -1\n\n**Sample Output 2**\n\n    true\n\n<details> <summary><strong>Code</strong></summary>\n\n    // Following is the Binary Tree node structure\n    /**************\n    class BinaryTreeNode {\n        public :\n        T data;\n        BinaryTreeNode<T> *left;\n        BinaryTreeNode<T> *right;\n\n        BinaryTreeNode(T data) {\n            this -> data = data;\n            left = NULL;\n            right = NULL;\n        }\n    };\n    ***************/\n\n    // we need this function\n    int height(BinaryTreeNode<int> *root)\n    {\n        if (root == NULL)\n            return 0;\n        return 1 + max(height(root->left), height(root->right));\n    }\n\n    bool isBalanced(BinaryTreeNode<int> *root)\n    {\n        if (root == NULL)\n            return true;\n\n        int dif = height(root->left) - height(root->right);\n        dif = dif > 0 ? dif : -dif;\n\n        if (dif <= 1)\n            return isBalanced(root->left) && isBalanced(root->right);\n        return false;\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 3. Level order traversal </strong></summary>\n\n# 3. Level order traversal\n\n    Given a binary tree, print the level order traversal. Make sure each level start in new line.\n\n**Input Format**\n\n    Elements in level order form (separated by space). If any node does not have left or right child, take -1 in its place.\n\n**Output Format**\n\n    Elements are printed level wise, each level in new line (separated by space).\n\n**Sample Input**\n\n    5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1\n\n**Sample Output**\n\n    5\n    6 10\n    2 3\n    9\n\n<details> <summary><strong>Code</strong></summary>\n\n    // Following is the Binary Tree node structure\n    /**************\n    class BinaryTreeNode {\n        public :\n        T data;\n        BinaryTreeNode<T> *left;\n        BinaryTreeNode<T> *right;\n\n        BinaryTreeNode(T data) {\n            this -> data = data;\n            left = NULL;\n            right = NULL;\n        }\n    };\n\n    ***************/\n\n    void printLevelATNewLine(BinaryTreeNode<int> *root)\n    {\n        if (root == NULL)\n            return;\n\n        queue<BinaryTreeNode<int> *> q;\n        q.push(root);\n        q.push(NULL);\n\n        // passes a level with the line seperator Base case\n        // this line seperator will be encountered only if all of the previous nodes children have been take care of. Forward case\n\n        BinaryTreeNode<int> *temp;\n        while (!q.empty())\n        {\n            temp = q.front();\n            q.pop();\n\n            if (temp == NULL)\n            {\n                // a. If this is the last NULL\n                if (q.empty())\n                    return;\n\n                // b. this is not the last NULL\n                q.push(NULL); // the for the present generation\n                cout << endl;\n                continue; // because temp needs to be changed\n            }\n\n            cout << temp->data << \" \";\n            // take in children belonging to all\n            if (temp->left != NULL)\n                q.push(temp->left);\n            if (temp->right != NULL)\n                q.push(temp->right);\n        }\n    }\n\n    /* Painful insights:\n\n        We assume that we have the ability to print all the children on a level with a NULL as line end.\n\n        If this is possible, we can do the following.\n            We start to push the children of the present level one by one.\n            Hence we successfully have pushed a generation of nodes.\n\n            When we encounter the NULL, two cases are possible:\n            a. The list is empty and everything has been printed, Break;\n            b. We have more chilren remaining. As we have already pushed the generation of nodes\n                push the NULL as the end value. print newline. continue , because we need the q.front() for adding the children\n\n            If we don't have a NULL, just push the non-NULL children of the node.\n            T.C = O(n), Space complexity = O(n)\n\n        If this is not possible.\n            Ha ha ha, is is possible.\n\n    /*\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 4. Remove Leaf nodes </strong></summary>\n\n# 4. Remove Leaf nodes\n\n    Remove all leaf nodes from a given Binary Tree. Leaf nodes are those nodes, which don't have any children.\n\n    Note : Root will also be a leaf node if it doesn't have left and right child. You don't need to print the tree, just remove all leaf nodes and return the updated root.\n\n**Input Format**\n\n    Elements in level order form (separated by space)\n\n    (If any node does not have left or right child, take -1 in its place)\n\n**Output Format**\n\n    Elements are printed level wise, each level in new line (separated by space).\n\n**Sample Input**\n\n    8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1\n\n**Sample Output**\n\n    8\n    3 10\n    6 14\n\n<details> <summary><strong>Code</strong></summary>\n\n    // Following is the Binary Tree node structure\n    /**************\n    class BinaryTreeNode {\n        public :\n        T data;\n        BinaryTreeNode<T> *left;\n        BinaryTreeNode<T> *right;\n\n        BinaryTreeNode(T data) {\n            this -> data = data;\n            left = NULL;\n            right = NULL;\n        }\n    };\n    ***************/\n\n    BinaryTreeNode<int> *removeLeafNodes(BinaryTreeNode<int> *root)\n    {\n        if (root == NULL)\n            return NULL;\n\n        if (root->left == NULL && root->right == NULL)\n            return NULL;\n        root->left = removeLeafNodes(root->left);\n        root->right = removeLeafNodes(root->right);\n        return root;\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 5. Level wise linkedlist </strong></summary>\n\n# 5. Level wise linkedlist\n\n    Given a binary tree, write code to create a separate linked list for each level. You need to return the array which contains head of each level linked list.\n\n**Input Format**\n\n    Elements in level order form (separated by space). If any node does not have left or right child, take -1 in its place.\n\n**Output Format**\n\n    Each level linked list is printed in new line (elements separated by space).\n\n**Sample Input**\n\n    5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1\n\n**Sample Output**\n\n    5\n    6 10\n    2 3\n    9\n\n<details> <summary><strong>Code</strong></summary>\n\n    vector<node<int> *> createLLForEachLevel(BinaryTreeNode<int> *root)\n    {\n        // if(root==NULL)\n        //     return NULL;\n\n        // followung the same level order\n        // first make the queue fully, then make the LL's\n        // same both ways.\n\n        queue<BinaryTreeNode<int> *> q; // the queue required for level order\n        q.push(root);                   //    for level order\n        q.push(NULL);                   //    for level order\n\n        vector<node<int> *> ret; // heads of the LL's\n        ret.push_back(NULL);     // making a place for an empty LL, emptiness indicated by NULL\n\n        node<int> *ltail = NULL; // keeping track of the current LL's tail. Can serve as NULL and head too. Used fr=or progressing the list\n\n        BinaryTreeNode<int> *temp; // the variable for doing queue ops, so that calls are not made many times\n\n        while (!q.empty())\n        {\n            temp = q.front();\n            q.pop();\n\n            if (temp == NULL) // not going to happen initially, as root!=NULL\n            {\n                ltail->next = NULL; // end the list\n                if (q.empty())      // last NULL\n                    return ret;\n\n                ltail = NULL;\n                ret.push_back(ltail); // make a place for the new list in ret\n                // tail which points to nothing is now the head of the LL\n                q.push(NULL);\n                continue;\n            }\n\n            if (temp->left != NULL)\n                q.push(temp->left);\n\n            if (temp->right != NULL)\n                q.push(temp->right);\n\n            if (ret.back() == NULL) // we have valid node in queue but the LL is not started\n            {\n                ltail = new node<int>(temp->data); // making tail point to something\n                ret.push_back(ltail);\n            }\n            else\n            {\n                ltail->next = new node<int>(temp->data);\n                ltail = ltail->next;\n            }\n        }\n    }\n\n    /*\n        Insights: Using the same principle of level, by a seperator.\n        Problems encountered:\n        0. Should i fill the entire queue and then make the LL's. No we won't be able to do this in a queue(as you'll never reach a q.front()==NULL). You can use a vector. But the space complexity is o(N), but for queue it is O(N/2). Which is huge.\n        Using recursion yields the same thing. So queue is the most effiecient.\n        If we use queue, we have to make the LL simultaneously. As nodes are being popped.\n        1. How to make an LL. Soln: Using NULL in the return vector before the loop starts.\n        2. For progressing the list, we need to have a tail pointer. Make a variable called ltail before the loop.\n        3. A bug: ltail be made to point to NULL and pushed into the stack. pushing NULL and then setting ltail = NULL is wrong because ltail is nothing but a pointer. Hence ltail itself needs to be pushed when making the head. Basics.\n    */\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 6. ZigZag tree </strong></summary>\n\n# 6. ZigZag tree\n\n    Given a binary tree, print the zig zag order i.e print level 1 from left to right, level 2 from right to left and so on. This means odd levels should get printed from left to right and even level right to left.\n\n**Input Format**\n\n    Elements in level order form (separated by space)\n\n    (If any node does not have left or right child, take -1 in its place)\n\n**Output Format**\n\n    Elements are printed level wise, each level in new line (separated by space).\n\n**Sample Input**\n\n    5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1\n\n**Sample Output**\n\n    5\n    10 6\n    2 3\n    9\n\n<details> <summary><strong>Code</strong></summary>\n\n    // Following is the Binary Tree node structure\n    /**************\n    class BinaryTreeNode {\n        public :\n        T data;\n        BinaryTreeNode<T> *left;\n        BinaryTreeNode<T> *right;\n\n        BinaryTreeNode(T data) {\n            this -> data = data;\n            left = NULL;\n            right = NULL;\n        }\n    };\n\n    ***************/\n\n    // used Linked list\n    #include <list>\n    void zigZagOrder(BinaryTreeNode<int> *root)\n    {\n        if (root == NULL)\n            return;\n\n        queue<BinaryTreeNode<int> *> q;\n        q.push(root);\n        q.push(NULL);\n        // O(n) space complexity\n\n        list<BinaryTreeNode<int> *> prit;\n\n        BinaryTreeNode<int> *temp;\n\n        bool flag = false;\n\n        while (!q.empty())\n        {\n            temp = q.front();\n            q.pop();\n\n            if (temp == NULL)\n            {\n\n                while (!prit.empty())\n                {\n                    cout << prit.front()->data << \" \";\n                    prit.pop_front();\n                }\n                cout << \"\\n\";\n                if (q.empty())\n                    return;\n                q.push(NULL);\n                flag = !flag;\n                continue;\n            }\n            if (flag == false)\n                prit.push_back(temp);\n            else\n                prit.push_front(temp);\n            if (temp->left != NULL)\n                q.push(temp->left);\n            if (temp->right != NULL)\n                q.push(temp->right);\n        }\n    }\n\n    // Using two stacks and L->R and R->L child check\n    void zigZagOrder(BinaryTreeNode<int> *root)\n    {\n        if (root == NULL)\n            return;\n        stack<BinaryTreeNode<int> *> sf;     // forward\n        stack<BinaryTreeNode<int> *> sb;     // backwards\n        stack<BinaryTreeNode<int> *> *p, *c; // parents, children\n\n        stack<BinaryTreeNode<int> *> *switcher;\n        sf.push(root);\n        p = &sf;\n        c = &sb;\n\n        bool flag = false; // this makes us shift the array from left to right and right to left\n        while (!p->empty())\n        {\n            if (flag == false)\n            {\n                while (!p->empty())\n                {\n                    // print the conent of the parent\n                    cout << p->top()->data << \" \";\n                    if (p->top()->left != NULL)\n                        c->push(p->top()->left);\n\n                    if (p->top()->right != NULL)\n                        c->push(p->top()->right);\n                    p->pop();\n                }\n                // done with the parent\n                cout << \"\\n\";\n                flag = true;\n            }\n            else\n            {\n                while (!p->empty())\n                {\n                    // print the conent of the parent\n                    cout << p->top()->data << \" \";\n                    if (p->top()->right != NULL)\n                        c->push(p->top()->right);\n                    if (p->top()->left != NULL)\n                        c->push(p->top()->left);\n                    p->pop();\n                }\n                // done with the parent\n                cout << \"\\n\";\n                flag = false;\n            }\n\n            // switch parent and child.\n            switcher = p;\n            p = c;\n            c = switcher;\n        }\n    }\n\n</details>\n\n---\n\n</details>\n\n<details> <summary><strong> 7. Min and Max of Binary Tree </strong></summary>\n\n# 7. Min and Max of Binary Tree\n\n    Given a binary tree, find and return the min and max data value of given binary tree.\n    Return the output as an object of PairAns class, which is already created.\n\n**Input Format**\n\n    Elements in level order form (separated by space)\n    (If any node does not have left or right child, take -1 in its place)\n\n**Output Format**\n\n    Max and min (separated by space)\n\n**Sample Input**\n\n    8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1\n\n**Sample Output**\n\n    14 1\n\n<details> <summary><strong>Code</strong></summary>\n\n    // Following is the Binary Tree node structure\n    /**************\n    class BinaryTreeNode {\n        public :\n        T data;\n        BinaryTreeNode<T> *left;\n        BinaryTreeNode<T> *right;\n\n        BinaryTreeNode(T data)\n        {\n            this -> data = data;\n            left = NULL;\n            right = NULL;\n        }\n    };\n\n    // PairAns class -\n    class PairAns\n    {\n        public :\n            int min;\n            int max;\n    };\n\n    ***************/\n    #include <climits>\n    PairAns minMax(BinaryTreeNode<int> *root)\n    {\n        if (root == NULL)\n        {\n            PairAns ret;\n            ret.min = INT_MAX;\n            ret.max = INT_MIN;\n            return ret; // return by value\n        }\n        PairAns al = minMax(root->left);\n        PairAns ar = minMax(root->right);\n        al.min = min(al.min, min(ar.min, root->data));\n        al.max = max(al.max, max(ar.max, root->data));\n        return al;\n    }\n\n</details>\n\n---\n\n</details>\n",
      "html": "<h1 id=\"assignments\">Assignments <a class=\"heading-anchor-permalink\" href=\"#assignments\">#</a></h1>\n<details> <summary><strong> 1. Sum of all nodes </strong></summary>\n<h1 id=\"1.-sum-of-all-nodes\">1. Sum of all nodes <a class=\"heading-anchor-permalink\" href=\"#1.-sum-of-all-nodes\">#</a></h1>\n<pre><code>Given a binary tree, find and return the sum of all nodes.\n</code></pre>\n<p><strong>Input format</strong></p>\n<pre><code>Elements in level order form (separated by space). If any node does not have left or right child, take -1 in its place.\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>35\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// Following is the Binary Tree node structure\n/**************\nclass BinaryTreeNode {\n    public :\n    T data;\n    BinaryTreeNode&lt;T&gt; *left;\n    BinaryTreeNode&lt;T&gt; *right;\n\n    BinaryTreeNode(T data) {\n        this -&gt; data = data;\n        left = NULL;\n        right = NULL;\n    }\n};\n***************/\n\nint sumOfAllNodes(BinaryTreeNode&lt;int&gt; *root)\n{\n    // preorder traversal\n    if (root == NULL)\n        return 0;\n\n    return root-&gt;data + sumOfAllNodes(root-&gt;left) + sumOfAllNodes(root-&gt;right);\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 2. is Balanced </strong></summary>\n<h1 id=\"2.-is-balanced\">2. is Balanced <a class=\"heading-anchor-permalink\" href=\"#2.-is-balanced\">#</a></h1>\n<pre><code>Given a binary tree, check if its balanced i.e. depth of left and right subtrees of every node differ by at max 1. Return true if given binary tree is balanced, false otherwise.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Elements in level order form (separated by space). If any node does not have left or right child, take -1 in its place.\n</code></pre>\n<p><strong>Sample Input 1</strong></p>\n<pre><code>5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1\n</code></pre>\n<p><strong>Sample Output 1</strong></p>\n<pre><code>false\n</code></pre>\n<p><strong>Sample Input 2</strong></p>\n<pre><code>1 2 3 -1 -1 -1 -1\n</code></pre>\n<p><strong>Sample Output 2</strong></p>\n<pre><code>true\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// Following is the Binary Tree node structure\n/**************\nclass BinaryTreeNode {\n    public :\n    T data;\n    BinaryTreeNode&lt;T&gt; *left;\n    BinaryTreeNode&lt;T&gt; *right;\n\n    BinaryTreeNode(T data) {\n        this -&gt; data = data;\n        left = NULL;\n        right = NULL;\n    }\n};\n***************/\n\n// we need this function\nint height(BinaryTreeNode&lt;int&gt; *root)\n{\n    if (root == NULL)\n        return 0;\n    return 1 + max(height(root-&gt;left), height(root-&gt;right));\n}\n\nbool isBalanced(BinaryTreeNode&lt;int&gt; *root)\n{\n    if (root == NULL)\n        return true;\n\n    int dif = height(root-&gt;left) - height(root-&gt;right);\n    dif = dif &gt; 0 ? dif : -dif;\n\n    if (dif &lt;= 1)\n        return isBalanced(root-&gt;left) &amp;&amp; isBalanced(root-&gt;right);\n    return false;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 3. Level order traversal </strong></summary>\n<h1 id=\"3.-level-order-traversal\">3. Level order traversal <a class=\"heading-anchor-permalink\" href=\"#3.-level-order-traversal\">#</a></h1>\n<pre><code>Given a binary tree, print the level order traversal. Make sure each level start in new line.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Elements in level order form (separated by space). If any node does not have left or right child, take -1 in its place.\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Elements are printed level wise, each level in new line (separated by space).\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>5\n6 10\n2 3\n9\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// Following is the Binary Tree node structure\n/**************\nclass BinaryTreeNode {\n    public :\n    T data;\n    BinaryTreeNode&lt;T&gt; *left;\n    BinaryTreeNode&lt;T&gt; *right;\n\n    BinaryTreeNode(T data) {\n        this -&gt; data = data;\n        left = NULL;\n        right = NULL;\n    }\n};\n\n***************/\n\nvoid printLevelATNewLine(BinaryTreeNode&lt;int&gt; *root)\n{\n    if (root == NULL)\n        return;\n\n    queue&lt;BinaryTreeNode&lt;int&gt; *&gt; q;\n    q.push(root);\n    q.push(NULL);\n\n    // passes a level with the line seperator Base case\n    // this line seperator will be encountered only if all of the previous nodes children have been take care of. Forward case\n\n    BinaryTreeNode&lt;int&gt; *temp;\n    while (!q.empty())\n    {\n        temp = q.front();\n        q.pop();\n\n        if (temp == NULL)\n        {\n            // a. If this is the last NULL\n            if (q.empty())\n                return;\n\n            // b. this is not the last NULL\n            q.push(NULL); // the for the present generation\n            cout &lt;&lt; endl;\n            continue; // because temp needs to be changed\n        }\n\n        cout &lt;&lt; temp-&gt;data &lt;&lt; &quot; &quot;;\n        // take in children belonging to all\n        if (temp-&gt;left != NULL)\n            q.push(temp-&gt;left);\n        if (temp-&gt;right != NULL)\n            q.push(temp-&gt;right);\n    }\n}\n\n/* Painful insights:\n\n    We assume that we have the ability to print all the children on a level with a NULL as line end.\n\n    If this is possible, we can do the following.\n        We start to push the children of the present level one by one.\n        Hence we successfully have pushed a generation of nodes.\n\n        When we encounter the NULL, two cases are possible:\n        a. The list is empty and everything has been printed, Break;\n        b. We have more chilren remaining. As we have already pushed the generation of nodes\n            push the NULL as the end value. print newline. continue , because we need the q.front() for adding the children\n\n        If we don't have a NULL, just push the non-NULL children of the node.\n        T.C = O(n), Space complexity = O(n)\n\n    If this is not possible.\n        Ha ha ha, is is possible.\n\n/*\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 4. Remove Leaf nodes </strong></summary>\n<h1 id=\"4.-remove-leaf-nodes\">4. Remove Leaf nodes <a class=\"heading-anchor-permalink\" href=\"#4.-remove-leaf-nodes\">#</a></h1>\n<pre><code>Remove all leaf nodes from a given Binary Tree. Leaf nodes are those nodes, which don't have any children.\n\nNote : Root will also be a leaf node if it doesn't have left and right child. You don't need to print the tree, just remove all leaf nodes and return the updated root.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Elements in level order form (separated by space)\n\n(If any node does not have left or right child, take -1 in its place)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Elements are printed level wise, each level in new line (separated by space).\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>8\n3 10\n6 14\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// Following is the Binary Tree node structure\n/**************\nclass BinaryTreeNode {\n    public :\n    T data;\n    BinaryTreeNode&lt;T&gt; *left;\n    BinaryTreeNode&lt;T&gt; *right;\n\n    BinaryTreeNode(T data) {\n        this -&gt; data = data;\n        left = NULL;\n        right = NULL;\n    }\n};\n***************/\n\nBinaryTreeNode&lt;int&gt; *removeLeafNodes(BinaryTreeNode&lt;int&gt; *root)\n{\n    if (root == NULL)\n        return NULL;\n\n    if (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL)\n        return NULL;\n    root-&gt;left = removeLeafNodes(root-&gt;left);\n    root-&gt;right = removeLeafNodes(root-&gt;right);\n    return root;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 5. Level wise linkedlist </strong></summary>\n<h1 id=\"5.-level-wise-linkedlist\">5. Level wise linkedlist <a class=\"heading-anchor-permalink\" href=\"#5.-level-wise-linkedlist\">#</a></h1>\n<pre><code>Given a binary tree, write code to create a separate linked list for each level. You need to return the array which contains head of each level linked list.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Elements in level order form (separated by space). If any node does not have left or right child, take -1 in its place.\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Each level linked list is printed in new line (elements separated by space).\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>5\n6 10\n2 3\n9\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>vector&lt;node&lt;int&gt; *&gt; createLLForEachLevel(BinaryTreeNode&lt;int&gt; *root)\n{\n    // if(root==NULL)\n    //     return NULL;\n\n    // followung the same level order\n    // first make the queue fully, then make the LL's\n    // same both ways.\n\n    queue&lt;BinaryTreeNode&lt;int&gt; *&gt; q; // the queue required for level order\n    q.push(root);                   //    for level order\n    q.push(NULL);                   //    for level order\n\n    vector&lt;node&lt;int&gt; *&gt; ret; // heads of the LL's\n    ret.push_back(NULL);     // making a place for an empty LL, emptiness indicated by NULL\n\n    node&lt;int&gt; *ltail = NULL; // keeping track of the current LL's tail. Can serve as NULL and head too. Used fr=or progressing the list\n\n    BinaryTreeNode&lt;int&gt; *temp; // the variable for doing queue ops, so that calls are not made many times\n\n    while (!q.empty())\n    {\n        temp = q.front();\n        q.pop();\n\n        if (temp == NULL) // not going to happen initially, as root!=NULL\n        {\n            ltail-&gt;next = NULL; // end the list\n            if (q.empty())      // last NULL\n                return ret;\n\n            ltail = NULL;\n            ret.push_back(ltail); // make a place for the new list in ret\n            // tail which points to nothing is now the head of the LL\n            q.push(NULL);\n            continue;\n        }\n\n        if (temp-&gt;left != NULL)\n            q.push(temp-&gt;left);\n\n        if (temp-&gt;right != NULL)\n            q.push(temp-&gt;right);\n\n        if (ret.back() == NULL) // we have valid node in queue but the LL is not started\n        {\n            ltail = new node&lt;int&gt;(temp-&gt;data); // making tail point to something\n            ret.push_back(ltail);\n        }\n        else\n        {\n            ltail-&gt;next = new node&lt;int&gt;(temp-&gt;data);\n            ltail = ltail-&gt;next;\n        }\n    }\n}\n\n/*\n    Insights: Using the same principle of level, by a seperator.\n    Problems encountered:\n    0. Should i fill the entire queue and then make the LL's. No we won't be able to do this in a queue(as you'll never reach a q.front()==NULL). You can use a vector. But the space complexity is o(N), but for queue it is O(N/2). Which is huge.\n    Using recursion yields the same thing. So queue is the most effiecient.\n    If we use queue, we have to make the LL simultaneously. As nodes are being popped.\n    1. How to make an LL. Soln: Using NULL in the return vector before the loop starts.\n    2. For progressing the list, we need to have a tail pointer. Make a variable called ltail before the loop.\n    3. A bug: ltail be made to point to NULL and pushed into the stack. pushing NULL and then setting ltail = NULL is wrong because ltail is nothing but a pointer. Hence ltail itself needs to be pushed when making the head. Basics.\n*/\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 6. ZigZag tree </strong></summary>\n<h1 id=\"6.-zigzag-tree\">6. ZigZag tree <a class=\"heading-anchor-permalink\" href=\"#6.-zigzag-tree\">#</a></h1>\n<pre><code>Given a binary tree, print the zig zag order i.e print level 1 from left to right, level 2 from right to left and so on. This means odd levels should get printed from left to right and even level right to left.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Elements in level order form (separated by space)\n\n(If any node does not have left or right child, take -1 in its place)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Elements are printed level wise, each level in new line (separated by space).\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>5\n10 6\n2 3\n9\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// Following is the Binary Tree node structure\n/**************\nclass BinaryTreeNode {\n    public :\n    T data;\n    BinaryTreeNode&lt;T&gt; *left;\n    BinaryTreeNode&lt;T&gt; *right;\n\n    BinaryTreeNode(T data) {\n        this -&gt; data = data;\n        left = NULL;\n        right = NULL;\n    }\n};\n\n***************/\n\n// used Linked list\n#include &lt;list&gt;\nvoid zigZagOrder(BinaryTreeNode&lt;int&gt; *root)\n{\n    if (root == NULL)\n        return;\n\n    queue&lt;BinaryTreeNode&lt;int&gt; *&gt; q;\n    q.push(root);\n    q.push(NULL);\n    // O(n) space complexity\n\n    list&lt;BinaryTreeNode&lt;int&gt; *&gt; prit;\n\n    BinaryTreeNode&lt;int&gt; *temp;\n\n    bool flag = false;\n\n    while (!q.empty())\n    {\n        temp = q.front();\n        q.pop();\n\n        if (temp == NULL)\n        {\n\n            while (!prit.empty())\n            {\n                cout &lt;&lt; prit.front()-&gt;data &lt;&lt; &quot; &quot;;\n                prit.pop_front();\n            }\n            cout &lt;&lt; &quot;\\n&quot;;\n            if (q.empty())\n                return;\n            q.push(NULL);\n            flag = !flag;\n            continue;\n        }\n        if (flag == false)\n            prit.push_back(temp);\n        else\n            prit.push_front(temp);\n        if (temp-&gt;left != NULL)\n            q.push(temp-&gt;left);\n        if (temp-&gt;right != NULL)\n            q.push(temp-&gt;right);\n    }\n}\n\n// Using two stacks and L-&gt;R and R-&gt;L child check\nvoid zigZagOrder(BinaryTreeNode&lt;int&gt; *root)\n{\n    if (root == NULL)\n        return;\n    stack&lt;BinaryTreeNode&lt;int&gt; *&gt; sf;     // forward\n    stack&lt;BinaryTreeNode&lt;int&gt; *&gt; sb;     // backwards\n    stack&lt;BinaryTreeNode&lt;int&gt; *&gt; *p, *c; // parents, children\n\n    stack&lt;BinaryTreeNode&lt;int&gt; *&gt; *switcher;\n    sf.push(root);\n    p = &amp;sf;\n    c = &amp;sb;\n\n    bool flag = false; // this makes us shift the array from left to right and right to left\n    while (!p-&gt;empty())\n    {\n        if (flag == false)\n        {\n            while (!p-&gt;empty())\n            {\n                // print the conent of the parent\n                cout &lt;&lt; p-&gt;top()-&gt;data &lt;&lt; &quot; &quot;;\n                if (p-&gt;top()-&gt;left != NULL)\n                    c-&gt;push(p-&gt;top()-&gt;left);\n\n                if (p-&gt;top()-&gt;right != NULL)\n                    c-&gt;push(p-&gt;top()-&gt;right);\n                p-&gt;pop();\n            }\n            // done with the parent\n            cout &lt;&lt; &quot;\\n&quot;;\n            flag = true;\n        }\n        else\n        {\n            while (!p-&gt;empty())\n            {\n                // print the conent of the parent\n                cout &lt;&lt; p-&gt;top()-&gt;data &lt;&lt; &quot; &quot;;\n                if (p-&gt;top()-&gt;right != NULL)\n                    c-&gt;push(p-&gt;top()-&gt;right);\n                if (p-&gt;top()-&gt;left != NULL)\n                    c-&gt;push(p-&gt;top()-&gt;left);\n                p-&gt;pop();\n            }\n            // done with the parent\n            cout &lt;&lt; &quot;\\n&quot;;\n            flag = false;\n        }\n\n        // switch parent and child.\n        switcher = p;\n        p = c;\n        c = switcher;\n    }\n}\n</code></pre>\n</details>\n<hr>\n</details>\n<details> <summary><strong> 7. Min and Max of Binary Tree </strong></summary>\n<h1 id=\"7.-min-and-max-of-binary-tree\">7. Min and Max of Binary Tree <a class=\"heading-anchor-permalink\" href=\"#7.-min-and-max-of-binary-tree\">#</a></h1>\n<pre><code>Given a binary tree, find and return the min and max data value of given binary tree.\nReturn the output as an object of PairAns class, which is already created.\n</code></pre>\n<p><strong>Input Format</strong></p>\n<pre><code>Elements in level order form (separated by space)\n(If any node does not have left or right child, take -1 in its place)\n</code></pre>\n<p><strong>Output Format</strong></p>\n<pre><code>Max and min (separated by space)\n</code></pre>\n<p><strong>Sample Input</strong></p>\n<pre><code>8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>14 1\n</code></pre>\n<details> <summary><strong>Code</strong></summary>\n<pre><code>// Following is the Binary Tree node structure\n/**************\nclass BinaryTreeNode {\n    public :\n    T data;\n    BinaryTreeNode&lt;T&gt; *left;\n    BinaryTreeNode&lt;T&gt; *right;\n\n    BinaryTreeNode(T data)\n    {\n        this -&gt; data = data;\n        left = NULL;\n        right = NULL;\n    }\n};\n\n// PairAns class -\nclass PairAns\n{\n    public :\n        int min;\n        int max;\n};\n\n***************/\n#include &lt;climits&gt;\nPairAns minMax(BinaryTreeNode&lt;int&gt; *root)\n{\n    if (root == NULL)\n    {\n        PairAns ret;\n        ret.min = INT_MAX;\n        ret.max = INT_MIN;\n        return ret; // return by value\n    }\n    PairAns al = minMax(root-&gt;left);\n    PairAns ar = minMax(root-&gt;right);\n    al.min = min(al.min, min(ar.min, root-&gt;data));\n    al.max = max(al.max, max(ar.max, root-&gt;data));\n    return al;\n}\n</code></pre>\n</details>\n<hr>\n</details>\n",
      "id": 217
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/0_index.html",
      "content": "# 3. Binary Search Trees\nCreated Friday 07 February 2020\n\n\n* The simplest definition: A binary tree where all the nodes in the left **subtree** and smaller than the root and all the nodes in the **right subtree** are greater than the root. i.e the root specifies the max for the left subtree, and min for the right subtree. This is true for all nodes.\n* We can use **duplicates too**, but make sure that the equality is decided for left or for right subtree(but not both).\n* The subtree is very important. Merely having root->left->data < root->data && root->right->data > root->data is **wrong, **as it does not talk about the whole tree. Root decides the min and max for right and left respectively.\n\n\n[Exercises.md](./3._Binary_Search_Trees/Quizzes&Exercises/Exercises.md)\n[CodingExercises.md](./3._Binary_Search_Trees/Quizzes&Exercises/CodingExercises.md)\n[Assignments.md](./3._Binary_Search_Trees/zAssignments/Assignments.md)\n\n",
      "html": "<h1 id=\"3.-binary-search-trees\">3. Binary Search Trees <a class=\"heading-anchor-permalink\" href=\"#3.-binary-search-trees\">#</a></h1>\n<p>Created Friday 07 February 2020</p>\n<ul>\n<li>The simplest definition: A binary tree where all the nodes in the left <strong>subtree</strong> and smaller than the root and all the nodes in the <strong>right subtree</strong> are greater than the root. i.e the root specifies the max for the left subtree, and min for the right subtree. This is true for all nodes.</li>\n<li>We can use <strong>duplicates too</strong>, but make sure that the equality is decided for left or for right subtree(but not both).</li>\n<li>The subtree is very important. Merely having root-&gt;left-&gt;data &lt; root-&gt;data &amp;&amp; root-&gt;right-&gt;data &gt; root-&gt;data is **wrong, **as it does not talk about the whole tree. Root decides the min and max for right and left respectively.</li>\n</ul>\n<p><a href=\"./3._Binary_Search_Trees/Quizzes&amp;Exercises/Exercises.html\">Exercises.md</a>\n<a href=\"./3._Binary_Search_Trees/Quizzes&amp;Exercises/CodingExercises.html\">CodingExercises.md</a>\n<a href=\"./3._Binary_Search_Trees/zAssignments/Assignments.html\">Assignments.md</a></p>\n",
      "id": 218
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/1._Intro_to_BST.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/1._Intro_to_BST.html",
      "content": "# 1. Intro to BST\nCreated Thursday 08 April 2021\n\n\n* The simplest definition: A binary tree where all the nodes in the left **subtree** are smaller than the root and all the nodes on **right subtree** are greater than the root. i.e the root specifies the max for the left subtree, and min for the right subtree. This is true for all nodes.\n* We can use **duplicates too**, but make sure that the equality is decided for left or for right subtree(but not both).\n* The subtree is very important. Merely having root->left->data < root->data && root->right->data > root->data is **wrong, **as it does not talk about the whole tree. Root decides the min and max for right and left respectively.\n\n\n",
      "html": "<h1 id=\"1.-intro-to-bst\">1. Intro to BST <a class=\"heading-anchor-permalink\" href=\"#1.-intro-to-bst\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<ul>\n<li>The simplest definition: A binary tree where all the nodes in the left <strong>subtree</strong> are smaller than the root and all the nodes on <strong>right subtree</strong> are greater than the root. i.e the root specifies the max for the left subtree, and min for the right subtree. This is true for all nodes.</li>\n<li>We can use <strong>duplicates too</strong>, but make sure that the equality is decided for left or for right subtree(but not both).</li>\n<li>The subtree is very important. Merely having root-&gt;left-&gt;data &lt; root-&gt;data &amp;&amp; root-&gt;right-&gt;data &gt; root-&gt;data is **wrong, **as it does not talk about the whole tree. Root decides the min and max for right and left respectively.</li>\n</ul>\n",
      "id": 219
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/2._Coding_BST__-_BST_Node_class/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/2._Coding_BST__-_BST_Node_class/0_index.html",
      "content": "# 2. --Coding BST  - BST Node class\nCreated Sunday 09 February 2020\n\n\n* We will store a tree in a class;\n\nWe need the following data members:\n\n1. Root of the BST\n\n\nWe also need the following member functions:\n\n1. bool hasData(int data)\n2. void insertData(int data)\n3. BST data(int data).\n\n\n\n1. bool hasData(int data)\n\nHere we need to search for the data, but how do we indicate our root, this we do by making a function with the same name, i.e overloading it with the root addres--------------------\n\n2. void insertData(int data)\n\nAgain we make a helper function in private, we insert nodes only as leaves, so no worries about changing the root.\n\n*****\n\n\n3. deleteData(int data)\n\nAgain, here we have 4 scenarios:\n\n1. We have root as NULL, do nothing. Return the root, as it is. \n2. We have a leaf which needs to be deleted. Delete it, return NULL. \n3. We have a non lead node to be deleted, two different solutions are possible\n\t1. Find the node with the largest value in the left subtree. Replace the root with the obtained max value. Call delete(max, root->left);\n\t2. Find the node with the smallest value in the right subtree. Replace the root with the obtained min value. Call  \n4. If data < root->data, do root->left = deleteData(data, root->left)\n5. If data < root->data, do root->right = deleteData(data, root->right). Return root;\n\nT.C = O(h)\nDoubt: Delete data works for the case of non leaf as well because we are always keeping the property of BST intact. \n\n*****\n\n[./BinaryTreeNode.h](2._Coding_BST__-_BST_Node_class/BinaryTreeNode.h)\n\n",
      "html": "<h1 id=\"2.---coding-bst---bst-node-class\">2. --Coding BST  - BST Node class <a class=\"heading-anchor-permalink\" href=\"#2.---coding-bst---bst-node-class\">#</a></h1>\n<p>Created Sunday 09 February 2020</p>\n<ul>\n<li>We will store a tree in a class;</li>\n</ul>\n<p>We need the following data members:</p>\n<ol>\n<li>Root of the BST</li>\n</ol>\n<p>We also need the following member functions:</p>\n<ol>\n<li>\n<p>bool hasData(int data)</p>\n</li>\n<li>\n<p>void insertData(int data)</p>\n</li>\n<li>\n<p>BST data(int data).</p>\n</li>\n<li>\n<p>bool hasData(int data)</p>\n</li>\n</ol>\n<p>Here we need to search for the data, but how do we indicate our root, this we do by making a function with the same name, i.e overloading it with the root addres--------------------</p>\n<ol start=\"2\">\n<li>void insertData(int data)</li>\n</ol>\n<p>Again we make a helper function in private, we insert nodes only as leaves, so no worries about changing the root.</p>\n<hr>\n<ol start=\"3\">\n<li>deleteData(int data)</li>\n</ol>\n<p>Again, here we have 4 scenarios:</p>\n<ol>\n<li>We have root as NULL, do nothing. Return the root, as it is.</li>\n<li>We have a leaf which needs to be deleted. Delete it, return NULL.</li>\n<li>We have a non lead node to be deleted, two different solutions are possible\n<ol>\n<li>Find the node with the largest value in the left subtree. Replace the root with the obtained max value. Call delete(max, root-&gt;left);</li>\n<li>Find the node with the smallest value in the right subtree. Replace the root with the obtained min value. Call</li>\n</ol>\n</li>\n<li>If data &lt; root-&gt;data, do root-&gt;left = deleteData(data, root-&gt;left)</li>\n<li>If data &lt; root-&gt;data, do root-&gt;right = deleteData(data, root-&gt;right). Return root;</li>\n</ol>\n<p>T.C = O(h)\nDoubt: Delete data works for the case of non leaf as well because we are always keeping the property of BST intact.</p>\n<hr>\n<p><a href=\"2._Coding_BST__-_BST_Node_class/BinaryTreeNode.h\">./BinaryTreeNode.h</a></p>\n",
      "id": 220
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/3._Search_Operation_in_BST.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/3._Search_Operation_in_BST.html",
      "content": "# 3. Search Operation in BST\nCreated Friday 07 February 2020\n\n\n* This problem should be done after check-BST, as this gives a wrong impression that the false definiton is true.\n\n\n",
      "html": "<h1 id=\"3.-search-operation-in-bst\">3. Search Operation in BST <a class=\"heading-anchor-permalink\" href=\"#3.-search-operation-in-bst\">#</a></h1>\n<p>Created Friday 07 February 2020</p>\n<ul>\n<li>This problem should be done after check-BST, as this gives a wrong impression that the false definiton is true.</li>\n</ul>\n",
      "id": 221
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST/1._Check_BST_1/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST/1._Check_BST_1/0_index.html",
      "content": "# 1. Check BST 1\nCreated Friday 07 February 2020\n\n\n* From the definition we know that if all the nodes on the left are smaller than the root, and all the nodes on the right are greater than the root.\n\ni.e leftMax < root->data && rightMin > root->data\n\n* Is this enough? Yes. Think recursively with the base case being a leaf node. We return true, as a leaf is a BST.\n* For a NUll return as as INT_MIN and min as INT_MAX. return true here too. as NULL can also be taken as BST. This is to be used when we have a NULL)\n\n\n\n* We need to return min and max, if we make two seperate functions which find the maximum and the minimum. This takes O(n) time.\n\n```c++\nint maxBT(BT*root)\n{\n\tif(root==NULL)\n\t\treturn INT_MIN;\n\treturn max((root->data), maxBT(root->left), maxBT(root->right));\n}\n\nint minBT(BT*root)\n{\n\tif(root==NULL)\n\t\treturn INT_MAX;\n\treturn min((root->data), minBT(root->left), minBT(root->right));\n}\n\nbool isBST(Bt* root)\n{\n\tif(root==NULL || root->left && root-right==NULL)\n\t\treturn true; // leaf and no node\n\tif(root->data > min(root->left) && root->data < max(root->right) && isBST(root->left) && isBST(root->right))\n\t\treturn true; // Joining two Binary Search trees by a node is not neccessarily a Binary Search tree. Because we need to check the subtree property.\n\t\t// remember by checking for min and max only, we are still oblivious of the fact whether the left and right are Binary Search Trees.\n\treturn false;\n}\n```\n\nf(n) = 2n+T(n/2) =  nh =  nodes * height\nworst case - O(n^2^) skewed tree, O(nlog~2~n)\nNot a good solution as we have to do work again and again.\n\n\n\n\n\n",
      "html": "<h1 id=\"1.-check-bst-1\">1. Check BST 1 <a class=\"heading-anchor-permalink\" href=\"#1.-check-bst-1\">#</a></h1>\n<p>Created Friday 07 February 2020</p>\n<ul>\n<li>From the definition we know that if all the nodes on the left are smaller than the root, and all the nodes on the right are greater than the root.</li>\n</ul>\n<p>i.e leftMax &lt; root-&gt;data &amp;&amp; rightMin &gt; root-&gt;data</p>\n<ul>\n<li>\n<p>Is this enough? Yes. Think recursively with the base case being a leaf node. We return true, as a leaf is a BST.</p>\n</li>\n<li>\n<p>For a NUll return as as INT_MIN and min as INT_MAX. return true here too. as NULL can also be taken as BST. This is to be used when we have a NULL)</p>\n</li>\n<li>\n<p>We need to return min and max, if we make two seperate functions which find the maximum and the minimum. This takes O(n) time.</p>\n</li>\n</ul>\n<pre><code class=\"language-c++\">int maxBT(BT*root)\n{\n\tif(root==NULL)\n\t\treturn INT_MIN;\n\treturn max((root-&gt;data), maxBT(root-&gt;left), maxBT(root-&gt;right));\n}\n\nint minBT(BT*root)\n{\n\tif(root==NULL)\n\t\treturn INT_MAX;\n\treturn min((root-&gt;data), minBT(root-&gt;left), minBT(root-&gt;right));\n}\n\nbool isBST(Bt* root)\n{\n\tif(root==NULL || root-&gt;left &amp;&amp; root-right==NULL)\n\t\treturn true; // leaf and no node\n\tif(root-&gt;data &gt; min(root-&gt;left) &amp;&amp; root-&gt;data &lt; max(root-&gt;right) &amp;&amp; isBST(root-&gt;left) &amp;&amp; isBST(root-&gt;right))\n\t\treturn true; // Joining two Binary Search trees by a node is not neccessarily a Binary Search tree. Because we need to check the subtree property.\n\t\t// remember by checking for min and max only, we are still oblivious of the fact whether the left and right are Binary Search Trees.\n\treturn false;\n}\n</code></pre>\n<p>f(n) = 2n+T(n/2) =  nh =  nodes * height\nworst case - O(n^2^) skewed tree, O(nlog~2~n)\nNot a good solution as we have to do work again and again.</p>\n",
      "id": 222
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST/2._Check_BST_2.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST/2._Check_BST_2.html",
      "content": "# 2. Check BST 2\nCreated Friday 07 February 2020\n\n\n* We need to decrease our work. Let us calculate the min and max in one go. Remember have the height parameter as well.\n* Basically at every node, we are okay if the left is a BST and that it's maximum is less than root->data and the right subtrees's minimum is greater than(or equal to if duplicates are allowed).\n* When we return isBST, we may also return the max for the left subtree and min for the right subtree. This selective behavior will still require two functions, which we already use. Better if we return all three of min, max and isBST.\n\n\n**Bottom Up Approach - we need to return multiple things, recursion only takes us down. **\n\n* we use pairs\n* Code:\n\n```c++\npair<pair<int, int>, bool> isBST(BT*)\n{\n\tpair<pair<int, int>, bool> ret;\n\tret.first.first = INT_MIN;\n\tret.first.second = INT_MAX;\n\tret.second = false;\n\tif(root==NULL)\n\t{\n\t\tret.second = true;\n\t\treturn ret;\n\t}\n\tif(root->left==NULL && root->right==NULL)\n\t{\n\t\tret.first.first = root->data;\t// minimum and maximum are the same\n\t\tret.first.second = root->data;\n\t\tret.second = true;\n\t\treturn ret;\n\t}\n\tif(root->left!=NULL)\n\t\tret = isBST(root->left);\n\tif(ret.second) // we are only worried about the minimum\n\t{\n\t\tpair<pair<int, int>, bool> ret2;\n\t\t\tret2 = isBST(root->right);\n\t\t\tret.first.second = ret2.second.second; // maximum\n\t\t\tret.second &&= re2.second;\n\t\t\treturn ret;\n\t}\n}\n```\n\nTime complexity:\nT(n) = 2T(n/2) + k, O(n) is independent of height.\n\n",
      "html": "<h1 id=\"2.-check-bst-2\">2. Check BST 2 <a class=\"heading-anchor-permalink\" href=\"#2.-check-bst-2\">#</a></h1>\n<p>Created Friday 07 February 2020</p>\n<ul>\n<li>We need to decrease our work. Let us calculate the min and max in one go. Remember have the height parameter as well.</li>\n<li>Basically at every node, we are okay if the left is a BST and that it’s maximum is less than root-&gt;data and the right subtrees’s minimum is greater than(or equal to if duplicates are allowed).</li>\n<li>When we return isBST, we may also return the max for the left subtree and min for the right subtree. This selective behavior will still require two functions, which we already use. Better if we return all three of min, max and isBST.</li>\n</ul>\n<p>**Bottom Up Approach - we need to return multiple things, recursion only takes us down. **</p>\n<ul>\n<li>we use pairs</li>\n<li>Code:</li>\n</ul>\n<pre><code class=\"language-c++\">pair&lt;pair&lt;int, int&gt;, bool&gt; isBST(BT*)\n{\n\tpair&lt;pair&lt;int, int&gt;, bool&gt; ret;\n\tret.first.first = INT_MIN;\n\tret.first.second = INT_MAX;\n\tret.second = false;\n\tif(root==NULL)\n\t{\n\t\tret.second = true;\n\t\treturn ret;\n\t}\n\tif(root-&gt;left==NULL &amp;&amp; root-&gt;right==NULL)\n\t{\n\t\tret.first.first = root-&gt;data;\t// minimum and maximum are the same\n\t\tret.first.second = root-&gt;data;\n\t\tret.second = true;\n\t\treturn ret;\n\t}\n\tif(root-&gt;left!=NULL)\n\t\tret = isBST(root-&gt;left);\n\tif(ret.second) // we are only worried about the minimum\n\t{\n\t\tpair&lt;pair&lt;int, int&gt;, bool&gt; ret2;\n\t\t\tret2 = isBST(root-&gt;right);\n\t\t\tret.first.second = ret2.second.second; // maximum\n\t\t\tret.second &amp;&amp;= re2.second;\n\t\t\treturn ret;\n\t}\n}\n</code></pre>\n<p>Time complexity:\nT(n) = 2T(n/2) + k, O(n) is independent of height.</p>\n",
      "id": 223
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST/3._Check_BST_3.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST/3._Check_BST_3.html",
      "content": "# 3. Check BST 3\nCreated Friday 07 February 2020\n\nBetter than all this, let us do an even simpler approach:\nAccording to the definiton, we can do the following. We can do this very easily. We restrain the left and right restrain. We can code it easily.\n\nTop-down approach.\nIf a node violates the BST principle: It should be on either side of min and max, if not return false;\n```c++\nbool isBST_h(BinaryTreeNode<int>* root, int min, int max)\n{\n\tif(root==NULL)\n\t\treturn true;\n\t   // check if the node is okay\n\t// node's data should be in range of either side of min or max\n\tif(root->data > min && root->data < max) // only possible scenario\n\t\treturn isBST_h(root->left, root->data, max) && isBST_h(root->right, min, root->data);\n\treturn false;\n}\n\n#include<climits>\n\nbool isBST(BinaryTreeNode<int> *root)\n{\n\t// top down approach\n\t// simulating the creation if the tree\n\tif(root==NULL)\n\t\treturn true;\n\n\t// initially we have no restrain\n\treturn isBST_h(root, INT_MAX, INT_MIN); // need to start from -infinity and +infinity`\n}\n\n// We did nothing for left and rigtht.\n```\n\n**Insights: **BST is only making the bound for min and max for the left and right subtrees.\n\n",
      "html": "<h1 id=\"3.-check-bst-3\">3. Check BST 3 <a class=\"heading-anchor-permalink\" href=\"#3.-check-bst-3\">#</a></h1>\n<p>Created Friday 07 February 2020</p>\n<p>Better than all this, let us do an even simpler approach:\nAccording to the definiton, we can do the following. We can do this very easily. We restrain the left and right restrain. We can code it easily.</p>\n<p>Top-down approach.\nIf a node violates the BST principle: It should be on either side of min and max, if not return false;</p>\n<pre><code class=\"language-c++\">bool isBST_h(BinaryTreeNode&lt;int&gt;* root, int min, int max)\n{\n\tif(root==NULL)\n\t\treturn true;\n\t   // check if the node is okay\n\t// node's data should be in range of either side of min or max\n\tif(root-&gt;data &gt; min &amp;&amp; root-&gt;data &lt; max) // only possible scenario\n\t\treturn isBST_h(root-&gt;left, root-&gt;data, max) &amp;&amp; isBST_h(root-&gt;right, min, root-&gt;data);\n\treturn false;\n}\n\n#include&lt;climits&gt;\n\nbool isBST(BinaryTreeNode&lt;int&gt; *root)\n{\n\t// top down approach\n\t// simulating the creation if the tree\n\tif(root==NULL)\n\t\treturn true;\n\n\t// initially we have no restrain\n\treturn isBST_h(root, INT_MAX, INT_MIN); // need to start from -infinity and +infinity`\n}\n\n// We did nothing for left and rigtht.\n</code></pre>\n<p>**Insights: **BST is only making the bound for min and max for the left and right subtrees.</p>\n",
      "id": 224
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/2._Construct_BST_from_sorted_array.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/2._Construct_BST_from_sorted_array.html",
      "content": "# 2. Construct BST from sorted array\nCreated Sunday 09 February 2020\n\n\n* Traverse in inorder way of the array. left, mid and right.\n\n\n",
      "html": "<h1 id=\"2.-construct-bst-from-sorted-array\">2. Construct BST from sorted array <a class=\"heading-anchor-permalink\" href=\"#2.-construct-bst-from-sorted-array\">#</a></h1>\n<p>Created Sunday 09 February 2020</p>\n<ul>\n<li>Traverse in inorder way of the array. left, mid and right.</li>\n</ul>\n",
      "id": 225
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/3._BST_to_sorted_LL.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/3._BST_to_sorted_LL.html",
      "content": "# 3. BST to sorted LL\nCreated Sunday 09 February 2020\n\nTwo approaches are possible:\n\n* Naive approach time is O(n^2^)\n* Other approach takes a the neary the same memory but O(n) time. Return pair.\n\n\n",
      "html": "<h1 id=\"3.-bst-to-sorted-ll\">3. BST to sorted LL <a class=\"heading-anchor-permalink\" href=\"#3.-bst-to-sorted-ll\">#</a></h1>\n<p>Created Sunday 09 February 2020</p>\n<p>Two approaches are possible:</p>\n<ul>\n<li>Naive approach time is O(n^2^)</li>\n<li>Other approach takes a the neary the same memory but O(n) time. Return pair.</li>\n</ul>\n",
      "id": 226
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/4._Find_Path/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/4._Find_Path/0_index.html",
      "content": "# 4. Find Path\nCreated Sunday 09 February 2020\n\nWe can do this using a vector in heap, and we will return the pointer of it. If we don't find it. We return the NULL when we don't find it. Otherwise, we will return the vector and push_back(all the value) the **order of output does not matter.**\n\nSimple thing.\nSearch the root, return the value;\n```c++\nvector ret = f(root->left);\nif(ret!=NULL)\n{\n\tret.push_back(root->data);\n\treturn data;\n}\nret = f(root->right);\nif(ret!=NULL)\n\tret.push_back(root->data);\nreturn ret;\n```\n\n\nWe are always doing push_back(), but no problem the user can traverse the array in the backwards direction.\n\n\n",
      "html": "<h1 id=\"4.-find-path\">4. Find Path <a class=\"heading-anchor-permalink\" href=\"#4.-find-path\">#</a></h1>\n<p>Created Sunday 09 February 2020</p>\n<p>We can do this using a vector in heap, and we will return the pointer of it. If we don’t find it. We return the NULL when we don’t find it. Otherwise, we will return the vector and push_back(all the value) the <strong>order of output does not matter.</strong></p>\n<p>Simple thing.\nSearch the root, return the value;</p>\n<pre><code class=\"language-c++\">vector ret = f(root-&gt;left);\nif(ret!=NULL)\n{\n\tret.push_back(root-&gt;data);\n\treturn data;\n}\nret = f(root-&gt;right);\nif(ret!=NULL)\n\tret.push_back(root-&gt;data);\nreturn ret;\n</code></pre>\n<p>We are always doing push_back(), but no problem the user can traverse the array in the backwards direction.</p>\n",
      "id": 227
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/5._Variations_of_BST/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/5._Variations_of_BST/0_index.html",
      "content": "# 5. Variations of BST\nCreated Wednesday 12 February 2020\n\nFor the best insertion, deletion and other ops for a BST is O(H)\ni.e if we can minimize h, then we can minimize the height.\n\n* |H~left ~- H~right~| <= 1 for all nodes.\n* h = O(log(n))\n* Search, insertion and deletion is O(h).\n\n\nTypes of balanced BSTs:\n\n1. AVL tree - Read and implement.\n2. Red-Black Tree\n3. 2-4 tree\n\n\n",
      "html": "<h1 id=\"5.-variations-of-bst\">5. Variations of BST <a class=\"heading-anchor-permalink\" href=\"#5.-variations-of-bst\">#</a></h1>\n<p>Created Wednesday 12 February 2020</p>\n<p>For the best insertion, deletion and other ops for a BST is O(H)\ni.e if we can minimize h, then we can minimize the height.</p>\n<ul>\n<li>|H~left ~- H~right~| &lt;= 1 for all nodes.</li>\n<li>h = O(log(n))</li>\n<li>Search, insertion and deletion is O(h).</li>\n</ul>\n<p>Types of balanced BSTs:</p>\n<ol>\n<li>AVL tree - Read and implement.</li>\n<li>Red-Black Tree</li>\n<li>2-4 tree</li>\n</ol>\n",
      "id": 228
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/5._Variations_of_BST/1._AVL_trees/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/2._Trees/3._Binary_Search_Trees/5._Variations_of_BST/1._AVL_trees/0_index.html",
      "content": "# 1. AVL trees\nCreated Wednesday 12 February 2020\n\n#### Intro\n\n* AVL stands for Adelson-Velsky Landis\n* An AVL tree (named after its inventors **A**delson-**V**elsky and **L**andis) is a self-balancing binary search tree.\n* Invention of AVL tree was published in the **1962** paper \"*An algorithm for the organization of information*\" in Russia.\n\n\n#### Why AVL trees\n\n* They support all the usual operations - addition, deletion and searching  in O(log n) time.\n* Additionally, Two trees can be merged in O(log(m+n)) time.\n* Space taken - θ(n)\n* Height is always ~log(n). To be precise it is between log(n) and 1.45*log(n)\n\n\n#### What is 'balance'\n\n* Each node stores a number in the range -2 to 2, inclusive.\n* This number is called the balance factor. b = |left_subtree_height - right_subtree_height|\n* Balance factor must have a sign. This helps in differentiating which side is heavier.\n\n#### What is 'imbalance'\nIf atleast one node with a balance factor of 2 or -2 exists, then the tree is said to 'not balanced'.\n\n#### How to re-balance\n\n* During deletion/insertion, a leaf node is added or removed. Traverse up from there and change the balance factor for the parents.\n* The first node where balance factor is unacceptable is called the pivot.\n* Do a rebalancing on this pivot.\n\n\n#### Insertion\n\n* Insert like BST\n* Rebalance if required\n\n\n#### Deletion\n\n* Remove like BST\n* Rebalance if required\n\n\nImportant facts about rebalancing:\n\n* One rebalance(i.e with one pivot) is always enough. Reason: Height of a tree after rebalancing(on insertion) = Height of the original tree. And as the other subtree of the pivot was comparable, it will remain so after the rebalancing operation. Works for deletion too.\n* At most 3 nodes are changed in a rebalance operation.\n* Both insert/delete use the same balancing algorithm.\n\n[Reference](https://skerritt.blog/avl/)\n\n#### Proof of AVL operations\n**Note**\n\n* There are 4 cases which describe all possible cases of an AVL tree insertion.\n* The parameters T1, T2, T3, T4 may be ε, leaf or a tree themselves.\n* The 4 operations are called **rotations** and they are very simple to tell, just by observation.\n\n**To prove** - Make sure that insertions/deletions and the rebalance maintains balance.\n**Proof **- [./avl_proof.jpg](1._AVL_trees/avl_proof.jpg)\n\n",
      "html": "<h1 id=\"1.-avl-trees\">1. AVL trees <a class=\"heading-anchor-permalink\" href=\"#1.-avl-trees\">#</a></h1>\n<p>Created Wednesday 12 February 2020</p>\n<h4 id=\"intro\">Intro <a class=\"heading-anchor-permalink\" href=\"#intro\">#</a></h4>\n<ul>\n<li>AVL stands for Adelson-Velsky Landis</li>\n<li>An AVL tree (named after its inventors <strong>A</strong>delson-<strong>V</strong>elsky and <strong>L</strong>andis) is a self-balancing binary search tree.</li>\n<li>Invention of AVL tree was published in the <strong>1962</strong> paper “<em>An algorithm for the organization of information</em>” in Russia.</li>\n</ul>\n<h4 id=\"why-avl-trees\">Why AVL trees <a class=\"heading-anchor-permalink\" href=\"#why-avl-trees\">#</a></h4>\n<ul>\n<li>They support all the usual operations - addition, deletion and searching  in O(log n) time.</li>\n<li>Additionally, Two trees can be merged in O(log(m+n)) time.</li>\n<li>Space taken - θ(n)</li>\n<li>Height is always ~log(n). To be precise it is between log(n) and 1.45*log(n)</li>\n</ul>\n<h4 id=\"what-is-%E2%80%98balance%E2%80%99\">What is ‘balance’ <a class=\"heading-anchor-permalink\" href=\"#what-is-%E2%80%98balance%E2%80%99\">#</a></h4>\n<ul>\n<li>Each node stores a number in the range -2 to 2, inclusive.</li>\n<li>This number is called the balance factor. b = |left_subtree_height - right_subtree_height|</li>\n<li>Balance factor must have a sign. This helps in differentiating which side is heavier.</li>\n</ul>\n<h4 id=\"what-is-%E2%80%98imbalance%E2%80%99\">What is ‘imbalance’ <a class=\"heading-anchor-permalink\" href=\"#what-is-%E2%80%98imbalance%E2%80%99\">#</a></h4>\n<p>If atleast one node with a balance factor of 2 or -2 exists, then the tree is said to ‘not balanced’.</p>\n<h4 id=\"how-to-re-balance\">How to re-balance <a class=\"heading-anchor-permalink\" href=\"#how-to-re-balance\">#</a></h4>\n<ul>\n<li>During deletion/insertion, a leaf node is added or removed. Traverse up from there and change the balance factor for the parents.</li>\n<li>The first node where balance factor is unacceptable is called the pivot.</li>\n<li>Do a rebalancing on this pivot.</li>\n</ul>\n<h4 id=\"insertion\">Insertion <a class=\"heading-anchor-permalink\" href=\"#insertion\">#</a></h4>\n<ul>\n<li>Insert like BST</li>\n<li>Rebalance if required</li>\n</ul>\n<h4 id=\"deletion\">Deletion <a class=\"heading-anchor-permalink\" href=\"#deletion\">#</a></h4>\n<ul>\n<li>Remove like BST</li>\n<li>Rebalance if required</li>\n</ul>\n<p>Important facts about rebalancing:</p>\n<ul>\n<li>One rebalance(i.e with one pivot) is always enough. Reason: Height of a tree after rebalancing(on insertion) = Height of the original tree. And as the other subtree of the pivot was comparable, it will remain so after the rebalancing operation. Works for deletion too.</li>\n<li>At most 3 nodes are changed in a rebalance operation.</li>\n<li>Both insert/delete use the same balancing algorithm.</li>\n</ul>\n<p><a href=\"https://skerritt.blog/avl/\">Reference</a></p>\n<h4 id=\"proof-of-avl-operations\">Proof of AVL operations <a class=\"heading-anchor-permalink\" href=\"#proof-of-avl-operations\">#</a></h4>\n<p><strong>Note</strong></p>\n<ul>\n<li>There are 4 cases which describe all possible cases of an AVL tree insertion.</li>\n<li>The parameters T1, T2, T3, T4 may be ε, leaf or a tree themselves.</li>\n<li>The 4 operations are called <strong>rotations</strong> and they are very simple to tell, just by observation.</li>\n</ul>\n<p><strong>To prove</strong> - Make sure that insertions/deletions and the rebalance maintains balance.\n**Proof **- <a href=\"1._AVL_trees/avl_proof.jpg\">./avl_proof.jpg</a></p>\n",
      "id": 229
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/0_index.html",
      "content": "# 3. Auxilary Data Structures\nCreated Thursday 08 April 2021\n\nThis are data structures that are commonly used everywhere. They are available as basic features in many languages.\n\n",
      "html": "<h1 id=\"3.-auxilary-data-structures\">3. Auxilary Data Structures <a class=\"heading-anchor-permalink\" href=\"#3.-auxilary-data-structures\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<p>This are data structures that are commonly used everywhere. They are available as basic features in many languages.</p>\n",
      "id": 230
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/0_index.html",
      "content": "# 1. Priority Queue and Heap\nCreated Wednesday 12 February 2020\n\n[Priority_Queues.pdf](1._Priority_Queue_and_Heap/Priority_Queues.pdf)\n\n[Codes](./1._Priority_Queue_and_Heap/Codes)\n[Exercises.md](./1._Priority_Queue_and_Heap/Quizzes&Exercises/Exercises.md)\n[CodingExercises.md](./1._Priority_Queue_and_Heap/Quizzes&Exercises/CodingExercises.md)\n[Assignments.md](./1._Priority_Queue_and_Heap/zAssignments/Assignments.md)\n\n\n",
      "html": "<h1 id=\"1.-priority-queue-and-heap\">1. Priority Queue and Heap <a class=\"heading-anchor-permalink\" href=\"#1.-priority-queue-and-heap\">#</a></h1>\n<p>Created Wednesday 12 February 2020</p>\n<p><a href=\"1._Priority_Queue_and_Heap/Priority_Queues.pdf\">Priority_Queues.pdf</a></p>\n<p><a href=\"./1._Priority_Queue_and_Heap/Codes\">Codes</a>\n<a href=\"./1._Priority_Queue_and_Heap/Quizzes&amp;Exercises/Exercises.html\">Exercises.md</a>\n<a href=\"./1._Priority_Queue_and_Heap/Quizzes&amp;Exercises/CodingExercises.html\">CodingExercises.md</a>\n<a href=\"./1._Priority_Queue_and_Heap/zAssignments/Assignments.html\">Assignments.md</a></p>\n",
      "id": 231
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/1._Intro_to_priority_queue.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/1._Intro_to_priority_queue.html",
      "content": "# 1. Intro to priority queue\n\nCreated Wednesday 12 February 2020\n\n#### Selecting Items\n\nSuppose that we have people in a queue. How to select a candidate can be decided in the following:\n\n1. Time(known as FCFS) i.e a normal FIFO queue.\n2. VIP factor - By an authority.\n3. Criticality - Natural, e.g old age, medical condition.\n\nThere can be two types of queues:\n\n1. Min - Minimum valued exits first.\n2. Max - Maxiumum valued exits first.\n\n#### Priority queue ADT\n\n1. push() aka insert()- insert value. It is placed w.r.t the criteria.\n2. top() aka getMax()/getMin() - return the value at top, minimum(in case of min-heap) and maxiumum(in case of max-heap).\n3. pop() aka removeMin()/removeMax() - Removes and returns an element.\n\nWhich data structure to use for this task:\n![](/assets/1._Intro_to_priority_queue-image-1.png)\n\nBalanced BST is the best here.\n",
      "html": "<h1 id=\"1.-intro-to-priority-queue\">1. Intro to priority queue <a class=\"heading-anchor-permalink\" href=\"#1.-intro-to-priority-queue\">#</a></h1>\n<p>Created Wednesday 12 February 2020</p>\n<h4 id=\"selecting-items\">Selecting Items <a class=\"heading-anchor-permalink\" href=\"#selecting-items\">#</a></h4>\n<p>Suppose that we have people in a queue. How to select a candidate can be decided in the following:</p>\n<ol>\n<li>Time(known as FCFS) i.e a normal FIFO queue.</li>\n<li>VIP factor - By an authority.</li>\n<li>Criticality - Natural, e.g old age, medical condition.</li>\n</ol>\n<p>There can be two types of queues:</p>\n<ol>\n<li>Min - Minimum valued exits first.</li>\n<li>Max - Maxiumum valued exits first.</li>\n</ol>\n<h4 id=\"priority-queue-adt\">Priority queue ADT <a class=\"heading-anchor-permalink\" href=\"#priority-queue-adt\">#</a></h4>\n<ol>\n<li>push() aka insert()- insert value. It is placed w.r.t the criteria.</li>\n<li>top() aka getMax()/getMin() - return the value at top, minimum(in case of min-heap) and maxiumum(in case of max-heap).</li>\n<li>pop() aka removeMin()/removeMax() - Removes and returns an element.</li>\n</ol>\n<p>Which data structure to use for this task:\n<img src=\"/assets/1._Intro_to_priority_queue-image-1.png\" alt=\"\"></p>\n<p>Balanced BST is the best here.</p>\n",
      "id": 232
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/2._Intro_to_Heap.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/2._Intro_to_Heap.html",
      "content": "# 2. Intro to Heap\nCreated Friday 14 February 2020\n\nBST has the following disadvantages:\n\n1. Balancing factor, we have to check if it is balanced, after every insertion/deletion.\n2. Storing is difficult, i.e nodes->data + nodes*pointers, i.e as Binary Tree. Too much size requirement.\n\n\nSo we make a new data structure - called heap.\n\n*****\n\nA heap must satisify 2 properties at all times:\n\n1. **Complete Binary Tree **property -  it has 2^h^-1 spaces. Complete - all levels are filled completely, except the last one(although it must be filled from left to right).\n2. **Heap order **property - all nodes must be greater than their children, in case of a max-heap and smaller than their children for a min-heap.\n\n\n\n* Purpose of the CBT property - maintains a nearly balanced tree at height lg(n).\n* Purpose of the heap order property - maintains max/min at the root node.\n\n\n",
      "html": "<h1 id=\"2.-intro-to-heap\">2. Intro to Heap <a class=\"heading-anchor-permalink\" href=\"#2.-intro-to-heap\">#</a></h1>\n<p>Created Friday 14 February 2020</p>\n<p>BST has the following disadvantages:</p>\n<ol>\n<li>Balancing factor, we have to check if it is balanced, after every insertion/deletion.</li>\n<li>Storing is difficult, i.e nodes-&gt;data + nodes*pointers, i.e as Binary Tree. Too much size requirement.</li>\n</ol>\n<p>So we make a new data structure - called heap.</p>\n<hr>\n<p>A heap must satisify 2 properties at all times:</p>\n<ol>\n<li>**Complete Binary Tree **property -  it has 2^h^-1 spaces. Complete - all levels are filled completely, except the last one(although it must be filled from left to right).</li>\n<li>**Heap order **property - all nodes must be greater than their children, in case of a max-heap and smaller than their children for a min-heap.</li>\n</ol>\n<ul>\n<li>Purpose of the CBT property - maintains a nearly balanced tree at height lg(n).</li>\n<li>Purpose of the heap order property - maintains max/min at the root node.</li>\n</ul>\n",
      "id": 233
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/3._The_two_kinds_of_heaps.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/3._The_two_kinds_of_heaps.html",
      "content": "# 3. The two kinds of heaps\nCreated Thursday 08 April 2021\n\n#### Kinds of heaps\nWe have two kinds of priority queues: i.e min-heap and max-heap. \n\n* min heap: pops out the minimum when asked.\n* max heap: pops out the maxiumum when asked.\n\n\nHeap order property: The parent is **smaller** than its children. MinHeap. The parent is **greater** than its children. MaxHeap.\n\n\n* Remember, this is not a BST. So we care only for the parent and children.\n* BST cares about left and right, while heap cares only one direction, down.\n\n\n\n",
      "html": "<h1 id=\"3.-the-two-kinds-of-heaps\">3. The two kinds of heaps <a class=\"heading-anchor-permalink\" href=\"#3.-the-two-kinds-of-heaps\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<h4 id=\"kinds-of-heaps\">Kinds of heaps <a class=\"heading-anchor-permalink\" href=\"#kinds-of-heaps\">#</a></h4>\n<p>We have two kinds of priority queues: i.e min-heap and max-heap.</p>\n<ul>\n<li>min heap: pops out the minimum when asked.</li>\n<li>max heap: pops out the maxiumum when asked.</li>\n</ul>\n<p>Heap order property: The parent is <strong>smaller</strong> than its children. MinHeap. The parent is <strong>greater</strong> than its children. MaxHeap.</p>\n<ul>\n<li>Remember, this is not a BST. So we care only for the parent and children.</li>\n<li>BST cares about left and right, while heap cares only one direction, down.</li>\n</ul>\n",
      "id": 234
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/4._Complete_Binary_Trees.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/4._Complete_Binary_Trees.html",
      "content": "# 4. Complete Binary Trees\nCreated Friday 14 February 2020\n\n\n* CBT is always balanced. So one overhead of BST is resolved. \n* The CBT is stored in an array, i.e heap is a virtual tree. Consequently, children can be reached like so:\n\t* leftChild is at 2*i+1\n\t* rightChild is at 2*i+2\n\n**Proof - why 2i+1, 2i+2**\nSuppose that we are a node, now:\n\n* Number of nodes before this node = i in array and 2^h-1^-1 in the tree\n* Number of nodes in this level = 2^h-1^ in tree\n* index of Left child of the node = number of nodes before it = before + this_level = 2^h-1^-1 + 2^h-1^=2*i+1 ; because i = 2^h-1^-1;\n* Similarly, right child = left child+1 = 2*i+2\n\n\nUsing induction,\nBase step: For the root, left  = 2*0+1 = 1; right = 2*0+2 = 2.\nHypothesis step: This is true for any node: left = 2*i+1, right = 2*i+2\nInductive step: For the second node, we have left = 2*i+2+1 = 2*(i+1)+1, right = left +1 = 2*(i+1)+2\nAnd so on for all, until we reach the first of another level.\n\nProved by induction.\n\n*****\n\nWe now know how to calculate indices for the left and right child. We also need a way to know the parent, because this is used in **deletion**, the formula is simple.\np = (c - 1)//2\nNote: We are truncating decimals here, which is the norm in C++.\n\n*****\n\nWe store data in an array for fast accesses, i.e O(1) access as well as fast insert and update.\n\n",
      "html": "<h1 id=\"4.-complete-binary-trees\">4. Complete Binary Trees <a class=\"heading-anchor-permalink\" href=\"#4.-complete-binary-trees\">#</a></h1>\n<p>Created Friday 14 February 2020</p>\n<ul>\n<li>CBT is always balanced. So one overhead of BST is resolved.</li>\n<li>The CBT is stored in an array, i.e heap is a virtual tree. Consequently, children can be reached like so:\n<ul>\n<li>leftChild is at 2*i+1</li>\n<li>rightChild is at 2*i+2</li>\n</ul>\n</li>\n</ul>\n<p><strong>Proof - why 2i+1, 2i+2</strong>\nSuppose that we are a node, now:</p>\n<ul>\n<li>Number of nodes before this node = i in array and 2^h-1^-1 in the tree</li>\n<li>Number of nodes in this level = 2^h-1^ in tree</li>\n<li>index of Left child of the node = number of nodes before it = before + this_level = 2^h-1^-1 + 2^h-1^=2*i+1 ; because i = 2^h-1^-1;</li>\n<li>Similarly, right child = left child+1 = 2*i+2</li>\n</ul>\n<p>Using induction,\nBase step: For the root, left  = 2<em>0+1 = 1; right = 2</em>0+2 = 2.\nHypothesis step: This is true for any node: left = 2<em>i+1, right = 2</em>i+2\nInductive step: For the second node, we have left = 2<em>i+2+1 = 2</em>(i+1)+1, right = left +1 = 2*(i+1)+2\nAnd so on for all, until we reach the first of another level.</p>\n<p>Proved by induction.</p>\n<hr>\n<p>We now know how to calculate indices for the left and right child. We also need a way to know the parent, because this is used in <strong>deletion</strong>, the formula is simple.\np = (c - 1)//2\nNote: We are truncating decimals here, which is the norm in C++.</p>\n<hr>\n<p>We store data in an array for fast accesses, i.e O(1) access as well as fast insert and update.</p>\n",
      "id": 235
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/5._Heap_-_Insertion_and_Deletion.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/5._Heap_-_Insertion_and_Deletion.html",
      "content": "# 5. Heap - Insertion and Deletion\n\nCreated Friday 14 February 2020\n\n#### Insertion\n\n- Append the newValue to the array.\n- Then keep **sifting-it-up**, until heap order property is violated or you reach the root.\n- If root is reached, set its value as newVal.\n\n![](/assets/5._Heap_-_Insertion_and_Deletion-image-1.png)→![](/assets/5._Heap_-_Insertion_and_Deletion-image-2.png)→![](/assets/5._Heap_-_Insertion_and_Deletion-image-3.png)→![](/assets/5._Heap_-_Insertion_and_Deletion-image-4.png)→ Done\nSifting up - it is the process where we exchange data from the parent of the current node and keep doing it until the heap-order property is finally satisfied. Also known as bubbling-up.\n\n---\n\n#### Deletion\n\nWe know that one node has to go and that it has to be the last node. We cannot delete any other node.\n\n1. We copy the value of the last node at the root. i.e the root is effectively deleted.\n2. We delete the last node. CBT property OK!\n3. We **sift-down `from`** the root/ 17. How to decide whether to go left or right. Assume a max-heap for the answer. 18. Just pick the largest, you don't have an option anyway. Do sifting starting from the root: Swap the currentIndex value with larger of the children. This ensures the root has a maximum value. Continue sifting until both children are smaller or you become a leaf.\n\nWhy does this work? - As we are keeping the larger values on top, the heap order property always holds. And as we are just swapping values, and not creating/deleting nodes, the CBT property also holds.\n\n17. What happens if both children are larger and I select the smaller of them?\n18. You cannot, because of the heap order property. Suppose you swap properly for the root, but try to pick the smaller one for the second level. You continue sifting, there can be two cases:\n\n    1.  You cannot sift further. Heap property violated.\n    2.  You can sift further, and you do it. You'll never coming back to the second level, and the heap property stays violated.\n\n19. When we sift like this, we will reach the end, as the last node is the largest.\n\n![](/assets/5._Heap_-_Insertion_and_Deletion-image-5.png)→![](/assets/5._Heap_-_Insertion_and_Deletion-image-6.png)→![](/assets/5._Heap_-_Insertion_and_Deletion-image-7.png)→![](/assets/5._Heap_-_Insertion_and_Deletion-image-8.png)→![](/assets/5._Heap_-_Insertion_and_Deletion-image-9.png)→![](/assets/5._Heap_-_Insertion_and_Deletion-image-10.png)→ Done\n",
      "html": "<h1 id=\"5.-heap---insertion-and-deletion\">5. Heap - Insertion and Deletion <a class=\"heading-anchor-permalink\" href=\"#5.-heap---insertion-and-deletion\">#</a></h1>\n<p>Created Friday 14 February 2020</p>\n<h4 id=\"insertion\">Insertion <a class=\"heading-anchor-permalink\" href=\"#insertion\">#</a></h4>\n<ul>\n<li>Append the newValue to the array.</li>\n<li>Then keep <strong>sifting-it-up</strong>, until heap order property is violated or you reach the root.</li>\n<li>If root is reached, set its value as newVal.</li>\n</ul>\n<p><img src=\"/assets/5._Heap_-_Insertion_and_Deletion-image-1.png\" alt=\"\">→<img src=\"/assets/5._Heap_-_Insertion_and_Deletion-image-2.png\" alt=\"\">→<img src=\"/assets/5._Heap_-_Insertion_and_Deletion-image-3.png\" alt=\"\">→<img src=\"/assets/5._Heap_-_Insertion_and_Deletion-image-4.png\" alt=\"\">→ Done\nSifting up - it is the process where we exchange data from the parent of the current node and keep doing it until the heap-order property is finally satisfied. Also known as bubbling-up.</p>\n<hr>\n<h4 id=\"deletion\">Deletion <a class=\"heading-anchor-permalink\" href=\"#deletion\">#</a></h4>\n<p>We know that one node has to go and that it has to be the last node. We cannot delete any other node.</p>\n<ol>\n<li>We copy the value of the last node at the root. i.e the root is effectively deleted.</li>\n<li>We delete the last node. CBT property OK!</li>\n<li>We <strong>sift-down <code>from</code></strong> the root/ 17. How to decide whether to go left or right. Assume a max-heap for the answer. 18. Just pick the largest, you don’t have an option anyway. Do sifting starting from the root: Swap the currentIndex value with larger of the children. This ensures the root has a maximum value. Continue sifting until both children are smaller or you become a leaf.</li>\n</ol>\n<p>Why does this work? - As we are keeping the larger values on top, the heap order property always holds. And as we are just swapping values, and not creating/deleting nodes, the CBT property also holds.</p>\n<ol start=\"17\">\n<li>\n<p>What happens if both children are larger and I select the smaller of them?</p>\n</li>\n<li>\n<p>You cannot, because of the heap order property. Suppose you swap properly for the root, but try to pick the smaller one for the second level. You continue sifting, there can be two cases:</p>\n<ol>\n<li>You cannot sift further. Heap property violated.</li>\n<li>You can sift further, and you do it. You’ll never coming back to the second level, and the heap property stays violated.</li>\n</ol>\n</li>\n<li>\n<p>When we sift like this, we will reach the end, as the last node is the largest.</p>\n</li>\n</ol>\n<p><img src=\"/assets/5._Heap_-_Insertion_and_Deletion-image-5.png\" alt=\"\">→<img src=\"/assets/5._Heap_-_Insertion_and_Deletion-image-6.png\" alt=\"\">→<img src=\"/assets/5._Heap_-_Insertion_and_Deletion-image-7.png\" alt=\"\">→<img src=\"/assets/5._Heap_-_Insertion_and_Deletion-image-8.png\" alt=\"\">→<img src=\"/assets/5._Heap_-_Insertion_and_Deletion-image-9.png\" alt=\"\">→<img src=\"/assets/5._Heap_-_Insertion_and_Deletion-image-10.png\" alt=\"\">→ Done</p>\n",
      "id": 236
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/7._In-place_heap.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/7._In-place_heap.html",
      "content": "# 7. In-place heap\nCreated Saturday 15 February 2020\n\n\n* We need to convert an array into a heap.\n* To start, visualize like this:\n\t1. The first element is a heap.\n\t2. We insert the a new element at the end o fthe array. Which it is, naturally.\n\t3. Here we sift the newly inserted element up. Till the heap property is satisfied.\n\t4. Eventually, we have a heap.\n\nT.C for this operation:  \n\n\n* We have a heap. To sort the elements, do this.\n\t1. removeMIn(). We swap the end of the heap and the root, i.e index 0.\n\t2. We sift the index 0 element down, until the heap order property is satisfied. Which will happen eventually.\n\t3. continue till we all the elements are over.\n\n\n\n* We have the sorted array in decreasing(non-increasing) order.\n\n\n\n* minHeap is used for reverse sort.\n* max heap for sorting.\n\n\nWe \n\n",
      "html": "<h1 id=\"7.-in-place-heap\">7. In-place heap <a class=\"heading-anchor-permalink\" href=\"#7.-in-place-heap\">#</a></h1>\n<p>Created Saturday 15 February 2020</p>\n<ul>\n<li>We need to convert an array into a heap.</li>\n<li>To start, visualize like this:\n<ol>\n<li>The first element is a heap.</li>\n<li>We insert the a new element at the end o fthe array. Which it is, naturally.</li>\n<li>Here we sift the newly inserted element up. Till the heap property is satisfied.</li>\n<li>Eventually, we have a heap.</li>\n</ol>\n</li>\n</ul>\n<p>T.C for this operation:</p>\n<ul>\n<li>\n<p>We have a heap. To sort the elements, do this.</p>\n<ol>\n<li>removeMIn(). We swap the end of the heap and the root, i.e index 0.</li>\n<li>We sift the index 0 element down, until the heap order property is satisfied. Which will happen eventually.</li>\n<li>continue till we all the elements are over.</li>\n</ol>\n</li>\n<li>\n<p>We have the sorted array in decreasing(non-increasing) order.</p>\n</li>\n<li>\n<p>minHeap is used for reverse sort.</p>\n</li>\n<li>\n<p>max heap for sorting.</p>\n</li>\n</ul>\n<p>We</p>\n",
      "id": 237
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/8._STL_priority_queue.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/8._STL_priority_queue.html",
      "content": "# 8. STL priority queue\nCreated Sunday 16 February 2020\n\n\n* The priority_queue is actually a max priority queue.\n* The only difference is in the remove and insert functions, i.e < becomes > and vice-versa, i.e sifting condition.\n* void ``pop``() to ``remove``(), ``push``() to insert.\n* p.``empty``() - returns true if empty.\n* p.``top``() - returns root of the heap.\n* p.``size``() - returns the size.\n* priority_queue<int, vector<int>, greater<int>> for min priority queue.\n* **No need to include<vector>, as queue has it already.**\n* By **default**, the **functor** is ``less<int>``.\n* By **default**, priority_queue<int, vector<int>, less<int>>\n* We will see the details afterwards.\n\n```c++\npriority_queue<int, vector<int>, greater<int>> min_pq;\npriority_queue<int> max_pq;\n```\n",
      "html": "<h1 id=\"8.-stl-priority-queue\">8. STL priority queue <a class=\"heading-anchor-permalink\" href=\"#8.-stl-priority-queue\">#</a></h1>\n<p>Created Sunday 16 February 2020</p>\n<ul>\n<li>The priority_queue is actually a max priority queue.</li>\n<li>The only difference is in the remove and insert functions, i.e &lt; becomes &gt; and vice-versa, i.e sifting condition.</li>\n<li>void <code>pop</code>() to <code>remove</code>(), <code>push</code>() to insert.</li>\n<li>p.<code>empty</code>() - returns true if empty.</li>\n<li>p.<code>top</code>() - returns root of the heap.</li>\n<li>p.<code>size</code>() - returns the size.</li>\n<li>priority_queue&lt;int, vector<int>, greater<int>&gt; for min priority queue.</li>\n<li><strong>No need to include<vector>, as queue has it already.</strong></li>\n<li>By <strong>default</strong>, the <strong>functor</strong> is <code>less&lt;int&gt;</code>.</li>\n<li>By <strong>default</strong>, priority_queue&lt;int, vector<int>, less<int>&gt;</li>\n<li>We will see the details afterwards.</li>\n</ul>\n<pre><code class=\"language-c++\">priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; min_pq;\npriority_queue&lt;int&gt; max_pq;\n</code></pre>\n",
      "id": 238
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/9._Practice_Problems/1._K_sorted_array.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/9._Practice_Problems/1._K_sorted_array.html",
      "content": "# 1. K sorted array\n\nCreated Sunday 16 February 2020\n\nWhat does k sorted array mean?\nAns: An array in which after being sort, all the elements are at most k-1 positions away from the original position.\n\n- Remember an element is 0 away from itself.\n- Talking of index, for given i, we can go, i-k+1 or k-1+i.\n\ne.g This is not a k=2 sorted array, because 15 moves by two places, whereas maximum moves allowed are k-1.\n![](/assets/1._K_sorted_array-image-1.png)\nQ) Sort a k sorted array:\nA) To do this, we can do the following.For every index i, we can give a range. e.g for the zerowth index, we have posssibilties from index 0 to k-1. So we seek the minimum of them and put it at its place. We keep on doing this.\n\n- The left part is always being sorted.\n- We can swap elements to ensure in-place sort.\n\nSuppose we have size = multiple of k\n\n1. For one pass, we have T.C = k + k-1 + k-2 + ... +1 = k(k+1)/2\n2. We need to make n/k passed.\n3. Total time = n/k \\* k(k+1)/2 = n(k+1)/2\n\nHow is this related to priority queue?\nWe need **maximum** elements at each instance.\nSo we do heapify for the k stack. Then we say getMax(or pop).\nT.C for 1 pass: k.logk + logk.k = klogk.\nTotal passes: n/k.\nT.C = 2*klogk*n/k = 2\\*k log(n) = O(nlog(k)) ~ O(n)\n\nNote: When you here maximum or minimum, flash heap.\n",
      "html": "<h1 id=\"1.-k-sorted-array\">1. K sorted array <a class=\"heading-anchor-permalink\" href=\"#1.-k-sorted-array\">#</a></h1>\n<p>Created Sunday 16 February 2020</p>\n<p>What does k sorted array mean?\nAns: An array in which after being sort, all the elements are at most k-1 positions away from the original position.</p>\n<ul>\n<li>Remember an element is 0 away from itself.</li>\n<li>Talking of index, for given i, we can go, i-k+1 or k-1+i.</li>\n</ul>\n<p>e.g This is not a k=2 sorted array, because 15 moves by two places, whereas maximum moves allowed are k-1.\n<img src=\"/assets/1._K_sorted_array-image-1.png\" alt=\"\">\nQ) Sort a k sorted array:\nA) To do this, we can do the following.For every index i, we can give a range. e.g for the zerowth index, we have posssibilties from index 0 to k-1. So we seek the minimum of them and put it at its place. We keep on doing this.</p>\n<ul>\n<li>The left part is always being sorted.</li>\n<li>We can swap elements to ensure in-place sort.</li>\n</ul>\n<p>Suppose we have size = multiple of k</p>\n<ol>\n<li>For one pass, we have T.C = k + k-1 + k-2 + … +1 = k(k+1)/2</li>\n<li>We need to make n/k passed.</li>\n<li>Total time = n/k * k(k+1)/2 = n(k+1)/2</li>\n</ol>\n<p>How is this related to priority queue?\nWe need <strong>maximum</strong> elements at each instance.\nSo we do heapify for the k stack. Then we say getMax(or pop).\nT.C for 1 pass: k.logk + logk.k = klogk.\nTotal passes: n/k.\nT.C = 2<em>klogk</em>n/k = 2*k log(n) = O(nlog(k)) ~ O(n)</p>\n<p>Note: When you here maximum or minimum, flash heap.</p>\n",
      "id": 239
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/9._Practice_Problems/2._K_smallest_elements.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/9._Practice_Problems/2._K_smallest_elements.html",
      "content": "# 2. K smallest elements\nCreated Sunday 16 February 2020\n\n\n* We need a max heap for this. i.e we will swap all the largest elements. So the remaining ones will be the smallest.\n\n\nNaive approach: sort() the array and return the first k\nT.C = O(nlogn)\nS.C = O(n)\n\nThe best approach: Using priority queue:\n\n1. heapify the first k elements\n2. Traverse the remaining elements, push if the array element is less than the largest in the priority queue. i.e all largest ones are removed eventually.\n3. We have the minium in the priority queue.\n4. Print in reverse order.\n\nT.C = (heapify of k) + push( the remaining, if they are less tahn the max, our heap always have k elements, so log k)  = klogk + (n-k)*logk = nlogk.\n\n\n",
      "html": "<h1 id=\"2.-k-smallest-elements\">2. K smallest elements <a class=\"heading-anchor-permalink\" href=\"#2.-k-smallest-elements\">#</a></h1>\n<p>Created Sunday 16 February 2020</p>\n<ul>\n<li>We need a max heap for this. i.e we will swap all the largest elements. So the remaining ones will be the smallest.</li>\n</ul>\n<p>Naive approach: sort() the array and return the first k\nT.C = O(nlogn)\nS.C = O(n)</p>\n<p>The best approach: Using priority queue:</p>\n<ol>\n<li>heapify the first k elements</li>\n<li>Traverse the remaining elements, push if the array element is less than the largest in the priority queue. i.e all largest ones are removed eventually.</li>\n<li>We have the minium in the priority queue.</li>\n<li>Print in reverse order.</li>\n</ol>\n<p>T.C = (heapify of k) + push( the remaining, if they are less tahn the max, our heap always have k elements, so log k)  = klogk + (n-k)*logk = nlogk.</p>\n",
      "id": 240
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/0_index.html",
      "content": "# 2. Hashmaps\nCreated Tuesday 18 February 2020\n\nDifferent names like \nmaps, hash tables, etc. They are different things.\n\n* Very awesome thing.\n\n\n[Codes](./2._Hashmaps/Codes)\n[Exercises.md](./2._Hashmaps/Quizzes&Exercises/Exercises.md)\n[CodingExercises.md](./2._Hashmaps/Quizzes&Exercises/CodingExercises.md)\n[Assignments.md](./2._Hashmaps/zAssignments/Assignments.md)\n\n",
      "html": "<h1 id=\"2.-hashmaps\">2. Hashmaps <a class=\"heading-anchor-permalink\" href=\"#2.-hashmaps\">#</a></h1>\n<p>Created Tuesday 18 February 2020</p>\n<p>Different names like\nmaps, hash tables, etc. They are different things.</p>\n<ul>\n<li>Very awesome thing.</li>\n</ul>\n<p><a href=\"./2._Hashmaps/Codes\">Codes</a>\n<a href=\"./2._Hashmaps/Quizzes&amp;Exercises/Exercises.html\">Exercises.md</a>\n<a href=\"./2._Hashmaps/Quizzes&amp;Exercises/CodingExercises.html\">CodingExercises.md</a>\n<a href=\"./2._Hashmaps/zAssignments/Assignments.html\">Assignments.md</a></p>\n",
      "id": 241
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/1._Intro_to_hashMaps.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/1._Intro_to_hashMaps.html",
      "content": "# 1. Intro to hashMaps\nCreated Tuesday 18 February 2020\n\n**Q1**) Given a sentence, return the maximum occurring character:\n**Ans**: Simple hack, make a 256 sized array. Traverse the array and keep the characters at its ASCII value. While doing this, keep a max variable and a max character, keep updating it if you find a bigger array. Done in **single** scan.\n**Catch**: The data in the array was subset of some finite set, and also that the data had a one-one relation with the indexes.\nTerminology: \n**Key:** the thing which is used to **call/query **our map.\n\n**Q2**) Find the maxium occurring word(may not be meaningful) in a sentence.\n**Ans**: Here the universal set is infinite. As we do not have a limit on the length and the permutation.\nHere we will need to make a map, i.e the key(here a word) with a **value**(no of times it has occurred).\nThis is called a **map, key-value pair or dictionary.**\n\nThe map interface:\n\n1. insert(key, value)\n2. getValue(key)\n3. delete(key)\n\n\nWays of implementing this:\n\n1. Linked list - every node has a pair<key, value>\n\t1. insert() - O(n), we have to find the node, update it if found. Or add a note if key is not present.\n\t2. getValue() - We need to do linear search. O(n)\n\t3. delete(key) - check if node is present. Delete if found. O(n)\n\nVery bad approach. Our ideal is the array - O(1) access.\n\n2. BST, we are using some balanced BST.\n\nWe should have some ordering. In words we can do lexicographical.\n\n1. insert() - O(logn), we have to find the node, update it if found. Or add a note if key is not present.\n2. getValue(logn) - search. O(logn)\n3. delete(key) - check if node is present. Delete if found. O(logn)\n\nVery good approach. Our ideal is the array - O(1) access.\nImplement this.\n\n3. We use hash table. For some wise thing, we will first see STL offering. We will see all the theory etc afterwards.\n\n\n\n\n* Note: access and search are two different things. They are the same in hashmaps.\n\n\n\n",
      "html": "<h1 id=\"1.-intro-to-hashmaps\">1. Intro to hashMaps <a class=\"heading-anchor-permalink\" href=\"#1.-intro-to-hashmaps\">#</a></h1>\n<p>Created Tuesday 18 February 2020</p>\n<p><strong>Q1</strong>) Given a sentence, return the maximum occurring character:\n<strong>Ans</strong>: Simple hack, make a 256 sized array. Traverse the array and keep the characters at its ASCII value. While doing this, keep a max variable and a max character, keep updating it if you find a bigger array. Done in <strong>single</strong> scan.\n<strong>Catch</strong>: The data in the array was subset of some finite set, and also that the data had a one-one relation with the indexes.\nTerminology:\n<strong>Key:</strong> the thing which is used to **call/query **our map.</p>\n<p><strong>Q2</strong>) Find the maxium occurring word(may not be meaningful) in a sentence.\n<strong>Ans</strong>: Here the universal set is infinite. As we do not have a limit on the length and the permutation.\nHere we will need to make a map, i.e the key(here a word) with a <strong>value</strong>(no of times it has occurred).\nThis is called a <strong>map, key-value pair or dictionary.</strong></p>\n<p>The map interface:</p>\n<ol>\n<li>insert(key, value)</li>\n<li>getValue(key)</li>\n<li>delete(key)</li>\n</ol>\n<p>Ways of implementing this:</p>\n<ol>\n<li>Linked list - every node has a pair&lt;key, value&gt;\n<ol>\n<li>insert() - O(n), we have to find the node, update it if found. Or add a note if key is not present.</li>\n<li>getValue() - We need to do linear search. O(n)</li>\n<li>delete(key) - check if node is present. Delete if found. O(n)</li>\n</ol>\n</li>\n</ol>\n<p>Very bad approach. Our ideal is the array - O(1) access.</p>\n<ol start=\"2\">\n<li>BST, we are using some balanced BST.</li>\n</ol>\n<p>We should have some ordering. In words we can do lexicographical.</p>\n<ol>\n<li>insert() - O(logn), we have to find the node, update it if found. Or add a note if key is not present.</li>\n<li>getValue(logn) - search. O(logn)</li>\n<li>delete(key) - check if node is present. Delete if found. O(logn)</li>\n</ol>\n<p>Very good approach. Our ideal is the array - O(1) access.\nImplement this.</p>\n<ol start=\"3\">\n<li>We use hash table. For some wise thing, we will first see STL offering. We will see all the theory etc afterwards.</li>\n</ol>\n<ul>\n<li>Note: access and search are two different things. They are the same in hashmaps.</li>\n</ul>\n",
      "id": 242
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/2._Bucket_Array_and_hash_functions.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/2._Bucket_Array_and_hash_functions.html",
      "content": "# 2. Bucket Array and hash functions\nCreated Tuesday 18 February 2020\n\n\n* We don't want to learn about something and make it a black box.\n\nWe want to implement maps using hash tables:\n\n1. O(1) access\n2. O(1) insert\n3. O(1) remove\n\n\n\n* Arrays are the only data structure with O(1) insert and O(1) access.\n* As we are just storing pairs. **Suppose that we are concerned only about keys here.**\n* We use an array (called **bucket array**) for collecting the keys. This is the functional part of the hash table. **We can add value functionality later.**\n\n\n*****\n\n\n* Just **dream** that we could somehow convert the key to an index value(i.e integer). \n* To realize this, we make a hashing function. Our problem breaks down to designing the function.\n\n\nThe hash function has two functions:\n\n1. hashcode - takes the key and generates a number for it. It is a function. For the same input we always get the same output.\n2. compression function - this helps us assign an index which is within our bucket size. i.e makes it practical. e.g \"abc\" by some h() returns 17645678. If our bucket size is 56. We need an index between 0 and 55. A perfect compression bucket is h() % bucket_size; **A very good compression function. **Don't worry about this. This can be dealt with easily. \n\nNote: Some keys may have the same index, because bucket size is limited. This are called collisions. There are ways we can deal with them.\nThis is the **basis** for hash table.\n\n*****\n\nFor different keys different types of hashcodes can be proposed, depending on the nature of the key.\ne.g \n\n1. suppose we have an infinte array, if the key is an integer. Then h(key) = key; identity functions works here perfectly. \n2. for strings - \"abc\", there are lots of ways. Among them:\n\t1. Sum of ascii values - not good because because it is the same for all permutations of a string. So it is problematic.\n\t2. Take sum of first 3 characters - permutations can be handles, still it is limited to ASCII range.\n\t3. This is used practically - treat the word as a word with base p. 128 for ASCII. This is acceptable because most words are not that long. We take 'p' as prime because they work very well for making the distribution normal, according to research. \n\t4. We can **define our own hashcode** for the new key if required. For our **classes. **e.g We can use the address of the object, as a number. We can use it as input for the hashCode.\n\nCharacteristics of a good hashCode:\n\n1. Should be a normal distribution.\n\n\n",
      "html": "<h1 id=\"2.-bucket-array-and-hash-functions\">2. Bucket Array and hash functions <a class=\"heading-anchor-permalink\" href=\"#2.-bucket-array-and-hash-functions\">#</a></h1>\n<p>Created Tuesday 18 February 2020</p>\n<ul>\n<li>We don’t want to learn about something and make it a black box.</li>\n</ul>\n<p>We want to implement maps using hash tables:</p>\n<ol>\n<li>O(1) access</li>\n<li>O(1) insert</li>\n<li>O(1) remove</li>\n</ol>\n<ul>\n<li>Arrays are the only data structure with O(1) insert and O(1) access.</li>\n<li>As we are just storing pairs. <strong>Suppose that we are concerned only about keys here.</strong></li>\n<li>We use an array (called <strong>bucket array</strong>) for collecting the keys. This is the functional part of the hash table. <strong>We can add value functionality later.</strong></li>\n</ul>\n<hr>\n<ul>\n<li>Just <strong>dream</strong> that we could somehow convert the key to an index value(i.e integer).</li>\n<li>To realize this, we make a hashing function. Our problem breaks down to designing the function.</li>\n</ul>\n<p>The hash function has two functions:</p>\n<ol>\n<li>hashcode - takes the key and generates a number for it. It is a function. For the same input we always get the same output.</li>\n<li>compression function - this helps us assign an index which is within our bucket size. i.e makes it practical. e.g “abc” by some h() returns 17645678. If our bucket size is 56. We need an index between 0 and 55. A perfect compression bucket is h() % bucket_size; **A very good compression function. **Don’t worry about this. This can be dealt with easily.</li>\n</ol>\n<p>Note: Some keys may have the same index, because bucket size is limited. This are called collisions. There are ways we can deal with them.\nThis is the <strong>basis</strong> for hash table.</p>\n<hr>\n<p>For different keys different types of hashcodes can be proposed, depending on the nature of the key.\ne.g</p>\n<ol>\n<li>suppose we have an infinte array, if the key is an integer. Then h(key) = key; identity functions works here perfectly.</li>\n<li>for strings - “abc”, there are lots of ways. Among them:\n<ol>\n<li>Sum of ascii values - not good because because it is the same for all permutations of a string. So it is problematic.</li>\n<li>Take sum of first 3 characters - permutations can be handles, still it is limited to ASCII range.</li>\n<li>This is used practically - treat the word as a word with base p. 128 for ASCII. This is acceptable because most words are not that long. We take ‘p’ as prime because they work very well for making the distribution normal, according to research.</li>\n<li>We can <strong>define our own hashcode</strong> for the new key if required. For our **classes. **e.g We can use the address of the object, as a number. We can use it as input for the hashCode.</li>\n</ol>\n</li>\n</ol>\n<p>Characteristics of a good hashCode:</p>\n<ol>\n<li>Should be a normal distribution.</li>\n</ol>\n",
      "id": 243
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/3._Collision_Handling.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/3._Collision_Handling.html",
      "content": "# 3. Collision Handling\n\nCreated Tuesday 18 February 2020\n\nProblem: Two keys have the same values. How to manage it?\n\nThere are two techniques:\n\n1. Closed Hashing(also called seperate chaining) - we will have to adjust with the same element. Every bucket has its chain of LinkedLists.\n\n![](/assets/3._Collision_Handling-image-1.png)\n\n2. Open addressing(aka Open chaining) - Find an alternate for the key we want to put, coz the index is already occupied. How to find an alternate place? There are many ways to do this.\n\nBasic: h~i~(a) = hf(a) + f(i), where f(0) = 0.\nAfter this we will apply the compression function again if we go out of range.\nTechniques just change the f(i)\n\n1. Linear Probing: f(i) = i Has the problem of key localization.\n2. Quadratic Probing: f(i) = i^2 ^ This ensures that the keys are spread.\n3. Double hashing: We will take another hash function h'(a), we do f(i) = i\\*h'(a)\n\ni.e h~i~(a) = hf(a) + i\\*h'(a) is what we use.\n\n---\n\n- Seperate chaining is more popular and easy to develop. There is no design except one hash function.\n",
      "html": "<h1 id=\"3.-collision-handling\">3. Collision Handling <a class=\"heading-anchor-permalink\" href=\"#3.-collision-handling\">#</a></h1>\n<p>Created Tuesday 18 February 2020</p>\n<p>Problem: Two keys have the same values. How to manage it?</p>\n<p>There are two techniques:</p>\n<ol>\n<li>Closed Hashing(also called seperate chaining) - we will have to adjust with the same element. Every bucket has its chain of LinkedLists.</li>\n</ol>\n<p><img src=\"/assets/3._Collision_Handling-image-1.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>Open addressing(aka Open chaining) - Find an alternate for the key we want to put, coz the index is already occupied. How to find an alternate place? There are many ways to do this.</li>\n</ol>\n<p>Basic: h~i~(a) = hf(a) + f(i), where f(0) = 0.\nAfter this we will apply the compression function again if we go out of range.\nTechniques just change the f(i)</p>\n<ol>\n<li>Linear Probing: f(i) = i Has the problem of key localization.</li>\n<li>Quadratic Probing: f(i) = i^2 ^ This ensures that the keys are spread.</li>\n<li>Double hashing: We will take another hash function h’(a), we do f(i) = i*h’(a)</li>\n</ol>\n<p>i.e h~i~(a) = hf(a) + i*h’(a) is what we use.</p>\n<hr>\n<ul>\n<li>Seperate chaining is more popular and easy to develop. There is no design except one hash function.</li>\n</ul>\n",
      "id": 244
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/4._Time_complexity_and_time_factor.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/4._Time_complexity_and_time_factor.html",
      "content": "# 4. Time complexity and time factor\nCreated Wednesday 19 February 2020\n\n\n1. hash function and compression -  \n\t* This will not be a constant. It depends on the string size, so h() = O(l), where l = key length.\n\t* We assume that multiplication is fairly constant here for reasonable values of p.\n\t* The number of keys are huge as compared to the max key size, so we assume that generating the hash_Index is negligible as compared to LL traversal of a bucket. Hence hashing can be said to be O(1), i.e constant.\n\t* hashing function is independent of the bucket size. But the index depends on the compression function, which does **depend **on the bucket size hence the index **depends **on the bucketSize;\n2. void insertion(string key, V value)\n\t* The worst case can be if all the elements are in the same bucket. i.e an LL of length n. n = number of keyVal pairs. **But **we have very good hash functions and research indicates that such a thing is not likely to happen.\n\t* On an average, each bucket has n/b elements. This number is called the **load factor** = number of kv pairs/ size of bucket array;\n\t* We need to ensure that n/b < 0.7 or something according to the situation. This means that each bucket has less than one bucket.\n\t* So having multiple entries is very improbable.\n\t* Consequenty **complexity becomes O(1).**\n\t* So the **crux **is the load factor, if n increases, the only way to keep n/b in check is by increasing b too. i.e resizing the bucket array. This is called **Rehashing. **We hash all the entries to a new double sized bucket array. The old bucket array is discarded. Rehashing is costly but it happens only occasionally. This is like the reallocation of a full vector. Rehashing depends on the load factor. \n\t* Remember that load factor should ideally indicate the spread of the entries. Merely copying the old bucket in the new bucket is not good and won't work too, as the compression function depends on the bucketSize .\n3. V remove() - O(1)\n4. getValue - O(1)\n\n\nInsertion needs only an if statement at the start for rehashing, nothing else is required. Let the insert work normally when this is over. \n\n",
      "html": "<h1 id=\"4.-time-complexity-and-time-factor\">4. Time complexity and time factor <a class=\"heading-anchor-permalink\" href=\"#4.-time-complexity-and-time-factor\">#</a></h1>\n<p>Created Wednesday 19 February 2020</p>\n<ol>\n<li>hash function and compression -\n<ul>\n<li>This will not be a constant. It depends on the string size, so h() = O(l), where l = key length.</li>\n<li>We assume that multiplication is fairly constant here for reasonable values of p.</li>\n<li>The number of keys are huge as compared to the max key size, so we assume that generating the hash_Index is negligible as compared to LL traversal of a bucket. Hence hashing can be said to be O(1), i.e constant.</li>\n<li>hashing function is independent of the bucket size. But the index depends on the compression function, which does **depend **on the bucket size hence the index **depends **on the bucketSize;</li>\n</ul>\n</li>\n<li>void insertion(string key, V value)\n<ul>\n<li>The worst case can be if all the elements are in the same bucket. i.e an LL of length n. n = number of keyVal pairs. **But **we have very good hash functions and research indicates that such a thing is not likely to happen.</li>\n<li>On an average, each bucket has n/b elements. This number is called the <strong>load factor</strong> = number of kv pairs/ size of bucket array;</li>\n<li>We need to ensure that n/b &lt; 0.7 or something according to the situation. This means that each bucket has less than one bucket.</li>\n<li>So having multiple entries is very improbable.</li>\n<li>Consequenty <strong>complexity becomes O(1).</strong></li>\n<li>So the **crux **is the load factor, if n increases, the only way to keep n/b in check is by increasing b too. i.e resizing the bucket array. This is called **Rehashing. **We hash all the entries to a new double sized bucket array. The old bucket array is discarded. Rehashing is costly but it happens only occasionally. This is like the reallocation of a full vector. Rehashing depends on the load factor.</li>\n<li>Remember that load factor should ideally indicate the spread of the entries. Merely copying the old bucket in the new bucket is not good and won’t work too, as the compression function depends on the bucketSize .</li>\n</ul>\n</li>\n<li>V remove() - O(1)</li>\n<li>getValue - O(1)</li>\n</ol>\n<p>Insertion needs only an if statement at the start for rehashing, nothing else is required. Let the insert work normally when this is over.</p>\n",
      "id": 245
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/5._Coding_a_hashMap.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/5._Coding_a_hashMap.html",
      "content": "# 5. Coding a hashMap\nCreated Wednesday 19 February 2020\n\n\n* We will make a hashMap class, with string as key, as we don't have a hash function for every data type. The value will be a template. hashCode depends only on the key.\n* As we are using seperate chaining. So our bucket array is an array of pointers to an LL of the value nodes.\n* We will also store size, bucketCapacity;\n\nFunctions:\n\n1. void insert(string key, V value);\n2. V getValue(string key);\n3. V remove(string key);\n\n\n",
      "html": "<h1 id=\"5.-coding-a-hashmap\">5. Coding a hashMap <a class=\"heading-anchor-permalink\" href=\"#5.-coding-a-hashmap\">#</a></h1>\n<p>Created Wednesday 19 February 2020</p>\n<ul>\n<li>We will make a hashMap class, with string as key, as we don’t have a hash function for every data type. The value will be a template. hashCode depends only on the key.</li>\n<li>As we are using seperate chaining. So our bucket array is an array of pointers to an LL of the value nodes.</li>\n<li>We will also store size, bucketCapacity;</li>\n</ul>\n<p>Functions:</p>\n<ol>\n<li>void insert(string key, V value);</li>\n<li>V getValue(string key);</li>\n<li>V remove(string key);</li>\n</ol>\n",
      "id": 246
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/7._Question_-_Infinite_Stream.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/7._Question_-_Infinite_Stream.html",
      "content": "# 7. Question - Infinite Stream\nCreated Tuesday 18 February 2020\n\nQ) We are given an array(always finite) of integers. An infinte stream of integers is coming, we have to say for every integer \"have we seen that before\"?\nA) One possible wrong way is that we store the all integers as indexes of a boolean array. If a number is present, return true. If not, mark it true.\n\n* This is wrong because it wastes a lot of space.(Because size required = maximum element in the array).\n* Maps are the best for this, we can use negative as well as too large numbers, space requirement is the same.\n\n\n",
      "html": "<h1 id=\"7.-question---infinite-stream\">7. Question - Infinite Stream <a class=\"heading-anchor-permalink\" href=\"#7.-question---infinite-stream\">#</a></h1>\n<p>Created Tuesday 18 February 2020</p>\n<p>Q) We are given an array(always finite) of integers. An infinte stream of integers is coming, we have to say for every integer “have we seen that before”?\nA) One possible wrong way is that we store the all integers as indexes of a boolean array. If a number is present, return true. If not, mark it true.</p>\n<ul>\n<li>This is wrong because it wastes a lot of space.(Because size required = maximum element in the array).</li>\n<li>Maps are the best for this, we can use negative as well as too large numbers, space requirement is the same.</li>\n</ul>\n",
      "id": 247
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set/1._map_and_unordered_map/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set/1._map_and_unordered_map/0_index.html",
      "content": "# 1. map and unordered map\nCreated Tuesday 18 February 2020\n\n\n1. map ordered - BST implementation - O(logn) - ops.\n2. unordered_map - Hash table. Unordered - O(1) - all ops.\n\n\nmap has an order because you can use inOrder.\nunordered is can be in **any** order. Order is random.\n\n\n* Header: #include<unordered_map>\n* It is a template.\n* Remember \"key then value\"\n\n\nThe functions: mapname.f()\n\n1. insert(pair<>). Does not **overwite** the value if we try to {insert key, different value}. No errors though if a key exists.\n2. at(key).  Acess the value for 'key'. Throws an error if key is absent. Can be used as lval. \n3. mapname[key] -Used for acess and assignment. **Note: Creates **a (key, value) pair if key was absent. Returns no errors. **T.C same as insert(). But this is better. Should'nt be used if we are working on old data. i.e don't create your own.**\n4. count(key) - returns the count. In a map, it is either 0 or 1. **Used for checking existence.**\n5. size() - returns number of key value pairs.\n6. erase(key), deletes a key if present. Else does nothing. No exceptions.\n\n\n**Notes:**\n\n1. Never use a hashmap to store coordinates, uncategorized tuples. As multiple tules could have same values for some.\n2. unordered_map cannot store.\n\n\n",
      "html": "<h1 id=\"1.-map-and-unordered-map\">1. map and unordered map <a class=\"heading-anchor-permalink\" href=\"#1.-map-and-unordered-map\">#</a></h1>\n<p>Created Tuesday 18 February 2020</p>\n<ol>\n<li>map ordered - BST implementation - O(logn) - ops.</li>\n<li>unordered_map - Hash table. Unordered - O(1) - all ops.</li>\n</ol>\n<p>map has an order because you can use inOrder.\nunordered is can be in <strong>any</strong> order. Order is random.</p>\n<ul>\n<li>Header: #include&lt;unordered_map&gt;</li>\n<li>It is a template.</li>\n<li>Remember “key then value”</li>\n</ul>\n<p>The functions: mapname.f()</p>\n<ol>\n<li>insert(pair&lt;&gt;). Does not <strong>overwite</strong> the value if we try to {insert key, different value}. No errors though if a key exists.</li>\n<li>at(key).  Acess the value for ‘key’. Throws an error if key is absent. Can be used as lval.</li>\n<li>mapname[key] -Used for acess and assignment. **Note: Creates **a (key, value) pair if key was absent. Returns no errors. <strong>T.C same as insert(). But this is better. Should’nt be used if we are working on old data. i.e don’t create your own.</strong></li>\n<li>count(key) - returns the count. In a map, it is either 0 or 1. <strong>Used for checking existence.</strong></li>\n<li>size() - returns number of key value pairs.</li>\n<li>erase(key), deletes a key if present. Else does nothing. No exceptions.</li>\n</ol>\n<p><strong>Notes:</strong></p>\n<ol>\n<li>Never use a hashmap to store coordinates, uncategorized tuples. As multiple tules could have same values for some.</li>\n<li>unordered_map cannot store.</li>\n</ol>\n",
      "id": 248
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set/2._set_and_unordered_set.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set/2._set_and_unordered_set.html",
      "content": "# 2. set and unordered set\nCreated Saturday 18 April 2020\n\n\n* Works the same as hashmap, except the fact that we store only keys, no values.\n\n**Note: **unordered_map cannot work with pair<> out of the box. Either use set or provide a hash function for the pair.\n\n* Use set pair for coordinates and tuples, never use a hashmap.\n* Sets do not give error if we try to insert duplicates, as dealing with them is their primary op.\n\n\n",
      "html": "<h1 id=\"2.-set-and-unordered-set\">2. set and unordered set <a class=\"heading-anchor-permalink\" href=\"#2.-set-and-unordered-set\">#</a></h1>\n<p>Created Saturday 18 April 2020</p>\n<ul>\n<li>Works the same as hashmap, except the fact that we store only keys, no values.</li>\n</ul>\n<p>**Note: **unordered_map cannot work with pair&lt;&gt; out of the box. Either use set or provide a hash function for the pair.</p>\n<ul>\n<li>Use set pair for coordinates and tuples, never use a hashmap.</li>\n<li>Sets do not give error if we try to insert duplicates, as dealing with them is their primary op.</li>\n</ul>\n",
      "id": 249
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set/3._Iterators_-_C++_Feature.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set/3._Iterators_-_C++_Feature.html",
      "content": "# 3. Iterators - C++ Feature\nCreated Tuesday 18 February 2020\n\n\n* Traversing containers requires container.\n\n They are useful for vector, list, map, set, unordered_map, unordered_set.\n\nInfo about STL:\n\n* set is nothing but a map with no values. Hence duplicate keys don't have a meaning. map has a pair. No difference as such.\n* unordered_map works similar to unordered_set. O(1) ops. hash table.\n* set works similar to map. Both are ordered and implemented using BST. O(logn) ops.\n\n\n\n* Iterators are multi-purpose. They can be used for deleting as well as traversing.\n* Also iterators have container dependent implementations.\n\n\n*****\n\n\n* The way to think of an iterator\n* An iterator is like a pointer to the data element. i.e -> and * should be used.\n* **syntax:** container_type : : iterator iterator_name; \n* We advance forward using iterator_name+=1; i.e adding **integers** is allowed.\n* container_name.begin() returns iterator to the first element.\n* container_name.end() returns the iterator __after__ the last element.\n\n\n*****\n\nMany functions in STL deal with iterators.\n\n1. find(value), returns iterator to the first found element.\n2. erase(value_) or erase(start_iter, ending_iter) - does not make much sense for unordered map. Useful for list, vector.\n\n\n",
      "html": "<h1 id=\"3.-iterators---c%2B%2B-feature\">3. Iterators - C++ Feature <a class=\"heading-anchor-permalink\" href=\"#3.-iterators---c%2B%2B-feature\">#</a></h1>\n<p>Created Tuesday 18 February 2020</p>\n<ul>\n<li>Traversing containers requires container.</li>\n</ul>\n<p>They are useful for vector, list, map, set, unordered_map, unordered_set.</p>\n<p>Info about STL:</p>\n<ul>\n<li>\n<p>set is nothing but a map with no values. Hence duplicate keys don’t have a meaning. map has a pair. No difference as such.</p>\n</li>\n<li>\n<p>unordered_map works similar to unordered_set. O(1) ops. hash table.</p>\n</li>\n<li>\n<p>set works similar to map. Both are ordered and implemented using BST. O(logn) ops.</p>\n</li>\n<li>\n<p>Iterators are multi-purpose. They can be used for deleting as well as traversing.</p>\n</li>\n<li>\n<p>Also iterators have container dependent implementations.</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>The way to think of an iterator</li>\n<li>An iterator is like a pointer to the data element. i.e -&gt; and * should be used.</li>\n<li><strong>syntax:</strong> container_type : : iterator iterator_name;</li>\n<li>We advance forward using iterator_name+=1; i.e adding <strong>integers</strong> is allowed.</li>\n<li>container_name.begin() returns iterator to the first element.</li>\n<li>container_name.end() returns the iterator <strong>after</strong> the last element.</li>\n</ul>\n<hr>\n<p>Many functions in STL deal with iterators.</p>\n<ol>\n<li>find(value), returns iterator to the first found element.</li>\n<li>erase(value_) or erase(start_iter, ending_iter) - does not make much sense for unordered map. Useful for list, vector.</li>\n</ol>\n",
      "id": 250
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/0_index.html",
      "content": "# 3. Tries\nCreated Friday 06 March 2020\n\n[Codes](./3._Tries/Codes)\n[Exercises.md](./3._Tries/Quizzes&Exercises/Exercises.md)\n[CodingExercises.md](./3._Tries/Quizzes&Exercises/CodingExercises.md)\n[Assignments.md](./3._Tries/zAssignments/Assignments.md)\n\n",
      "html": "<h1 id=\"3.-tries\">3. Tries <a class=\"heading-anchor-permalink\" href=\"#3.-tries\">#</a></h1>\n<p>Created Friday 06 March 2020</p>\n<p><a href=\"./3._Tries/Codes\">Codes</a>\n<a href=\"./3._Tries/Quizzes&amp;Exercises/Exercises.html\">Exercises.md</a>\n<a href=\"./3._Tries/Quizzes&amp;Exercises/CodingExercises.html\">CodingExercises.md</a>\n<a href=\"./3._Tries/zAssignments/Assignments.html\">Assignments.md</a></p>\n",
      "id": 251
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/1._Introduction_to_Tries.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/1._Introduction_to_Tries.html",
      "content": "# 1. Introduction to Tries\n\nCreated Friday 06 March 2020\n\nProunced as tries(trys).\n\n- Motivation: Implementation of a dictionary.\n\nBasically for the hash function, we will take into account the length of the word length.\n\n- Hence complexity is O(word_length) average for all ops, to be precise.\n- Hence hash map is a very good thing for dictionary.\n- **Tries help in search suggestions.**\n\nBut, let us study Tries data structure for now.\n\n---\n\nInterface:\n\n1. addWord()\n2. Search()\n3. removeWord()\n\n![](/assets/1._Introduction_to_Tries-image-1.png)\n\n---\n\n- The bold letters are word terminals. i.e last letter of a word. Analogous to final states of a DFA. **This **removes the ambiguity and saves us space. For words which have same initial spelling of some length. **This can be reflected in the node structure as a boolean.**\n- Important observation: Maxium children possible are 26.\n\n---\n\n**Operations**:\n\n1. Insertion: O(word_length) - for all cases. Basic traversal of 26-ary tree. Keep making nodes, make the last letter as a final-node.\n2. Search: O(word_length) - for all cases. Traverse if possible, we should stop at a last-node.\n3. Removal: O(word_length) - for all cases. Basic traversal of 26-ary tree. Go to the last letter, than remove, if it is a leaf. Keep removing the parents, but only if they are non-parents and they are non-final. Both these cases mean that some other word can be formed from these nodes.\n\ne.g\n![](/assets/1._Introduction_to_Tries-image-2.png)\n",
      "html": "<h1 id=\"1.-introduction-to-tries\">1. Introduction to Tries <a class=\"heading-anchor-permalink\" href=\"#1.-introduction-to-tries\">#</a></h1>\n<p>Created Friday 06 March 2020</p>\n<p>Prounced as tries(trys).</p>\n<ul>\n<li>Motivation: Implementation of a dictionary.</li>\n</ul>\n<p>Basically for the hash function, we will take into account the length of the word length.</p>\n<ul>\n<li>Hence complexity is O(word_length) average for all ops, to be precise.</li>\n<li>Hence hash map is a very good thing for dictionary.</li>\n<li><strong>Tries help in search suggestions.</strong></li>\n</ul>\n<p>But, let us study Tries data structure for now.</p>\n<hr>\n<p>Interface:</p>\n<ol>\n<li>addWord()</li>\n<li>Search()</li>\n<li>removeWord()</li>\n</ol>\n<p><img src=\"/assets/1._Introduction_to_Tries-image-1.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li>The bold letters are word terminals. i.e last letter of a word. Analogous to final states of a DFA. **This **removes the ambiguity and saves us space. For words which have same initial spelling of some length. <strong>This can be reflected in the node structure as a boolean.</strong></li>\n<li>Important observation: Maxium children possible are 26.</li>\n</ul>\n<hr>\n<p><strong>Operations</strong>:</p>\n<ol>\n<li>Insertion: O(word_length) - for all cases. Basic traversal of 26-ary tree. Keep making nodes, make the last letter as a final-node.</li>\n<li>Search: O(word_length) - for all cases. Traverse if possible, we should stop at a last-node.</li>\n<li>Removal: O(word_length) - for all cases. Basic traversal of 26-ary tree. Go to the last letter, than remove, if it is a leaf. Keep removing the parents, but only if they are non-parents and they are non-final. Both these cases mean that some other word can be formed from these nodes.</li>\n</ol>\n<p>e.g\n<img src=\"/assets/1._Introduction_to_Tries-image-2.png\" alt=\"\"></p>\n",
      "id": 252
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/2._Coding_a_Trie/1._TrieNode_class.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/2._Coding_a_Trie/1._TrieNode_class.html",
      "content": "# 1. TrieNode class\nCreated Saturday 07 March 2020\n\nAdvantages of tries over hashMaps:\n\n* Both hashMaps and tries have nearly the same time complexity: Trie is somewhat better though.\n* We have to store each letter on it's own in a hashMap Space = sum of number of letters in each word. While in trie, words are decreased significantly. i.e all words having some common initial thing. This is **very difficult** for hashMaps, as hash works on the whole string and not on parts. Even if we somehow link the parts adding a word in between two words would be very difficult. We'd have to break the string. \n\n\n**Attributes**:\n\n* char data\n* children list - use simple array of trinode addresses. Of size 26.(assuming **lowercase English**) **Does this waste space** - no it does not, as we can access the letters in **1 step**. If we used a vector, we'd have to search the whole array, **26 steps** to be precise in the worst case.\n* bool isTerminal, true if yes, false if no.\n\n\n**Operations**:\n\n* search(string key)\n\nIf travel is possible for the whole length **and **that the last letter is a terminal, return true. Else false.\n\n* add(string word)\n\nTraverse the initial part of the word, as much as possible in the trie.\nThree cases are possible:\n\n1. The word exists completely and the last letter is a terminal, do nothing.\n2. The word exists completely but the last letter is not a terminal, set the node's isTerminal to true.\n3. The word exists partially(or not at all), create nodes for all the letters. For the last letter node, set isTerminal to true.\n\n\n* remove(string word)\n\nTwo cases are possible:\n\n1. The word does not exist. Do nothing.\n2. The word exists. Delete the last node if it is a non terminal and a non-parent. Keep doing this for the parents, if they also are a non-terminal and a non-parent of children. \n\n**Doubt**: How to delete parents?\nAnswer: \n\n1. Make an array of length the same as the word_length which needs to be deleted.\n2. Traverse the word in the trie and note the parents.\n3. Once done, iterate through the list right to left. Keep deleting if the node is a non-parent and a non-terminal. Once this condition becomes false. Stop. \n\n\n",
      "html": "<h1 id=\"1.-trienode-class\">1. TrieNode class <a class=\"heading-anchor-permalink\" href=\"#1.-trienode-class\">#</a></h1>\n<p>Created Saturday 07 March 2020</p>\n<p>Advantages of tries over hashMaps:</p>\n<ul>\n<li>Both hashMaps and tries have nearly the same time complexity: Trie is somewhat better though.</li>\n<li>We have to store each letter on it’s own in a hashMap Space = sum of number of letters in each word. While in trie, words are decreased significantly. i.e all words having some common initial thing. This is <strong>very difficult</strong> for hashMaps, as hash works on the whole string and not on parts. Even if we somehow link the parts adding a word in between two words would be very difficult. We’d have to break the string.</li>\n</ul>\n<p><strong>Attributes</strong>:</p>\n<ul>\n<li>char data</li>\n<li>children list - use simple array of trinode addresses. Of size 26.(assuming <strong>lowercase English</strong>) <strong>Does this waste space</strong> - no it does not, as we can access the letters in <strong>1 step</strong>. If we used a vector, we’d have to search the whole array, <strong>26 steps</strong> to be precise in the worst case.</li>\n<li>bool isTerminal, true if yes, false if no.</li>\n</ul>\n<p><strong>Operations</strong>:</p>\n<ul>\n<li>search(string key)</li>\n</ul>\n<p>If travel is possible for the whole length **and **that the last letter is a terminal, return true. Else false.</p>\n<ul>\n<li>add(string word)</li>\n</ul>\n<p>Traverse the initial part of the word, as much as possible in the trie.\nThree cases are possible:</p>\n<ol>\n<li>The word exists completely and the last letter is a terminal, do nothing.</li>\n<li>The word exists completely but the last letter is not a terminal, set the node’s isTerminal to true.</li>\n<li>The word exists partially(or not at all), create nodes for all the letters. For the last letter node, set isTerminal to true.</li>\n</ol>\n<ul>\n<li>remove(string word)</li>\n</ul>\n<p>Two cases are possible:</p>\n<ol>\n<li>The word does not exist. Do nothing.</li>\n<li>The word exists. Delete the last node if it is a non terminal and a non-parent. Keep doing this for the parents, if they also are a non-terminal and a non-parent of children.</li>\n</ol>\n<p><strong>Doubt</strong>: How to delete parents?\nAnswer:</p>\n<ol>\n<li>Make an array of length the same as the word_length which needs to be deleted.</li>\n<li>Traverse the word in the trie and note the parents.</li>\n<li>Once done, iterate through the list right to left. Keep deleting if the node is a non-parent and a non-terminal. Once this condition becomes false. Stop.</li>\n</ol>\n",
      "id": 253
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/2._Coding_a_Trie/2._Trie_basic_API.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/2._Coding_a_Trie/2._Trie_basic_API.html",
      "content": "# 2. Trie basic API\nCreated Saturday 07 March 2020\n\nIn the tree system, we have a start node(root) which stores the value of zero. \n**Why is this required?**\n\n1. We need some starting point. From which everything emanates.\n\n\n* As we are writing a tree, we will be using recursion. For this we will require a change in root. But user will give only the word.\n* All functions check the children corresponding to word[0], this is because we have used a origin node, which does the same for the first letter. Checking the root for word[0], therefore, is wrong.\n* We can also implement a trieSize() function which returns the number of nodes in the trie(except the root node).\n\n\n\n1. insertWord()\n\n__pseudocode__\nTraverse the trie for the word until possible. (This can be done in any part of the function)\nIf the word is present(i.e word.size() becomes 0), make the last letter node as terminal. \nElse\nmake newnodes with each of the remaining letters.\nMake the last letter as terminal.\n\n__Code__\nvoid insertWord(TrieNode* root, string word)\n{\nif(word.size()==0)\t//got the last letter\n{\nroot->isTerminal = true;\nreturn;\n}\nif(root->children.[word[0]-'a']==NULL)\nroot->children.[word[0]-'a'] = new TrieNode(word[0]);\t// if the word is absent\n// we have the word[0] in the system now\n// make the root->children as the next root and pass the remaining string.\ninsert(root->children.[word[0]-'a'], word.substr(1));\n}\n\n2. searchWord()\n\n__pseudocode__\nTraverse the trie for the word until possible. (This can be done in any part of the function)\nIf the last letter is reached, i.e word.size() becomes zero, return root->isTerminal.\n\t\nIf a letter is not found return false.\nElse return search for the remaining string.\n\t\n__Code__\nvoid insertWord(TrieNode* root, string word)\n{\nif(word.size()==0)\t//got the last letter\nreturn root->isTerminal = true;\n\nif(root->children.[word[0]-'a']==NULL)\nreturn false;\t// letter is absent\n// we have the word[0] in the system now\n// make the root->children as the next root and pass the remaining string.\nreturn search(root->children.[word[0]-'a'], word.substr(1));\n}\n\n3. removeWord() - note that a node can only partially delete itself(i.e isTreminal = false), otherwise the parent has a dangling pointer.\n\n__pseudocode__\nTraverse the trie for the  word until you can.\nIf we reach the last letter:\nroot->isTerminal = false; // as we enter here only if the root->data was last letter\n\t\t\nif(root->children[word[0]-'a']==NULL)\nabort; // letter is absent;\n// remove the remaining string\nremoveWord(root->children[word[0]-'a'], word.substr(1));\n\t\n// Marked the next node as non \n// If the next node has no other children, We can delete it\n\n1. If the next node has no other children, We can delete it. If we do so.\n2. Else do nothing.\n\n\t\n// This node can be deleted partially.\nroot->isTerminal = false;\t// we do it in the base case too, because \"\"-'a' is not a valid integer.\n\t\n__Code__\nIf we reach word.size()==0\nroot->isTerminal = false; // this word is not \"present\" now\n\nif(root->children[word[0]-'a']==NULL)\nreturn; // letter not present\n\t\t\n// letter is present, remove the letter remaining part of the string first\nremove(root->children[0]-'a'], word.substr(1));\n\t\n// if any other node is present with the root\nint i = 0;\nwhile(root->children[word[0]-'a']->children[i]==NULL)\ni++;\nif(i==26)\ndelete root; // delete itself\nroot->children[word[0]-'a']=false;\n\t\n// end of function\n\t\n\n",
      "html": "<h1 id=\"2.-trie-basic-api\">2. Trie basic API <a class=\"heading-anchor-permalink\" href=\"#2.-trie-basic-api\">#</a></h1>\n<p>Created Saturday 07 March 2020</p>\n<p>In the tree system, we have a start node(root) which stores the value of zero.\n<strong>Why is this required?</strong></p>\n<ol>\n<li>We need some starting point. From which everything emanates.</li>\n</ol>\n<ul>\n<li>As we are writing a tree, we will be using recursion. For this we will require a change in root. But user will give only the word.</li>\n<li>All functions check the children corresponding to word[0], this is because we have used a origin node, which does the same for the first letter. Checking the root for word[0], therefore, is wrong.</li>\n<li>We can also implement a trieSize() function which returns the number of nodes in the trie(except the root node).</li>\n</ul>\n<ol>\n<li>insertWord()</li>\n</ol>\n<p><strong>pseudocode</strong>\nTraverse the trie for the word until possible. (This can be done in any part of the function)\nIf the word is present(i.e word.size() becomes 0), make the last letter node as terminal.\nElse\nmake newnodes with each of the remaining letters.\nMake the last letter as terminal.</p>\n<p><strong>Code</strong>\nvoid insertWord(TrieNode* root, string word)\n{\nif(word.size()==0)\t//got the last letter\n{\nroot-&gt;isTerminal = true;\nreturn;\n}\nif(root-&gt;children.[word[0]-‘a’]==NULL)\nroot-&gt;children.[word[0]-‘a’] = new TrieNode(word[0]);\t// if the word is absent\n// we have the word[0] in the system now\n// make the root-&gt;children as the next root and pass the remaining string.\ninsert(root-&gt;children.[word[0]-‘a’], word.substr(1));\n}</p>\n<ol start=\"2\">\n<li>searchWord()</li>\n</ol>\n<p><strong>pseudocode</strong>\nTraverse the trie for the word until possible. (This can be done in any part of the function)\nIf the last letter is reached, i.e word.size() becomes zero, return root-&gt;isTerminal.</p>\n<p>If a letter is not found return false.\nElse return search for the remaining string.</p>\n<p><strong>Code</strong>\nvoid insertWord(TrieNode* root, string word)\n{\nif(word.size()==0)\t//got the last letter\nreturn root-&gt;isTerminal = true;</p>\n<p>if(root-&gt;children.[word[0]-‘a’]==NULL)\nreturn false;\t// letter is absent\n// we have the word[0] in the system now\n// make the root-&gt;children as the next root and pass the remaining string.\nreturn search(root-&gt;children.[word[0]-‘a’], word.substr(1));\n}</p>\n<ol start=\"3\">\n<li>removeWord() - note that a node can only partially delete itself(i.e isTreminal = false), otherwise the parent has a dangling pointer.</li>\n</ol>\n<p><strong>pseudocode</strong>\nTraverse the trie for the  word until you can.\nIf we reach the last letter:\nroot-&gt;isTerminal = false; // as we enter here only if the root-&gt;data was last letter</p>\n<p>if(root-&gt;children[word[0]-‘a’]==NULL)\nabort; // letter is absent;\n// remove the remaining string\nremoveWord(root-&gt;children[word[0]-‘a’], word.substr(1));</p>\n<p>// Marked the next node as non\n// If the next node has no other children, We can delete it</p>\n<ol>\n<li>If the next node has no other children, We can delete it. If we do so.</li>\n<li>Else do nothing.</li>\n</ol>\n<p>// This node can be deleted partially.\nroot-&gt;isTerminal = false;\t// we do it in the base case too, because “”-‘a’ is not a valid integer.</p>\n<p><strong>Code</strong>\nIf we reach word.size()==0\nroot-&gt;isTerminal = false; // this word is not “present” now</p>\n<p>if(root-&gt;children[word[0]-‘a’]==NULL)\nreturn; // letter not present</p>\n<p>// letter is present, remove the letter remaining part of the string first\nremove(root-&gt;children[0]-‘a’], word.substr(1));</p>\n<p>// if any other node is present with the root\nint i = 0;\nwhile(root-&gt;children[word[0]-‘a’]-&gt;children[i]==NULL)\ni++;\nif(i==26)\ndelete root; // delete itself\nroot-&gt;children[word[0]-‘a’]=false;</p>\n<p>// end of function</p>\n",
      "id": 254
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/3._Types_of_Tries/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/3._Types_of_Tries/0_index.html",
      "content": "# 3. Types of Tries\n\nCreated Sunday 08 March 2020\n\n- Why did we chose tries over hashmaps?\n\n1. Due to less space usage. Words with some same initial length do not use space.\n2. Somehwat better time complexity.\n3. **Tries help with search suggestions as we type ~ O(words with same initial length). This is impossible with hashmaps - O(size of dictionary).**\n\n---\n\nTypes of tries:\n\n1. Compressed tries - More space optimization.\n\nHere we club (consecutive strings which have only one children) together. Clubbing is **allowed **both at the ends and in-between as well.\n![](/assets/3._Types_of_Tries-image-1.png)\nThe challenges here are:\n\n1. During insertion we may need to break a clubbed string.\n2. During deletion, we may need to break a clubbed string.\n\n**We do this to minimize space complexity.**\n\n- Search is the same here.\n\n---\n\n2. Suffix tries:\n\nFor pattern matching this is useful.\nDifferences from normal trie:\n\n1. Words which are present but the last letter is not terminal. This can be resolved by removing the isTerminal from the trie system. No markings.\n2. If some pattern is present but it cannot be reached from the root. e.g here bend is present but the usual search for 'end' returns false. i.e **suffixes** are not searchable in normal trie. **But**, this should be true in pattern matching.\n\n![](/assets/3._Types_of_Tries-image-2.png)\nThis is resolved by inserting all possible(though not redundantly) suffixes for the string in the trie. For inserting 'banana', it looks like this, note that not all suffixes were taken.\n![](/assets/3._Types_of_Tries-image-3.png)\nTo avoid overuse of space we can do clubbing here to minimize space requirements.\n**A normal trie just won't do. i.e we'd have to traverse nearly all possible paths, very slow.**\n",
      "html": "<h1 id=\"3.-types-of-tries\">3. Types of Tries <a class=\"heading-anchor-permalink\" href=\"#3.-types-of-tries\">#</a></h1>\n<p>Created Sunday 08 March 2020</p>\n<ul>\n<li>Why did we chose tries over hashmaps?</li>\n</ul>\n<ol>\n<li>Due to less space usage. Words with some same initial length do not use space.</li>\n<li>Somehwat better time complexity.</li>\n<li><strong>Tries help with search suggestions as we type ~ O(words with same initial length). This is impossible with hashmaps - O(size of dictionary).</strong></li>\n</ol>\n<hr>\n<p>Types of tries:</p>\n<ol>\n<li>Compressed tries - More space optimization.</li>\n</ol>\n<p>Here we club (consecutive strings which have only one children) together. Clubbing is **allowed **both at the ends and in-between as well.\n<img src=\"/assets/3._Types_of_Tries-image-1.png\" alt=\"\">\nThe challenges here are:</p>\n<ol>\n<li>During insertion we may need to break a clubbed string.</li>\n<li>During deletion, we may need to break a clubbed string.</li>\n</ol>\n<p><strong>We do this to minimize space complexity.</strong></p>\n<ul>\n<li>Search is the same here.</li>\n</ul>\n<hr>\n<ol start=\"2\">\n<li>Suffix tries:</li>\n</ol>\n<p>For pattern matching this is useful.\nDifferences from normal trie:</p>\n<ol>\n<li>Words which are present but the last letter is not terminal. This can be resolved by removing the isTerminal from the trie system. No markings.</li>\n<li>If some pattern is present but it cannot be reached from the root. e.g here bend is present but the usual search for ‘end’ returns false. i.e <strong>suffixes</strong> are not searchable in normal trie. <strong>But</strong>, this should be true in pattern matching.</li>\n</ol>\n<p><img src=\"/assets/3._Types_of_Tries-image-2.png\" alt=\"\">\nThis is resolved by inserting all possible(though not redundantly) suffixes for the string in the trie. For inserting ‘banana’, it looks like this, note that not all suffixes were taken.\n<img src=\"/assets/3._Types_of_Tries-image-3.png\" alt=\"\">\nTo avoid overuse of space we can do clubbing here to minimize space requirements.\n<strong>A normal trie just won’t do. i.e we’d have to traverse nearly all possible paths, very slow.</strong></p>\n",
      "id": 255
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/4._Huffman_Encoding.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/4._Huffman_Encoding.html",
      "content": "# 4. Huffman Encoding\n\nCreated Sunday 08 March 2020\n\nThis is a technique for text compression. **Remember that this compression(text) has to be lossless.**\n\n- Huffman encoding tries to reduce the space requirement for the most ocurring characters. If some rare character(s) need to space greater than 1 bytes, it will be okay, since they are so less.\n- Basically we are using different length of bits for each letter. i.e not 8 bits for each letter.\n- Note that prefixes for a code cannot be the code for some other character. This happens because, in case of codes with same prefixes, when we reach a letter, the next node **is** a number, **not** a letter and vice-versa. i.e all parents are numbers(sum of frequencies of children).\n\n![](/assets/4._Huffman_Encoding-image-1.png)\nAlgorithm(Compression)\n\n1. Count the frequencies and update in a 26 or 256 sized array\n2. We need two minimum nodes at each iteration for forming the tree, so use a Min Priority Queue for this. Just pop 2 and push the sum. Keep doing until no letter is left.\n3. Make the tree: Make a start node.\n4. Save the codes in a hashmap. key is the letter and value is teh binary code. We use this to avoid\n5. Traverse the message and generate the compressed text.\n\nSend the decomp tree and the compressed text;\n\nAlgorithm(Decompression)\n\n1. Make the hashmap for the tree. Keys are compressed texts values are letters.\n2. Traverse the compressed text and generate the original text.\n\nThis can be done as a project in school.\n",
      "html": "<h1 id=\"4.-huffman-encoding\">4. Huffman Encoding <a class=\"heading-anchor-permalink\" href=\"#4.-huffman-encoding\">#</a></h1>\n<p>Created Sunday 08 March 2020</p>\n<p>This is a technique for text compression. <strong>Remember that this compression(text) has to be lossless.</strong></p>\n<ul>\n<li>Huffman encoding tries to reduce the space requirement for the most ocurring characters. If some rare character(s) need to space greater than 1 bytes, it will be okay, since they are so less.</li>\n<li>Basically we are using different length of bits for each letter. i.e not 8 bits for each letter.</li>\n<li>Note that prefixes for a code cannot be the code for some other character. This happens because, in case of codes with same prefixes, when we reach a letter, the next node <strong>is</strong> a number, <strong>not</strong> a letter and vice-versa. i.e all parents are numbers(sum of frequencies of children).</li>\n</ul>\n<p><img src=\"/assets/4._Huffman_Encoding-image-1.png\" alt=\"\">\nAlgorithm(Compression)</p>\n<ol>\n<li>Count the frequencies and update in a 26 or 256 sized array</li>\n<li>We need two minimum nodes at each iteration for forming the tree, so use a Min Priority Queue for this. Just pop 2 and push the sum. Keep doing until no letter is left.</li>\n<li>Make the tree: Make a start node.</li>\n<li>Save the codes in a hashmap. key is the letter and value is teh binary code. We use this to avoid</li>\n<li>Traverse the message and generate the compressed text.</li>\n</ol>\n<p>Send the decomp tree and the compressed text;</p>\n<p>Algorithm(Decompression)</p>\n<ol>\n<li>Make the hashmap for the tree. Keys are compressed texts values are letters.</li>\n<li>Traverse the compressed text and generate the original text.</li>\n</ol>\n<p>This can be done as a project in school.</p>\n",
      "id": 256
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/1._Intro_to_graphs.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/1._Intro_to_graphs.html",
      "content": "# 1. Intro to graphs\n\nCreated Monday 30 March 2020\n\nGraph is a data structure that is used to solve a lot of real world problems like:\n\n1. Social media network.\n2. Places connected via roads in a country.\n\n#### Defintion of a graph\n\nA set of vertices and a set of edges(connecting them - does not mean all vertex have to be connected).\n\n## Tree vs Graph vs DAG\n\n#### Graph\n\n**Graphs** can:\n\n1. Have cycles.\n2. Can have disjoint sets of graphs. i.e some vertex may be unreachable from all other vertex. e.g 2 friends who are not friends with another group. The graph is actually a set of two disjoint graphs.\n\n![](/assets/1._Intro_to_graphs-image-1.png)\n\n#### Tree\n\n**A tree** is a graph with 3 restrictions. A graph is a tree if it is:\n\n1. Acyclic\n2. Connected\n3. Undirected\n\nNote: Assigning root of a tree is customary.\n![](/assets/1._Intro_to_graphs-image-2.png)\n\n#### DAG(Directed Acyclic Graph)\n\n**DAG**(directed acyclic graph) is a directed graph with no directed cycles.\n\n- A DAG's underlying undirected graph may be a tree, but it's not necessary.\n- A directed graph is a DAG if and only if it can be topologically ordered - i.e. for every edge from `p` and `q`, `p` must occur before `q` in the ordered seqeuence.\n",
      "html": "<h1 id=\"1.-intro-to-graphs\">1. Intro to graphs <a class=\"heading-anchor-permalink\" href=\"#1.-intro-to-graphs\">#</a></h1>\n<p>Created Monday 30 March 2020</p>\n<p>Graph is a data structure that is used to solve a lot of real world problems like:</p>\n<ol>\n<li>Social media network.</li>\n<li>Places connected via roads in a country.</li>\n</ol>\n<h4 id=\"defintion-of-a-graph\">Defintion of a graph <a class=\"heading-anchor-permalink\" href=\"#defintion-of-a-graph\">#</a></h4>\n<p>A set of vertices and a set of edges(connecting them - does not mean all vertex have to be connected).</p>\n<h2 id=\"tree-vs-graph-vs-dag\">Tree vs Graph vs DAG <a class=\"heading-anchor-permalink\" href=\"#tree-vs-graph-vs-dag\">#</a></h2>\n<h4 id=\"graph\">Graph <a class=\"heading-anchor-permalink\" href=\"#graph\">#</a></h4>\n<p><strong>Graphs</strong> can:</p>\n<ol>\n<li>Have cycles.</li>\n<li>Can have disjoint sets of graphs. i.e some vertex may be unreachable from all other vertex. e.g 2 friends who are not friends with another group. The graph is actually a set of two disjoint graphs.</li>\n</ol>\n<p><img src=\"/assets/1._Intro_to_graphs-image-1.png\" alt=\"\"></p>\n<h4 id=\"tree\">Tree <a class=\"heading-anchor-permalink\" href=\"#tree\">#</a></h4>\n<p><strong>A tree</strong> is a graph with 3 restrictions. A graph is a tree if it is:</p>\n<ol>\n<li>Acyclic</li>\n<li>Connected</li>\n<li>Undirected</li>\n</ol>\n<p>Note: Assigning root of a tree is customary.\n<img src=\"/assets/1._Intro_to_graphs-image-2.png\" alt=\"\"></p>\n<h4 id=\"dag(directed-acyclic-graph)\">DAG(Directed Acyclic Graph) <a class=\"heading-anchor-permalink\" href=\"#dag(directed-acyclic-graph)\">#</a></h4>\n<p><strong>DAG</strong>(directed acyclic graph) is a directed graph with no directed cycles.</p>\n<ul>\n<li>A DAG’s underlying undirected graph may be a tree, but it’s not necessary.</li>\n<li>A directed graph is a DAG if and only if it can be topologically ordered - i.e. for every edge from <code>p</code> and <code>q</code>, <code>p</code> must occur before <code>q</code> in the ordered seqeuence.</li>\n</ul>\n",
      "id": 257
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/2._Graph_Terminology.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/2._Graph_Terminology.html",
      "content": "# 2. Graph Terminology\n\nCreated Monday 30 March 2020\n\n1. Vertices - nodes are called vertices.\n2. Edges - a line that connects two vertices.\n3. Adjacent vertices - two vertices connected by a edge.\n4. Degree - this is defined for a vertex = number of edges connected to a vertex(incoming is taken as +ve for outgoing, if graph is directed)\n5. Path - An ordered set of edges from a vertex A to B.\n6. Connected graph - If every vertex is reachable from every other vertex, then this graph is called a connected graph. Simply said, there are no disjoint groups.\n7. Connected components - The groups of connected graphs in a given graph. For a connected graph, number of connected components is 1. For a non connected graph it is greater than one.\n\n![](/assets/2._Graph_Terminology-image-1.png)\n\n8. Cycle - A path which starts from a vertex and comes back to the same vertex. A cycles must have at least 2 distinct edges in its path.\n9. Tree - a connected graph with no cycles.\n\n---\n\n**Range of edges, vertices and degree.**\nGiven a graph V, E.\n\n- minimum number of edges = 0. All vertices are seperate. A fully disconnected graph.\n- minimum number of edges in a connected graph = all are connected but uses the least edges to connect = no cycles at all = A **tree**(except the root, number of edge vertex pairs are n-1) = n-1\n- maximum edges = **complete graph** = each edge is connected to every other edge = all posssible connections among all vertices = ^n^C~2~ = n(n-1)/2\n",
      "html": "<h1 id=\"2.-graph-terminology\">2. Graph Terminology <a class=\"heading-anchor-permalink\" href=\"#2.-graph-terminology\">#</a></h1>\n<p>Created Monday 30 March 2020</p>\n<ol>\n<li>Vertices - nodes are called vertices.</li>\n<li>Edges - a line that connects two vertices.</li>\n<li>Adjacent vertices - two vertices connected by a edge.</li>\n<li>Degree - this is defined for a vertex = number of edges connected to a vertex(incoming is taken as +ve for outgoing, if graph is directed)</li>\n<li>Path - An ordered set of edges from a vertex A to B.</li>\n<li>Connected graph - If every vertex is reachable from every other vertex, then this graph is called a connected graph. Simply said, there are no disjoint groups.</li>\n<li>Connected components - The groups of connected graphs in a given graph. For a connected graph, number of connected components is 1. For a non connected graph it is greater than one.</li>\n</ol>\n<p><img src=\"/assets/2._Graph_Terminology-image-1.png\" alt=\"\"></p>\n<ol start=\"8\">\n<li>Cycle - A path which starts from a vertex and comes back to the same vertex. A cycles must have at least 2 distinct edges in its path.</li>\n<li>Tree - a connected graph with no cycles.</li>\n</ol>\n<hr>\n<p><strong>Range of edges, vertices and degree.</strong>\nGiven a graph V, E.</p>\n<ul>\n<li>minimum number of edges = 0. All vertices are seperate. A fully disconnected graph.</li>\n<li>minimum number of edges in a connected graph = all are connected but uses the least edges to connect = no cycles at all = A <strong>tree</strong>(except the root, number of edge vertex pairs are n-1) = n-1</li>\n<li>maximum edges = <strong>complete graph</strong> = each edge is connected to every other edge = all posssible connections among all vertices = ^n^C~2~ = n(n-1)/2</li>\n</ul>\n",
      "id": 258
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/3._Graph_varieties.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/3._Graph_varieties.html",
      "content": "# 3. Graph varieties\nCreated Wednesday 01 April 2020\n\n\n1. For directed graphs - We make a change only to edges[i][j] if i and j are neighbours(not on edges[j][i]).\n2. For weighted graphs - Store the weight from a to b in edge[a][b].\n3. For directed weighted - store weight in one direction. (i, j) only and not (j, i).\n4. For self loop multipgraph and directed mixed. Store the loops with edges[i][i] as an integer. Multiple edges can also be stored, just store the number of edges.\n5. For weighted multigraph, store the edge as a vector<int> of weights. Simple.\n\n\n\n* All types of graphs and reprentations have been dealt with. **Easy.**\n\n\n",
      "html": "<h1 id=\"3.-graph-varieties\">3. Graph varieties <a class=\"heading-anchor-permalink\" href=\"#3.-graph-varieties\">#</a></h1>\n<p>Created Wednesday 01 April 2020</p>\n<ol>\n<li>For directed graphs - We make a change only to edges[i][j] if i and j are neighbours(not on edges[j][i]).</li>\n<li>For weighted graphs - Store the weight from a to b in edge[a][b].</li>\n<li>For directed weighted - store weight in one direction. (i, j) only and not (j, i).</li>\n<li>For self loop multipgraph and directed mixed. Store the loops with edges[i][i] as an integer. Multiple edges can also be stored, just store the number of edges.</li>\n<li>For weighted multigraph, store the edge as a vector<int> of weights. Simple.</li>\n</ol>\n<ul>\n<li>All types of graphs and reprentations have been dealt with. <strong>Easy.</strong></li>\n</ul>\n",
      "id": 259
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/4._Coding_a_Graph.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/4._Coding_a_Graph.html",
      "content": "# 4. Coding a Graph\nCreated Monday 30 March 2020\n\n\n* Note: Consider |V| << |E|. Vertices are less.|E| ~ |V|^2^\n\nThere are 3 types of implementations:\n\n1. **Edge List**\n\nWe can save all the vertices in a vector. Edges are stored as 2-tuples of neighbours(vertices).\n\n* V = {v1, v2, v3 ...}\n* E = {(v1,v2), (v2, v3),...}\n* This is very slow, even checking if A and B are neighbours, requires a linear search of the edge list i.e ~nC2 searches = O(n^2^) = O(E)\n* Space is O(E)\n* __Definitely not good.__\n\n\n2. **Adjacency List** \n\nStore a list of vertex. Also, store a table containing vertiex-{neighbours of vertex}. Neighbours are a vector of the neigbhouring vertices. This is very nice.\n\n* V = {v1, v2, v3 ...}\n* E = An array of neighbour lists for each vertex.\n* Checking A is a neigbour of B is O(V) for a children array, or we can use a hashmap O(1) whp.\n* It is space efficient - takes into account sparsity of the graph.\n* Really fast.\n* But difficult to implement.\n\n\n3. **Adjacency Matrix**\n\nWe don't need to store the vertices seperately. Both V, E are stored in the same structure.\n\n* We'll make a square matrix(i.e 2D array) of size |V|*|V| with each element storing true or false or number of edges(for multigraphs), corresponding to the value of isNeighbour(A,B).\n* The fastest - O(1). Just access G[A][B] for checking if A and B are neighbours.\n* The most space **in**efficient. Any graph occupies the same space as a complete graph.\n* Bad for sparse graphs. i.e where edges ~ V. Very few trues and many falses.\n\n\nVerdict: Adjacency matrix is faster than Adjacency list. We use it if we have no space constraint. We use a list when space is scarce. Generally matrices are used for competitions, where speed matters.\n\n**We will be using adjacency matrix as it is the most easy to implement.**\n\n*****\n\nNote: The representations discussed are applicable for all types of graphs - directed, undirected, multi, self-loop etc.\n\n",
      "html": "<h1 id=\"4.-coding-a-graph\">4. Coding a Graph <a class=\"heading-anchor-permalink\" href=\"#4.-coding-a-graph\">#</a></h1>\n<p>Created Monday 30 March 2020</p>\n<ul>\n<li>Note: Consider |V| &lt;&lt; |E|. Vertices are less.|E| ~ |V|^2^</li>\n</ul>\n<p>There are 3 types of implementations:</p>\n<ol>\n<li><strong>Edge List</strong></li>\n</ol>\n<p>We can save all the vertices in a vector. Edges are stored as 2-tuples of neighbours(vertices).</p>\n<ul>\n<li>V = {v1, v2, v3 …}</li>\n<li>E = {(v1,v2), (v2, v3),…}</li>\n<li>This is very slow, even checking if A and B are neighbours, requires a linear search of the edge list i.e ~nC2 searches = O(n^2^) = O(E)</li>\n<li>Space is O(E)</li>\n<li><strong>Definitely not good.</strong></li>\n</ul>\n<ol start=\"2\">\n<li><strong>Adjacency List</strong></li>\n</ol>\n<p>Store a list of vertex. Also, store a table containing vertiex-{neighbours of vertex}. Neighbours are a vector of the neigbhouring vertices. This is very nice.</p>\n<ul>\n<li>V = {v1, v2, v3 …}</li>\n<li>E = An array of neighbour lists for each vertex.</li>\n<li>Checking A is a neigbour of B is O(V) for a children array, or we can use a hashmap O(1) whp.</li>\n<li>It is space efficient - takes into account sparsity of the graph.</li>\n<li>Really fast.</li>\n<li>But difficult to implement.</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Adjacency Matrix</strong></li>\n</ol>\n<p>We don’t need to store the vertices seperately. Both V, E are stored in the same structure.</p>\n<ul>\n<li>We’ll make a square matrix(i.e 2D array) of size |V|*|V| with each element storing true or false or number of edges(for multigraphs), corresponding to the value of isNeighbour(A,B).</li>\n<li>The fastest - O(1). Just access G[A][B] for checking if A and B are neighbours.</li>\n<li>The most space <strong>in</strong>efficient. Any graph occupies the same space as a complete graph.</li>\n<li>Bad for sparse graphs. i.e where edges ~ V. Very few trues and many falses.</li>\n</ul>\n<p>Verdict: Adjacency matrix is faster than Adjacency list. We use it if we have no space constraint. We use a list when space is scarce. Generally matrices are used for competitions, where speed matters.</p>\n<p><strong>We will be using adjacency matrix as it is the most easy to implement.</strong></p>\n<hr>\n<p>Note: The representations discussed are applicable for all types of graphs - directed, undirected, multi, self-loop etc.</p>\n",
      "id": 260
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/5._Basic_Traversals/1._DFS.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/5._Basic_Traversals/1._DFS.html",
      "content": "# 1. DFS\nCreated Monday 30 March 2020\n\n**Algorithm:**\nWe implement the graph as an adjacency matrix:\n\n1. We ask the user number of vertices. We store this as n. Now we assume that the vertices are named from 0 to n-1.\n2. We ask for how many edges. The user inputs the edge pairs. We mark (a,b) and (b,a) as true for all inputs 'a' and 'b'.\n3. We go through all vertices, calling DFS from it if they are absent from visited, at the same time checking if visited.size()<V. This ensures that **disconnected components are also taken into account.**\n\n\n\n* Internal stack is used, i.e recursion.\n* **Our graph is a simple graph - i.e no self loops, no weights, single undirected edges only.**\n\n\n*****\n\n**Insights/Takeaways:**\n\n* We need a visited array, and it is very important. If not used we'll end up in an infinite loop, even if the graph has a single cycle.\n* DFS internally uses stack. And stacks may work using an array, but it will still require us to pop/replace an element. And as we don't scan all the neighbours it may happen that we pop a neighbour and again take it in some other run. **So visited array/map is needed**.\n* Note that we go to the depths until we reach a node where all neighbours have been visited. Hence the name **Depth First Search**.\n\n\n*****\n\n**Efficiency**\nT.C = [O(V+E)](https://stackoverflow.com/a/11468717/11392807)** if we use hashmap as visited array.**\nS.C = O(V)\n\n\n*****\n\n**Implementation tips**\n\n* Use dynamic DSs.\n\n[DFS code](./Codes/DFS.cpp)\n\n*****\n\n**Applications**\n\n* Most problems are just variations of DFS and BFS.\n\n\n",
      "html": "<h1 id=\"1.-dfs\">1. DFS <a class=\"heading-anchor-permalink\" href=\"#1.-dfs\">#</a></h1>\n<p>Created Monday 30 March 2020</p>\n<p><strong>Algorithm:</strong>\nWe implement the graph as an adjacency matrix:</p>\n<ol>\n<li>We ask the user number of vertices. We store this as n. Now we assume that the vertices are named from 0 to n-1.</li>\n<li>We ask for how many edges. The user inputs the edge pairs. We mark (a,b) and (b,a) as true for all inputs ‘a’ and ‘b’.</li>\n<li>We go through all vertices, calling DFS from it if they are absent from visited, at the same time checking if visited.size()&lt;V. This ensures that <strong>disconnected components are also taken into account.</strong></li>\n</ol>\n<ul>\n<li>Internal stack is used, i.e recursion.</li>\n<li><strong>Our graph is a simple graph - i.e no self loops, no weights, single undirected edges only.</strong></li>\n</ul>\n<hr>\n<p><strong>Insights/Takeaways:</strong></p>\n<ul>\n<li>We need a visited array, and it is very important. If not used we’ll end up in an infinite loop, even if the graph has a single cycle.</li>\n<li>DFS internally uses stack. And stacks may work using an array, but it will still require us to pop/replace an element. And as we don’t scan all the neighbours it may happen that we pop a neighbour and again take it in some other run. <strong>So visited array/map is needed</strong>.</li>\n<li>Note that we go to the depths until we reach a node where all neighbours have been visited. Hence the name <strong>Depth First Search</strong>.</li>\n</ul>\n<hr>\n<p><strong>Efficiency</strong>\nT.C = <a href=\"https://stackoverflow.com/a/11468717/11392807\">O(V+E)</a>** if we use hashmap as visited array.**\nS.C = O(V)</p>\n<hr>\n<p><strong>Implementation tips</strong></p>\n<ul>\n<li>Use dynamic DSs.</li>\n</ul>\n<p><a href=\"./Codes/DFS.cpp\">DFS code</a></p>\n<hr>\n<p><strong>Applications</strong></p>\n<ul>\n<li>Most problems are just variations of DFS and BFS.</li>\n</ul>\n",
      "id": 261
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/5._Basic_Traversals/2._BFS.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/5._Basic_Traversals/2._BFS.html",
      "content": "# 2. BFS\nCreated Tuesday 31 March 2020\n\nThis is also a traversal/search technique.\n\nIn constrast with DFS, here we first print all the neighbours of the current node. Then we explore each one of them.\nWe need a queue here.\n\n1. We'll use a queue for this. We'll put the neighbours inside. When done, we'll pop the current node.\n2. But when we see all neigbours after coming from the predeccessor, we can again put(erraneously) it in the queue. To avoid this, we use a visited array.\n3. We go through all vertices, calling BFS from it if they are absent from visited, at the same time checking if visited.size()<V. This ensures that **disconnected components are also taken into account.**\n\n\n\n*****\n\n\n* Note that if we don't pop the queue but traverse it like an array. We don't require a visited array. We can scan the whole queue-array if we the node has already been visited. **The queue is our **__to-be explored__ list. Time and space complexity is the same as storing a **visited array**, it's actually better to use a visited array/map , reallocs are lesser. \n* Note that a node may be on the right side but still be a neighbour of the current node. *Repeat 1.*\n* Also we cannot neglect the left side because it contains the predecessors. So **the whole queue-array is important and needs to be scanned. **Here space requirement is O(V). and Time requirement is O(V^2^). *Repeat 2.*\n* In a nutshell, using an queue-array or a seperated visited are equivalent. We use a hashmap for added performance and easier code. *Repeat 3.*\n* If we use a hashmap for visited, our time complexity will be O(V+E).\n\n\n*****\n\n**Implementation tip**\nIn loops check if visited.size()==V, stop if it is.\n\n* Use dynamic DSs.\n* TC: [O(V+E)](https://stackoverflow.com/a/11468717/11392807) - we visit the neighbours of all vertices.\n* SC: O(V) - We store vertices, |V|-1 for the worst case scenario.\n\n[BFS.cpp](./Codes/BFS.cpp)\n\n*****\n\n**Applications**\n\n* Most problems are just variations of DFS and BFS. These are the first principles for Graphs. \n\n\n",
      "html": "<h1 id=\"2.-bfs\">2. BFS <a class=\"heading-anchor-permalink\" href=\"#2.-bfs\">#</a></h1>\n<p>Created Tuesday 31 March 2020</p>\n<p>This is also a traversal/search technique.</p>\n<p>In constrast with DFS, here we first print all the neighbours of the current node. Then we explore each one of them.\nWe need a queue here.</p>\n<ol>\n<li>We’ll use a queue for this. We’ll put the neighbours inside. When done, we’ll pop the current node.</li>\n<li>But when we see all neigbours after coming from the predeccessor, we can again put(erraneously) it in the queue. To avoid this, we use a visited array.</li>\n<li>We go through all vertices, calling BFS from it if they are absent from visited, at the same time checking if visited.size()&lt;V. This ensures that <strong>disconnected components are also taken into account.</strong></li>\n</ol>\n<hr>\n<ul>\n<li>Note that if we don’t pop the queue but traverse it like an array. We don’t require a visited array. We can scan the whole queue-array if we the node has already been visited. **The queue is our **<strong>to-be explored</strong> list. Time and space complexity is the same as storing a <strong>visited array</strong>, it’s actually better to use a visited array/map , reallocs are lesser.</li>\n<li>Note that a node may be on the right side but still be a neighbour of the current node. <em>Repeat 1.</em></li>\n<li>Also we cannot neglect the left side because it contains the predecessors. So **the whole queue-array is important and needs to be scanned. **Here space requirement is O(V). and Time requirement is O(V^2^). <em>Repeat 2.</em></li>\n<li>In a nutshell, using an queue-array or a seperated visited are equivalent. We use a hashmap for added performance and easier code. <em>Repeat 3.</em></li>\n<li>If we use a hashmap for visited, our time complexity will be O(V+E).</li>\n</ul>\n<hr>\n<p><strong>Implementation tip</strong>\nIn loops check if visited.size()==V, stop if it is.</p>\n<ul>\n<li>Use dynamic DSs.</li>\n<li>TC: <a href=\"https://stackoverflow.com/a/11468717/11392807\">O(V+E)</a> - we visit the neighbours of all vertices.</li>\n<li>SC: O(V) - We store vertices, |V|-1 for the worst case scenario.</li>\n</ul>\n<p><a href=\"./Codes/BFS.cpp\">BFS.cpp</a></p>\n<hr>\n<p><strong>Applications</strong></p>\n<ul>\n<li>Most problems are just variations of DFS and BFS. These are the first principles for Graphs.</li>\n</ul>\n",
      "id": 262
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/6._Basic_path_operations/1._Has_Path.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/6._Basic_path_operations/1._Has_Path.html",
      "content": "# 1. Has Path\nCreated Tuesday 31 March 2020\n\nGiven node A and node B. Check if A and B have a path between them.\n\n* Run BFS/DFS starting from A and return true if B is found. If not return false.\n* No case of connectedness here., coz the answer is false if A and B are in disjoint groups, automatically.\n\n\n",
      "html": "<h1 id=\"1.-has-path\">1. Has Path <a class=\"heading-anchor-permalink\" href=\"#1.-has-path\">#</a></h1>\n<p>Created Tuesday 31 March 2020</p>\n<p>Given node A and node B. Check if A and B have a path between them.</p>\n<ul>\n<li>Run BFS/DFS starting from A and return true if B is found. If not return false.</li>\n<li>No case of connectedness here., coz the answer is false if A and B are in disjoint groups, automatically.</li>\n</ul>\n",
      "id": 263
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/6._Basic_path_operations/2._Get_Path.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/6._Basic_path_operations/2._Get_Path.html",
      "content": "# 2. Get Path\nCreated Tuesday 31 March 2020\n\nGiven A and B nodes.\nReturn the path from A to B, if it exists.\n\n* Path may not necessarily be the shortest in our algorithm.\n\n\nTwo paths are possible:\n\n1. DFS Path\n2. BFS Path\n\n\n\n1. DFS - quite simple, just return a vector of the paths traversed.\n2. BFS - returns the **shortest path** - **Shortest path proof - property of BFS.** Just make a diagram.\n\n\n* We just run BFS and stop if we find the key or the graph ends. While checking for key.\n* We check if visited has the key. If it does, then we print it, then check it's predecessor(in the visited graph). We do this until we reach -1. Stop.\n\nT.C same as BFS\nS.C same as BFS (2n)\n\n",
      "html": "<h1 id=\"2.-get-path\">2. Get Path <a class=\"heading-anchor-permalink\" href=\"#2.-get-path\">#</a></h1>\n<p>Created Tuesday 31 March 2020</p>\n<p>Given A and B nodes.\nReturn the path from A to B, if it exists.</p>\n<ul>\n<li>Path may not necessarily be the shortest in our algorithm.</li>\n</ul>\n<p>Two paths are possible:</p>\n<ol>\n<li>\n<p>DFS Path</p>\n</li>\n<li>\n<p>BFS Path</p>\n</li>\n<li>\n<p>DFS - quite simple, just return a vector of the paths traversed.</p>\n</li>\n<li>\n<p>BFS - returns the <strong>shortest path</strong> - <strong>Shortest path proof - property of BFS.</strong> Just make a diagram.</p>\n</li>\n</ol>\n<ul>\n<li>We just run BFS and stop if we find the key or the graph ends. While checking for key.</li>\n<li>We check if visited has the key. If it does, then we print it, then check it’s predecessor(in the visited graph). We do this until we reach -1. Stop.</li>\n</ul>\n<p>T.C same as BFS\nS.C same as BFS (2n)</p>\n",
      "id": 264
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/7._Problem_-_get_connected_components.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/1._Graphs_-_Basics/7._Problem_-_get_connected_components.html",
      "content": "# 7. Problem - get connected components\nCreated Tuesday 31 March 2020\n\n\n1. Keep a bag for getting all nodes\n2. Run DFS on the starting vertex. Pass the bag as visited for this. Keep filling the bag.\n3. Do 2 and 3 for all unvisited nodes. Once done stop.\n4. If visited.size()==V, return true; else return false;\n\n\nNote: Here we can use two different bags too. But that's cumbersome. Not required.\n\n",
      "html": "<h1 id=\"7.-problem---get-connected-components\">7. Problem - get connected components <a class=\"heading-anchor-permalink\" href=\"#7.-problem---get-connected-components\">#</a></h1>\n<p>Created Tuesday 31 March 2020</p>\n<ol>\n<li>Keep a bag for getting all nodes</li>\n<li>Run DFS on the starting vertex. Pass the bag as visited for this. Keep filling the bag.</li>\n<li>Do 2 and 3 for all unvisited nodes. Once done stop.</li>\n<li>If visited.size()==V, return true; else return false;</li>\n</ol>\n<p>Note: Here we can use two different bags too. But that’s cumbersome. Not required.</p>\n",
      "id": 265
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/0_index.html",
      "content": "# 2. Graphs 2\nCreated Sunday 19 April 2020\n\n[Codes](./2._Graphs_2/Codes)\n\n",
      "html": "<h1 id=\"2.-graphs-2\">2. Graphs 2 <a class=\"heading-anchor-permalink\" href=\"#2.-graphs-2\">#</a></h1>\n<p>Created Sunday 19 April 2020</p>\n<p><a href=\"./2._Graphs_2/Codes\">Codes</a></p>\n",
      "id": 266
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/1._Intro_to_MST.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/1._Intro_to_MST.html",
      "content": "# 1. Intro to MST\nCreated Sunday 19 April 2020\n\n#### **Minimum Spanning Tree**\n``Tree``: A connected graph with no cycles.\n``Spanning Tree``: Given a simple(no loops or multiedge) undirected connected graph, a tree containing all the vertices of the graph is called a spanning tree. \n\n* There can be multiple MSTs for a given graph.\n* For a spanning tree: |N|-|E| = 1\n\n\n**Minimum Spanning Tree: **For a weighted, connected and undirected graph, a minimum spanning tree(MST) is a tree with the least weight. **There could be multiple MST's for the same graph. **\n\n**Remember the MST requirements for a given graph:**\n\n1. **Weighted**\n2. **Undirected**\n3. **Connected**\n\n\nMultiplicity of MST's for a given graph:\nExperimentation shows that multiple trees can exist. **Remember** tree signatures are different. i.e Graph matrices should be different.\nUniqueness:\nIf each edge has a **distinct** weight then there will be only one, unique minimum spanning tree. \n**Simple proof. **For different trees, at least one edge is different. If two MST's were possible, then we need to have\n\nInvariants and Properties:\n\n1. Adding any edge to an MST creates a cycle.\n\n\n*****\n\nFinding MST for a given weighted, connected and undirected graph.\n\nNaive Approach:\n\n1. Find all the Spanning trees.\n2. Find weight of each(i.e sum of edges)\n3. Trees with minium values of weight are MSTs.\n\n\n",
      "html": "<h1 id=\"1.-intro-to-mst\">1. Intro to MST <a class=\"heading-anchor-permalink\" href=\"#1.-intro-to-mst\">#</a></h1>\n<p>Created Sunday 19 April 2020</p>\n<h4 id=\"minimum-spanning-tree\"><strong>Minimum Spanning Tree</strong> <a class=\"heading-anchor-permalink\" href=\"#minimum-spanning-tree\">#</a></h4>\n<p><code>Tree</code>: A connected graph with no cycles.\n<code>Spanning Tree</code>: Given a simple(no loops or multiedge) undirected connected graph, a tree containing all the vertices of the graph is called a spanning tree.</p>\n<ul>\n<li>There can be multiple MSTs for a given graph.</li>\n<li>For a spanning tree: |N|-|E| = 1</li>\n</ul>\n<p>**Minimum Spanning Tree: **For a weighted, connected and undirected graph, a minimum spanning tree(MST) is a tree with the least weight. **There could be multiple MST’s for the same graph. **</p>\n<p><strong>Remember the MST requirements for a given graph:</strong></p>\n<ol>\n<li><strong>Weighted</strong></li>\n<li><strong>Undirected</strong></li>\n<li><strong>Connected</strong></li>\n</ol>\n<p>Multiplicity of MST’s for a given graph:\nExperimentation shows that multiple trees can exist. <strong>Remember</strong> tree signatures are different. i.e Graph matrices should be different.\nUniqueness:\nIf each edge has a <strong>distinct</strong> weight then there will be only one, unique minimum spanning tree.\n**Simple proof. **For different trees, at least one edge is different. If two MST’s were possible, then we need to have</p>\n<p>Invariants and Properties:</p>\n<ol>\n<li>Adding any edge to an MST creates a cycle.</li>\n</ol>\n<hr>\n<p>Finding MST for a given weighted, connected and undirected graph.</p>\n<p>Naive Approach:</p>\n<ol>\n<li>Find all the Spanning trees.</li>\n<li>Find weight of each(i.e sum of edges)</li>\n<li>Trees with minium values of weight are MSTs.</li>\n</ol>\n",
      "id": 267
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/2._Cycle_Detection/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/2._Cycle_Detection/0_index.html",
      "content": "# 2. Cycle Detection\n\nCreated Monday 20 April 2020\n\nWe discussed in Kruskal's algorithm, that we need to check if a cycle exists, just before adding an edge.\n\n1. In an MST...\n\nOne **simple** way is to traverse the graph and keep a **visited** **bag**, if we encounter a duplicate vertex, we skip that edge. **But this has a flaw. **If A and B, C and D are connected, does this mean that BC is not possible, **no, **it could be a valid non cyclic edge(i.e AB and CD are in two disconnected graphs), but our bag will reject this. **This is not a foolproof way. i.e IT is WRONG.**\n\n2. A simple approach, before connecting A and B, check is A is reachable from B(i.e hasPath(A, B)), if it is not connected add them. **This takes too much time though.**\n\nTime Complexity: hasPath(A, B) has complexity O(V+E).\n\n3. Union Find algorithm:\n\nIn 1., We were keeping track of vertices only. We to change this idea. We somehow need to keep track of connected components, using which we can check if an edge is being drawn between connected components or not. If they are in a connected component the edge is **not **made, else it added(made).\n\nWe assume, initially, that all components are disjoint(only individual points):\n\n1. We maintain an array of these points(from 1 to N). We store the parent of these points at each element.\n2. We initialize every element to be equal to i, i.e i is the parent of itself, this ensures that all are disconnected. **We need to maintain that for a connected graph, all the parents the same. (we implement this by keeping keeping all lvals, rvals as superparent. Remember that a super_parent is always reflexive)**\n3. To safeConnect i and j, we find their superparents, if they are different, we assign one to the other(any way would do). This essentially does the union operation on the two graphs, making them a connected one. Assignment works both ways coz union is commutative.\n\n```c++\nvoid safeConnect(int i, int j, int arr[], int &edges)\n{\n    if (arr[i] != arr[j]) // apparently disconnected\n    {\n        int parent_i = arr[i], parent_j = arr[j]; // choose any of i and j\n\n        // find the superparent of i and j\n\n        // superparent of i\n        while (parent_i != arr[parent_i])\n            parent_i = arr[parent_i];\n\n        // superparent of j\n        while (arr[parent_j] != parent_j)\n            parent_j = arr[parent_j];\n\n        // we need to make changes only to the super_parent of either.\n        if (parent_j != parent_i)\n            arr[parent_i] = parent_j, edges++; // add the edges\n        // doing arr[parent_j] = parent_i is the same, what matters is type superparent\n    }\n    // else do nothing\n}\n// idea superparent = root, exactly.\n```\n\nCalulating time complexity of the algo, worst in case of skewed tree, . i. e.\n![](/assets/2._Cycle_Detection-image-1.png)\n// T.C = Maximum work is done if all the nodes are connected, either like two lines(parallel or connected at an end) or some other packed config\n\nT.C for Union Find Cycle detection: O(V), in case the tree is skewed(LL). // O(V/k1 + V/k2); k1 and k2 show that we have two LL's , worst case.\n\n- For Kruskal's complexity is O(E); We do this for all the components = Σi = O(V^2^) = O(E) Same as search.\n\n**Proof of correctness(using induction)**:\n\n1. All are a single unions(groups), and that unions always have the same superparent(reachable root).\n2. By union operation, we have made some non-atomic groups, each which is a tree(by definition) - no cycle, connectedness.\n\nThe members of a group all have the same root(i.e we can reach the root) - does not mean arr[i] is the same as super_parent[i], it is not necessary.\n\n3. Assuming b. holds, i and j can be connected if they have different superparents(roots). We find the superparents(for both i and j) by iterating on the condition that superparents are always reflexive. Once both are found. We assign a one super_parent's entry to another. This reduces a group and forms bigger tree.\n\nWe do this until we have edges = V-1. We have a spanning tree.\n\n---\n\n- The idea for this could also be obtained by thinking about joining two trees to form a bigger tree. This can be done in the easiest and organized manner by just connecting Tree 2 as a child of Tree 1.\n",
      "html": "<h1 id=\"2.-cycle-detection\">2. Cycle Detection <a class=\"heading-anchor-permalink\" href=\"#2.-cycle-detection\">#</a></h1>\n<p>Created Monday 20 April 2020</p>\n<p>We discussed in Kruskal’s algorithm, that we need to check if a cycle exists, just before adding an edge.</p>\n<ol>\n<li>In an MST…</li>\n</ol>\n<p>One <strong>simple</strong> way is to traverse the graph and keep a <strong>visited</strong> <strong>bag</strong>, if we encounter a duplicate vertex, we skip that edge. **But this has a flaw. **If A and B, C and D are connected, does this mean that BC is not possible, **no, **it could be a valid non cyclic edge(i.e AB and CD are in two disconnected graphs), but our bag will reject this. <strong>This is not a foolproof way. i.e IT is WRONG.</strong></p>\n<ol start=\"2\">\n<li>A simple approach, before connecting A and B, check is A is reachable from B(i.e hasPath(A, B)), if it is not connected add them. <strong>This takes too much time though.</strong></li>\n</ol>\n<p>Time Complexity: hasPath(A, B) has complexity O(V+E).</p>\n<ol start=\"3\">\n<li>Union Find algorithm:</li>\n</ol>\n<p>In 1., We were keeping track of vertices only. We to change this idea. We somehow need to keep track of connected components, using which we can check if an edge is being drawn between connected components or not. If they are in a connected component the edge is **not **made, else it added(made).</p>\n<p>We assume, initially, that all components are disjoint(only individual points):</p>\n<ol>\n<li>We maintain an array of these points(from 1 to N). We store the parent of these points at each element.</li>\n<li>We initialize every element to be equal to i, i.e i is the parent of itself, this ensures that all are disconnected. <strong>We need to maintain that for a connected graph, all the parents the same. (we implement this by keeping keeping all lvals, rvals as superparent. Remember that a super_parent is always reflexive)</strong></li>\n<li>To safeConnect i and j, we find their superparents, if they are different, we assign one to the other(any way would do). This essentially does the union operation on the two graphs, making them a connected one. Assignment works both ways coz union is commutative.</li>\n</ol>\n<pre><code class=\"language-c++\">void safeConnect(int i, int j, int arr[], int &amp;edges)\n{\n    if (arr[i] != arr[j]) // apparently disconnected\n    {\n        int parent_i = arr[i], parent_j = arr[j]; // choose any of i and j\n\n        // find the superparent of i and j\n\n        // superparent of i\n        while (parent_i != arr[parent_i])\n            parent_i = arr[parent_i];\n\n        // superparent of j\n        while (arr[parent_j] != parent_j)\n            parent_j = arr[parent_j];\n\n        // we need to make changes only to the super_parent of either.\n        if (parent_j != parent_i)\n            arr[parent_i] = parent_j, edges++; // add the edges\n        // doing arr[parent_j] = parent_i is the same, what matters is type superparent\n    }\n    // else do nothing\n}\n// idea superparent = root, exactly.\n</code></pre>\n<p>Calulating time complexity of the algo, worst in case of skewed tree, . i. e.\n<img src=\"/assets/2._Cycle_Detection-image-1.png\" alt=\"\">\n// T.C = Maximum work is done if all the nodes are connected, either like two lines(parallel or connected at an end) or some other packed config</p>\n<p>T.C for Union Find Cycle detection: O(V), in case the tree is skewed(LL). // O(V/k1 + V/k2); k1 and k2 show that we have two LL’s , worst case.</p>\n<ul>\n<li>For Kruskal’s complexity is O(E); We do this for all the components = Σi = O(V^2^) = O(E) Same as search.</li>\n</ul>\n<p><strong>Proof of correctness(using induction)</strong>:</p>\n<ol>\n<li>All are a single unions(groups), and that unions always have the same superparent(reachable root).</li>\n<li>By union operation, we have made some non-atomic groups, each which is a tree(by definition) - no cycle, connectedness.</li>\n</ol>\n<p>The members of a group all have the same root(i.e we can reach the root) - does not mean arr[i] is the same as super_parent[i], it is not necessary.</p>\n<ol start=\"3\">\n<li>Assuming b. holds, i and j can be connected if they have different superparents(roots). We find the superparents(for both i and j) by iterating on the condition that superparents are always reflexive. Once both are found. We assign a one super_parent’s entry to another. This reduces a group and forms bigger tree.</li>\n</ol>\n<p>We do this until we have edges = V-1. We have a spanning tree.</p>\n<hr>\n<ul>\n<li>The idea for this could also be obtained by thinking about joining two trees to form a bigger tree. This can be done in the easiest and organized manner by just connecting Tree 2 as a child of Tree 1.</li>\n</ul>\n",
      "id": 268
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/2._MST_algorithms/1._Kruskal's_Algo_Complexity/0._Sorting_w.r.t_a_data_member_of_a_class.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/2._MST_algorithms/1._Kruskal's_Algo_Complexity/0._Sorting_w.r.t_a_data_member_of_a_class.html",
      "content": "# 0. Sorting w.r.t a data member of a class\nCreated Saturday 25 April 2020\n\nUsing lambda functions: <https://www.drdobbs.com/cpp/lambdas-in-c11/240168241>\n```c++\n// sort(iterator_start, iterator_end, [](const cust_type &x, const cust_type &y){ // return x.property < y.property});\t// keep < for normal sort\nsort(vec.begin(), vec.end(), [](const pair<int, int> &x, const pair<int, int> &y){return x.second > y.second;});\n```\n\nOld method:\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\n// write the comparator function here.\n/*\n    1. Specify the property to be used for the sort\n    2. Also Specify asc or descending. Return a < b for ascending. i.e it's okay if a <b\n*/\ntemplate <typename T>\t// not useful generally\ninline bool mysort(const T &x, const T &y)\n{\n    return x < y;\n}\ninline bool mycomp(const pair<int, int> &x, const pair<int, int> &y)\n{\n    return x.second > y.second;\n}\nint main()\n{\n    vector<int> pq;\n    pq.push_back(1);\n    pq.push_back(1);\n    pq.push_back(9);\n    // comparator name with type if templated\n    sort(pq.begin(), pq.end(), mysort<int>);\n    vector<pair<int, int>> pr;\n    pr.push_back({1, -34});\n    pr.push_back({1, -3});\n    pr.push_back({9, 40});\n    // pass the name without type if untemplated\n    sort(pr.begin(), pr.end(), mycomp);\n    for (auto x : pr)\n        cout << x.second << \" \";\n}\n``\n",
      "html": "<h1 id=\"0.-sorting-w.r.t-a-data-member-of-a-class\">0. Sorting w.r.t a data member of a class <a class=\"heading-anchor-permalink\" href=\"#0.-sorting-w.r.t-a-data-member-of-a-class\">#</a></h1>\n<p>Created Saturday 25 April 2020</p>\n<p>Using lambda functions: <a href=\"https://www.drdobbs.com/cpp/lambdas-in-c11/240168241\">https://www.drdobbs.com/cpp/lambdas-in-c11/240168241</a></p>\n<pre><code class=\"language-c++\">// sort(iterator_start, iterator_end, [](const cust_type &amp;x, const cust_type &amp;y){ // return x.property &lt; y.property});\t// keep &lt; for normal sort\nsort(vec.begin(), vec.end(), [](const pair&lt;int, int&gt; &amp;x, const pair&lt;int, int&gt; &amp;y){return x.second &gt; y.second;});\n</code></pre>\n<p>Old method:</p>\n<pre><code class=\"language-c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n// write the comparator function here.\n/*\n    1. Specify the property to be used for the sort\n    2. Also Specify asc or descending. Return a &lt; b for ascending. i.e it's okay if a &lt;b\n*/\ntemplate &lt;typename T&gt;\t// not useful generally\ninline bool mysort(const T &amp;x, const T &amp;y)\n{\n    return x &lt; y;\n}\ninline bool mycomp(const pair&lt;int, int&gt; &amp;x, const pair&lt;int, int&gt; &amp;y)\n{\n    return x.second &gt; y.second;\n}\nint main()\n{\n    vector&lt;int&gt; pq;\n    pq.push_back(1);\n    pq.push_back(1);\n    pq.push_back(9);\n    // comparator name with type if templated\n    sort(pq.begin(), pq.end(), mysort&lt;int&gt;);\n    vector&lt;pair&lt;int, int&gt;&gt; pr;\n    pr.push_back({1, -34});\n    pr.push_back({1, -3});\n    pr.push_back({9, 40});\n    // pass the name without type if untemplated\n    sort(pr.begin(), pr.end(), mycomp);\n    for (auto x : pr)\n        cout &lt;&lt; x.second &lt;&lt; &quot; &quot;;\n}\n``\n</code></pre>\n",
      "id": 269
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/2._MST_algorithms/1._Kruskal's_Algo_Complexity/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/2._MST_algorithms/1._Kruskal's_Algo_Complexity/0_index.html",
      "content": "# 1. Kruskal's Algo Complexity\n\nCreated Saturday 25 April 2020\n\n#### Algorithm\n\nIdea:\n\n1. Sort the edges according to weights. **Adjacency list will be better here(as it'll store the weights).**\n2. Take the edges: source-destination-weight as input.\n3. For storing the MST, make a list of n-1 <edges>.\n\n**No visited bag required!**\n\nPseudocode:\n\n1. Sort the edges according to weights. **Adjacency list will be better here(as it'll store the weights).**\n2. Take the edges: source-destination-weight as input.\n3. For storing the MST, make a list of n-1 <edges>.\n\n#### Analysis - Time and Space\n\n- Time Complexity is O(VE) using union find.\n\n![](/assets/1._Kruskal's_Algo_Complexity-image-1.png)\n\n- We can make it O(E logV) by using Union by rank and Path Compression, i.e we try to make a balanced tree.\n\n![](/assets/1._Kruskal's_Algo_Complexity-image-2.png)s\n",
      "html": "<h1 id=\"1.-kruskal%E2%80%99s-algo-complexity\">1. Kruskal’s Algo Complexity <a class=\"heading-anchor-permalink\" href=\"#1.-kruskal%E2%80%99s-algo-complexity\">#</a></h1>\n<p>Created Saturday 25 April 2020</p>\n<h4 id=\"algorithm\">Algorithm <a class=\"heading-anchor-permalink\" href=\"#algorithm\">#</a></h4>\n<p>Idea:</p>\n<ol>\n<li>Sort the edges according to weights. <strong>Adjacency list will be better here(as it’ll store the weights).</strong></li>\n<li>Take the edges: source-destination-weight as input.</li>\n<li>For storing the MST, make a list of n-1 <edges>.</li>\n</ol>\n<p><strong>No visited bag required!</strong></p>\n<p>Pseudocode:</p>\n<ol>\n<li>Sort the edges according to weights. <strong>Adjacency list will be better here(as it’ll store the weights).</strong></li>\n<li>Take the edges: source-destination-weight as input.</li>\n<li>For storing the MST, make a list of n-1 <edges>.</li>\n</ol>\n<h4 id=\"analysis---time-and-space\">Analysis - Time and Space <a class=\"heading-anchor-permalink\" href=\"#analysis---time-and-space\">#</a></h4>\n<ul>\n<li>Time Complexity is O(VE) using union find.</li>\n</ul>\n<p><img src=\"/assets/1._Kruskal's_Algo_Complexity-image-1.png\" alt=\"\"></p>\n<ul>\n<li>We can make it O(E logV) by using Union by rank and Path Compression, i.e we try to make a balanced tree.</li>\n</ul>\n<p><img src=\"/assets/1._Kruskal's_Algo_Complexity-image-2.png\" alt=\"\">s</p>\n",
      "id": 270
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/5._Prim's_Algorithm.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/5._Prim's_Algorithm.html",
      "content": "# 5. Prim's Algorithm\nCreated Saturday 25 April 2020\n\n\n* This algorithm is used for finding MST\n* Greedy algorithm: We select the myopically best option.\n* As it is a greedy algorithm, it is easy to implement.\n* We have a table with three columns, (vertex, parent, weight(from parent to weight)).\n* We also need two lists **visited **and** unvisited. **Better to keep an array. Space O(V). Initially unvisited has all the vertex and visited has none. Meaning of visited: The vertex where we have went and explored its neighbours. Vertex which are encountered as a result of the exploration are still unvisited.\n\n\nImplementation:\n\n1. Keep a 2 tuple array with i as the vector. (i.e we store parent and weight). Initially parent of start is -1, (no parent) and it's weight is zero. All other parents are blank and weight is INT_MAX(infinity).\n2. Keep two lists,**visited **and **unvisited**. Intially visited is empty and the other is equal to V.\n3. Select a minimum weight vertex from the **unvisted** vertex from the **table** and visit it's **unvisited** neighbours. If a neighbour has a lesser value than already update the weight and parent(to the current node). Add the current to the visited array. **Remove** it from the unvisited one. Continue until |unvisited|==0.\n4. We have the MST starting from the selected weight. \n5. We **need** to find the minimum explicitly, as we may have some 'old' seen minimum which is not our neighbour now. **Our algo explicitly states that we run on the minimum from the table.**\n\n\nT.C with matrix: O(V^2^)\nFor an adjacency list with my method: T.C ~ O(Ek) ~ O(E log V)\nOptimizations:\n\n1. Using Priority Queue - not required, we did not even have a findMIn.\n2. Using adjacency list improves the search for neighbours.\n\n\nT.C: (E+V)log(V) = E log V \n\n",
      "html": "<h1 id=\"5.-prim%E2%80%99s-algorithm\">5. Prim’s Algorithm <a class=\"heading-anchor-permalink\" href=\"#5.-prim%E2%80%99s-algorithm\">#</a></h1>\n<p>Created Saturday 25 April 2020</p>\n<ul>\n<li>This algorithm is used for finding MST</li>\n<li>Greedy algorithm: We select the myopically best option.</li>\n<li>As it is a greedy algorithm, it is easy to implement.</li>\n<li>We have a table with three columns, (vertex, parent, weight(from parent to weight)).</li>\n<li>We also need two lists **visited <strong>and</strong> unvisited. **Better to keep an array. Space O(V). Initially unvisited has all the vertex and visited has none. Meaning of visited: The vertex where we have went and explored its neighbours. Vertex which are encountered as a result of the exploration are still unvisited.</li>\n</ul>\n<p>Implementation:</p>\n<ol>\n<li>Keep a 2 tuple array with i as the vector. (i.e we store parent and weight). Initially parent of start is -1, (no parent) and it’s weight is zero. All other parents are blank and weight is INT_MAX(infinity).</li>\n<li>Keep two lists,**visited **and <strong>unvisited</strong>. Intially visited is empty and the other is equal to V.</li>\n<li>Select a minimum weight vertex from the <strong>unvisted</strong> vertex from the <strong>table</strong> and visit it’s <strong>unvisited</strong> neighbours. If a neighbour has a lesser value than already update the weight and parent(to the current node). Add the current to the visited array. <strong>Remove</strong> it from the unvisited one. Continue until |unvisited|==0.</li>\n<li>We have the MST starting from the selected weight.</li>\n<li>We <strong>need</strong> to find the minimum explicitly, as we may have some ‘old’ seen minimum which is not our neighbour now. <strong>Our algo explicitly states that we run on the minimum from the table.</strong></li>\n</ol>\n<p>T.C with matrix: O(V^2^)\nFor an adjacency list with my method: T.C ~ O(Ek) ~ O(E log V)\nOptimizations:</p>\n<ol>\n<li>Using Priority Queue - not required, we did not even have a findMIn.</li>\n<li>Using adjacency list improves the search for neighbours.</li>\n</ol>\n<p>T.C: (E+V)log(V) = E log V</p>\n",
      "id": 271
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/6._Dijkstra's_Algorithm.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/4._Graphs/2._Graphs_2/6._Dijkstra's_Algorithm.html",
      "content": "# 6. Dijkstra's Algorithm\nCreated Sunday 26 April 2020\n\nGiven a graph, directed or undirected with weights. **Should not have NEGATIVE weights.**\n\n* Trick for negatives: Add the most negative value(+ve) to all the weights. Solve using dijkstra, then subtract each edge by the negative value. \n\n\n\n* We find the shortest path from a start vertex to all of the other vertices.\n\n\n\n* We have two lists: **visited** and **unvisited** vertices.\n\n\n**Algorithm**:\n\n1. Pick a vertex from the **unvisited **vertices with the **least distance** from the start. **These may be non-neighbours.**\n2. Explore it, i.e update the distance value of a neighbour if distance(curr->neighbour) + distance(start->curr) < distance(start->neighbour). Also update it's parent(or predecessor). Do this for all the **unvisited neighbours**. We have confidence in our **greedy algo.  **Greedy Choice Property. (No reconsiderations)\n3. After we have explored all the vertices, stop.\n4. We can trace the path too.\n5. Visual aid - A table with <visited, vertex, distance_from_start, parent> + is_visited_array.\n\n\n<https://www.topcoder.com/community/competitive-programming/tutorials/greedy-is-good/>\n\nTime Complexity is O(V^2^) - for adjacency matrix\n\n* We can use an adjacency list, O(VE)\n* We can use a priority queue for the minimum thing. O((V+E)*logV)\n\n\n",
      "html": "<h1 id=\"6.-dijkstra%E2%80%99s-algorithm\">6. Dijkstra’s Algorithm <a class=\"heading-anchor-permalink\" href=\"#6.-dijkstra%E2%80%99s-algorithm\">#</a></h1>\n<p>Created Sunday 26 April 2020</p>\n<p>Given a graph, directed or undirected with weights. <strong>Should not have NEGATIVE weights.</strong></p>\n<ul>\n<li>\n<p>Trick for negatives: Add the most negative value(+ve) to all the weights. Solve using dijkstra, then subtract each edge by the negative value.</p>\n</li>\n<li>\n<p>We find the shortest path from a start vertex to all of the other vertices.</p>\n</li>\n<li>\n<p>We have two lists: <strong>visited</strong> and <strong>unvisited</strong> vertices.</p>\n</li>\n</ul>\n<p><strong>Algorithm</strong>:</p>\n<ol>\n<li>Pick a vertex from the **unvisited **vertices with the <strong>least distance</strong> from the start. <strong>These may be non-neighbours.</strong></li>\n<li>Explore it, i.e update the distance value of a neighbour if distance(curr-&gt;neighbour) + distance(start-&gt;curr) &lt; distance(start-&gt;neighbour). Also update it’s parent(or predecessor). Do this for all the <strong>unvisited neighbours</strong>. We have confidence in our **greedy algo.  **Greedy Choice Property. (No reconsiderations)</li>\n<li>After we have explored all the vertices, stop.</li>\n<li>We can trace the path too.</li>\n<li>Visual aid - A table with &lt;visited, vertex, distance_from_start, parent&gt; + is_visited_array.</li>\n</ol>\n<p><a href=\"https://www.topcoder.com/community/competitive-programming/tutorials/greedy-is-good/\">https://www.topcoder.com/community/competitive-programming/tutorials/greedy-is-good/</a></p>\n<p>Time Complexity is O(V^2^) - for adjacency matrix</p>\n<ul>\n<li>We can use an adjacency list, O(VE)</li>\n<li>We can use a priority queue for the minimum thing. O((V+E)*logV)</li>\n</ul>\n",
      "id": 272
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/5._C++_STL/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/5._C++_STL/0_index.html",
      "content": "# 5. C++ STL\nCreated Thursday 06 February 2020\n\nA library that provides:\n\n1. Containers - data structures\n2. Algorithms - sort, swap, fill, none_of etc.\n\n\nResources for STL:\n\n1. [STL in one video, quick](https://www.youtube.com/watch?v=mOzPZ3hWFVQ&t=328s)\n2. [STL playlist, for CP](https://youtube.com/playlist?list=PLauivoElc3gh3RCiQA82MDI-gJfXQQVnn)\n3. [STL playlist, in detail](https://youtube.com/playlist?list=PLZ9NgFYEMxp5oH3mrr4IlFBn03rjS-gN1) Didn't do.\n\n\nFIXME - have to write down about the structures\n\n",
      "html": "<h1 id=\"5.-c%2B%2B-stl\">5. C++ STL <a class=\"heading-anchor-permalink\" href=\"#5.-c%2B%2B-stl\">#</a></h1>\n<p>Created Thursday 06 February 2020</p>\n<p>A library that provides:</p>\n<ol>\n<li>Containers - data structures</li>\n<li>Algorithms - sort, swap, fill, none_of etc.</li>\n</ol>\n<p>Resources for STL:</p>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=mOzPZ3hWFVQ&amp;t=328s\">STL in one video, quick</a></li>\n<li><a href=\"https://youtube.com/playlist?list=PLauivoElc3gh3RCiQA82MDI-gJfXQQVnn\">STL playlist, for CP</a></li>\n<li><a href=\"https://youtube.com/playlist?list=PLZ9NgFYEMxp5oH3mrr4IlFBn03rjS-gN1\">STL playlist, in detail</a> Didn’t do.</li>\n</ol>\n<p>FIXME - have to write down about the structures</p>\n",
      "id": 273
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/5._C++_STL/1._pair.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/5._C++_STL/1._pair.html",
      "content": "# 1. pair\nCreated Thursday 06 February 2020\n\n\n* present in iostream\n* make_pair(val1, val2) or initialize using () or {}.\n* used in functions tor return multiple objects.\n* has public attributes first and second.\n\nExample\n```c++\npair<int, int> A;\nA.first, A.second; // lvalues also\nA = {1, 3}; // direct assignment\n```\n",
      "html": "<h1 id=\"1.-pair\">1. pair <a class=\"heading-anchor-permalink\" href=\"#1.-pair\">#</a></h1>\n<p>Created Thursday 06 February 2020</p>\n<ul>\n<li>present in iostream</li>\n<li>make_pair(val1, val2) or initialize using () or {}.</li>\n<li>used in functions tor return multiple objects.</li>\n<li>has public attributes first and second.</li>\n</ul>\n<p>Example</p>\n<pre><code class=\"language-c++\">pair&lt;int, int&gt; A;\nA.first, A.second; // lvalues also\nA = {1, 3}; // direct assignment\n</code></pre>\n",
      "id": 274
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/5._C++_STL/2._tuple.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/5._C++_STL/2._tuple.html",
      "content": "# 2. tuple\nCreated Thursday 06 February 2020\n\n\n* #include<tuple>\n* make using tuple\n* get<index>(tuple_name);\n\n\n",
      "html": "<h1 id=\"2.-tuple\">2. tuple <a class=\"heading-anchor-permalink\" href=\"#2.-tuple\">#</a></h1>\n<p>Created Thursday 06 February 2020</p>\n<ul>\n<li>#include<tuple></li>\n<li>make using tuple</li>\n<li>get<index>(tuple_name);</li>\n</ul>\n",
      "id": 275
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/5._C++_STL/3._Bitset.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/5._Data_Structures/5._C++_STL/3._Bitset.html",
      "content": "# 3. Bitset\nCreated Friday 19 November 2021\n\n<https://www.interviewbit.com/courses/fast-track-cpp/topics/advanced-cpp/>\n\n",
      "html": "<h1 id=\"3.-bitset\">3. Bitset <a class=\"heading-anchor-permalink\" href=\"#3.-bitset\">#</a></h1>\n<p>Created Friday 19 November 2021</p>\n<p><a href=\"https://www.interviewbit.com/courses/fast-track-cpp/topics/advanced-cpp/\">https://www.interviewbit.com/courses/fast-track-cpp/topics/advanced-cpp/</a></p>\n",
      "id": 276
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/0._Brute_force.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/0._Brute_force.html",
      "content": "# 0. Brute force\nCreated Thursday 25 November 2021\n\nFIXME  - add everything here\n\n",
      "html": "<h1 id=\"0.-brute-force\">0. Brute force <a class=\"heading-anchor-permalink\" href=\"#0.-brute-force\">#</a></h1>\n<p>Created Thursday 25 November 2021</p>\n<p>FIXME  - add everything here</p>\n",
      "id": 277
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/0_index.html",
      "content": "# 6. Algorithm Design\nCreated Thursday 08 April 2021\n\n#### Important\n\n* Algorithm design was not taught in the Coding Ninjas course, except for the [Dynamic Programming](6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming.md) section.\n* If you are learning data structures for the first time, I advise you to should skip all subsections of this section, except Dynamic Programming, for *now👍️.*\n\n\n",
      "html": "<h1 id=\"6.-algorithm-design\">6. Algorithm Design <a class=\"heading-anchor-permalink\" href=\"#6.-algorithm-design\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<h4 id=\"important\">Important <a class=\"heading-anchor-permalink\" href=\"#important\">#</a></h4>\n<ul>\n<li>Algorithm design was not taught in the Coding Ninjas course, except for the <a href=\"6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming.html\">Dynamic Programming</a> section.</li>\n<li>If you are learning data structures for the first time, I advise you to should skip all subsections of this section, except Dynamic Programming, for <em>now👍️.</em></li>\n</ul>\n",
      "id": 278
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/1._Divide_and_Conquer.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/1._Divide_and_Conquer.html",
      "content": "# 1. Divide and Conquer\nCreated Thursday 08 April 2021\n\nFIXME: Not in CN course\n\n",
      "html": "<h1 id=\"1.-divide-and-conquer\">1. Divide and Conquer <a class=\"heading-anchor-permalink\" href=\"#1.-divide-and-conquer\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<p>FIXME: Not in CN course</p>\n",
      "id": 279
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/2._Greedy.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/2._Greedy.html",
      "content": "# 2. Greedy\nCreated Thursday 08 April 2021\n\nFIXME: Not in CN course\n\n",
      "html": "<h1 id=\"2.-greedy\">2. Greedy <a class=\"heading-anchor-permalink\" href=\"#2.-greedy\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<p>FIXME: Not in CN course</p>\n",
      "id": 280
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/0_index.html",
      "content": "# 3. Dynamic Programming\nCreated Monday 09 March 2020\n\nDynamic programming is all about smart work.\n\n[Exercises.md](./3._Dynamic_Programming/Quizzes&Exercises/Exercises.md)\n[CodingExercises.md](./3._Dynamic_Programming/Quizzes&Exercises/CodingExercises.md)\n[Assignments.md](./3._Dynamic_Programming/zAssignments/Assignments.md)\n\nFIXME - everything here is BS, revamp everything\nSome resources for DP\n\n1. <https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns>\n2. CLRS chapter on DP\n3. cpbook.net book.\n4. <https://atcoder.jp/contests/dp/tasks>\n5. DP on various things like strings, trees, with bitmasks.\n\n\n",
      "html": "<h1 id=\"3.-dynamic-programming\">3. Dynamic Programming <a class=\"heading-anchor-permalink\" href=\"#3.-dynamic-programming\">#</a></h1>\n<p>Created Monday 09 March 2020</p>\n<p>Dynamic programming is all about smart work.</p>\n<p><a href=\"./3._Dynamic_Programming/Quizzes&amp;Exercises/Exercises.html\">Exercises.md</a>\n<a href=\"./3._Dynamic_Programming/Quizzes&amp;Exercises/CodingExercises.html\">CodingExercises.md</a>\n<a href=\"./3._Dynamic_Programming/zAssignments/Assignments.html\">Assignments.md</a></p>\n<p>FIXME - everything here is BS, revamp everything\nSome resources for DP</p>\n<ol>\n<li><a href=\"https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns\">https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns</a></li>\n<li>CLRS chapter on DP</li>\n<li><a href=\"http://cpbook.net\">cpbook.net</a> book.</li>\n<li><a href=\"https://atcoder.jp/contests/dp/tasks\">https://atcoder.jp/contests/dp/tasks</a></li>\n<li>DP on various things like strings, trees, with bitmasks.</li>\n</ol>\n",
      "id": 281
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/1._Fibonacci_-_1/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/1._Fibonacci_-_1/0_index.html",
      "content": "# 1. Fibonacci - 1\n\nCreated Sunday 08 March 2020\n\nLet us first discuss a problem: finding the nth fibonacci number.\nIt can be written like a recursion;\n![](/assets/1._Fibonacci_-_1-image-1.png)\n![](/assets/1._Fibonacci_-_1-image-2.png)\ni.e here we do two recursions blindly, this is very costly in terms of time.\nSolving using recursive tree.\nT(n) = 2T(n-1) + k, on solving using GP formula\nT(n) = 2^n-1^.k = O(2^n^)\n\n- We can easily improve this. As f(n) is a function, hence we are repeating the exact work which we had already calculated, i.e **repetition should be **avoided. i.e we should save our work.\n\nThings to keep in mind in **DP**:\n\n- Space required = number of unique calculations = n+1 = 0 to n here. All of the rest are repetitive calls.\n- We should plan 'what' thing we are saving at the index 'i'. Here we will save the ith fibonacci number, i.e the final output.\n- Remember where we store the array(or note) and where we access it. We can use helper functions or global variables(not advised).\n- We are going to use recursion, hence helper is required, so it is imperative that we pass the array as argument.\n- Initialize the store first.\n- Check if the answer is correct or useless(random garbage or init value, symbolic value).\n- Our function should return the answer from the store if it has been calculated, i.e O(1) time. Else it should **calculate(i.e do recursion), store and then return.**\n- Recursion is not so costly here.\n\nAnalysis after using DP: Nor right calls made. Complexity = nodes = O(n). Space is also optimized a lot here.\n![](/assets/1._Fibonacci_-_1-image-3.png)\nCode using DP:\n![](/assets/1._Fibonacci_-_1-image-4.png)\n![](/assets/1._Fibonacci_-_1-image-5.png)\n\nDiscussion: This 'storing' is called memoization. It is a **top-down **approach, where we save the previous answers and use them in the future.\n",
      "html": "<h1 id=\"1.-fibonacci---1\">1. Fibonacci - 1 <a class=\"heading-anchor-permalink\" href=\"#1.-fibonacci---1\">#</a></h1>\n<p>Created Sunday 08 March 2020</p>\n<p>Let us first discuss a problem: finding the nth fibonacci number.\nIt can be written like a recursion;\n<img src=\"/assets/1._Fibonacci_-_1-image-1.png\" alt=\"\">\n<img src=\"/assets/1._Fibonacci_-_1-image-2.png\" alt=\"\">\ni.e here we do two recursions blindly, this is very costly in terms of time.\nSolving using recursive tree.\nT(n) = 2T(n-1) + k, on solving using GP formula\nT(n) = 2^n-1^.k = O(2^n^)</p>\n<ul>\n<li>We can easily improve this. As f(n) is a function, hence we are repeating the exact work which we had already calculated, i.e **repetition should be **avoided. i.e we should save our work.</li>\n</ul>\n<p>Things to keep in mind in <strong>DP</strong>:</p>\n<ul>\n<li>Space required = number of unique calculations = n+1 = 0 to n here. All of the rest are repetitive calls.</li>\n<li>We should plan ‘what’ thing we are saving at the index ‘i’. Here we will save the ith fibonacci number, i.e the final output.</li>\n<li>Remember where we store the array(or note) and where we access it. We can use helper functions or global variables(not advised).</li>\n<li>We are going to use recursion, hence helper is required, so it is imperative that we pass the array as argument.</li>\n<li>Initialize the store first.</li>\n<li>Check if the answer is correct or useless(random garbage or init value, symbolic value).</li>\n<li>Our function should return the answer from the store if it has been calculated, i.e O(1) time. Else it should <strong>calculate(i.e do recursion), store and then return.</strong></li>\n<li>Recursion is not so costly here.</li>\n</ul>\n<p>Analysis after using DP: Nor right calls made. Complexity = nodes = O(n). Space is also optimized a lot here.\n<img src=\"/assets/1._Fibonacci_-_1-image-3.png\" alt=\"\">\nCode using DP:\n<img src=\"/assets/1._Fibonacci_-_1-image-4.png\" alt=\"\">\n<img src=\"/assets/1._Fibonacci_-_1-image-5.png\" alt=\"\"></p>\n<p>Discussion: This ‘storing’ is called memoization. It is a **top-down **approach, where we save the previous answers and use them in the future.</p>\n",
      "id": 282
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/2._Fibonacci_-_2.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/2._Fibonacci_-_2.html",
      "content": "# 2. Fibonacci - 2\n\nCreated Monday 09 March 2020\n\n- We will store the answers here too. But here, we will do it iteratively.\n- For nth fibonacci, we need n-1 and n-2 th fibonacci. Dependency identified. The only independent cases are for n = 0 and n = 1. These are the smallest problems.\n- We will fill the smallest problems. Now our dependencies are fulfilled.\n\nThis code is the 3rd approach:\n![](/assets/2._Fibonacci_-_2-image-1.png)\n\n---\n\nThings to note, jargon:\n![](/assets/2._Fibonacci_-_2-image-2.png)\n\nSo the three approaches are:\n\n1. Bruteforce: Unoptimized code. Laziest solution.\n2. Memoization - Top-down approach\n\nWe try to solve the **largest** problem **first**, but if it is not solved yet, we solve it's dependencies. This continues until we reach a point where the base case values are present. From there start the returning phase of the recursion, where we solve all the problems to finally solve our required task. **We try to solve the hardest problem first, hence this is called a top-down approach.**\n\n- Memoization(i.e top-down) is usually recursive. As recursive makes the call for smaller unfufilled dependencies.\n- Recursive algorithms take up some extra space and time as compared to DP.\n- Memoization is possible only if an **optimal substructure exists.**\n\n3. Dynamic Programming - Bottom-up approach\n\nWe try to **explicitly** solve all the dependencies **first**, then we try to solve the harder problems, till we reach the required problem. Which can be solved as all previous ones have now been solved.\n\n- DP(bottom-up) is usually iterative, since all dependencies are met at every point. **i.e **There's no need of recursion.\n- Bottom up **does not mean** that we **need **to start from the 'starting point' in the problem, bottom means starting from the concrete values, anywhere in the system.\n- DP does not require initialization. As all value are written using the dependencies. If a value is to be written, it shall be, using the\n\nProblem solving strategy: We first write the naive recursive solution. Then we write the memoized approach. Then we refine it to DP by dependency analysis. We have to follow this now, until we develop the skill to directly write DP solutions. **Don't solve in one go, as this stops the learning process.**\n",
      "html": "<h1 id=\"2.-fibonacci---2\">2. Fibonacci - 2 <a class=\"heading-anchor-permalink\" href=\"#2.-fibonacci---2\">#</a></h1>\n<p>Created Monday 09 March 2020</p>\n<ul>\n<li>We will store the answers here too. But here, we will do it iteratively.</li>\n<li>For nth fibonacci, we need n-1 and n-2 th fibonacci. Dependency identified. The only independent cases are for n = 0 and n = 1. These are the smallest problems.</li>\n<li>We will fill the smallest problems. Now our dependencies are fulfilled.</li>\n</ul>\n<p>This code is the 3rd approach:\n<img src=\"/assets/2._Fibonacci_-_2-image-1.png\" alt=\"\"></p>\n<hr>\n<p>Things to note, jargon:\n<img src=\"/assets/2._Fibonacci_-_2-image-2.png\" alt=\"\"></p>\n<p>So the three approaches are:</p>\n<ol>\n<li>Bruteforce: Unoptimized code. Laziest solution.</li>\n<li>Memoization - Top-down approach</li>\n</ol>\n<p>We try to solve the <strong>largest</strong> problem <strong>first</strong>, but if it is not solved yet, we solve it’s dependencies. This continues until we reach a point where the base case values are present. From there start the returning phase of the recursion, where we solve all the problems to finally solve our required task. <strong>We try to solve the hardest problem first, hence this is called a top-down approach.</strong></p>\n<ul>\n<li>Memoization(i.e top-down) is usually recursive. As recursive makes the call for smaller unfufilled dependencies.</li>\n<li>Recursive algorithms take up some extra space and time as compared to DP.</li>\n<li>Memoization is possible only if an <strong>optimal substructure exists.</strong></li>\n</ul>\n<ol start=\"3\">\n<li>Dynamic Programming - Bottom-up approach</li>\n</ol>\n<p>We try to <strong>explicitly</strong> solve all the dependencies <strong>first</strong>, then we try to solve the harder problems, till we reach the required problem. Which can be solved as all previous ones have now been solved.</p>\n<ul>\n<li>DP(bottom-up) is usually iterative, since all dependencies are met at every point. **i.e **There’s no need of recursion.</li>\n<li>Bottom up <strong>does not mean</strong> that we **need **to start from the ‘starting point’ in the problem, bottom means starting from the concrete values, anywhere in the system.</li>\n<li>DP does not require initialization. As all value are written using the dependencies. If a value is to be written, it shall be, using the</li>\n</ul>\n<p>Problem solving strategy: We first write the naive recursive solution. Then we write the memoized approach. Then we refine it to DP by dependency analysis. We have to follow this now, until we develop the skill to directly write DP solutions. <strong>Don’t solve in one go, as this stops the learning process.</strong></p>\n",
      "id": 283
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/3._Min_Steps_to_1.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/3._Min_Steps_to_1.html",
      "content": "# 3. Min Steps to 1\nCreated Monday 09 March 2020\n\nGiven a positive integer n, find the minimum number of steps s, that takes n to 1. You can perform any one of the following 3 steps.\n\n1.) Subtract 1 from it. (n= n - ­1) ,\n2.) If its divisible by 2, divide by 2.( if n%2==0, then n= n/2 ) ,\n3.) If its divisible by 3, divide by 3. (if n%3 == 0, then n = n / 3 ).  \n\nWAP to do this.\nnote: The idea that 3 divides in the most basic parts, then divide by 2 then -1. This is **wrong, **as seen from a simple case of 10. This is because we do not know the factors of the numbers.\n\n*****\n\nSoln: We follow the three steps to get to DP.\n\n1. Bruteforce\n\t1. If n is 1 return 0, no steps required.\n\t2. Init n1 = n, n2 = n, n3 = n. This is the maximum value n1, n2 and n3 can have. So that there's no need for INT_MAX and minimum function can be handled easily.\n\t3. If n%2==0, n1 = f(n/2) + 1; // counting this step\n\t4. 2 and n3If n%3==0, n2 = f(n/3) +1; // counting this step\n\t5. n3 = f(n-1) + 1;\n\t6. return minimum(n1, n2, n3);\n2. Memoization - top down approach\n\n\n* We make an array for storing the primitive cases.\n* The size of the array is n+1. Initialize to all to -1. Except for (n=1, val=0).\n* Write a recursive solution.\n\n\n3. DP bottom up solution\n\n\n* We try to make all solutions which are from the concrete ones.\n* So for each number, we write the value 1 + f(i) at i+1, i*2 and i*3. But only if the values there are greater than the value we are going to write(i.e 1 + f(i)). This is because we want the least value for every node.\n* We cannot exit if we have got a value of f(n) as we need the minimum.\n* For each number, as the answer can include any of the numbers less than it.(This is true for all n), hence we need to take the minimum of all the values that are written.\n\nProof: \n\n* As concrete values are a minimum, they will generate the values(acc to the rules), which will be given to the targets. \n* Now some other value may become the source for the chain to the same node later on(i.e by some bigger node, proved by observation).\n* If this is less than the value for the previous it will be replaced. This is generalizable to any number of collisions(because we are finding the minimum). Hence the whole process will be required for producing f(n).\n* This finding the minimum is done implicitly, i.e it will happen as concreteness increases.\n* Hence we will generate concrete steps forward. And by similar progression f(n) will be made concrete. This process will end after n iterations with all the loops.\n\n\n* T.C = O(rules*n)\n\n\n",
      "html": "<h1 id=\"3.-min-steps-to-1\">3. Min Steps to 1 <a class=\"heading-anchor-permalink\" href=\"#3.-min-steps-to-1\">#</a></h1>\n<p>Created Monday 09 March 2020</p>\n<p>Given a positive integer n, find the minimum number of steps s, that takes n to 1. You can perform any one of the following 3 steps.</p>\n<p>1.) Subtract 1 from it. (n= n - ­1) ,\n2.) If its divisible by 2, divide by 2.( if n%2==0, then n= n/2 ) ,\n3.) If its divisible by 3, divide by 3. (if n%3 == 0, then n = n / 3 ).</p>\n<p>WAP to do this.\nnote: The idea that 3 divides in the most basic parts, then divide by 2 then -1. This is **wrong, **as seen from a simple case of 10. This is because we do not know the factors of the numbers.</p>\n<hr>\n<p>Soln: We follow the three steps to get to DP.</p>\n<ol>\n<li>Bruteforce\n<ol>\n<li>If n is 1 return 0, no steps required.</li>\n<li>Init n1 = n, n2 = n, n3 = n. This is the maximum value n1, n2 and n3 can have. So that there’s no need for INT_MAX and minimum function can be handled easily.</li>\n<li>If n%2==0, n1 = f(n/2) + 1; // counting this step</li>\n<li>2 and n3If n%3==0, n2 = f(n/3) +1; // counting this step</li>\n<li>n3 = f(n-1) + 1;</li>\n<li>return minimum(n1, n2, n3);</li>\n</ol>\n</li>\n<li>Memoization - top down approach</li>\n</ol>\n<ul>\n<li>We make an array for storing the primitive cases.</li>\n<li>The size of the array is n+1. Initialize to all to -1. Except for (n=1, val=0).</li>\n<li>Write a recursive solution.</li>\n</ul>\n<ol start=\"3\">\n<li>DP bottom up solution</li>\n</ol>\n<ul>\n<li>We try to make all solutions which are from the concrete ones.</li>\n<li>So for each number, we write the value 1 + f(i) at i+1, i<em>2 and i</em>3. But only if the values there are greater than the value we are going to write(i.e 1 + f(i)). This is because we want the least value for every node.</li>\n<li>We cannot exit if we have got a value of f(n) as we need the minimum.</li>\n<li>For each number, as the answer can include any of the numbers less than it.(This is true for all n), hence we need to take the minimum of all the values that are written.</li>\n</ul>\n<p>Proof:</p>\n<ul>\n<li>\n<p>As concrete values are a minimum, they will generate the values(acc to the rules), which will be given to the targets.</p>\n</li>\n<li>\n<p>Now some other value may become the source for the chain to the same node later on(i.e by some bigger node, proved by observation).</p>\n</li>\n<li>\n<p>If this is less than the value for the previous it will be replaced. This is generalizable to any number of collisions(because we are finding the minimum). Hence the whole process will be required for producing f(n).</p>\n</li>\n<li>\n<p>This finding the minimum is done implicitly, i.e it will happen as concreteness increases.</p>\n</li>\n<li>\n<p>Hence we will generate concrete steps forward. And by similar progression f(n) will be made concrete. This process will end after n iterations with all the loops.</p>\n</li>\n<li>\n<p>T.C = O(rules*n)</p>\n</li>\n</ul>\n",
      "id": 284
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/4._DP_summary.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/4._DP_summary.html",
      "content": "# 4. DP summary\nCreated Thursday 12 March 2020\n\nWith a basic observation of what was happening vs what should happen, we can do wonders. Dynamic Programming is really very clever and easy programming.\n\n\n* Make a bruteforce recursive solution.\n* Make a memoized.\n\n\nSteps to follow:\n\n1. Make an array.\n2. Initialize it if required, i.e for visited or unvisited mostly.\n3. Enter the concrete values into the array\n4. Decide the relationship between the answers and the question.\n\t1. What is the dependency.\n\t2. Is it counting or optimum. Here we check for the min or just add in case of counting.\n\t3. Are there multiple ways to reach the same answer, does it give the wrong thing, duplicacy etc. **Partly covered in counting vs optimum.**\n\t4. Can values be skipped, this will drastically reduce the array size.\n\t5. Write it iteratively.\n\t6. Most solutions give O(n) both space and time. Time is O(kn) in most case for some case/constraint dependent n;\n\n\n",
      "html": "<h1 id=\"4.-dp-summary\">4. DP summary <a class=\"heading-anchor-permalink\" href=\"#4.-dp-summary\">#</a></h1>\n<p>Created Thursday 12 March 2020</p>\n<p>With a basic observation of what was happening vs what should happen, we can do wonders. Dynamic Programming is really very clever and easy programming.</p>\n<ul>\n<li>Make a bruteforce recursive solution.</li>\n<li>Make a memoized.</li>\n</ul>\n<p>Steps to follow:</p>\n<ol>\n<li>Make an array.</li>\n<li>Initialize it if required, i.e for visited or unvisited mostly.</li>\n<li>Enter the concrete values into the array</li>\n<li>Decide the relationship between the answers and the question.\n<ol>\n<li>What is the dependency.</li>\n<li>Is it counting or optimum. Here we check for the min or just add in case of counting.</li>\n<li>Are there multiple ways to reach the same answer, does it give the wrong thing, duplicacy etc. <strong>Partly covered in counting vs optimum.</strong></li>\n<li>Can values be skipped, this will drastically reduce the array size.</li>\n<li>Write it iteratively.</li>\n<li>Most solutions give O(n) both space and time. Time is O(kn) in most case for some case/constraint dependent n;</li>\n</ol>\n</li>\n</ol>\n",
      "id": 285
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/0_index.html",
      "content": "# 5. Practice Problems\nCreated Thursday 12 March 2020\n\n[Codes](./5._Practice_Problems/Codes)\n[Exercises.md](./5._Practice_Problems/Quizzes&Exercises/Exercises.md)\n[CodingExercises.md](./5._Practice_Problems/Quizzes&Exercises/CodingExercises.md)\n[Assignments.md](./5._Practice_Problems/zAssignments/Assignments.md)\n\n",
      "html": "<h1 id=\"5.-practice-problems\">5. Practice Problems <a class=\"heading-anchor-permalink\" href=\"#5.-practice-problems\">#</a></h1>\n<p>Created Thursday 12 March 2020</p>\n<p><a href=\"./5._Practice_Problems/Codes\">Codes</a>\n<a href=\"./5._Practice_Problems/Quizzes&amp;Exercises/Exercises.html\">Exercises.md</a>\n<a href=\"./5._Practice_Problems/Quizzes&amp;Exercises/CodingExercises.html\">CodingExercises.md</a>\n<a href=\"./5._Practice_Problems/zAssignments/Assignments.html\">Assignments.md</a></p>\n",
      "id": 286
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/1._Min_Cost_Path.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/1._Min_Cost_Path.html",
      "content": "# 1. Min Cost Path\nCreated Monday 16 March 2020\n\n[minCostPath.cpp](./Codes/minCostPath.cpp)\n\n",
      "html": "<h1 id=\"1.-min-cost-path\">1. Min Cost Path <a class=\"heading-anchor-permalink\" href=\"#1.-min-cost-path\">#</a></h1>\n<p>Created Monday 16 March 2020</p>\n<p><a href=\"./Codes/minCostPath.cpp\">minCostPath.cpp</a></p>\n",
      "id": 287
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/2._Largest_Common_Subsequence.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/2._Largest_Common_Subsequence.html",
      "content": "# 2. Largest Common Subsequence\nCreated Monday 16 March 2020\n\n[LCS.cpp](./Codes/LCS.cpp)\n\nIn LCS we use the basic methodology of string recursion. This works like a charm because at the end of the day. We can see only an atomic part of the string. \n\nEither the letter is present or it is not.\n\nIf  \nreturn 1 + LCS(a.substring(1), b.substr())\nelse\nreturn max(LCS(a.substr(1), b), LCS(a, b.substr(1))\n\n\n",
      "html": "<h1 id=\"2.-largest-common-subsequence\">2. Largest Common Subsequence <a class=\"heading-anchor-permalink\" href=\"#2.-largest-common-subsequence\">#</a></h1>\n<p>Created Monday 16 March 2020</p>\n<p><a href=\"./Codes/LCS.cpp\">LCS.cpp</a></p>\n<p>In LCS we use the basic methodology of string recursion. This works like a charm because at the end of the day. We can see only an atomic part of the string.</p>\n<p>Either the letter is present or it is not.</p>\n<p>If<br>\nreturn 1 + LCS(a.substring(1), b.substr())\nelse\nreturn max(LCS(a.substr(1), b), LCS(a, b.substr(1))</p>\n",
      "id": 288
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/3._Edit_Distance.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/3._Edit_Distance.html",
      "content": "# 3. Edit Distance\nCreated Thursday 19 March 2020\n\nQ) Given two strings, we need to return the minium number of ops required to make the m equal.\nAllowed operations are:\n\n1. Insert a character\n2. Remove a character\n3. Update/Replace character\n\n\nWe need to return the number of ops required for making the two string equal.\n\n",
      "html": "<h1 id=\"3.-edit-distance\">3. Edit Distance <a class=\"heading-anchor-permalink\" href=\"#3.-edit-distance\">#</a></h1>\n<p>Created Thursday 19 March 2020</p>\n<p>Q) Given two strings, we need to return the minium number of ops required to make the m equal.\nAllowed operations are:</p>\n<ol>\n<li>Insert a character</li>\n<li>Remove a character</li>\n<li>Update/Replace character</li>\n</ol>\n<p>We need to return the number of ops required for making the two string equal.</p>\n",
      "id": 289
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/4._NP_Completeness.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/6._Algorithm_Design/4._NP_Completeness.html",
      "content": "# 4. NP Completeness\nCreated Thursday 08 April 2021\n\nFIXME: I haven't studied this properly. Study it.\n\n",
      "html": "<h1 id=\"4.-np-completeness\">4. NP Completeness <a class=\"heading-anchor-permalink\" href=\"#4.-np-completeness\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<p>FIXME: I haven’t studied this properly. Study it.</p>\n",
      "id": 290
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/0_index.html",
      "content": "# 7. C++ Continued\nCreated Thursday 08 April 2021\n\nCoding Ninjas course had the following sections:\n\n1. [STL basics](5._Data_Structures/5._C++_STL.md)\n2. [Exception handling](7._C++_Continued/4._Exception_Handling.md)\n3. [8. OOP Continued](8._OOP_Continued.md) till friend functions.\n\n\nYou can skip other sections, for *now*.\n\n",
      "html": "<h1 id=\"7.-c%2B%2B-continued\">7. C++ Continued <a class=\"heading-anchor-permalink\" href=\"#7.-c%2B%2B-continued\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<p>Coding Ninjas course had the following sections:</p>\n<ol>\n<li><a href=\"5._Data_Structures/5._C++_STL.html\">STL basics</a></li>\n<li><a href=\"7._C++_Continued/4._Exception_Handling.html\">Exception handling</a></li>\n<li><a href=\"8._OOP_Continued.html\">8. OOP Continued</a> till friend functions.</li>\n</ol>\n<p>You can skip other sections, for <em>now</em>.</p>\n",
      "id": 291
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/1._Macros_and_Global_Variables/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/1._Macros_and_Global_Variables/0_index.html",
      "content": "# 1. Macros and Global Variables\n\nCreated Thursday 26 December 2019\n\n- We are going to learn a few keywords which help us write better code.\n- Reason for using these keywords: Whatever we have learnt till now, is correct. But when it comes to some use-cases, we found that other methods are better optimized and/or help in organization.\n- Format: Keyword along with syntax, reason and explanation.\n\n---\n\n#### Macros\n\n**Syntax: **\n\n```c++\n#define macro_template macro_expansion\n\n#define h \"Hello, world\" // example\n```\n\n**Reason/Motivation:**\nuse-case: Suppose we want to make a program which works with circles, we need to use π = 3.1416.\n\n- Now we can manually write 3.1416 everywhere in our code. That'll be too tedious to write, and difficult to change. It is also error prone, as a programmer may mess up the values at places.\n- We can use a global variable named pi = 3.1416. This will pollute the namespace.\n\n**Explanation(Working):**\nWe need the best of both world's, i.e both maintainance and performance/checking*for_correctness.\nWe use **#define**.\nConsider the known pre-procesor directive case, **#include**, this copies file content, from the header files. So we can use all the basic code.\n#define pi 3.14, is also a pre-processor directive. It **replaces** each 'pi' written in our code by 3.14. This is done before compilation, i.e the compiler is not involved.\n\\_It's basically text substitution in code, before compilation. Compiler will recieve code which has 3.14 written everywhere in place of pi.*\n**Note: **Any errors in the #define mostly go undetected.\n<https://www.geeksforgeeks.org/cc-preprocessors/>\n![](/assets/1._Macros_and_Global_Variables-image-1.png)\n**About Macros:**\n\n- Macro is a piece of code in a program which is given some label. Whenever this name(label) is encountered by the preprocessor, the label gets replaced by the actual piece of code. The ‘#define’ directive is used to define a macro.\n- In the above program, when the compiler executes the word LIMIT, it **replaces** it with 5. The **word** ‘LIMIT’ in the macro definition is called a **macro template** and ‘5’ is called the **macro expansion**.\n\n**Note**:\n\n- No semi-colon at the end of macro definition, as they are not statements.\n- There are two kinds of macros:\n\n  1.  Without argument\n\n  ```c++\n  #define pi 3.14\n  ```\n\n  1. With argument - Macros defined with arguments are similar to inline functions.\n\n  ```c++\n  #define AREA(l, b) l*b\n\n  // Template needs to be in f(a, b, c) form\n  /*\n  \tThere are two replacements here:\n  \t1. AREA(l*b) --> l*b\n  \t2. l*b --> 5*10\n  */\n  ```\n\n- Macros are pure copy and paste, so operator precedence should be taken care of.\n\ne.g AREA(2+3, 4+5) will be replaced by 2+3\\*4+5 = 2+12+5 =19\n\n---\n\n2. Global Variables\n\n**Syntax: **Just define the variable outside of outside of every function, i.e it'll be accessible anywhere(assuming it is not shadowed😆️).\n**Reason/Motivation:**\n\n- We can access modify the value anywhere.\n\n**Explanation(Working): **\nBasic declaration and memory allocation. It is saved in a different part of the code, it's lifetime is the same as that of the program.\n**About Global variables:**\nIt is a very **bad **practice to use global variables, if other ways like(call by reference are available). It can lead to very unintuitive scenarios, where we will have to check the whole program to find the bugs.\n**Conceptual problems: **This is conceptually problematic as a variable that is used by all, if mishandled by some function, can **jeopardize** the whole program.\n",
      "html": "<h1 id=\"1.-macros-and-global-variables\">1. Macros and Global Variables <a class=\"heading-anchor-permalink\" href=\"#1.-macros-and-global-variables\">#</a></h1>\n<p>Created Thursday 26 December 2019</p>\n<ul>\n<li>We are going to learn a few keywords which help us write better code.</li>\n<li>Reason for using these keywords: Whatever we have learnt till now, is correct. But when it comes to some use-cases, we found that other methods are better optimized and/or help in organization.</li>\n<li>Format: Keyword along with syntax, reason and explanation.</li>\n</ul>\n<hr>\n<h4 id=\"macros\">Macros <a class=\"heading-anchor-permalink\" href=\"#macros\">#</a></h4>\n<p>**Syntax: **</p>\n<pre><code class=\"language-c++\">#define macro_template macro_expansion\n\n#define h &quot;Hello, world&quot; // example\n</code></pre>\n<p><strong>Reason/Motivation:</strong>\nuse-case: Suppose we want to make a program which works with circles, we need to use π = 3.1416.</p>\n<ul>\n<li>Now we can manually write 3.1416 everywhere in our code. That’ll be too tedious to write, and difficult to change. It is also error prone, as a programmer may mess up the values at places.</li>\n<li>We can use a global variable named pi = 3.1416. This will pollute the namespace.</li>\n</ul>\n<p><strong>Explanation(Working):</strong>\nWe need the best of both world’s, i.e both maintainance and performance/checking<em>for_correctness.\nWe use <strong>#define</strong>.\nConsider the known pre-procesor directive case, <strong>#include</strong>, this copies file content, from the header files. So we can use all the basic code.\n#define pi 3.14, is also a pre-processor directive. It <strong>replaces</strong> each ‘pi’ written in our code by 3.14. This is done before compilation, i.e the compiler is not involved.\n_It’s basically text substitution in code, before compilation. Compiler will recieve code which has 3.14 written everywhere in place of pi.</em>\n**Note: **Any errors in the #define mostly go undetected.\n<a href=\"https://www.geeksforgeeks.org/cc-preprocessors/\">https://www.geeksforgeeks.org/cc-preprocessors/</a>\n<img src=\"/assets/1._Macros_and_Global_Variables-image-1.png\" alt=\"\">\n<strong>About Macros:</strong></p>\n<ul>\n<li>Macro is a piece of code in a program which is given some label. Whenever this name(label) is encountered by the preprocessor, the label gets replaced by the actual piece of code. The ‘#define’ directive is used to define a macro.</li>\n<li>In the above program, when the compiler executes the word LIMIT, it <strong>replaces</strong> it with 5. The <strong>word</strong> ‘LIMIT’ in the macro definition is called a <strong>macro template</strong> and ‘5’ is called the <strong>macro expansion</strong>.</li>\n</ul>\n<p><strong>Note</strong>:</p>\n<ul>\n<li>\n<p>No semi-colon at the end of macro definition, as they are not statements.</p>\n</li>\n<li>\n<p>There are two kinds of macros:</p>\n<ol>\n<li>Without argument</li>\n</ol>\n<pre><code class=\"language-c++\">#define pi 3.14\n</code></pre>\n<ol>\n<li>With argument - Macros defined with arguments are similar to inline functions.</li>\n</ol>\n<pre><code class=\"language-c++\">#define AREA(l, b) l*b\n\n// Template needs to be in f(a, b, c) form\n/*\n\tThere are two replacements here:\n\t1. AREA(l*b) --&gt; l*b\n\t2. l*b --&gt; 5*10\n*/\n</code></pre>\n</li>\n<li>\n<p>Macros are pure copy and paste, so operator precedence should be taken care of.</p>\n</li>\n</ul>\n<p>e.g AREA(2+3, 4+5) will be replaced by 2+3*4+5 = 2+12+5 =19</p>\n<hr>\n<ol start=\"2\">\n<li>Global Variables</li>\n</ol>\n<p>**Syntax: **Just define the variable outside of outside of every function, i.e it’ll be accessible anywhere(assuming it is not shadowed😆️).\n<strong>Reason/Motivation:</strong></p>\n<ul>\n<li>We can access modify the value anywhere.</li>\n</ul>\n<p>**Explanation(Working): **\nBasic declaration and memory allocation. It is saved in a different part of the code, it’s lifetime is the same as that of the program.\n<strong>About Global variables:</strong>\nIt is a very **bad **practice to use global variables, if other ways like(call by reference are available). It can lead to very unintuitive scenarios, where we will have to check the whole program to find the bugs.\n**Conceptual problems: **This is conceptually problematic as a variable that is used by all, if mishandled by some function, can <strong>jeopardize</strong> the whole program.</p>\n",
      "id": 292
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/1._Macros_and_Global_Variables/questionnaire5_6_7.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/1._Macros_and_Global_Variables/questionnaire5_6_7.html",
      "content": "# Lecture 5: Macros and Global Variables\n\n**What is the output of the following program?**\n\n    #include<iostream>\n    using namespace std;\n\n    int x = 1;\n\n    void print()\n    {\n        int x = 2;\n        {\n            int x = 3;\n            cout << x << endl;\n        }\n    }\n\n    int main()\n    {\n        print();\n        return 0;\n    }\n\n**Options**\n\n    a. 1\n    b. 2\n    c. 3\n    d. Error\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. 3\n    We declared variables at the innermost scope as the variables in the outer scope(s), hence the outer ones were 'shadwoed',\n    hence only variable in the nearest scope was printed. 3 in this case, inside a code-block.\n\n</details>\n\n---\n\n**What is the output of the following program?**\n\n    #include <iostream>\n    using namespace std;\n\n    #define MULTIPLY(a, b) a*b\n\n    int main()\n    {\n        cout << MULTIPLY(2+3, 3+5);\n        return 0;\n    }\n\n**Answer**\n\n    ____\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    2 + 3*3 + 5 = 16\n    \"MULTIPLY(a, b)\" will be replaced by \"a*b\" in code. So, MULTIPLY(2+3, 3+5) will be replaced by 2+3*3+5. And according to operator precedence, multiply operator (*) has higher precedence than plus operator (+). So, 3*3 will be evaluated first. Hence expression will become : 2+9+5 = 16\n\n</details>\n\n---\n\n**What is the output of the following program?**\n\n    #include <iostream>\n    using namespace std;\n\n    #define SQUARE(x) x*x\n\n    int main()\n    {\n        int x = 36 / SQUARE(6);\n        cout << x;\n        return 0;\n    }\n\n**Answer**\n\n    ____\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    After the #define directibve is completed.\n    We get int x = 36/6*6 = 36 / 6 * 6 = (36/6)*6 = 36 // paranthesisation is done by the compiler.\n    So 36 is printed.\n\n</details>\n\n---\n\n# Lecture 6: Inline and Default Arguments\n\n**Inline functions are useful when \\_\\_\\_\\_**\n\n**Options**\n\n    a. Function is large with many nested loops\n    b. Function has many static variables\n    c. Function is small and we want to avoid function call overhead.\n    d. None of the above\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. Function is small and we want to avoid function call overhead.\n    Obvious.\n\n</details>\n\n---\n\n**What is the output of the following program ?**\n\n    #include<iostream>\n    using namespace std;\n\n    int getValue(int x = 0, int y = 0, int z)\n    {\n        return (x + y + z);\n    }\n\n    int main()\n    {\n       cout << getValue(10);\n       return 0;\n    }\n\n**Options**\n\n    a. 10\n    b. 0\n    c. 20\n    d. Compilation Error\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. Function is small and we want to avoid function call overhead.\n    Obvious.\n\n</details>\n\n---\n\n**What is the output of the following program ?**\n\n    Which of the following statement is correct?\n\n**Options**\n\n    a. Only one parameter of a function can be a default parameter.\n    b. Minimum one parameter of a function must be a default parameter.\n    c. All the parameters of a function can be default parameters.\n    d. No parameter of a function can be default.\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. All the parameters of a function can be default parameters.\n    There's no restriction unless specified.\n\n</details>\n\n---\n\n# Lecture 6: Constant Variables\n\n**What is the output of the following program ?**\n\n    #include <iostream>\n    using namespace std;\n\n    int main()\n    {\n        int  const  p = 5;\n        cout << ++p;\n        return 0;\n    }\n\n**Options**\n\n    a. 5\n    b. 6\n    c. Error\n    d. Garbage\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. Error.\n    Basics. Non change at the address in symbol table.\n\n</details>\n\n---\n\n**What is the output of the following program ?**\n\n    #include <iostream>\n    using namespace std;\n\n    int main()\n    {\n        int p = 5;\n        int const *q = &p;\n        p++;\n        cout << p << endl;\n        return 0;\n    }\n\n**Options**\n\n    a. Error\n    b. 5\n    c. 6\n    d. None\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. 6\n    Rule 1: Memories cannot be tagged const.\n    Hence we can make a change through other paths(which just the old variable here).\n\n</details>\n\n---\n\n**Which statement(s) will give an error for the following code -**\n\n    #include <iostream>\n    using namespace std;\n\n    int main()\n    {\n        int p = 5;\n        int const *q = &p;\n    }\n\n**Options**\n\n    a. p++;\n    b. q++;\n    c. (*q)++;\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    c. (*q)++;\n    a. and b. will run without errors. Please read the declaration from right to left, we are protecting a int(through q), not the value we store in our pointer q. No restriction on the value of q.\n\n    p is anyway indepenedent.\n\n</details>\n\n---\n\n**Which statement(s) will give an error for the following code -**\n\n    #include <iostream>\n    using namespace std;\n\n    int main()\n    {\n        int p = 5;\n        int * const q = &p;\n    }\n\n**Options**\n\n    a. p++;\n    b. q++;\n    c. (*q)++;\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. q++\n    When the declaration is read, then we can see that we are protecting q from change, so memory at the address is changeable.\n\n    p is anyway independent.\n\n</details>\n\n---\n\n**Which statement(s) will give an error for the following code -**\n\n    #include <iostream>\n    using namespace std;\n\n    int main()\n    {\n        int p = 5;\n        int const * const q = &p;\n    }\n\n**Options**\n\n    a. p++;\n    b. q++;\n    c. (*q)++;\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    b. (*q)++ and c. q++\n    Reading the declaration, both the CHANGE OF q and the VALUE AT q are const.\n\n    p is anyway independent.\n\n</details>\n\n---\n\n**Which statement(s) will give an error for the following code -**\n\n    #include <iostream>\n    using namespace std;\n\n    int main()\n    {\n        const int p = 5;\n        int const *q = &p;\n    }\n\n**Options**\n\n    a. p++;\n    b. q++;\n    c. (*q)++;\n\n<details> <summary><strong>Correct Answer</strong></summary>\n\n    a. p++ and c. (*q)++\n    Value at p is const. So p++ will give and error.\n\n    Value pointed by q is also const, so changing value through q is also an error.\n\n    But changing q's value is still allowed.\n\n</details>\n\n---\n",
      "html": "<h1 id=\"lecture-5%3A-macros-and-global-variables\">Lecture 5: Macros and Global Variables <a class=\"heading-anchor-permalink\" href=\"#lecture-5%3A-macros-and-global-variables\">#</a></h1>\n<p><strong>What is the output of the following program?</strong></p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint x = 1;\n\nvoid print()\n{\n    int x = 2;\n    {\n        int x = 3;\n        cout &lt;&lt; x &lt;&lt; endl;\n    }\n}\n\nint main()\n{\n    print();\n    return 0;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 1\nb. 2\nc. 3\nd. Error\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. 3\nWe declared variables at the innermost scope as the variables in the outer scope(s), hence the outer ones were 'shadwoed',\nhence only variable in the nearest scope was printed. 3 in this case, inside a code-block.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output of the following program?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n#define MULTIPLY(a, b) a*b\n\nint main()\n{\n    cout &lt;&lt; MULTIPLY(2+3, 3+5);\n    return 0;\n}\n</code></pre>\n<p><strong>Answer</strong></p>\n<pre><code>____\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>2 + 3*3 + 5 = 16\n&quot;MULTIPLY(a, b)&quot; will be replaced by &quot;a*b&quot; in code. So, MULTIPLY(2+3, 3+5) will be replaced by 2+3*3+5. And according to operator precedence, multiply operator (*) has higher precedence than plus operator (+). So, 3*3 will be evaluated first. Hence expression will become : 2+9+5 = 16\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output of the following program?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n#define SQUARE(x) x*x\n\nint main()\n{\n    int x = 36 / SQUARE(6);\n    cout &lt;&lt; x;\n    return 0;\n}\n</code></pre>\n<p><strong>Answer</strong></p>\n<pre><code>____\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>After the #define directibve is completed.\nWe get int x = 36/6*6 = 36 / 6 * 6 = (36/6)*6 = 36 // paranthesisation is done by the compiler.\nSo 36 is printed.\n</code></pre>\n</details>\n<hr>\n<h1 id=\"lecture-6%3A-inline-and-default-arguments\">Lecture 6: Inline and Default Arguments <a class=\"heading-anchor-permalink\" href=\"#lecture-6%3A-inline-and-default-arguments\">#</a></h1>\n<p><strong>Inline functions are useful when ____</strong></p>\n<p><strong>Options</strong></p>\n<pre><code>a. Function is large with many nested loops\nb. Function has many static variables\nc. Function is small and we want to avoid function call overhead.\nd. None of the above\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. Function is small and we want to avoid function call overhead.\nObvious.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output of the following program ?</strong></p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint getValue(int x = 0, int y = 0, int z)\n{\n    return (x + y + z);\n}\n\nint main()\n{\n   cout &lt;&lt; getValue(10);\n   return 0;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 10\nb. 0\nc. 20\nd. Compilation Error\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. Function is small and we want to avoid function call overhead.\nObvious.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output of the following program ?</strong></p>\n<pre><code>Which of the following statement is correct?\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Only one parameter of a function can be a default parameter.\nb. Minimum one parameter of a function must be a default parameter.\nc. All the parameters of a function can be default parameters.\nd. No parameter of a function can be default.\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. All the parameters of a function can be default parameters.\nThere's no restriction unless specified.\n</code></pre>\n</details>\n<hr>\n<h1 id=\"lecture-6%3A-constant-variables\">Lecture 6: Constant Variables <a class=\"heading-anchor-permalink\" href=\"#lecture-6%3A-constant-variables\">#</a></h1>\n<p><strong>What is the output of the following program ?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int  const  p = 5;\n    cout &lt;&lt; ++p;\n    return 0;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. 5\nb. 6\nc. Error\nd. Garbage\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. Error.\nBasics. Non change at the address in symbol table.\n</code></pre>\n</details>\n<hr>\n<p><strong>What is the output of the following program ?</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int p = 5;\n    int const *q = &amp;p;\n    p++;\n    cout &lt;&lt; p &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. Error\nb. 5\nc. 6\nd. None\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. 6\nRule 1: Memories cannot be tagged const.\nHence we can make a change through other paths(which just the old variable here).\n</code></pre>\n</details>\n<hr>\n<p><strong>Which statement(s) will give an error for the following code -</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int p = 5;\n    int const *q = &amp;p;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. p++;\nb. q++;\nc. (*q)++;\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>c. (*q)++;\na. and b. will run without errors. Please read the declaration from right to left, we are protecting a int(through q), not the value we store in our pointer q. No restriction on the value of q.\n\np is anyway indepenedent.\n</code></pre>\n</details>\n<hr>\n<p><strong>Which statement(s) will give an error for the following code -</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int p = 5;\n    int * const q = &amp;p;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. p++;\nb. q++;\nc. (*q)++;\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. q++\nWhen the declaration is read, then we can see that we are protecting q from change, so memory at the address is changeable.\n\np is anyway independent.\n</code></pre>\n</details>\n<hr>\n<p><strong>Which statement(s) will give an error for the following code -</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int p = 5;\n    int const * const q = &amp;p;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. p++;\nb. q++;\nc. (*q)++;\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>b. (*q)++ and c. q++\nReading the declaration, both the CHANGE OF q and the VALUE AT q are const.\n\np is anyway independent.\n</code></pre>\n</details>\n<hr>\n<p><strong>Which statement(s) will give an error for the following code -</strong></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    const int p = 5;\n    int const *q = &amp;p;\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<pre><code>a. p++;\nb. q++;\nc. (*q)++;\n</code></pre>\n<details> <summary><strong>Correct Answer</strong></summary>\n<pre><code>a. p++ and c. (*q)++\nValue at p is const. So p++ will give and error.\n\nValue pointed by q is also const, so changing value through q is also an error.\n\nBut changing q's value is still allowed.\n</code></pre>\n</details>\n<hr>\n",
      "id": 293
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/2._Inline_and_Default_Arguments.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/2._Inline_and_Default_Arguments.html",
      "content": "# 2. Inline and Default Arguments\nCreated Thursday 26 December 2019\n\nSome more helpul things in cpp.\n\n#### Ternary operator\nThis is used to write if else loop(s) in a concise way.\n```c++\nlogical_expression ? value1 : value2;\n```\n\n* [Nesting](https://www.geeksforgeeks.org/c-nested-ternary-operator/) is possible.\n\n**Use-cases: \t**\n\n1. During assignment;\n2. For general cases, in cout, cin etc. Prefer to use parentheses to avoid confusion.\n\n**Disadvantage: **The readability decreases, while performance is the same as using if else. It should be used only for simple statements.\n\n#### Inline functions\n```c++\ninline f(int a)\n{\n\t// some code\n}\n```\n**Case**: Suppose we the maximum of two integers, but for such a small thing, calling a function would be an unnecessary overhead.\nThere's something called inline functions, where our code is expanded at the place of the function call(called **in-place expansion**).\n**Expansion criteria: **The compiler decides if the function is suitable for expanding inline or performing a normal function call. If the function is bulkier, then the compiler will treat the function as a normal function, and no in-place expansion will take place. So using **inline **is only a **request**, and does not guarantee if the compiler will perform in-place expansion for the function.\n\n* worth reading <https://www.geeksforgeeks.org/inline-functions-cpp/>\n\n**Q) **Why don't we use all functions as inline irrespective of size, i.e why to use normal functions.\n**A) **This is logic not helpful, because in-place expansion **does **increase the **size of the executable **file, which can be a bottleneck at many platforms. Like Arduino etc, where memory is **expensive/less**.\n\n* Functions have their own significance, i.e to improve readability, optimize performance and executable size, easy debugging etc. **Inline **functions cannot take their place.\n\n\n#### Default arguments\n\n* We can make arguments optional by providing some value. Achieved using default arguments.\n* The value can be anything, literal or otherwise.\n\n**Rules**\n\n* The formal parameters are assigned from left to right during call.\n* The default parameters are **must be at end(rightmost)** of the argument list. Else the program will **not **compile.\n```c++\nint f(int x =0, int y = 0, int z) # error\n```\n**Syntax:**\n\n* If prototyped, default args should be mentioned **only** in the function **declaration**. Writing them again is an error.\n```c++\nvoid f(int=2, int=23); // omitting variable name is OK\n\nint main(){\tf(); return 0}\n\nvoid f(int x, int y){} \t\t// OK\nvoid f(int x=2, int y=23){} // error\n```\nIf no prototyping is done, then include the default args.\n\n**Caution**\n\n* When overloading a function, make sure that there's no ambiguity.\n```c++\nint sum(int x, int y, int z = 0);\nint sum(int x, int y, float z = 0.0);\nint main()\n{\n\tsum(1,2,3); // ambiguos - int(3) or float(3), can't decide\n}\nint f(int x=2, int y=3) {}\nint f(){}\nint main()\n{\n\tf(); // ambiguous f(x=2, y=3) or f()\n}\n```\n\n* Default arguments cannot be the previous parameters, but global variables may be used as default. This is allowed though, for template parameters.\n\n\nExamples of default aguments:\n```c++\n// global variables\nint glob = 2;\nvoid i(int x=glob){}\n\n// other functions\nint g(){ return 2;};\nvoid f(int h=g()){} // another function - OK\n```\n",
      "html": "<h1 id=\"2.-inline-and-default-arguments\">2. Inline and Default Arguments <a class=\"heading-anchor-permalink\" href=\"#2.-inline-and-default-arguments\">#</a></h1>\n<p>Created Thursday 26 December 2019</p>\n<p>Some more helpul things in cpp.</p>\n<h4 id=\"ternary-operator\">Ternary operator <a class=\"heading-anchor-permalink\" href=\"#ternary-operator\">#</a></h4>\n<p>This is used to write if else loop(s) in a concise way.</p>\n<pre><code class=\"language-c++\">logical_expression ? value1 : value2;\n</code></pre>\n<ul>\n<li><a href=\"https://www.geeksforgeeks.org/c-nested-ternary-operator/\">Nesting</a> is possible.</li>\n</ul>\n<p>**Use-cases: \t**</p>\n<ol>\n<li>During assignment;</li>\n<li>For general cases, in cout, cin etc. Prefer to use parentheses to avoid confusion.</li>\n</ol>\n<p>**Disadvantage: **The readability decreases, while performance is the same as using if else. It should be used only for simple statements.</p>\n<h4 id=\"inline-functions\">Inline functions <a class=\"heading-anchor-permalink\" href=\"#inline-functions\">#</a></h4>\n<pre><code class=\"language-c++\">inline f(int a)\n{\n\t// some code\n}\n</code></pre>\n<p><strong>Case</strong>: Suppose we the maximum of two integers, but for such a small thing, calling a function would be an unnecessary overhead.\nThere’s something called inline functions, where our code is expanded at the place of the function call(called <strong>in-place expansion</strong>).\n**Expansion criteria: **The compiler decides if the function is suitable for expanding inline or performing a normal function call. If the function is bulkier, then the compiler will treat the function as a normal function, and no in-place expansion will take place. So using **inline **is only a <strong>request</strong>, and does not guarantee if the compiler will perform in-place expansion for the function.</p>\n<ul>\n<li>worth reading <a href=\"https://www.geeksforgeeks.org/inline-functions-cpp/\">https://www.geeksforgeeks.org/inline-functions-cpp/</a></li>\n</ul>\n<p>**Q) **Why don’t we use all functions as inline irrespective of size, i.e why to use normal functions.\n**A) **This is logic not helpful, because in-place expansion **does **increase the **size of the executable **file, which can be a bottleneck at many platforms. Like Arduino etc, where memory is <strong>expensive/less</strong>.</p>\n<ul>\n<li>Functions have their own significance, i.e to improve readability, optimize performance and executable size, easy debugging etc. **Inline **functions cannot take their place.</li>\n</ul>\n<h4 id=\"default-arguments\">Default arguments <a class=\"heading-anchor-permalink\" href=\"#default-arguments\">#</a></h4>\n<ul>\n<li>We can make arguments optional by providing some value. Achieved using default arguments.</li>\n<li>The value can be anything, literal or otherwise.</li>\n</ul>\n<p><strong>Rules</strong></p>\n<ul>\n<li>The formal parameters are assigned from left to right during call.</li>\n<li>The default parameters are <strong>must be at end(rightmost)</strong> of the argument list. Else the program will **not **compile.</li>\n</ul>\n<pre><code class=\"language-c++\">int f(int x =0, int y = 0, int z) # error\n</code></pre>\n<p><strong>Syntax:</strong></p>\n<ul>\n<li>If prototyped, default args should be mentioned <strong>only</strong> in the function <strong>declaration</strong>. Writing them again is an error.</li>\n</ul>\n<pre><code class=\"language-c++\">void f(int=2, int=23); // omitting variable name is OK\n\nint main(){\tf(); return 0}\n\nvoid f(int x, int y){} \t\t// OK\nvoid f(int x=2, int y=23){} // error\n</code></pre>\n<p>If no prototyping is done, then include the default args.</p>\n<p><strong>Caution</strong></p>\n<ul>\n<li>When overloading a function, make sure that there’s no ambiguity.</li>\n</ul>\n<pre><code class=\"language-c++\">int sum(int x, int y, int z = 0);\nint sum(int x, int y, float z = 0.0);\nint main()\n{\n\tsum(1,2,3); // ambiguos - int(3) or float(3), can't decide\n}\nint f(int x=2, int y=3) {}\nint f(){}\nint main()\n{\n\tf(); // ambiguous f(x=2, y=3) or f()\n}\n</code></pre>\n<ul>\n<li>Default arguments cannot be the previous parameters, but global variables may be used as default. This is allowed though, for template parameters.</li>\n</ul>\n<p>Examples of default aguments:</p>\n<pre><code class=\"language-c++\">// global variables\nint glob = 2;\nvoid i(int x=glob){}\n\n// other functions\nint g(){ return 2;};\nvoid f(int h=g()){} // another function - OK\n</code></pre>\n",
      "id": 294
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/3._const_and_constexpr.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/3._const_and_constexpr.html",
      "content": "# 3. const and constexpr\nCreated Thursday 26 December 2019\n\n**Constant variables: **It's weird, we are apparently interested making variables, whose the value is unchangeable. **This is not the case.**\n\n\n* ``const`` when treated as constant is a misnomer.\n* This is not constant, as in mathematics. Memory, read and write is involved here.\n* ``const`` means roughly ‘‘I promise not to change this value’’. We are speaking of the future here.\n\n\n**Syntax**\n```c++\nconst int p = 2; // instant initialization is necessary - results in error\n```\n\n**How does it works?**\nIn the symbol table, we have many fields like**:**\n\n* Data type modifier are together with the data type. They are not a different field - (signed, unsigned, long, short).\n* Access specifiers are useful only in OOP - (public, private, friend)\n* Variable type specifier - These restrict operation on the variables(i.e read only, restricted write etc), hence qualifies them for different treatment w.r.t modification - (**const**, volatile, extern, auto).\n\n\n**What does it do?**\nconst means **read only** for the variable, this is what is put in the symbol table.\nThey cannot be changes after they have been declarized.\n\n#### Important concepts\n\n* If we use a const int* to make a** pointer to a const integer**(i.e we will not change it), or by using **constant** **reference**, then the value in RAM can be changed(by other variables only), coz only the **path **was made const, not the memory storage.\n```c++\nint x = 2;\nconst int *p = &x;\nx = 3;\t// can change memory- OK\n*p = 23; // error - change not allowed at using p\ncout << *p; // prints 3\n```\n\n* const reference\n```c++\nint a = 12;\nconst int &k = a; // k is alias for integer constant(same as constant integer)\na++;       // OK\nk++;       // error\ncout << k; // 13\n```\n\n**Reason: **When we made a const int &, we copied the address to a new tuple in the symbol table, changed the name to k, and made the type qualifier as const. This makes it look as if k is a const variable. Hence no operations are allowed **through **it.\n\n* 'a' is not const, so changes are possible **through **it.\n* **const only bind the read/write access. Nothing else.**\n* const pointer behaves the same as const reference. We cannot change the value(i.e memory location) through the pointer.\n\n\n#### Questions\n**Q) **Does the compiler allow ``const int* p = int*``(and vice-versa), why?\n**A) **``const int* p = int*``, yes. Because **const** just makes a promise of immutability for a new variable, i.e we cannot restrict existing variables. In this case, we'll not be able to change the contents using the 'p'. In other words, **making a promise is allowed**.\nThe converse, i.e int * = const int*, no. // i.e this is **not allowed**. Because this will actually break the promise, i.e **breaking a promise is not allowed**.\n\n**Q)** Is this allowed?\n```c++\nint i = 10, j = 12;\nint const *p = &i; // change not allowed through p\np = &j; // but p can itself be changed.\n```\n\n**A) Yes,** valid because const restricts writing at the **address**. But changing the address itself **is** allowed, because we never promised about it. In step 3, we should read from right to left, for the declaration, \"I am p, i will not make change at the address I store, **but **I can change the address itself.\n\nNote\n\n* For restricting change to the pointer, but allow writing to address\n```c++\nint * const p = &i; // p is a pointer(which we won't change) to an integer\n// Here p itself is unchangeable\n// But we can change the value at p.\n```\n\n* If we want to keep both the pointer and the value immutable, do this:\n```c++\nint const * const p = &i; // Neither address nor value at address changeable.\n```\n\n* **Verdict : **``const`` is very intuitive when seen from a symbol table. But it's not required.\n\nConcise.\n\n1. Only paths(through) are blocked. Storage can never be tagged constant.\n2. We can make promises of immutability, but not do something that will break them. **Remember that** the compiler does not track memory, it only has the symbol table.\n3. [Read](https://developerinsider.co/what-is-the-difference-between-const-int-and-int-const/) the declaration from right to left.(One const can only put one restriction).\n4. Use east const style.\n5. *const data_type* and *data_type const* is the same. For any case. Even if you use & and *.\n\n**Advantages: **\n\n1. We used reference to decrease the argument copy overhead. by avoiding a pointer. By using const data_type, we protect it further. **Hence **we find const int at [many places](https://stackoverflow.com/questions/162480/const-int-vs-int-const-as-function-parameter-in-c-and-c) in headers like iostream and STL.\n2. Point 1 helps immensely in funtion calling.\n\n\nconstexpr\n---------\nConsider the following code - here there's no optimizations that the compiler can make to age. This is because its value is known only at run-time.\n```c++\nint ageInput;\ncin >> ageInput;\nconst age = ageInput; // age cannot be changed\n```\n\n\nBut if we are sure of a value at compile time, then use ``constexpr``\n```c++\nint ageInput;\ncin >> ageInput;\nconstexpr age = ageInput; // age cannot change\n// compiler optimization possible\n```\n\n**Note:**\n\n* Difference\n\t* ``constexpr`` indicates a value that's constant and known during compilation.\n\t* ``const`` indicates a value that's only constant; it's not compulsory to know during compilation.\n* All constexpr objects are const, but not all const objects are constexpr.\n* constexpr just enables compiler optimization.\n\n\n",
      "html": "<h1 id=\"3.-const-and-constexpr\">3. const and constexpr <a class=\"heading-anchor-permalink\" href=\"#3.-const-and-constexpr\">#</a></h1>\n<p>Created Thursday 26 December 2019</p>\n<p>**Constant variables: **It’s weird, we are apparently interested making variables, whose the value is unchangeable. <strong>This is not the case.</strong></p>\n<ul>\n<li><code>const</code> when treated as constant is a misnomer.</li>\n<li>This is not constant, as in mathematics. Memory, read and write is involved here.</li>\n<li><code>const</code> means roughly ‘‘I promise not to change this value’’. We are speaking of the future here.</li>\n</ul>\n<p><strong>Syntax</strong></p>\n<pre><code class=\"language-c++\">const int p = 2; // instant initialization is necessary - results in error\n</code></pre>\n<p><strong>How does it works?</strong>\nIn the symbol table, we have many fields like**:**</p>\n<ul>\n<li>Data type modifier are together with the data type. They are not a different field - (signed, unsigned, long, short).</li>\n<li>Access specifiers are useful only in OOP - (public, private, friend)</li>\n<li>Variable type specifier - These restrict operation on the variables(i.e read only, restricted write etc), hence qualifies them for different treatment w.r.t modification - (<strong>const</strong>, volatile, extern, auto).</li>\n</ul>\n<p><strong>What does it do?</strong>\nconst means <strong>read only</strong> for the variable, this is what is put in the symbol table.\nThey cannot be changes after they have been declarized.</p>\n<h4 id=\"important-concepts\">Important concepts <a class=\"heading-anchor-permalink\" href=\"#important-concepts\">#</a></h4>\n<ul>\n<li>If we use a const int* to make a** pointer to a const integer**(i.e we will not change it), or by using <strong>constant</strong> <strong>reference</strong>, then the value in RAM can be changed(by other variables only), coz only the **path **was made const, not the memory storage.</li>\n</ul>\n<pre><code class=\"language-c++\">int x = 2;\nconst int *p = &amp;x;\nx = 3;\t// can change memory- OK\n*p = 23; // error - change not allowed at using p\ncout &lt;&lt; *p; // prints 3\n</code></pre>\n<ul>\n<li>const reference</li>\n</ul>\n<pre><code class=\"language-c++\">int a = 12;\nconst int &amp;k = a; // k is alias for integer constant(same as constant integer)\na++;       // OK\nk++;       // error\ncout &lt;&lt; k; // 13\n</code></pre>\n<p>**Reason: **When we made a const int &amp;, we copied the address to a new tuple in the symbol table, changed the name to k, and made the type qualifier as const. This makes it look as if k is a const variable. Hence no operations are allowed **through **it.</p>\n<ul>\n<li>‘a’ is not const, so changes are possible **through **it.</li>\n<li><strong>const only bind the read/write access. Nothing else.</strong></li>\n<li>const pointer behaves the same as const reference. We cannot change the value(i.e memory location) through the pointer.</li>\n</ul>\n<h4 id=\"questions\">Questions <a class=\"heading-anchor-permalink\" href=\"#questions\">#</a></h4>\n<p>**Q) **Does the compiler allow <code>const int* p = int*</code>(and vice-versa), why?\n**A) *<em><code>const int* p = int*</code>, yes. Because <strong>const</strong> just makes a promise of immutability for a new variable, i.e we cannot restrict existing variables. In this case, we’ll not be able to change the contents using the ‘p’. In other words, <strong>making a promise is allowed</strong>.\nThe converse, i.e int * = const int</em>, no. // i.e this is <strong>not allowed</strong>. Because this will actually break the promise, i.e <strong>breaking a promise is not allowed</strong>.</p>\n<p><strong>Q)</strong> Is this allowed?</p>\n<pre><code class=\"language-c++\">int i = 10, j = 12;\nint const *p = &amp;i; // change not allowed through p\np = &amp;j; // but p can itself be changed.\n</code></pre>\n<p><strong>A) Yes,</strong> valid because const restricts writing at the <strong>address</strong>. But changing the address itself <strong>is</strong> allowed, because we never promised about it. In step 3, we should read from right to left, for the declaration, &quot;I am p, i will not make change at the address I store, **but **I can change the address itself.</p>\n<p>Note</p>\n<ul>\n<li>For restricting change to the pointer, but allow writing to address</li>\n</ul>\n<pre><code class=\"language-c++\">int * const p = &amp;i; // p is a pointer(which we won't change) to an integer\n// Here p itself is unchangeable\n// But we can change the value at p.\n</code></pre>\n<ul>\n<li>If we want to keep both the pointer and the value immutable, do this:</li>\n</ul>\n<pre><code class=\"language-c++\">int const * const p = &amp;i; // Neither address nor value at address changeable.\n</code></pre>\n<ul>\n<li>**Verdict : **<code>const</code> is very intuitive when seen from a symbol table. But it’s not required.</li>\n</ul>\n<p>Concise.</p>\n<ol>\n<li>Only paths(through) are blocked. Storage can never be tagged constant.</li>\n<li>We can make promises of immutability, but not do something that will break them. <strong>Remember that</strong> the compiler does not track memory, it only has the symbol table.</li>\n<li><a href=\"https://developerinsider.co/what-is-the-difference-between-const-int-and-int-const/\">Read</a> the declaration from right to left.(One const can only put one restriction).</li>\n<li>Use east const style.</li>\n<li><em>const data_type</em> and <em>data_type const</em> is the same. For any case. Even if you use &amp; and *.</li>\n</ol>\n<p>**Advantages: **</p>\n<ol>\n<li>We used reference to decrease the argument copy overhead. by avoiding a pointer. By using const data_type, we protect it further. **Hence **we find const int at <a href=\"https://stackoverflow.com/questions/162480/const-int-vs-int-const-as-function-parameter-in-c-and-c\">many places</a> in headers like iostream and STL.</li>\n<li>Point 1 helps immensely in funtion calling.</li>\n</ol>\n<h2 id=\"constexpr\">constexpr <a class=\"heading-anchor-permalink\" href=\"#constexpr\">#</a></h2>\n<p>Consider the following code - here there’s no optimizations that the compiler can make to age. This is because its value is known only at run-time.</p>\n<pre><code class=\"language-c++\">int ageInput;\ncin &gt;&gt; ageInput;\nconst age = ageInput; // age cannot be changed\n</code></pre>\n<p>But if we are sure of a value at compile time, then use <code>constexpr</code></p>\n<pre><code class=\"language-c++\">int ageInput;\ncin &gt;&gt; ageInput;\nconstexpr age = ageInput; // age cannot change\n// compiler optimization possible\n</code></pre>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Difference\n<ul>\n<li><code>constexpr</code> indicates a value that’s constant and known during compilation.</li>\n<li><code>const</code> indicates a value that’s only constant; it’s not compulsory to know during compilation.</li>\n</ul>\n</li>\n<li>All constexpr objects are const, but not all const objects are constexpr.</li>\n<li>constexpr just enables compiler optimization.</li>\n</ul>\n",
      "id": 295
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/4._Exception_Handling/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/7._C++_Continued/4._Exception_Handling/0_index.html",
      "content": "# 4. Exception Handling\nCreated Monday 27 April 2020\n\n[Exception_Handling CN Official Notes](4._Exception_Handling/Exception_Handling.pdf)\n\n\n* Exception handling increases maintainability as it seperates errors/exception from intermingling with the logic. i.e error handling is done seperately.\n* Error handling does not do implicit conversions.\n* It's like a switch case.\n* throw is like return.\n* We can form a hierarchy of try throw and catch.\n* try must contain throw inside, catch must be in the same scope as try.\n* catch(...) should be placed last it is like a default case in switch.\n* Every object inside the try is destroyed before going to catch, just like normal *return* in functions.\n* We can define our own exceptions by inheriting from the exception class <exception> should be included.\n* Everything created **inside** the catch block is destructed before going to the catch block, so we **cannot **access the value made inside the catch.\n\n\n",
      "html": "<h1 id=\"4.-exception-handling\">4. Exception Handling <a class=\"heading-anchor-permalink\" href=\"#4.-exception-handling\">#</a></h1>\n<p>Created Monday 27 April 2020</p>\n<p><a href=\"4._Exception_Handling/Exception_Handling.pdf\">Exception_Handling CN Official Notes</a></p>\n<ul>\n<li>Exception handling increases maintainability as it seperates errors/exception from intermingling with the logic. i.e error handling is done seperately.</li>\n<li>Error handling does not do implicit conversions.</li>\n<li>It’s like a switch case.</li>\n<li>throw is like return.</li>\n<li>We can form a hierarchy of try throw and catch.</li>\n<li>try must contain throw inside, catch must be in the same scope as try.</li>\n<li>catch(…) should be placed last it is like a default case in switch.</li>\n<li>Every object inside the try is destroyed before going to catch, just like normal <em>return</em> in functions.</li>\n<li>We can define our own exceptions by inheriting from the exception class <exception> should be included.</li>\n<li>Everything created <strong>inside</strong> the catch block is destructed before going to the catch block, so we **cannot **access the value made inside the catch.</li>\n</ul>\n",
      "id": 296
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/0_index.html",
      "content": "# 8. OOP Continued\nCreated Sunday 26 April 2020\n\nWe know abou\n\n",
      "html": "<h1 id=\"8.-oop-continued\">8. OOP Continued <a class=\"heading-anchor-permalink\" href=\"#8.-oop-continued\">#</a></h1>\n<p>Created Sunday 26 April 2020</p>\n<p>We know abou</p>\n",
      "id": 297
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/0_index.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/0_index.html",
      "content": "# 1. Relations between classes\n\nCreated Sunday 31 January 2022\n\nFIXME: [Partially Useful](https://www.interviewbit.com/oops-interview-questions/#object-oriented-programming)\n\n### Why\n\nClasses are not used in isolation, they are used together and hence there exist some relations between them.\nIt's important to keep in mind that, essentially, classes are just a way to organize code.\n\nThere are various kind of relationships.\n![](/assets/1._Relations_between_classes-image-1.png)\n",
      "html": "<h1 id=\"1.-relations-between-classes\">1. Relations between classes <a class=\"heading-anchor-permalink\" href=\"#1.-relations-between-classes\">#</a></h1>\n<p>Created Sunday 31 January 2022</p>\n<p>FIXME: <a href=\"https://www.interviewbit.com/oops-interview-questions/#object-oriented-programming\">Partially Useful</a></p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>Classes are not used in isolation, they are used together and hence there exist some relations between them.\nIt’s important to keep in mind that, essentially, classes are just a way to organize code.</p>\n<p>There are various kind of relationships.\n<img src=\"/assets/1._Relations_between_classes-image-1.png\" alt=\"\"></p>\n",
      "id": 298
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/1_Inheritance_-_Concept.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/1_Inheritance_-_Concept.html",
      "content": "# 1. Inheritance - Concept\n\nCreated Sunday 26 April 2020\n\n### Why inheritance\n\n- Conceptually, inheritance is a way to derive a **more specific** concept from a general one.\n- Essentially, inheritance is a code reuse mechanism in OOP. It is used to avoid redundant code.\n\nFor example, if we can specify the concept (class actually) of a `Car` from a more general concept of `Vehicle`,`Car` will have all/most properties of `Vehicle`, although more information will be added to really make it a `Car`.\n![](/assets/1*Inheritance*-_Concept-image-1.png)\nSome more examples are Shape <-- Circle, Person <-- Student.\n\n- Due to reuse, one doesn't have to write the Horse again from scratch. And it's really useful if there are many animal classes that need to be derived from the class `Animal`.\n\n### How is inheritance done\n\n- Internally, the parent class's code is copied or made available to the specific class, except a few exceptions.\n- The derived class inherits **all** (with some exceptions) properties of the parent class, i.e. inheritance isn't selective. Additionally, we can override and add more stuff as needed.\n  ![](/assets/1*Inheritance*-_Concept-image-1.png)\n- The execptions (that are not inherited) are constructors, destructors and the copy assignment operator. The reason is that all these functions being general, don't have access to the added information in the derived class - the specific stuff (data members and member functions) of the derived class.\n- So they need to redefined. **Of course, they are still available to be called**, but they'll work on behalf of inherited stuff only, not the new stuff.\n",
      "html": "<h1 id=\"1.-inheritance---concept\">1. Inheritance - Concept <a class=\"heading-anchor-permalink\" href=\"#1.-inheritance---concept\">#</a></h1>\n<p>Created Sunday 26 April 2020</p>\n<h3 id=\"why-inheritance\">Why inheritance <a class=\"heading-anchor-permalink\" href=\"#why-inheritance\">#</a></h3>\n<ul>\n<li>Conceptually, inheritance is a way to derive a <strong>more specific</strong> concept from a general one.</li>\n<li>Essentially, inheritance is a code reuse mechanism in OOP. It is used to avoid redundant code.</li>\n</ul>\n<p>For example, if we can specify the concept (class actually) of a <code>Car</code> from a more general concept of <code>Vehicle</code>,<code>Car</code> will have all/most properties of <code>Vehicle</code>, although more information will be added to really make it a <code>Car</code>.\n<img src=\"/assets/1*Inheritance*-_Concept-image-1.png\" alt=\"\">\nSome more examples are Shape &lt;-- Circle, Person &lt;-- Student.</p>\n<ul>\n<li>Due to reuse, one doesn’t have to write the Horse again from scratch. And it’s really useful if there are many animal classes that need to be derived from the class <code>Animal</code>.</li>\n</ul>\n<h3 id=\"how-is-inheritance-done\">How is inheritance done <a class=\"heading-anchor-permalink\" href=\"#how-is-inheritance-done\">#</a></h3>\n<ul>\n<li>Internally, the parent class’s code is copied or made available to the specific class, except a few exceptions.</li>\n<li>The derived class inherits <strong>all</strong> (with some exceptions) properties of the parent class, i.e. inheritance isn’t selective. Additionally, we can override and add more stuff as needed.\n<img src=\"/assets/1*Inheritance*-_Concept-image-1.png\" alt=\"\"></li>\n<li>The execptions (that are not inherited) are constructors, destructors and the copy assignment operator. The reason is that all these functions being general, don’t have access to the added information in the derived class - the specific stuff (data members and member functions) of the derived class.</li>\n<li>So they need to redefined. <strong>Of course, they are still available to be called</strong>, but they’ll work on behalf of inherited stuff only, not the new stuff.</li>\n</ul>\n",
      "id": 299
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/2_Access_specifiers_in_inheritance.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/2_Access_specifiers_in_inheritance.html",
      "content": "# 2. Access specifiers in inheritance\n\n### The protected access specifier\n\nWe know public and private:\n\n- Private: Nobody except the class can access it, not even the derived classes.\n- Public: Anybody can access these members. Including derived classes.\n\nProtected: Only child classes can access these members. Simply said, they are like private except that they can be inherited to a derived class.\n![](/assets/2_Access_specifiers_in_inheritance-image-1.png)\n\nProtected example: Only vehicles and it's children can access the vehicle class's protected parts.\n![](/assets/2_Access_specifiers_in_inheritance-image-2.png)\n\n### Access specifier mode of inheritance\n\nAs said [[1_Inheritance_-_Concept |earlier]], _all_ members(other than selected exceptions) of the parent class are available in the derived class. **But what is happens to their access specifier?**\n\n- This is where access specifier mode needs to be specified.\n- So we need to specify the access specifier of the inherited members.\n\nThis is specified in the syntax.\n\nThe access mode specifies access specifier of the inherited members.\n\nThe rule is discussed [[3_Syntax |here]].\n\n### What happens to private members of parent class\n\n- Private members of the parent class become inacessible (directly) in the derived class.\n- Private members of the parent class are **still present and available** to use via public functions of the parent class.\n",
      "html": "<h1 id=\"2.-access-specifiers-in-inheritance\">2. Access specifiers in inheritance <a class=\"heading-anchor-permalink\" href=\"#2.-access-specifiers-in-inheritance\">#</a></h1>\n<h3 id=\"the-protected-access-specifier\">The protected access specifier <a class=\"heading-anchor-permalink\" href=\"#the-protected-access-specifier\">#</a></h3>\n<p>We know public and private:</p>\n<ul>\n<li>Private: Nobody except the class can access it, not even the derived classes.</li>\n<li>Public: Anybody can access these members. Including derived classes.</li>\n</ul>\n<p>Protected: Only child classes can access these members. Simply said, they are like private except that they can be inherited to a derived class.\n<img src=\"/assets/2_Access_specifiers_in_inheritance-image-1.png\" alt=\"\"></p>\n<p>Protected example: Only vehicles and it’s children can access the vehicle class’s protected parts.\n<img src=\"/assets/2_Access_specifiers_in_inheritance-image-2.png\" alt=\"\"></p>\n<h3 id=\"access-specifier-mode-of-inheritance\">Access specifier mode of inheritance <a class=\"heading-anchor-permalink\" href=\"#access-specifier-mode-of-inheritance\">#</a></h3>\n<p>As said [[1_Inheritance_-_Concept |earlier]], <em>all</em> members(other than selected exceptions) of the parent class are available in the derived class. <strong>But what is happens to their access specifier?</strong></p>\n<ul>\n<li>This is where access specifier mode needs to be specified.</li>\n<li>So we need to specify the access specifier of the inherited members.</li>\n</ul>\n<p>This is specified in the syntax.</p>\n<p>The access mode specifies access specifier of the inherited members.</p>\n<p>The rule is discussed [[3_Syntax |here]].</p>\n<h3 id=\"what-happens-to-private-members-of-parent-class\">What happens to private members of parent class <a class=\"heading-anchor-permalink\" href=\"#what-happens-to-private-members-of-parent-class\">#</a></h3>\n<ul>\n<li>Private members of the parent class become inacessible (directly) in the derived class.</li>\n<li>Private members of the parent class are <strong>still present and available</strong> to use via public functions of the parent class.</li>\n</ul>\n",
      "id": 300
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/3_Syntax.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/3_Syntax.html",
      "content": "# 3. Syntax\n\nCreated Sunday 26 April 2020\n\n### Syntax for inheritance\n\n- Use colon (`:`), followed by access specifier and parent class name. For multiple, separate using comma.\n- In regex - `class DerivedClassName : access_spec parent1, acesss_spec parent2`. Example:\n- If not specified, the default access specifier is `private`.\n- Colon can be read as 'as'. Example: `public Phone, protected MusicPlayer` means inherit `Phone` as `public`, `MusicPlayer` as protected.\n\nExample of syntax\n\n```c++\nclass Camera{ /*code*/ };\nclass Telephone{ /*code*/ };\n\nclass Smartphone : Camera, private Telephone\n{ /*code*/ };\n```\n\n- There's no limit to the number of base(aka parent classes).\n- Access specifiers are used to designate access level for inherited members from parent classes.\n\n### Rule for access specifier\n\n- Inheritance access controls follows a simple rule - accessibility cannot be increased.\n  ![](../../../../../../assets/3_Syntax-image-1.png)\n\n### Selective Inheritance\n\nWhat if we want to inherit as `public`, but keep some inherited members `private`?\nC++ allows selective inheritance. Just use the `using` keyword.\nExample\n\n```c++\n#include <iostream>\nusing namespace std;\nclass A\n{\n\tpublic:\n    \tvoid f(){}\n    \tvoid g();\n    \tvoid h();\n};\n// we want to inhertic h as public, rest as private\nclass B : private A\n{\n\tpublic:\n    \tusing A::f; // tagged as public\n    \tvoid f()\n    \t{\n        \tcout << \"B::f called\\n\";\n    \t}\n};\nint main()\n{\n    B obj;\n    obj.f(); // OK\n}\n```\n",
      "html": "<h1 id=\"3.-syntax\">3. Syntax <a class=\"heading-anchor-permalink\" href=\"#3.-syntax\">#</a></h1>\n<p>Created Sunday 26 April 2020</p>\n<h3 id=\"syntax-for-inheritance\">Syntax for inheritance <a class=\"heading-anchor-permalink\" href=\"#syntax-for-inheritance\">#</a></h3>\n<ul>\n<li>Use colon (<code>:</code>), followed by access specifier and parent class name. For multiple, separate using comma.</li>\n<li>In regex - <code>class DerivedClassName : access_spec parent1, acesss_spec parent2</code>. Example:</li>\n<li>If not specified, the default access specifier is <code>private</code>.</li>\n<li>Colon can be read as ‘as’. Example: <code>public Phone, protected MusicPlayer</code> means inherit <code>Phone</code> as <code>public</code>, <code>MusicPlayer</code> as protected.</li>\n</ul>\n<p>Example of syntax</p>\n<pre><code class=\"language-c++\">class Camera{ /*code*/ };\nclass Telephone{ /*code*/ };\n\nclass Smartphone : Camera, private Telephone\n{ /*code*/ };\n</code></pre>\n<ul>\n<li>There’s no limit to the number of base(aka parent classes).</li>\n<li>Access specifiers are used to designate access level for inherited members from parent classes.</li>\n</ul>\n<h3 id=\"rule-for-access-specifier\">Rule for access specifier <a class=\"heading-anchor-permalink\" href=\"#rule-for-access-specifier\">#</a></h3>\n<ul>\n<li>Inheritance access controls follows a simple rule - accessibility cannot be increased.\n<img src=\"../../../../../../assets/3_Syntax-image-1.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"selective-inheritance\">Selective Inheritance <a class=\"heading-anchor-permalink\" href=\"#selective-inheritance\">#</a></h3>\n<p>What if we want to inherit as <code>public</code>, but keep some inherited members <code>private</code>?\nC++ allows selective inheritance. Just use the <code>using</code> keyword.\nExample</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\nclass A\n{\n\tpublic:\n    \tvoid f(){}\n    \tvoid g();\n    \tvoid h();\n};\n// we want to inhertic h as public, rest as private\nclass B : private A\n{\n\tpublic:\n    \tusing A::f; // tagged as public\n    \tvoid f()\n    \t{\n        \tcout &lt;&lt; &quot;B::f called\\n&quot;;\n    \t}\n};\nint main()\n{\n    B obj;\n    obj.f(); // OK\n}\n</code></pre>\n",
      "id": 301
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/4_Overriding,_Overloading,_Delegation.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/4_Overriding,_Overloading,_Delegation.html",
      "content": "# 4. Overriding, Overloading, Delegation\n\nCreated Sunday 2 February 2022\n\n### Functions with same name as base class member\n\nAssume there's a public function named `run` in a class `Vehicle`.\nIf we inherit `Vehicle` publicly as `Car` and define a function `run` in it with the same signature as `Vehicle::run`, then calling `run` from main using a `Car` object calls `Car::run` and not `Vehicle::run`.\n\nThis is called member function overriding.\n\n- If there was no `Car::run`, calling `run` using `Car` object would actually call `Vehicle::run`.\n- Even after overriding, `run` from `Vehicle` is still available inside the derived class, but as `Vehicle::run` and not `run`, i.e. we have to name the base member function explicitly if it's overriden.\n\n```c++\nclass Vehicle {\n\tpublic:\n\t\tvoid run()\n\t\t{\n\t\t\tcout << \"Vehicle run called\\n\";\n\t\t}\n};\n\nclass Car : public Vehicle {\n\tpublic:\n\t\tvoid run()\n\t\t{\n\t\t\tcout << \"Derived run called\\n\";\n\t\t}\n\n\t\tvoid delegateRun()\n\t\t{\n\t\t\tVehicle::run();\n\t\t\t// still availale inside, but have to be explicit\n\t\t}\n};\n\nint main()\n{\n\tCar obj;\n\tobj.run(); // calls Car::run\n\n\tobj.delegateRun(); // calls Vehicle::run\n}\n```\n\n### Overloading of base member functions\n\nOverriding happens only if signature matches. If it doesn't, public members of the base class are available as usual.\n\n### Delegation of duty\n\n- Overidden and overloaded are still available in the derived class, but they must be called explicitly, i.e. with full name (`BaseClass::myMemberFunction()`).\n- A similar thing, called **invocation** is done for constructors, destructors and copy assignment operator This is heavily used in constructor and destructors, like so:\n\n```c++\nclass Vehicle\n{\n\tVehicle(); // assume constructor defined\n\t~Vehicle(); // assume destructor defined\n};\n\nclass Car\n{\n\tCar()\n\t{\n\t\tVehicle(); // initializes inherited data members\n\t\t// logic for Car initialization\n\t}\n\n\t~Car()\n\t{\n\t\t// logic to de-allocate Car first - as inherited stuff is coupled with this\n\t\t~Vehicle(); // de-allocate the inherited members now\n\t}\n}\n```\n\n- Invocation does not need explicit (full) naming, because it's only done for special functions. Reason: they have unique signatures.\n\n### Order for constructor and destructor\n\n- If we instantiated the derived class, constructor for the base is supposed to be called before the derived class's constructor. Reason: Inherited stuff is needed first.\n\n###### BaseConstructor before DerivedConstructor\n\n- While destroying an object of the derived class, destructor of the derived class is supposed to be called first, then the base destructor is called. Reason: Inherited stuff is coupled to the derived class's logic, it is let go after we are done with the derived class's logic.\n\n###### DerivedDestructor before BaseDestructor\n\n- So, the way constructor and destructors are called is the reverse of each other.\n  ![](/assets/4_Overriding,_Overloading,_Delegation-image-1.png)\n- This is because a derived class is more specific, so has more information. It's like cascading boxes, and can be visualized like so (outermost is child, innermost parent class):\n  ![](/assets/4_Overriding,_Overloading,_Delegation-image-2.png)\n",
      "html": "<h1 id=\"4.-overriding%2C-overloading%2C-delegation\">4. Overriding, Overloading, Delegation <a class=\"heading-anchor-permalink\" href=\"#4.-overriding%2C-overloading%2C-delegation\">#</a></h1>\n<p>Created Sunday 2 February 2022</p>\n<h3 id=\"functions-with-same-name-as-base-class-member\">Functions with same name as base class member <a class=\"heading-anchor-permalink\" href=\"#functions-with-same-name-as-base-class-member\">#</a></h3>\n<p>Assume there’s a public function named <code>run</code> in a class <code>Vehicle</code>.\nIf we inherit <code>Vehicle</code> publicly as <code>Car</code> and define a function <code>run</code> in it with the same signature as <code>Vehicle::run</code>, then calling <code>run</code> from main using a <code>Car</code> object calls <code>Car::run</code> and not <code>Vehicle::run</code>.</p>\n<p>This is called member function overriding.</p>\n<ul>\n<li>If there was no <code>Car::run</code>, calling <code>run</code> using <code>Car</code> object would actually call <code>Vehicle::run</code>.</li>\n<li>Even after overriding, <code>run</code> from <code>Vehicle</code> is still available inside the derived class, but as <code>Vehicle::run</code> and not <code>run</code>, i.e. we have to name the base member function explicitly if it’s overriden.</li>\n</ul>\n<pre><code class=\"language-c++\">class Vehicle {\n\tpublic:\n\t\tvoid run()\n\t\t{\n\t\t\tcout &lt;&lt; &quot;Vehicle run called\\n&quot;;\n\t\t}\n};\n\nclass Car : public Vehicle {\n\tpublic:\n\t\tvoid run()\n\t\t{\n\t\t\tcout &lt;&lt; &quot;Derived run called\\n&quot;;\n\t\t}\n\n\t\tvoid delegateRun()\n\t\t{\n\t\t\tVehicle::run();\n\t\t\t// still availale inside, but have to be explicit\n\t\t}\n};\n\nint main()\n{\n\tCar obj;\n\tobj.run(); // calls Car::run\n\n\tobj.delegateRun(); // calls Vehicle::run\n}\n</code></pre>\n<h3 id=\"overloading-of-base-member-functions\">Overloading of base member functions <a class=\"heading-anchor-permalink\" href=\"#overloading-of-base-member-functions\">#</a></h3>\n<p>Overriding happens only if signature matches. If it doesn’t, public members of the base class are available as usual.</p>\n<h3 id=\"delegation-of-duty\">Delegation of duty <a class=\"heading-anchor-permalink\" href=\"#delegation-of-duty\">#</a></h3>\n<ul>\n<li>Overidden and overloaded are still available in the derived class, but they must be called explicitly, i.e. with full name (<code>BaseClass::myMemberFunction()</code>).</li>\n<li>A similar thing, called <strong>invocation</strong> is done for constructors, destructors and copy assignment operator This is heavily used in constructor and destructors, like so:</li>\n</ul>\n<pre><code class=\"language-c++\">class Vehicle\n{\n\tVehicle(); // assume constructor defined\n\t~Vehicle(); // assume destructor defined\n};\n\nclass Car\n{\n\tCar()\n\t{\n\t\tVehicle(); // initializes inherited data members\n\t\t// logic for Car initialization\n\t}\n\n\t~Car()\n\t{\n\t\t// logic to de-allocate Car first - as inherited stuff is coupled with this\n\t\t~Vehicle(); // de-allocate the inherited members now\n\t}\n}\n</code></pre>\n<ul>\n<li>Invocation does not need explicit (full) naming, because it’s only done for special functions. Reason: they have unique signatures.</li>\n</ul>\n<h3 id=\"order-for-constructor-and-destructor\">Order for constructor and destructor <a class=\"heading-anchor-permalink\" href=\"#order-for-constructor-and-destructor\">#</a></h3>\n<ul>\n<li>If we instantiated the derived class, constructor for the base is supposed to be called before the derived class’s constructor. Reason: Inherited stuff is needed first.</li>\n</ul>\n<h6 id=\"baseconstructor-before-derivedconstructor\">BaseConstructor before DerivedConstructor <a class=\"heading-anchor-permalink\" href=\"#baseconstructor-before-derivedconstructor\">#</a></h6>\n<ul>\n<li>While destroying an object of the derived class, destructor of the derived class is supposed to be called first, then the base destructor is called. Reason: Inherited stuff is coupled to the derived class’s logic, it is let go after we are done with the derived class’s logic.</li>\n</ul>\n<h6 id=\"deriveddestructor-before-basedestructor\">DerivedDestructor before BaseDestructor <a class=\"heading-anchor-permalink\" href=\"#deriveddestructor-before-basedestructor\">#</a></h6>\n<ul>\n<li>So, the way constructor and destructors are called is the reverse of each other.\n<img src=\"/assets/4_Overriding,_Overloading,_Delegation-image-1.png\" alt=\"\"></li>\n<li>This is because a derived class is more specific, so has more information. It’s like cascading boxes, and can be visualized like so (outermost is child, innermost parent class):\n<img src=\"/assets/4_Overriding,_Overloading,_Delegation-image-2.png\" alt=\"\"></li>\n</ul>\n",
      "id": 302
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/5_1_Types_of_Inheritance_(specifier).md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/5_1_Types_of_Inheritance_(specifier).html",
      "content": "# 5.1. Types of Inheritance (level)\n\nCreated Sunday 26 April 2020\n\n1. Single Inheritance: A->B\n\nA single link.\n![](</assets/5*1_Types_of_Inheritance*(specifier)-image-1.png>)\n\n2. Multilevel Inheritance: A->B->C...\n\nMultiple levels from the same class. Like an LL.\n![](</assets/5*1_Types_of_Inheritance*(specifier)-image-2.png>)\n\n3. Hierarchical Inheritance:\n\nMultiple base classes from a single class.\n![](</assets/5*1_Types_of_Inheritance*(specifier)-image-3.png>)\n\n4. Multiple Inheritance(inhertiting from multiple base classes) - This is of height 1.\n\nMultiple base classes are inherited by a derived class. **Multiple Inheritance is at the core of making 'new' things from existing ones.**\n\n- We have two types: Chain length, number of parents and number of children.\n\n---\n\n1. What happens if I create a data member/member function which is present in the base class.\n   1. There should be some kind of **overridding **that takes place**.**\n   2. The parent parts go out of scope, unless called explicitily.(Simplest)\n   3. In other words, we look in the nearest scope first. If we need the parents version, we use:\n\n![](</assets/5*1_Types_of_Inheritance*(specifier)-image-4.png>)\n\n2. What happens if the derived class has two(or more) base classes which have the same data/member member function. **(Multiple inheritance) **\n   1. It is ambiguous. We'll have to *specify *which function to use. Using parent : : fname() Just prepend Parent:: before the data member/member function.\n   2. If the inheritance had different modes for different parents, we **still **cannot distinguish between functions as here is no way to access public/private explicitly.\n\n![](</assets/5*1_Types_of_Inheritance*(specifier)-image-5.png>)\n",
      "html": "<h1 id=\"5.1.-types-of-inheritance-(level)\">5.1. Types of Inheritance (level) <a class=\"heading-anchor-permalink\" href=\"#5.1.-types-of-inheritance-(level)\">#</a></h1>\n<p>Created Sunday 26 April 2020</p>\n<ol>\n<li>Single Inheritance: A-&gt;B</li>\n</ol>\n<p>A single link.\n<img src=\"/assets/5*1_Types_of_Inheritance*(specifier)-image-1.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>Multilevel Inheritance: A-&gt;B-&gt;C…</li>\n</ol>\n<p>Multiple levels from the same class. Like an LL.\n<img src=\"/assets/5*1_Types_of_Inheritance*(specifier)-image-2.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>Hierarchical Inheritance:</li>\n</ol>\n<p>Multiple base classes from a single class.\n<img src=\"/assets/5*1_Types_of_Inheritance*(specifier)-image-3.png\" alt=\"\"></p>\n<ol start=\"4\">\n<li>Multiple Inheritance(inhertiting from multiple base classes) - This is of height 1.</li>\n</ol>\n<p>Multiple base classes are inherited by a derived class. <strong>Multiple Inheritance is at the core of making ‘new’ things from existing ones.</strong></p>\n<ul>\n<li>We have two types: Chain length, number of parents and number of children.</li>\n</ul>\n<hr>\n<ol>\n<li>What happens if I create a data member/member function which is present in the base class.\n<ol>\n<li>There should be some kind of <strong>overridding <strong>that takes place</strong>.</strong></li>\n<li>The parent parts go out of scope, unless called explicitily.(Simplest)</li>\n<li>In other words, we look in the nearest scope first. If we need the parents version, we use:</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/assets/5*1_Types_of_Inheritance*(specifier)-image-4.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>What happens if the derived class has two(or more) base classes which have the same data/member member function. **(Multiple inheritance) **\n<ol>\n<li>It is ambiguous. We’ll have to *specify *which function to use. Using parent : : fname() Just prepend Parent:: before the data member/member function.</li>\n<li>If the inheritance had different modes for different parents, we **still **cannot distinguish between functions as here is no way to access public/private explicitly.</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/assets/5*1_Types_of_Inheritance*(specifier)-image-5.png\" alt=\"\"></p>\n",
      "id": 303
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/5_2_Types_of_Inheritance_(level).md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/5_2_Types_of_Inheritance_(level).html",
      "content": "# 5.2. Types of Inheritance (level)\n\nCreated Saturday 26 February 2022\n\nThere are 3 kinds of inheritance here.\n\n1. Public inheritance\n2. Protected inheritance\n3. Private inheritance\n\nThe coding effects are already seen. And are:\n![](../../../../../../assets/3_Syntax-image-1.png)\n\n## 1. Public Inheritance\n\n### Why\n\n- This is done when we want to add something to the interface (which is public) of the superclass.\n- In other words, public inheritance specifies an **_is-a_** relation between the base and derived class objects. Example: A Ferrari is a Car. Here Car is the base class and Ferrari is publicly inherited from Car, and of course, Ferrari is a Car.\n- Of course, private members of tne base class remain private and must be accessed through it's public methods in the derived class's code.\n\n### How\n\n### What\n\n- It is the most widely used type of inheritance.\n\n## 2. Protected Inheritance\n\nThis is rare, and is virtually never used.\n\n## 3. Private Inheritance\n\n### Why\n\n- This is less common that public inheritance.\n- This is used for pure/blunt code reuse.\n- It is used when the base and derived class don't have an **_is-a_** is relation, but some/all code from the base class can be used to code the derived class.\n\n### How\n\n- This is the default kind of inheritance in C++, and therefore a specifier after the colon is not needed.\n\n```c++\npublic Derived : Base { // no specifier means private inheritance\n\t...\n};\n```\n\n### What\n\nPrivate inheritance is not a type(**_is-a_**) inheritance, but a blunt implementation inheritance.\n",
      "html": "<h1 id=\"5.2.-types-of-inheritance-(level)\">5.2. Types of Inheritance (level) <a class=\"heading-anchor-permalink\" href=\"#5.2.-types-of-inheritance-(level)\">#</a></h1>\n<p>Created Saturday 26 February 2022</p>\n<p>There are 3 kinds of inheritance here.</p>\n<ol>\n<li>Public inheritance</li>\n<li>Protected inheritance</li>\n<li>Private inheritance</li>\n</ol>\n<p>The coding effects are already seen. And are:\n<img src=\"../../../../../../assets/3_Syntax-image-1.png\" alt=\"\"></p>\n<h2 id=\"1.-public-inheritance\">1. Public Inheritance <a class=\"heading-anchor-permalink\" href=\"#1.-public-inheritance\">#</a></h2>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<ul>\n<li>This is done when we want to add something to the interface (which is public) of the superclass.</li>\n<li>In other words, public inheritance specifies an <strong><em>is-a</em></strong> relation between the base and derived class objects. Example: A Ferrari is a Car. Here Car is the base class and Ferrari is publicly inherited from Car, and of course, Ferrari is a Car.</li>\n<li>Of course, private members of tne base class remain private and must be accessed through it’s public methods in the derived class’s code.</li>\n</ul>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<ul>\n<li>It is the most widely used type of inheritance.</li>\n</ul>\n<h2 id=\"2.-protected-inheritance\">2. Protected Inheritance <a class=\"heading-anchor-permalink\" href=\"#2.-protected-inheritance\">#</a></h2>\n<p>This is rare, and is virtually never used.</p>\n<h2 id=\"3.-private-inheritance\">3. Private Inheritance <a class=\"heading-anchor-permalink\" href=\"#3.-private-inheritance\">#</a></h2>\n<h3 id=\"why-2\">Why <a class=\"heading-anchor-permalink\" href=\"#why-2\">#</a></h3>\n<ul>\n<li>This is less common that public inheritance.</li>\n<li>This is used for pure/blunt code reuse.</li>\n<li>It is used when the base and derived class don’t have an <strong><em>is-a</em></strong> is relation, but some/all code from the base class can be used to code the derived class.</li>\n</ul>\n<h3 id=\"how-2\">How <a class=\"heading-anchor-permalink\" href=\"#how-2\">#</a></h3>\n<ul>\n<li>This is the default kind of inheritance in C++, and therefore a specifier after the colon is not needed.</li>\n</ul>\n<pre><code class=\"language-c++\">public Derived : Base { // no specifier means private inheritance\n\t...\n};\n</code></pre>\n<h3 id=\"what-2\">What <a class=\"heading-anchor-permalink\" href=\"#what-2\">#</a></h3>\n<p>Private inheritance is not a type(<strong><em>is-a</em></strong>) inheritance, but a blunt implementation inheritance.</p>\n",
      "id": 304
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/5_Types_of_Inheritance.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/5_Types_of_Inheritance.html",
      "content": "# 5. Types of Inheritance\n\nCreated Sunday 26 April 2020\n\n1. Single Inheritance: A->B\n\nA single link.\n![](</assets/5*1_Types_of_Inheritance*(specifier)-image-1.png>)\n\n2. Multilevel Inheritance: A->B->C...\n\nMultiple levels from the same class. Like an LL.\n![](</assets/5*1_Types_of_Inheritance*(specifier)-image-2.png>)\n\n3. Hierarchical Inheritance:\n\nMultiple base classes from a single class.\n![](</assets/5*1_Types_of_Inheritance*(specifier)-image-3.png>)\n\n4. Multiple Inheritance(inhertiting from multiple base classes) - This is of height 1.\n\nMultiple base classes are inherited by a derived class. **Multiple Inheritance is at the core of making 'new' things from existing ones.**\n\n- We have two types: Chain length, number of parents and number of children.\n\n---\n\n1. What happens if I create a data member/member function which is present in the base class.\n   1. There should be some kind of **overridding **that takes place**.**\n   2. The parent parts go out of scope, unless called explicitily.(Simplest)\n   3. In other words, we look in the nearest scope first. If we need the parents version, we use:\n\n![](</assets/5*1_Types_of_Inheritance*(specifier)-image-4.png>)\n\n2. What happens if the derived class has two(or more) base classes which have the same data/member member function. **(Multiple inheritance) **\n   1. It is ambiguous. We'll have to *specify *which function to use. Using parent : : fname() Just prepend Parent:: before the data member/member function.\n   2. If the inheritance had different modes for different parents, we **still **cannot distinguish between functions as here is no way to access public/private explicitly.\n\n![](</assets/5*1_Types_of_Inheritance*(specifier)-image-5.png>)\n",
      "html": "<h1 id=\"5.-types-of-inheritance\">5. Types of Inheritance <a class=\"heading-anchor-permalink\" href=\"#5.-types-of-inheritance\">#</a></h1>\n<p>Created Sunday 26 April 2020</p>\n<ol>\n<li>Single Inheritance: A-&gt;B</li>\n</ol>\n<p>A single link.\n<img src=\"/assets/5*1_Types_of_Inheritance*(specifier)-image-1.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>Multilevel Inheritance: A-&gt;B-&gt;C…</li>\n</ol>\n<p>Multiple levels from the same class. Like an LL.\n<img src=\"/assets/5*1_Types_of_Inheritance*(specifier)-image-2.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>Hierarchical Inheritance:</li>\n</ol>\n<p>Multiple base classes from a single class.\n<img src=\"/assets/5*1_Types_of_Inheritance*(specifier)-image-3.png\" alt=\"\"></p>\n<ol start=\"4\">\n<li>Multiple Inheritance(inhertiting from multiple base classes) - This is of height 1.</li>\n</ol>\n<p>Multiple base classes are inherited by a derived class. <strong>Multiple Inheritance is at the core of making ‘new’ things from existing ones.</strong></p>\n<ul>\n<li>We have two types: Chain length, number of parents and number of children.</li>\n</ul>\n<hr>\n<ol>\n<li>What happens if I create a data member/member function which is present in the base class.\n<ol>\n<li>There should be some kind of <strong>overridding <strong>that takes place</strong>.</strong></li>\n<li>The parent parts go out of scope, unless called explicitily.(Simplest)</li>\n<li>In other words, we look in the nearest scope first. If we need the parents version, we use:</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/assets/5*1_Types_of_Inheritance*(specifier)-image-4.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>What happens if the derived class has two(or more) base classes which have the same data/member member function. **(Multiple inheritance) **\n<ol>\n<li>It is ambiguous. We’ll have to *specify *which function to use. Using parent : : fname() Just prepend Parent:: before the data member/member function.</li>\n<li>If the inheritance had different modes for different parents, we **still **cannot distinguish between functions as here is no way to access public/private explicitly.</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/assets/5*1_Types_of_Inheritance*(specifier)-image-5.png\" alt=\"\"></p>\n",
      "id": 305
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/6_Hybrid_Inheritance.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/6_Hybrid_Inheritance.html",
      "content": "# 6. Hybrid Inheritance\n\nCreated Monday 27 April 2020\n\nThis is the 5th type of inheritance.\nHybrid = Using more than 2 types of inheritances.\n\n- A well known problem(called the diamond problem) arises if we use hierarchical and then multiple inheritance.\n- The Bus class here gets a copy of functions in Vehicle, through Car and Track.\n\n![](/assets/6_Hybrid_Inheritance-image-1.png)\nOrder of constructors/destructors:\n![](/assets/6_Hybrid_Inheritance-image-2.png)\n\n1. Bus calls Car\n2. Car calls Vehicle\n3. Vehicle is constructed\n4. Car is constructed\n5. Bus calls Truck\n6. Truck calls Vehicle - **Doubt: Vehicle Already exists. Answer: Car may have called Vehicle using some params. This means that we need to call Vehicle this time too. In C++, this is hence made the default behavior.**\n7. Vehicle is constructed.\n8. Truck is constructed.\n9. Bus is constructed.\n\nDestructors: Reverse Order, No of constructions = No. of destructions.\n\n---\n\nWe can remove ambiguities using these 2 ways\n\n1. This is solved in one way by overriding.\n2. Or else we'll need an explicit call to the parent.\n3. Using the virtual keyword, this helps if we have a central abstract class.\n\n---\n\nWe still have a problem, D has two copies of A's functions. We don't want **clutter**.\n\n- We need to inherit **virtually**.\n- Syntax: add **virtual** modifier before the access specifier in the **inheritance list**.\n- This does not copy the functions from Parent as it is, it only creates a pointer to the parent. This pointer is passsed to the derived classes, which can call the grand classes on their own. **This is allowed only in case of virtual inheritance.**\n\n- **How does this happen**:\n\n1. We have a copy of a Vehicle class(not object), and one object is enough. **Direct call.**\n2. We can say that D has pointer to A, which is the same through B or C. Hence only a single call is made to A.\n3. Only D has an object of type A.\n\n- We can **prove** this by using a param constructor in both nearest parent, but giving a different value of param in the child class. The grand-class prints according to the base class. This is because the intermediate classes have not called their parent classes. It was done by the base(est) class. We can also use a static to keep count.\n\n- **When we have extra constructors:**\n\n1. In this case we need to call the required type of constructor in each and every base class.\n",
      "html": "<h1 id=\"6.-hybrid-inheritance\">6. Hybrid Inheritance <a class=\"heading-anchor-permalink\" href=\"#6.-hybrid-inheritance\">#</a></h1>\n<p>Created Monday 27 April 2020</p>\n<p>This is the 5th type of inheritance.\nHybrid = Using more than 2 types of inheritances.</p>\n<ul>\n<li>A well known problem(called the diamond problem) arises if we use hierarchical and then multiple inheritance.</li>\n<li>The Bus class here gets a copy of functions in Vehicle, through Car and Track.</li>\n</ul>\n<p><img src=\"/assets/6_Hybrid_Inheritance-image-1.png\" alt=\"\">\nOrder of constructors/destructors:\n<img src=\"/assets/6_Hybrid_Inheritance-image-2.png\" alt=\"\"></p>\n<ol>\n<li>Bus calls Car</li>\n<li>Car calls Vehicle</li>\n<li>Vehicle is constructed</li>\n<li>Car is constructed</li>\n<li>Bus calls Truck</li>\n<li>Truck calls Vehicle - <strong>Doubt: Vehicle Already exists. Answer: Car may have called Vehicle using some params. This means that we need to call Vehicle this time too. In C++, this is hence made the default behavior.</strong></li>\n<li>Vehicle is constructed.</li>\n<li>Truck is constructed.</li>\n<li>Bus is constructed.</li>\n</ol>\n<p>Destructors: Reverse Order, No of constructions = No. of destructions.</p>\n<hr>\n<p>We can remove ambiguities using these 2 ways</p>\n<ol>\n<li>This is solved in one way by overriding.</li>\n<li>Or else we’ll need an explicit call to the parent.</li>\n<li>Using the virtual keyword, this helps if we have a central abstract class.</li>\n</ol>\n<hr>\n<p>We still have a problem, D has two copies of A’s functions. We don’t want <strong>clutter</strong>.</p>\n<ul>\n<li>\n<p>We need to inherit <strong>virtually</strong>.</p>\n</li>\n<li>\n<p>Syntax: add <strong>virtual</strong> modifier before the access specifier in the <strong>inheritance list</strong>.</p>\n</li>\n<li>\n<p>This does not copy the functions from Parent as it is, it only creates a pointer to the parent. This pointer is passsed to the derived classes, which can call the grand classes on their own. <strong>This is allowed only in case of virtual inheritance.</strong></p>\n</li>\n<li>\n<p><strong>How does this happen</strong>:</p>\n</li>\n</ul>\n<ol>\n<li>We have a copy of a Vehicle class(not object), and one object is enough. <strong>Direct call.</strong></li>\n<li>We can say that D has pointer to A, which is the same through B or C. Hence only a single call is made to A.</li>\n<li>Only D has an object of type A.</li>\n</ol>\n<ul>\n<li>\n<p>We can <strong>prove</strong> this by using a param constructor in both nearest parent, but giving a different value of param in the child class. The grand-class prints according to the base class. This is because the intermediate classes have not called their parent classes. It was done by the base(est) class. We can also use a static to keep count.</p>\n</li>\n<li>\n<p><strong>When we have extra constructors:</strong></p>\n</li>\n</ul>\n<ol>\n<li>In this case we need to call the required type of constructor in each and every base class.</li>\n</ol>\n",
      "id": 306
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/7_Liskov_Substitution_Principle 1.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/7_Liskov_Substitution_Principle 1.html",
      "content": "# 7. Liskov Substitution Principle\nCreated Saturday 19 February 2022\n\n### Why\nI don't know. FIXME\n\n### How\nI don't understand. FIXME\n\n### What\nLiskov Substitution Principle states that \"an object of a superclass should be replaceable by an object of any of its subclasses without altering any property of the superclass\".",
      "html": "<h1 id=\"7.-liskov-substitution-principle\">7. Liskov Substitution Principle <a class=\"heading-anchor-permalink\" href=\"#7.-liskov-substitution-principle\">#</a></h1>\n<p>Created Saturday 19 February 2022</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>I don’t know. FIXME</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p>I don’t understand. FIXME</p>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<p>Liskov Substitution Principle states that “an object of a superclass should be replaceable by an object of any of its subclasses without altering any property of the superclass”.</p>\n",
      "id": 307
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/7_Liskov_Substitution_Principle.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/8._OOP_Continued/1._Relations_between_classes/1._Inheritance/7_Liskov_Substitution_Principle.html",
      "content": "# 7. Liskov Substitution Principle\nCreated Saturday 19 February 2022\n\n### Why\nI don't know. FIXME\n\n### How\nI don't understand. FIXME\n\n### What\nLiskov Substitution Principle states that \"an object of a superclass should be replaceable by an object of any of its subclasses without altering any property of the superclass\".",
      "html": "<h1 id=\"7.-liskov-substitution-principle\">7. Liskov Substitution Principle <a class=\"heading-anchor-permalink\" href=\"#7.-liskov-substitution-principle\">#</a></h1>\n<p>Created Saturday 19 February 2022</p>\n<h3 id=\"why\">Why <a class=\"heading-anchor-permalink\" href=\"#why\">#</a></h3>\n<p>I don’t know. FIXME</p>\n<h3 id=\"how\">How <a class=\"heading-anchor-permalink\" href=\"#how\">#</a></h3>\n<p>I don’t understand. FIXME</p>\n<h3 id=\"what\">What <a class=\"heading-anchor-permalink\" href=\"#what\">#</a></h3>\n<p>Liskov Substitution Principle states that “an object of a superclass should be replaceable by an object of any of its subclasses without altering any property of the superclass”.</p>\n",
      "id": 308
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/Codes/DFS.cpp.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/Codes/DFS.cpp.html",
      "content": "",
      "html": "",
      "id": 309
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/Home.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/Home.html",
      "content": "# Home\nCreated Tuesday 14 January 2020\n\n#### Note\n\n* These are extensive notes made by while doing the \"Data Structures with C++\" course by Coding Ninjas. Course Duration: 15 weeks.\n* I've added some proofs and memory-aids that were not rigorously proved in the course. They are important.\n* Many topics have been added by me that were not part of the course, for example - [6. Algorithm Design](6._Algorithm_Design.md) section, Parts of [7. C++ Continued](7._C++_Continued.md). \n* If you are a beginner, you can *skip* topics added by me, if you want to finish within 15 weeks. Also, Algorithm design is usually taught as a separate course at most universities. So it may take a significant amount of time.\n\n**Unless stated otherwise, all topics are from the Coding Ninjas course.**\n\n",
      "html": "<h1 id=\"home\">Home <a class=\"heading-anchor-permalink\" href=\"#home\">#</a></h1>\n<p>Created Tuesday 14 January 2020</p>\n<h4 id=\"note\">Note <a class=\"heading-anchor-permalink\" href=\"#note\">#</a></h4>\n<ul>\n<li>These are extensive notes made by while doing the “Data Structures with C++” course by Coding Ninjas. Course Duration: 15 weeks.</li>\n<li>I’ve added some proofs and memory-aids that were not rigorously proved in the course. They are important.</li>\n<li>Many topics have been added by me that were not part of the course, for example - <a href=\"6._Algorithm_Design.html\">6. Algorithm Design</a> section, Parts of <a href=\"7._C++_Continued.html\">7. C++ Continued</a>.</li>\n<li>If you are a beginner, you can <em>skip</em> topics added by me, if you want to finish within 15 weeks. Also, Algorithm design is usually taught as a separate course at most universities. So it may take a significant amount of time.</li>\n</ul>\n<p><strong>Unless stated otherwise, all topics are from the Coding Ninjas course.</strong></p>\n",
      "id": 310
    },
    {
      "path": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/notebook.md",
      "url": "home/4_resource_itineraries/2_CN_Data_Structures_and_OOP/notebook.html",
      "content": "# Index of Data Structures with C++\n\n* [1. Memory and Pointers](1._Memory_and_Pointers.md)\n\t* [1. Pointers](1._Memory_and_Pointers/1._Pointers.md)\n\t\t* [1. Pointer Intro](1._Memory_and_Pointers/1._Pointers/1._Pointer_Intro.md)\n\t\t* [2. Pointer Arithmetic](1._Memory_and_Pointers/1._Pointers/2._Pointer_Arithmetic.md)\n\t\t* [3. Arrays and Pointers](1._Memory_and_Pointers/1._Pointers/3._Arrays_and_Pointers.md)\n\t\t* [4. Characters and Pointers](1._Memory_and_Pointers/1._Pointers/4._Characters_and_Pointers.md)\n\t\t* [5. Function and Pointers](1._Memory_and_Pointers/1._Pointers/5._Function_and_Pointers.md)\n\t\t* [6. Nested pointer](1._Memory_and_Pointers/1._Pointers/6._Nested_pointer.md)\n\t\t* [7. Address Typecasting](1._Memory_and_Pointers/1._Pointers/7._Address_Typecasting.md)\n\t\t* [8. References and Pass by Reference](1._Memory_and_Pointers/1._Pointers/8._References_and_Pass_by_Reference.md)\n\t* [2. Dynamic Memory Allocation](1._Memory_and_Pointers/2._Dynamic_Memory_Allocation.md)\n\t\t* [1. Dynamic Allocation](1._Memory_and_Pointers/2._Dynamic_Memory_Allocation/1._Dynamic_Allocation.md)\n\t\t* [2. Dynamic Memory Allocation of 2D arrays](1._Memory_and_Pointers/2._Dynamic_Memory_Allocation/2._Dynamic_Memory_Allocation_of_2D_arrays.md)\n* [2. Time and Space Analysis](2._Time_and_Space_Analysis.md)\n\t* [1. Time](2._Time_and_Space_Analysis/1._Time.md)\n\t\t* [1. Order Complexity Analysis](2._Time_and_Space_Analysis/1._Time/1._Order_Complexity_Analysis.md)\n\t\t* [2. Linear Search Time Complexity](2._Time_and_Space_Analysis/1._Time/2._Linear_Search_Time_Complexity.md)\n\t\t* [3. Insertion Sort](2._Time_and_Space_Analysis/1._Time/3._Insertion_Sort.md)\n\t\t* [4. Selection Sort](2._Time_and_Space_Analysis/1._Time/4._Selection_Sort.md)\n\t\t* [5. Time complexity for recursive algorithms](2._Time_and_Space_Analysis/1._Time/5._Time_complexity_for_recursive_algorithms.md)\n\t\t* [6. Fibonacci is bad](2._Time_and_Space_Analysis/1._Time/6._Fibonacci_is_bad.md)\n\t* [2. Space](2._Time_and_Space_Analysis/2._Space.md)\n\t* [zAssignments](2._Time_and_Space_Analysis/zAssignments.md)\n* [3. Recursion](3._Recursion.md)\n\t* [1. Recursion Basics](3._Recursion/1._Recursion_Basics.md)\n\t\t* [1. Intro to Recursion](3._Recursion/1._Recursion_Basics/1._Intro_to_Recursion.md)\n\t\t* [2. Recursion and PMI](3._Recursion/1._Recursion_Basics/2._Recursion_and_PMI.md)\n\t\t* [3. Fibonacci Number](3._Recursion/1._Recursion_Basics/3._Fibonacci_Number.md)\n\t\t* [4. Recursion with Arrays](3._Recursion/1._Recursion_Basics/4._Recursion_with_Arrays.md)\n\t\t* [5. Approach for recursive problems](3._Recursion/1._Recursion_Basics/5._Approach_for_recursive_problems.md)\n\t\t* [zAssignments](3._Recursion/1._Recursion_Basics/zAssignments.md)\n\t* [2. Recursion Practice](3._Recursion/2._Recursion_Practice.md)\n\t* [3. Applications of Recursion](3._Recursion/3._Applications_of_Recursion.md)\n\t\t* [1. Recursion and Strings](3._Recursion/3._Applications_of_Recursion/1._Recursion_and_Strings.md)\n\t\t* [2. Merge Sort](3._Recursion/3._Applications_of_Recursion/2._Merge_Sort.md)\n\t\t* [3. Quick Sort](3._Recursion/3._Applications_of_Recursion/3._Quick_Sort.md)\n\t\t* [4. Strings](3._Recursion/3._Applications_of_Recursion/4._Strings.md)\n\t\t* [zAssignments](3._Recursion/3._Applications_of_Recursion/zAssignments.md)\n\t\t\t* [1. Subsequences of Strings](3._Recursion/3._Applications_of_Recursion/zAssignments/1._Subsequences_of_Strings.md)\n\t\t\t* [2. Printing subsequence](3._Recursion/3._Applications_of_Recursion/zAssignments/2._Printing_subsequence.md)\n* [4. OOP Basics](4._OOP_Basics.md)\n\t* [1. Intro and syntax](4._OOP_Basics/1._Intro_and_syntax.md)\n\t\t* [1. Principles of OOP](4._OOP_Basics/1._Intro_and_syntax/1._Principles_of_OOP.md)\n\t\t* [2. Classes](4._OOP_Basics/1._Intro_and_syntax/2._Classes.md)\n\t\t* [3. Objects](4._OOP_Basics/1._Intro_and_syntax/3._Objects.md)\n\t\t* [4. Functions(in class)](4._OOP_Basics/1._Intro_and_syntax/4._Functions(in_class).md)\n\t\t\t* [1. Getters and Setters](4._OOP_Basics/1._Intro_and_syntax/4._Functions(in_class)/1._Getters_and_Setters.md)\n\t\t\t* [2. Core member functions](4._OOP_Basics/1._Intro_and_syntax/4._Functions(in_class)/2._Core_member_functions.md)\n\t\t* [5. this keyword](4._OOP_Basics/1._Intro_and_syntax/5._this_keyword.md)\n\t* [2. Special Functions](4._OOP_Basics/2._Special_Functions.md)\n\t\t* [1. Constructor - idea and syntax](4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax.md)\n\t\t\t* [1. The Copy constructor](4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/1._The_Copy_constructor.md)\n\t\t\t\t* [1. Shallow and Deep copy](4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/1._The_Copy_constructor/1._Shallow_and_Deep_copy.md)\n\t\t\t* [2. Feature - Delegating constructors](4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/2._Feature_-_Delegating_constructors.md)\n\t\t* [2. Destructor](4._OOP_Basics/2._Special_Functions/2._Destructor.md)\n\t\t* [3. Special functions details](4._OOP_Basics/2._Special_Functions/3._Special_functions_details.md)\n\t* [3. Member constraints](4._OOP_Basics/3._Member_constraints.md)\n\t\t* [1. const](4._OOP_Basics/3._Member_constraints/1._const.md)\n\t\t\t* [1. const fields - Intialization List](4._OOP_Basics/3._Member_constraints/1._const/1._const_fields_-_Intialization_List.md)\n\t\t\t* [2. const member functions](4._OOP_Basics/3._Member_constraints/1._const/2._const_member_functions.md)\n\t\t* [2. static](4._OOP_Basics/3._Member_constraints/2._static.md)\n\t* [4. Operator overloading](4._OOP_Basics/4._Operator_overloading.md)\n\t\t* [1. Binary operator](4._OOP_Basics/4._Operator_overloading/1._Binary_operator.md)\n\t\t* [2. Unary post](4._OOP_Basics/4._Operator_overloading/2._Unary_post.md)\n\t\t* [3. Unary pre](4._OOP_Basics/4._Operator_overloading/3._Unary_pre.md)\n\t\t* [zAssignment - Polynomial class](4._OOP_Basics/4._Operator_overloading/zAssignment_-_Polynomial_class.md)\n\t* [5. Approach for writing a class](4._OOP_Basics/6._Approach_for_writing_a_class.md)\n* [5. Data Structures](5._Data_Structures.md)\n\t* [1. Linear Data Structures](5._Data_Structures/1._Linear_Data_Structures.md)\n\t\t* [1. Vector aka Dynamic Array](5._Data_Structures/1._Linear_Data_Structures/1._Vector_aka_Dynamic_Array.md)\n\t\t* [2. Linked List](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List.md)\n\t\t\t* [1. Linked List Basics](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics.md)\n\t\t\t\t* [1. What are data structures and why are they important](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/1._What_are_data_structures_and_why_are_they_important.md)\n\t\t\t\t* [2. What is a linked list](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/2._What_is_a_linked_list.md)\n\t\t\t\t* [3. Basic Operations on LL](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL.md)\n\t\t\t\t\t* [1. Length of LL (recursive)](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/1._Length_of_LL_(recursive).md)\n\t\t\t\t\t* [2. Insert node at the ith position](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/2._Insert_node_at_the_ith_position.md)\n\t\t\t\t\t* [3. Delete Node](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/3._Delete_Node.md)\n\t\t\t\t\t* [4. Delete Node recursive](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/4._Delete_Node_recursive.md)\n\t\t\t\t\t* [5. Insert Node recursive](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/5._Insert_Node_recursive.md)\n\t\t\t\t\t* [6. Print the Linked List](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/6._Print_the_Linked_List.md)\n\t\t\t\t* [8. Variations of LL](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/8._Variations_of_LL.md)\n\t\t\t\t* [zAssignments](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments.md)\n\t\t\t\t\t* [1. Linear Search in LL](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/1._Linear_Search_in_LL.md)\n\t\t\t\t\t* [2. AppendLastNToFirst](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/2._AppendLastNToFirst.md)\n\t\t\t\t\t* [3. Eliminate dupicates from the array](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/3._Eliminate_dupicates_from_the_array.md)\n\t\t\t\t\t* [4. Print LL in reverse](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/4._Print_LL_in_reverse.md)\n\t\t\t\t\t* [5. Palindrome Linked List](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/5._Palindrome_Linked_List.md)\n\t\t\t* [2. Popular LL problems](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems.md)\n\t\t\t\t* [1. Midpoint of the LL](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/1._Midpoint_of_the_LL.md)\n\t\t\t\t* [2. Merging two sorted LLs](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/2._Merging_two_sorted_LLs.md)\n\t\t\t\t* [3. Merge Sort on LL](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/3._Merge_Sort_on_LL.md)\n\t\t\t\t* [4. Reverse LL(recursive)](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/4._Reverse_LL(recursive).md)\n\t\t\t\t* [5. Reverse LL using 2 pointers](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/5._Reverse_LL_using_2_pointers.md)\n\t\t\t\t* [6. Reverse LL recursive - easiest](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/6._Reverse_LL_recursive_-_easiest.md)\n\t\t\t\t* [7. Reverse LL Iterative](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/7._Reverse_LL_Iterative.md)\n\t\t\t\t* [zAssignments](5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/zAssignments.md)\n\t\t* [3. Stack](5._Data_Structures/1._Linear_Data_Structures/3._Stack.md)\n\t\t\t* [1. Introduction to Stacks](5._Data_Structures/1._Linear_Data_Structures/3._Stack/1._Introduction_to_Stacks.md)\n\t\t\t* [2. Stack using arrays](5._Data_Structures/1._Linear_Data_Structures/3._Stack/2._Stack_using_arrays.md)\n\t\t\t* [3. Stack using dynamic arrays](5._Data_Structures/1._Linear_Data_Structures/3._Stack/3._Stack_using_dynamic_arrays.md)\n\t\t\t* [4. Templates](5._Data_Structures/1._Linear_Data_Structures/3._Stack/4._Templates.md)\n\t\t\t* [5. Stacks with templates](5._Data_Structures/1._Linear_Data_Structures/3._Stack/5._Stacks_with_templates.md)\n\t\t\t* [6. Stack using LL](5._Data_Structures/1._Linear_Data_Structures/3._Stack/6._Stack_using_LL.md)\n\t\t\t* [7. Inbuilt stack STL](5._Data_Structures/1._Linear_Data_Structures/3._Stack/7._Inbuilt_stack_STL.md)\n\t\t* [4. Queue](5._Data_Structures/1._Linear_Data_Structures/4._Queue.md)\n\t\t\t* [1. Queue Introduction](5._Data_Structures/1._Linear_Data_Structures/4._Queue/1._Queue_Introduction.md)\n\t\t\t* [2. Queue using Array - Code](5._Data_Structures/1._Linear_Data_Structures/4._Queue/2._Queue_using_Array_-_Code.md)\n\t\t\t* [3. Queue using Dynamic Array - Code](5._Data_Structures/1._Linear_Data_Structures/4._Queue/3._Queue_using_Dynamic_Array_-_Code.md)\n\t\t\t* [3. zNamespaces](5._Data_Structures/1._Linear_Data_Structures/4._Queue/3._zNamespaces.md)\n\t\t\t* [4. Queue using LL](5._Data_Structures/1._Linear_Data_Structures/4._Queue/4._Queue_using_LL.md)\n\t\t\t* [5. Inbuilt queue STL](5._Data_Structures/1._Linear_Data_Structures/4._Queue/5._Inbuilt_queue_STL.md)\n\t\t* [zTest 2](5._Data_Structures/1._Linear_Data_Structures/zTest_2.md)\n\t* [2. Trees](5._Data_Structures/2._Trees.md)\n\t\t* [1. Generic Trees](5._Data_Structures/2._Trees/1._Generic_Trees.md)\n\t\t\t* [1. Introduction to trees](5._Data_Structures/2._Trees/1._Generic_Trees/1._Introduction_to_trees.md)\n\t\t\t* [2. Coding a tree](5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree.md)\n\t\t\t\t* [1. TreeNode class](5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/1._TreeNode_class.md)\n\t\t\t\t* [2. Destructor](5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/2._Destructor.md)\n\t\t\t\t* [3. IO for trees](5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees.md)\n\t\t\t\t\t* [1. Take input and print recursive](5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees/1._Take_input_and_print_recursive.md)\n\t\t\t\t\t* [2. Take input levelwise](5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees/2._Take_input_levelwise.md)\n\t\t\t\t\t* [3. Output level wise](5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees/3._Output_level_wise.md)\n\t\t\t* [3. Tree params](5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params.md)\n\t\t\t\t* [1. Number of nodes](5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/1._Number_of_nodes.md)\n\t\t\t\t* [2. Height of a tree Exercise](5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/2._Height_of_a_tree_Exercise.md)\n\t\t\t\t* [3. Depth of a Node](5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/3._Depth_of_a_Node.md)\n\t\t\t\t* [4. Number of leaf nodes](5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/4._Number_of_leaf_nodes.md)\n\t\t\t* [4. Tree Traversals](5._Data_Structures/2._Trees/1._Generic_Trees/4._Tree_Traversals.md)\n\t\t* [2 .Binary trees](5._Data_Structures/2._Trees/2_.Binary_trees.md)\n\t\t\t* [1. Intro to Binary trees](5._Data_Structures/2._Trees/2_.Binary_trees/1._Intro_to_Binary_trees.md)\n\t\t\t* [2. Coding a Binary Tree](5._Data_Structures/2._Trees/2_.Binary_trees/2._Coding_a_Binary_Tree.md)\n\t\t\t\t* [1. BinaryTreeNode class](5._Data_Structures/2._Trees/2_.Binary_trees/2._Coding_a_Binary_Tree/1._BinaryTreeNode_class.md)\n\t\t\t\t* [2. Input](5._Data_Structures/2._Trees/2_.Binary_trees/2._Coding_a_Binary_Tree/2._Input.md)\n\t\t\t\t* [3. Printing a tree](5._Data_Structures/2._Trees/2_.Binary_trees/2._Coding_a_Binary_Tree/3._Printing_a_tree.md)\n\t\t\t* [3. Params](5._Data_Structures/2._Trees/2_.Binary_trees/3._Params.md)\n\t\t\t\t* [1. Count nodes](5._Data_Structures/2._Trees/2_.Binary_trees/3._Params/1._Count_nodes.md)\n\t\t\t\t* [2. Diameter of a BInary tree](5._Data_Structures/2._Trees/2_.Binary_trees/3._Params/2._Diameter_of_a_BInary_tree.md)\n\t\t\t* [4. Traversals](5._Data_Structures/2._Trees/2_.Binary_trees/4._Traversals.md)\n\t\t\t* [5. Construction from traversal](5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal.md)\n\t\t\t\t* [1. Pre and In](5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal/1._Pre_and_In.md)\n\t\t\t\t* [2. Post and In](5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal/2._Post_and_In.md)\n\t\t\t\t* [3. Level and In](5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal/3._Level_and_In.md)\n\t\t\t* [zAssignments](5._Data_Structures/2._Trees/2_.Binary_trees/zAssignments.md)\n\t\t* [3. Binary Search Trees](5._Data_Structures/2._Trees/3._Binary_Search_Trees.md)\n\t\t\t* [1. Intro to BST](5._Data_Structures/2._Trees/3._Binary_Search_Trees/1._Intro_to_BST.md)\n\t\t\t* [2. Coding BST  - BST Node class](5._Data_Structures/2._Trees/3._Binary_Search_Trees/2._Coding_BST__-_BST_Node_class.md)\n\t\t\t* [3. Search Operation in BST](5._Data_Structures/2._Trees/3._Binary_Search_Trees/3._Search_Operation_in_BST.md)\n\t\t\t* [4. Common BST questions](5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions.md)\n\t\t\t\t* [1. Check if BST](5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST.md)\n\t\t\t\t\t* [1. Check BST 1](5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST/1._Check_BST_1.md)\n\t\t\t\t\t* [2. Check BST 2](5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST/2._Check_BST_2.md)\n\t\t\t\t\t* [3. Check BST 3](5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST/3._Check_BST_3.md)\n\t\t\t\t* [2. Construct BST from sorted array](5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/2._Construct_BST_from_sorted_array.md)\n\t\t\t\t* [3. BST to sorted LL](5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/3._BST_to_sorted_LL.md)\n\t\t\t\t* [4. Find Path](5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/4._Find_Path.md)\n\t\t\t* [5. Variations of BST](5._Data_Structures/2._Trees/3._Binary_Search_Trees/5._Variations_of_BST.md)\n\t\t\t\t* [1. AVL trees](5._Data_Structures/2._Trees/3._Binary_Search_Trees/5._Variations_of_BST/1._AVL_trees.md)\n\t* [3. Auxilary Data Structures](5._Data_Structures/3._Auxilary_Data_Structures.md)\n\t\t* [1. Priority Queue and Heap](5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap.md)\n\t\t\t* [1. Intro to priority queue](5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/1._Intro_to_priority_queue.md)\n\t\t\t* [2. Intro to Heap](5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/2._Intro_to_Heap.md)\n\t\t\t* [3. The two kinds of heaps](5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/3._The_two_kinds_of_heaps.md)\n\t\t\t* [4. Complete Binary Trees](5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/4._Complete_Binary_Trees.md)\n\t\t\t* [5. Heap - Insertion and Deletion](5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/5._Heap_-_Insertion_and_Deletion.md)\n\t\t\t* [7. In-place heap](5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/7._In-place_heap.md)\n\t\t\t* [8. STL priority queue](5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/8._STL_priority_queue.md)\n\t\t\t* [9. Practice Problems](5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/9._Practice_Problems.md)\n\t\t\t\t* [1. K sorted array](5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/9._Practice_Problems/1._K_sorted_array.md)\n\t\t\t\t* [2. K smallest elements](5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/9._Practice_Problems/2._K_smallest_elements.md)\n\t\t* [2. Hashmaps](5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps.md)\n\t\t\t* [1. Intro to hashMaps](5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/1._Intro_to_hashMaps.md)\n\t\t\t* [2. Bucket Array and hash functions](5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/2._Bucket_Array_and_hash_functions.md)\n\t\t\t* [3. Collision Handling](5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/3._Collision_Handling.md)\n\t\t\t* [4. Time complexity and time factor](5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/4._Time_complexity_and_time_factor.md)\n\t\t\t* [5. Coding a hashMap](5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/5._Coding_a_hashMap.md)\n\t\t\t* [7. Question - Infinite Stream](5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/7._Question_-_Infinite_Stream.md)\n\t\t\t* [8. STL map and set](5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set.md)\n\t\t\t\t* [1. map and unordered map](5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set/1._map_and_unordered_map.md)\n\t\t\t\t* [2. set and unordered set](5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set/2._set_and_unordered_set.md)\n\t\t\t\t* [3. Iterators - C++ Feature](5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set/3._Iterators_-_C++_Feature.md)\n\t\t* [3. Tries](5._Data_Structures/3._Auxilary_Data_Structures/3._Tries.md)\n\t\t\t* [1. Introduction to Tries](5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/1._Introduction_to_Tries.md)\n\t\t\t* [2. Coding a Trie](5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/2._Coding_a_Trie.md)\n\t\t\t\t* [1. TrieNode class](5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/2._Coding_a_Trie/1._TrieNode_class.md)\n\t\t\t\t* [2. Trie basic API](5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/2._Coding_a_Trie/2._Trie_basic_API.md)\n\t\t\t* [3. Types of Tries](5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/3._Types_of_Tries.md)\n\t\t\t* [4. Huffman Encoding](5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/4._Huffman_Encoding.md)\n\t* [4. Graphs](5._Data_Structures/4._Graphs.md)\n\t\t* [1. Graphs - Basics](5._Data_Structures/4._Graphs/1._Graphs_-_Basics.md)\n\t\t\t* [1. Intro to graphs](5._Data_Structures/4._Graphs/1._Graphs_-_Basics/1._Intro_to_graphs.md)\n\t\t\t* [2. Graph Terminology](5._Data_Structures/4._Graphs/1._Graphs_-_Basics/2._Graph_Terminology.md)\n\t\t\t* [3. Graph varieties](5._Data_Structures/4._Graphs/1._Graphs_-_Basics/3._Graph_varieties.md)\n\t\t\t* [4. Coding a Graph](5._Data_Structures/4._Graphs/1._Graphs_-_Basics/4._Coding_a_Graph.md)\n\t\t\t* [5. Basic Traversals](5._Data_Structures/4._Graphs/1._Graphs_-_Basics/5._Basic_Traversals.md)\n\t\t\t\t* [1. DFS](5._Data_Structures/4._Graphs/1._Graphs_-_Basics/5._Basic_Traversals/1._DFS.md)\n\t\t\t\t* [2. BFS](5._Data_Structures/4._Graphs/1._Graphs_-_Basics/5._Basic_Traversals/2._BFS.md)\n\t\t\t* [6. Basic path operations](5._Data_Structures/4._Graphs/1._Graphs_-_Basics/6._Basic_path_operations.md)\n\t\t\t\t* [1. Has Path](5._Data_Structures/4._Graphs/1._Graphs_-_Basics/6._Basic_path_operations/1._Has_Path.md)\n\t\t\t\t* [2. Get Path](5._Data_Structures/4._Graphs/1._Graphs_-_Basics/6._Basic_path_operations/2._Get_Path.md)\n\t\t\t* [7. Problem - get connected components](5._Data_Structures/4._Graphs/1._Graphs_-_Basics/7._Problem_-_get_connected_components.md)\n\t\t* [2. Graphs 2](5._Data_Structures/4._Graphs/2._Graphs_2.md)\n\t\t\t* [1. Intro to MST](5._Data_Structures/4._Graphs/2._Graphs_2/1._Intro_to_MST.md)\n\t\t\t* [2. Cycle Detection](5._Data_Structures/4._Graphs/2._Graphs_2/2._Cycle_Detection.md)\n\t\t\t* [2. MST algorithms](5._Data_Structures/4._Graphs/2._Graphs_2/2._MST_algorithms.md)\n\t\t\t\t* [1. Kruskal's Algo Complexity](5._Data_Structures/4._Graphs/2._Graphs_2/2._MST_algorithms/1._Kruskal's_Algo_Complexity.md)\n\t\t\t\t\t* [0. Sorting w.r.t a data member of a class](5._Data_Structures/4._Graphs/2._Graphs_2/2._MST_algorithms/1._Kruskal's_Algo_Complexity/0._Sorting_w.r.t_a_data_member_of_a_class.md)\n\t\t\t* [5. Prim's Algorithm](5._Data_Structures/4._Graphs/2._Graphs_2/5._Prim's_Algorithm.md)\n\t\t\t* [6. Dijkstra's Algorithm](5._Data_Structures/4._Graphs/2._Graphs_2/6._Dijkstra's_Algorithm.md)\n\t* [5. C++ STL](5._Data_Structures/5._C++_STL.md)\n\t\t* [1. pair](5._Data_Structures/5._C++_STL/1._pair.md)\n\t\t* [2. tuple](5._Data_Structures/5._C++_STL/2._tuple.md)\n\t\t* [3. Bitset](5._Data_Structures/5._C++_STL/3._Bitset.md)\n* [6. Algorithm Design](6._Algorithm_Design.md)\n\t* [0. Brute force](6._Algorithm_Design/0._Brute_force.md)\n\t* [1. Why algorithms](6._Algorithm_Design/1._Why_algorithms.md)\n\t* [2. Analysis of Algorithms](6._Algorithm_Design/2._Analysis_of_Algorithms.md)\n\t* [3. Design Techniques](6._Algorithm_Design/3._Design_Techniques.md)\n\t\t* [1. Divide and Conquer](6._Algorithm_Design/3._Design_Techniques/1._Divide_and_Conquer.md)\n\t\t* [2. Greedy](6._Algorithm_Design/3._Design_Techniques/2._Greedy.md)\n\t\t* [3. Dynamic Programming](6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming.md)\n\t\t\t* [1. Fibonacci - 1](6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/1._Fibonacci_-_1.md)\n\t\t\t* [2. Fibonacci - 2](6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/2._Fibonacci_-_2.md)\n\t\t\t* [3. Min Steps to 1](6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/3._Min_Steps_to_1.md)\n\t\t\t* [4. DP summary](6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/4._DP_summary.md)\n\t\t\t* [5. Practice Problems](6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems.md)\n\t\t\t\t* [1. Min Cost Path](6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/1._Min_Cost_Path.md)\n\t\t\t\t* [2. Largest Common Subsequence](6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/2._Largest_Common_Subsequence.md)\n\t\t\t\t* [3. Edit Distance](6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/3._Edit_Distance.md)\n\t* [4. NP Completeness](6._Algorithm_Design/4._NP_Completeness.md)\n* [7. C++ Continued](7._C++_Continued.md)\n\t* [1. Macros and Global Variables](7._C++_Continued/1._Macros_and_Global_Variables.md)\n\t* [2. Inline and Default Arguments](7._C++_Continued/2._Inline_and_Default_Arguments.md)\n\t* [3. const and constexpr](7._C++_Continued/3._const_and_constexpr.md)\n\t* [4. Exception Handling](7._C++_Continued/4._Exception_Handling.md)\n* [8. OOP Continued](8._OOP_Continued.md)\n\t* [1. Abstraction and Encapsulation](8._OOP_Continued/1._Relations_between_classes.md)\n\t* [2. Inheritance](./8._OOP_Continued/2._Inheritance.md)\n\t\t* [1. Inheritance - Concept](8._OOP_Continued/1._Relations_between_classes/1._Inheritance/1_Inheritance_-_Concept.md)\n\t\t* [2. Syntax](8._OOP_Continued/1._Relations_between_classes/1._Inheritance/3_Syntax.md)\n\t\t* [3. Order Of ConstructorsDestructors](5._Order_Of_ConstructorsDestructors.md)\n\t\t* [4. Hybrid Inheritance](8._OOP_Continued/1._Relations_between_classes/1._Inheritance/6_Hybrid_Inheritance.md)\n\t\t* [5. Types of Inheritance](8._OOP_Continued/1._Relations_between_classes/1._Inheritance/5_2_Types_of_Inheritance_(level).md)\n\t* [3. Polymorphism](./8._OOP_Continued/3._Polymorphism.md)\n\t\t* [1. Compile Time Polymorphism](./8._OOP_Continued/3._Polymorphism/1._Compile_Time_Polymorphism.md)\n\t\t* [2. Run Time Polymorphism](./8._OOP_Continued/3._Polymorphism/2._Run_Time_Polymorphism.md)\n\t* [4. Virtual Functions and Abstract Classes](./8._OOP_Continued/4._Virtual_Functions_and_Abstract_Classes.md)\n\t* [5. Friend Functions and Classes](./8._OOP_Continued/5._Friend_Functions_and_Classes.md)\n* [Home](Home.md)\n\n\n",
      "html": "<h1 id=\"index-of-data-structures-with-c%2B%2B\">Index of Data Structures with C++ <a class=\"heading-anchor-permalink\" href=\"#index-of-data-structures-with-c%2B%2B\">#</a></h1>\n<ul>\n<li><a href=\"1._Memory_and_Pointers.html\">1. Memory and Pointers</a>\n<ul>\n<li><a href=\"1._Memory_and_Pointers/1._Pointers.html\">1. Pointers</a>\n<ul>\n<li><a href=\"1._Memory_and_Pointers/1._Pointers/1._Pointer_Intro.html\">1. Pointer Intro</a></li>\n<li><a href=\"1._Memory_and_Pointers/1._Pointers/2._Pointer_Arithmetic.html\">2. Pointer Arithmetic</a></li>\n<li><a href=\"1._Memory_and_Pointers/1._Pointers/3._Arrays_and_Pointers.html\">3. Arrays and Pointers</a></li>\n<li><a href=\"1._Memory_and_Pointers/1._Pointers/4._Characters_and_Pointers.html\">4. Characters and Pointers</a></li>\n<li><a href=\"1._Memory_and_Pointers/1._Pointers/5._Function_and_Pointers.html\">5. Function and Pointers</a></li>\n<li><a href=\"1._Memory_and_Pointers/1._Pointers/6._Nested_pointer.html\">6. Nested pointer</a></li>\n<li><a href=\"1._Memory_and_Pointers/1._Pointers/7._Address_Typecasting.html\">7. Address Typecasting</a></li>\n<li><a href=\"1._Memory_and_Pointers/1._Pointers/8._References_and_Pass_by_Reference.html\">8. References and Pass by Reference</a></li>\n</ul>\n</li>\n<li><a href=\"1._Memory_and_Pointers/2._Dynamic_Memory_Allocation.html\">2. Dynamic Memory Allocation</a>\n<ul>\n<li><a href=\"1._Memory_and_Pointers/2._Dynamic_Memory_Allocation/1._Dynamic_Allocation.html\">1. Dynamic Allocation</a></li>\n<li><a href=\"1._Memory_and_Pointers/2._Dynamic_Memory_Allocation/2._Dynamic_Memory_Allocation_of_2D_arrays.html\">2. Dynamic Memory Allocation of 2D arrays</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"2._Time_and_Space_Analysis.html\">2. Time and Space Analysis</a>\n<ul>\n<li><a href=\"2._Time_and_Space_Analysis/1._Time.html\">1. Time</a>\n<ul>\n<li><a href=\"2._Time_and_Space_Analysis/1._Time/1._Order_Complexity_Analysis.html\">1. Order Complexity Analysis</a></li>\n<li><a href=\"2._Time_and_Space_Analysis/1._Time/2._Linear_Search_Time_Complexity.html\">2. Linear Search Time Complexity</a></li>\n<li><a href=\"2._Time_and_Space_Analysis/1._Time/3._Insertion_Sort.html\">3. Insertion Sort</a></li>\n<li><a href=\"2._Time_and_Space_Analysis/1._Time/4._Selection_Sort.html\">4. Selection Sort</a></li>\n<li><a href=\"2._Time_and_Space_Analysis/1._Time/5._Time_complexity_for_recursive_algorithms.html\">5. Time complexity for recursive algorithms</a></li>\n<li><a href=\"2._Time_and_Space_Analysis/1._Time/6._Fibonacci_is_bad.html\">6. Fibonacci is bad</a></li>\n</ul>\n</li>\n<li><a href=\"2._Time_and_Space_Analysis/2._Space.html\">2. Space</a></li>\n<li><a href=\"2._Time_and_Space_Analysis/zAssignments.html\">zAssignments</a></li>\n</ul>\n</li>\n<li><a href=\"3._Recursion.html\">3. Recursion</a>\n<ul>\n<li><a href=\"3._Recursion/1._Recursion_Basics.html\">1. Recursion Basics</a>\n<ul>\n<li><a href=\"3._Recursion/1._Recursion_Basics/1._Intro_to_Recursion.html\">1. Intro to Recursion</a></li>\n<li><a href=\"3._Recursion/1._Recursion_Basics/2._Recursion_and_PMI.html\">2. Recursion and PMI</a></li>\n<li><a href=\"3._Recursion/1._Recursion_Basics/3._Fibonacci_Number.html\">3. Fibonacci Number</a></li>\n<li><a href=\"3._Recursion/1._Recursion_Basics/4._Recursion_with_Arrays.html\">4. Recursion with Arrays</a></li>\n<li><a href=\"3._Recursion/1._Recursion_Basics/5._Approach_for_recursive_problems.html\">5. Approach for recursive problems</a></li>\n<li><a href=\"3._Recursion/1._Recursion_Basics/zAssignments.html\">zAssignments</a></li>\n</ul>\n</li>\n<li><a href=\"3._Recursion/2._Recursion_Practice.html\">2. Recursion Practice</a></li>\n<li><a href=\"3._Recursion/3._Applications_of_Recursion.html\">3. Applications of Recursion</a>\n<ul>\n<li><a href=\"3._Recursion/3._Applications_of_Recursion/1._Recursion_and_Strings.html\">1. Recursion and Strings</a></li>\n<li><a href=\"3._Recursion/3._Applications_of_Recursion/2._Merge_Sort.html\">2. Merge Sort</a></li>\n<li><a href=\"3._Recursion/3._Applications_of_Recursion/3._Quick_Sort.html\">3. Quick Sort</a></li>\n<li><a href=\"3._Recursion/3._Applications_of_Recursion/4._Strings.html\">4. Strings</a></li>\n<li><a href=\"3._Recursion/3._Applications_of_Recursion/zAssignments.html\">zAssignments</a>\n<ul>\n<li><a href=\"3._Recursion/3._Applications_of_Recursion/zAssignments/1._Subsequences_of_Strings.html\">1. Subsequences of Strings</a></li>\n<li><a href=\"3._Recursion/3._Applications_of_Recursion/zAssignments/2._Printing_subsequence.html\">2. Printing subsequence</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"4._OOP_Basics.html\">4. OOP Basics</a>\n<ul>\n<li><a href=\"4._OOP_Basics/1._Intro_and_syntax.html\">1. Intro and syntax</a>\n<ul>\n<li><a href=\"4._OOP_Basics/1._Intro_and_syntax/1._Principles_of_OOP.html\">1. Principles of OOP</a></li>\n<li><a href=\"4._OOP_Basics/1._Intro_and_syntax/2._Classes.html\">2. Classes</a></li>\n<li><a href=\"4._OOP_Basics/1._Intro_and_syntax/3._Objects.html\">3. Objects</a></li>\n<li><a href=\"4._OOP_Basics/1._Intro_and_syntax/4._Functions(in_class).html\">4. Functions(in class)</a>\n<ul>\n<li><a href=\"4._OOP_Basics/1._Intro_and_syntax/4._Functions(in_class)/1._Getters_and_Setters.html\">1. Getters and Setters</a></li>\n<li><a href=\"4._OOP_Basics/1._Intro_and_syntax/4._Functions(in_class)/2._Core_member_functions.html\">2. Core member functions</a></li>\n</ul>\n</li>\n<li><a href=\"4._OOP_Basics/1._Intro_and_syntax/5._this_keyword.html\">5. this keyword</a></li>\n</ul>\n</li>\n<li><a href=\"4._OOP_Basics/2._Special_Functions.html\">2. Special Functions</a>\n<ul>\n<li><a href=\"4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax.html\">1. Constructor - idea and syntax</a>\n<ul>\n<li><a href=\"4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/1._The_Copy_constructor.html\">1. The Copy constructor</a>\n<ul>\n<li><a href=\"4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/1._The_Copy_constructor/1._Shallow_and_Deep_copy.html\">1. Shallow and Deep copy</a></li>\n</ul>\n</li>\n<li><a href=\"4._OOP_Basics/2._Special_Functions/1._Constructor_-_idea_and_syntax/2._Feature_-_Delegating_constructors.html\">2. Feature - Delegating constructors</a></li>\n</ul>\n</li>\n<li><a href=\"4._OOP_Basics/2._Special_Functions/2._Destructor.html\">2. Destructor</a></li>\n<li><a href=\"4._OOP_Basics/2._Special_Functions/3._Special_functions_details.html\">3. Special functions details</a></li>\n</ul>\n</li>\n<li><a href=\"4._OOP_Basics/3._Member_constraints.html\">3. Member constraints</a>\n<ul>\n<li><a href=\"4._OOP_Basics/3._Member_constraints/1._const.html\">1. const</a>\n<ul>\n<li><a href=\"4._OOP_Basics/3._Member_constraints/1._const/1._const_fields_-_Intialization_List.html\">1. const fields - Intialization List</a></li>\n<li><a href=\"4._OOP_Basics/3._Member_constraints/1._const/2._const_member_functions.html\">2. const member functions</a></li>\n</ul>\n</li>\n<li><a href=\"4._OOP_Basics/3._Member_constraints/2._static.html\">2. static</a></li>\n</ul>\n</li>\n<li><a href=\"4._OOP_Basics/4._Operator_overloading.html\">4. Operator overloading</a>\n<ul>\n<li><a href=\"4._OOP_Basics/4._Operator_overloading/1._Binary_operator.html\">1. Binary operator</a></li>\n<li><a href=\"4._OOP_Basics/4._Operator_overloading/2._Unary_post.html\">2. Unary post</a></li>\n<li><a href=\"4._OOP_Basics/4._Operator_overloading/3._Unary_pre.html\">3. Unary pre</a></li>\n<li><a href=\"4._OOP_Basics/4._Operator_overloading/zAssignment_-_Polynomial_class.html\">zAssignment - Polynomial class</a></li>\n</ul>\n</li>\n<li><a href=\"4._OOP_Basics/6._Approach_for_writing_a_class.html\">5. Approach for writing a class</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures.html\">5. Data Structures</a>\n<ul>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures.html\">1. Linear Data Structures</a>\n<ul>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/1._Vector_aka_Dynamic_Array.html\">1. Vector aka Dynamic Array</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List.html\">2. Linked List</a>\n<ul>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics.html\">1. Linked List Basics</a>\n<ul>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/1._What_are_data_structures_and_why_are_they_important.html\">1. What are data structures and why are they important</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/2._What_is_a_linked_list.html\">2. What is a linked list</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL.html\">3. Basic Operations on LL</a>\n<ul>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/1._Length_of_LL_(recursive).html\">1. Length of LL (recursive)</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/2._Insert_node_at_the_ith_position.html\">2. Insert node at the ith position</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/3._Delete_Node.html\">3. Delete Node</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/4._Delete_Node_recursive.html\">4. Delete Node recursive</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/5._Insert_Node_recursive.html\">5. Insert Node recursive</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/3._Basic_Operations_on_LL/6._Print_the_Linked_List.html\">6. Print the Linked List</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/8._Variations_of_LL.html\">8. Variations of LL</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments.html\">zAssignments</a>\n<ul>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/1._Linear_Search_in_LL.html\">1. Linear Search in LL</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/2._AppendLastNToFirst.html\">2. AppendLastNToFirst</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/3._Eliminate_dupicates_from_the_array.html\">3. Eliminate dupicates from the array</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/4._Print_LL_in_reverse.html\">4. Print LL in reverse</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/1._Linked_List_Basics/zAssignments/5._Palindrome_Linked_List.html\">5. Palindrome Linked List</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems.html\">2. Popular LL problems</a>\n<ul>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/1._Midpoint_of_the_LL.html\">1. Midpoint of the LL</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/2._Merging_two_sorted_LLs.html\">2. Merging two sorted LLs</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/3._Merge_Sort_on_LL.html\">3. Merge Sort on LL</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/4._Reverse_LL(recursive).html\">4. Reverse LL(recursive)</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/5._Reverse_LL_using_2_pointers.html\">5. Reverse LL using 2 pointers</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/6._Reverse_LL_recursive_-_easiest.html\">6. Reverse LL recursive - easiest</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/7._Reverse_LL_Iterative.html\">7. Reverse LL Iterative</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/2._Linked_List/2._Popular_LL_problems/zAssignments.html\">zAssignments</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/3._Stack.html\">3. Stack</a>\n<ul>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/3._Stack/1._Introduction_to_Stacks.html\">1. Introduction to Stacks</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/3._Stack/2._Stack_using_arrays.html\">2. Stack using arrays</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/3._Stack/3._Stack_using_dynamic_arrays.html\">3. Stack using dynamic arrays</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/3._Stack/4._Templates.html\">4. Templates</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/3._Stack/5._Stacks_with_templates.html\">5. Stacks with templates</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/3._Stack/6._Stack_using_LL.html\">6. Stack using LL</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/3._Stack/7._Inbuilt_stack_STL.html\">7. Inbuilt stack STL</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/4._Queue.html\">4. Queue</a>\n<ul>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/4._Queue/1._Queue_Introduction.html\">1. Queue Introduction</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/4._Queue/2._Queue_using_Array_-_Code.html\">2. Queue using Array - Code</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/4._Queue/3._Queue_using_Dynamic_Array_-_Code.html\">3. Queue using Dynamic Array - Code</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/4._Queue/3._zNamespaces.html\">3. zNamespaces</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/4._Queue/4._Queue_using_LL.html\">4. Queue using LL</a></li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/4._Queue/5._Inbuilt_queue_STL.html\">5. Inbuilt queue STL</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/1._Linear_Data_Structures/zTest_2.html\">zTest 2</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/2._Trees.html\">2. Trees</a>\n<ul>\n<li><a href=\"5._Data_Structures/2._Trees/1._Generic_Trees.html\">1. Generic Trees</a>\n<ul>\n<li><a href=\"5._Data_Structures/2._Trees/1._Generic_Trees/1._Introduction_to_trees.html\">1. Introduction to trees</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree.html\">2. Coding a tree</a>\n<ul>\n<li><a href=\"5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/1._TreeNode_class.html\">1. TreeNode class</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/2._Destructor.html\">2. Destructor</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees.html\">3. IO for trees</a>\n<ul>\n<li><a href=\"5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees/1._Take_input_and_print_recursive.html\">1. Take input and print recursive</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees/2._Take_input_levelwise.html\">2. Take input levelwise</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/1._Generic_Trees/2._Coding_a_tree/3._IO_for_trees/3._Output_level_wise.html\">3. Output level wise</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params.html\">3. Tree params</a>\n<ul>\n<li><a href=\"5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/1._Number_of_nodes.html\">1. Number of nodes</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/2._Height_of_a_tree_Exercise.html\">2. Height of a tree Exercise</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/3._Depth_of_a_Node.html\">3. Depth of a Node</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/1._Generic_Trees/3._Tree_params/4._Number_of_leaf_nodes.html\">4. Number of leaf nodes</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/2._Trees/1._Generic_Trees/4._Tree_Traversals.html\">4. Tree Traversals</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/2._Trees/2_.Binary_trees.html\">2 .Binary trees</a>\n<ul>\n<li><a href=\"5._Data_Structures/2._Trees/2_.Binary_trees/1._Intro_to_Binary_trees.html\">1. Intro to Binary trees</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/2_.Binary_trees/2._Coding_a_Binary_Tree.html\">2. Coding a Binary Tree</a>\n<ul>\n<li><a href=\"5._Data_Structures/2._Trees/2_.Binary_trees/2._Coding_a_Binary_Tree/1._BinaryTreeNode_class.html\">1. BinaryTreeNode class</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/2_.Binary_trees/2._Coding_a_Binary_Tree/2._Input.html\">2. Input</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/2_.Binary_trees/2._Coding_a_Binary_Tree/3._Printing_a_tree.html\">3. Printing a tree</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/2._Trees/2_.Binary_trees/3._Params.html\">3. Params</a>\n<ul>\n<li><a href=\"5._Data_Structures/2._Trees/2_.Binary_trees/3._Params/1._Count_nodes.html\">1. Count nodes</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/2_.Binary_trees/3._Params/2._Diameter_of_a_BInary_tree.html\">2. Diameter of a BInary tree</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/2._Trees/2_.Binary_trees/4._Traversals.html\">4. Traversals</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal.html\">5. Construction from traversal</a>\n<ul>\n<li><a href=\"5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal/1._Pre_and_In.html\">1. Pre and In</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal/2._Post_and_In.html\">2. Post and In</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/2_.Binary_trees/5._Construction_from_traversal/3._Level_and_In.html\">3. Level and In</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/2._Trees/2_.Binary_trees/zAssignments.html\">zAssignments</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/2._Trees/3._Binary_Search_Trees.html\">3. Binary Search Trees</a>\n<ul>\n<li><a href=\"5._Data_Structures/2._Trees/3._Binary_Search_Trees/1._Intro_to_BST.html\">1. Intro to BST</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/3._Binary_Search_Trees/2._Coding_BST__-_BST_Node_class.html\">2. Coding BST  - BST Node class</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/3._Binary_Search_Trees/3._Search_Operation_in_BST.html\">3. Search Operation in BST</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions.html\">4. Common BST questions</a>\n<ul>\n<li><a href=\"5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST.html\">1. Check if BST</a>\n<ul>\n<li><a href=\"5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST/1._Check_BST_1.html\">1. Check BST 1</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST/2._Check_BST_2.html\">2. Check BST 2</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/1._Check_if_BST/3._Check_BST_3.html\">3. Check BST 3</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/2._Construct_BST_from_sorted_array.html\">2. Construct BST from sorted array</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/3._BST_to_sorted_LL.html\">3. BST to sorted LL</a></li>\n<li><a href=\"5._Data_Structures/2._Trees/3._Binary_Search_Trees/4._Common_BST_questions/4._Find_Path.html\">4. Find Path</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/2._Trees/3._Binary_Search_Trees/5._Variations_of_BST.html\">5. Variations of BST</a>\n<ul>\n<li><a href=\"5._Data_Structures/2._Trees/3._Binary_Search_Trees/5._Variations_of_BST/1._AVL_trees.html\">1. AVL trees</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures.html\">3. Auxilary Data Structures</a>\n<ul>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap.html\">1. Priority Queue and Heap</a>\n<ul>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/1._Intro_to_priority_queue.html\">1. Intro to priority queue</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/2._Intro_to_Heap.html\">2. Intro to Heap</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/3._The_two_kinds_of_heaps.html\">3. The two kinds of heaps</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/4._Complete_Binary_Trees.html\">4. Complete Binary Trees</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/5._Heap_-_Insertion_and_Deletion.html\">5. Heap - Insertion and Deletion</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/7._In-place_heap.html\">7. In-place heap</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/8._STL_priority_queue.html\">8. STL priority queue</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/9._Practice_Problems.html\">9. Practice Problems</a>\n<ul>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/9._Practice_Problems/1._K_sorted_array.html\">1. K sorted array</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/1._Priority_Queue_and_Heap/9._Practice_Problems/2._K_smallest_elements.html\">2. K smallest elements</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps.html\">2. Hashmaps</a>\n<ul>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/1._Intro_to_hashMaps.html\">1. Intro to hashMaps</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/2._Bucket_Array_and_hash_functions.html\">2. Bucket Array and hash functions</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/3._Collision_Handling.html\">3. Collision Handling</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/4._Time_complexity_and_time_factor.html\">4. Time complexity and time factor</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/5._Coding_a_hashMap.html\">5. Coding a hashMap</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/7._Question_-_Infinite_Stream.html\">7. Question - Infinite Stream</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set.html\">8. STL map and set</a>\n<ul>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set/1._map_and_unordered_map.html\">1. map and unordered map</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set/2._set_and_unordered_set.html\">2. set and unordered set</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/2._Hashmaps/8._STL_map_and_set/3._Iterators_-_C++_Feature.html\">3. Iterators - C++ Feature</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/3._Tries.html\">3. Tries</a>\n<ul>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/1._Introduction_to_Tries.html\">1. Introduction to Tries</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/2._Coding_a_Trie.html\">2. Coding a Trie</a>\n<ul>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/2._Coding_a_Trie/1._TrieNode_class.html\">1. TrieNode class</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/2._Coding_a_Trie/2._Trie_basic_API.html\">2. Trie basic API</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/3._Types_of_Tries.html\">3. Types of Tries</a></li>\n<li><a href=\"5._Data_Structures/3._Auxilary_Data_Structures/3._Tries/4._Huffman_Encoding.html\">4. Huffman Encoding</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/4._Graphs.html\">4. Graphs</a>\n<ul>\n<li><a href=\"5._Data_Structures/4._Graphs/1._Graphs_-_Basics.html\">1. Graphs - Basics</a>\n<ul>\n<li><a href=\"5._Data_Structures/4._Graphs/1._Graphs_-_Basics/1._Intro_to_graphs.html\">1. Intro to graphs</a></li>\n<li><a href=\"5._Data_Structures/4._Graphs/1._Graphs_-_Basics/2._Graph_Terminology.html\">2. Graph Terminology</a></li>\n<li><a href=\"5._Data_Structures/4._Graphs/1._Graphs_-_Basics/3._Graph_varieties.html\">3. Graph varieties</a></li>\n<li><a href=\"5._Data_Structures/4._Graphs/1._Graphs_-_Basics/4._Coding_a_Graph.html\">4. Coding a Graph</a></li>\n<li><a href=\"5._Data_Structures/4._Graphs/1._Graphs_-_Basics/5._Basic_Traversals.html\">5. Basic Traversals</a>\n<ul>\n<li><a href=\"5._Data_Structures/4._Graphs/1._Graphs_-_Basics/5._Basic_Traversals/1._DFS.html\">1. DFS</a></li>\n<li><a href=\"5._Data_Structures/4._Graphs/1._Graphs_-_Basics/5._Basic_Traversals/2._BFS.html\">2. BFS</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/4._Graphs/1._Graphs_-_Basics/6._Basic_path_operations.html\">6. Basic path operations</a>\n<ul>\n<li><a href=\"5._Data_Structures/4._Graphs/1._Graphs_-_Basics/6._Basic_path_operations/1._Has_Path.html\">1. Has Path</a></li>\n<li><a href=\"5._Data_Structures/4._Graphs/1._Graphs_-_Basics/6._Basic_path_operations/2._Get_Path.html\">2. Get Path</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/4._Graphs/1._Graphs_-_Basics/7._Problem_-_get_connected_components.html\">7. Problem - get connected components</a></li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/4._Graphs/2._Graphs_2.html\">2. Graphs 2</a>\n<ul>\n<li><a href=\"5._Data_Structures/4._Graphs/2._Graphs_2/1._Intro_to_MST.html\">1. Intro to MST</a></li>\n<li><a href=\"5._Data_Structures/4._Graphs/2._Graphs_2/2._Cycle_Detection.html\">2. Cycle Detection</a></li>\n<li><a href=\"5._Data_Structures/4._Graphs/2._Graphs_2/2._MST_algorithms.html\">2. MST algorithms</a>\n<ul>\n<li><a href=\"5._Data_Structures/4._Graphs/2._Graphs_2/2._MST_algorithms/1._Kruskal's_Algo_Complexity.html\">1. Kruskal’s Algo Complexity</a>\n<ul>\n<li><a href=\"5._Data_Structures/4._Graphs/2._Graphs_2/2._MST_algorithms/1._Kruskal's_Algo_Complexity/0._Sorting_w.r.t_a_data_member_of_a_class.html\">0. Sorting w.r.t a data member of a class</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/4._Graphs/2._Graphs_2/5._Prim's_Algorithm.html\">5. Prim’s Algorithm</a></li>\n<li><a href=\"5._Data_Structures/4._Graphs/2._Graphs_2/6._Dijkstra's_Algorithm.html\">6. Dijkstra’s Algorithm</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"5._Data_Structures/5._C++_STL.html\">5. C++ STL</a>\n<ul>\n<li><a href=\"5._Data_Structures/5._C++_STL/1._pair.html\">1. pair</a></li>\n<li><a href=\"5._Data_Structures/5._C++_STL/2._tuple.html\">2. tuple</a></li>\n<li><a href=\"5._Data_Structures/5._C++_STL/3._Bitset.html\">3. Bitset</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"6._Algorithm_Design.html\">6. Algorithm Design</a>\n<ul>\n<li><a href=\"6._Algorithm_Design/0._Brute_force.html\">0. Brute force</a></li>\n<li><a href=\"6._Algorithm_Design/1._Why_algorithms.html\">1. Why algorithms</a></li>\n<li><a href=\"6._Algorithm_Design/2._Analysis_of_Algorithms.html\">2. Analysis of Algorithms</a></li>\n<li><a href=\"6._Algorithm_Design/3._Design_Techniques.html\">3. Design Techniques</a>\n<ul>\n<li><a href=\"6._Algorithm_Design/3._Design_Techniques/1._Divide_and_Conquer.html\">1. Divide and Conquer</a></li>\n<li><a href=\"6._Algorithm_Design/3._Design_Techniques/2._Greedy.html\">2. Greedy</a></li>\n<li><a href=\"6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming.html\">3. Dynamic Programming</a>\n<ul>\n<li><a href=\"6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/1._Fibonacci_-_1.html\">1. Fibonacci - 1</a></li>\n<li><a href=\"6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/2._Fibonacci_-_2.html\">2. Fibonacci - 2</a></li>\n<li><a href=\"6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/3._Min_Steps_to_1.html\">3. Min Steps to 1</a></li>\n<li><a href=\"6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/4._DP_summary.html\">4. DP summary</a></li>\n<li><a href=\"6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems.html\">5. Practice Problems</a>\n<ul>\n<li><a href=\"6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/1._Min_Cost_Path.html\">1. Min Cost Path</a></li>\n<li><a href=\"6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/2._Largest_Common_Subsequence.html\">2. Largest Common Subsequence</a></li>\n<li><a href=\"6._Algorithm_Design/3._Design_Techniques/3._Dynamic_Programming/5._Practice_Problems/3._Edit_Distance.html\">3. Edit Distance</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"6._Algorithm_Design/4._NP_Completeness.html\">4. NP Completeness</a></li>\n</ul>\n</li>\n<li><a href=\"7._C++_Continued.html\">7. C++ Continued</a>\n<ul>\n<li><a href=\"7._C++_Continued/1._Macros_and_Global_Variables.html\">1. Macros and Global Variables</a></li>\n<li><a href=\"7._C++_Continued/2._Inline_and_Default_Arguments.html\">2. Inline and Default Arguments</a></li>\n<li><a href=\"7._C++_Continued/3._const_and_constexpr.html\">3. const and constexpr</a></li>\n<li><a href=\"7._C++_Continued/4._Exception_Handling.html\">4. Exception Handling</a></li>\n</ul>\n</li>\n<li><a href=\"8._OOP_Continued.html\">8. OOP Continued</a>\n<ul>\n<li><a href=\"8._OOP_Continued/1._Relations_between_classes.html\">1. Abstraction and Encapsulation</a></li>\n<li><a href=\"./8._OOP_Continued/2._Inheritance.html\">2. Inheritance</a>\n<ul>\n<li><a href=\"8._OOP_Continued/1._Relations_between_classes/1._Inheritance/1_Inheritance_-_Concept.html\">1. Inheritance - Concept</a></li>\n<li><a href=\"8._OOP_Continued/1._Relations_between_classes/1._Inheritance/3_Syntax.html\">2. Syntax</a></li>\n<li><a href=\"5._Order_Of_ConstructorsDestructors.html\">3. Order Of ConstructorsDestructors</a></li>\n<li><a href=\"8._OOP_Continued/1._Relations_between_classes/1._Inheritance/6_Hybrid_Inheritance.html\">4. Hybrid Inheritance</a></li>\n<li><a href=\"8._OOP_Continued/1._Relations_between_classes/1._Inheritance/5_2_Types_of_Inheritance_(level).html\">5. Types of Inheritance</a></li>\n</ul>\n</li>\n<li><a href=\"./8._OOP_Continued/3._Polymorphism.html\">3. Polymorphism</a>\n<ul>\n<li><a href=\"./8._OOP_Continued/3._Polymorphism/1._Compile_Time_Polymorphism.html\">1. Compile Time Polymorphism</a></li>\n<li><a href=\"./8._OOP_Continued/3._Polymorphism/2._Run_Time_Polymorphism.html\">2. Run Time Polymorphism</a></li>\n</ul>\n</li>\n<li><a href=\"./8._OOP_Continued/4._Virtual_Functions_and_Abstract_Classes.html\">4. Virtual Functions and Abstract Classes</a></li>\n<li><a href=\"./8._OOP_Continued/5._Friend_Functions_and_Classes.html\">5. Friend Functions and Classes</a></li>\n</ul>\n</li>\n<li><a href=\"Home.html\">Home</a></li>\n</ul>\n",
      "id": 311
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/1._What_is_CP.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/1._What_is_CP.html",
      "content": "# 1. What is CP\nCreated Thursday 08 April 2021\n\nFIXME: Talk about history\n\n",
      "html": "<h1 id=\"1.-what-is-cp\">1. What is CP <a class=\"heading-anchor-permalink\" href=\"#1.-what-is-cp\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<p>FIXME: Talk about history</p>\n",
      "id": 312
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/2._Why_CP.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/2._Why_CP.html",
      "content": "# 2. Why CP\nCreated Thursday 23 April 2020\n\nWe are doing competitive programming to:\n\n1. Enhance our coding and algorithmic skills.\n2. It's an opportunity.\n3. To get comfortable with logic and programming.\n4. It makes our profile in the world, as a programmer.\n5. To have fun.\n6. Makes us fast and accurate.\n7. Get a feel for practical programming.\n8. Remove the fear of problems/algorithms design/logic.\n\n 9. Guaranteed brain exercise.\n\n10. Teaches us to work in teams.\n11. It's actually fun. Competition all around the world.\n\n\nWe are not doing it:\n\n1. For the sake of doing it.\n2. For just doing it.\n\n\n",
      "html": "<h1 id=\"2.-why-cp\">2. Why CP <a class=\"heading-anchor-permalink\" href=\"#2.-why-cp\">#</a></h1>\n<p>Created Thursday 23 April 2020</p>\n<p>We are doing competitive programming to:</p>\n<ol>\n<li>\n<p>Enhance our coding and algorithmic skills.</p>\n</li>\n<li>\n<p>It’s an opportunity.</p>\n</li>\n<li>\n<p>To get comfortable with logic and programming.</p>\n</li>\n<li>\n<p>It makes our profile in the world, as a programmer.</p>\n</li>\n<li>\n<p>To have fun.</p>\n</li>\n<li>\n<p>Makes us fast and accurate.</p>\n</li>\n<li>\n<p>Get a feel for practical programming.</p>\n</li>\n<li>\n<p>Remove the fear of problems/algorithms design/logic.</p>\n</li>\n<li>\n<p>Guaranteed brain exercise.</p>\n</li>\n<li>\n<p>Teaches us to work in teams.</p>\n</li>\n<li>\n<p>It’s actually fun. Competition all around the world.</p>\n</li>\n</ol>\n<p>We are not doing it:</p>\n<ol>\n<li>For the sake of doing it.</li>\n<li>For just doing it.</li>\n</ol>\n",
      "id": 313
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/3._Various_Types_of_Errors.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/3._Various_Types_of_Errors.html",
      "content": "# 3. Various Types of Errors\nCreated Thursday 23 April 2020\n\nVerdicts on platforms:\n\n1. Accepted - Done\n2. TLE - Time Limit Exceeded \n\t1. Unchecked while loop\n\t2. Too slow - some change or major change in code\n3. Compilation Error\n\t1. Spelling error of some type.\n\t2. Header file problems\n\t3. std:: problem\n4. Runtime Error\n\t1. Divide By Zero\n\t2. Segmentation Fault - Accessing out of bounds or deleted memory location.\n\t3. Array size > 10^8 ^coz maximum array size 256MB\n\t4. In a function, we can make an make a static array of maximum size 10^6^(4 MB).\n5. Wrong Answer:\n\t1. Check the code - Dry run it\n\t2. Are corner cases missing.\n\t3. If there is some doubt we'll likely get a Wrong Answer.\n\t4. Code-wise wrong answers:\n\t\t1. Integer multiplication overflow.\n\t\t2. Float or doubles overflow or precision error.\n\t\t3. Uninitialized variables.\n\t5. Anything else is a logical error.\n\n\n",
      "html": "<h1 id=\"3.-various-types-of-errors\">3. Various Types of Errors <a class=\"heading-anchor-permalink\" href=\"#3.-various-types-of-errors\">#</a></h1>\n<p>Created Thursday 23 April 2020</p>\n<p>Verdicts on platforms:</p>\n<ol>\n<li>Accepted - Done</li>\n<li>TLE - Time Limit Exceeded\n<ol>\n<li>Unchecked while loop</li>\n<li>Too slow - some change or major change in code</li>\n</ol>\n</li>\n<li>Compilation Error\n<ol>\n<li>Spelling error of some type.</li>\n<li>Header file problems</li>\n<li>std:: problem</li>\n</ol>\n</li>\n<li>Runtime Error\n<ol>\n<li>Divide By Zero</li>\n<li>Segmentation Fault - Accessing out of bounds or deleted memory location.</li>\n<li>Array size &gt; 10^8 ^coz maximum array size 256MB</li>\n<li>In a function, we can make an make a static array of maximum size 10^6^(4 MB).</li>\n</ol>\n</li>\n<li>Wrong Answer:\n<ol>\n<li>Check the code - Dry run it</li>\n<li>Are corner cases missing.</li>\n<li>If there is some doubt we’ll likely get a Wrong Answer.</li>\n<li>Code-wise wrong answers:\n<ol>\n<li>Integer multiplication overflow.</li>\n<li>Float or doubles overflow or precision error.</li>\n<li>Uninitialized variables.</li>\n</ol>\n</li>\n<li>Anything else is a logical error.</li>\n</ol>\n</li>\n</ol>\n",
      "id": 314
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/0_index.html",
      "content": "# 4. How to approach a problem in a competitive programming contest\nCreated Thursday 23 April 2020\n\n\n* This approach is the best for competitive programming, follow it.\n\n\n**Problem**\n\n1. Paragraphs\n2. Input Format\n3. Output Format\n4. Constraints\n5. Sample I/O\n6. Explanation(of I/O) - Optional\n\n\nThe Approach:\n\n1. **Read** the problem and understand it. We may need to read it many many times.\n2. **Analyse** the requirements - What we need to do with allowed time limit.\n3. Think of **solution(s) **with** Time Complexities.**\n4. Choose a solution satisfying the **constraint**(s).\n5. Write **pseudocode** or fix the solution steps.\n6. **Dry Run** it once for sample cases. \n7. Check the I/O format, write **code**.\n8. Check if All sample cases are **okay**. If not, go to Step 4.\n9. Submit.\n\n\n\n* We'll get the hang of it upon practicing.\n\n\n",
      "html": "<h1 id=\"4.-how-to-approach-a-problem-in-a-competitive-programming-contest\">4. How to approach a problem in a competitive programming contest <a class=\"heading-anchor-permalink\" href=\"#4.-how-to-approach-a-problem-in-a-competitive-programming-contest\">#</a></h1>\n<p>Created Thursday 23 April 2020</p>\n<ul>\n<li>This approach is the best for competitive programming, follow it.</li>\n</ul>\n<p><strong>Problem</strong></p>\n<ol>\n<li>Paragraphs</li>\n<li>Input Format</li>\n<li>Output Format</li>\n<li>Constraints</li>\n<li>Sample I/O</li>\n<li>Explanation(of I/O) - Optional</li>\n</ol>\n<p>The Approach:</p>\n<ol>\n<li><strong>Read</strong> the problem and understand it. We may need to read it many many times.</li>\n<li><strong>Analyse</strong> the requirements - What we need to do with allowed time limit.</li>\n<li>Think of <strong>solution(s) <strong>with</strong> Time Complexities.</strong></li>\n<li>Choose a solution satisfying the <strong>constraint</strong>(s).</li>\n<li>Write <strong>pseudocode</strong> or fix the solution steps.</li>\n<li><strong>Dry Run</strong> it once for sample cases.</li>\n<li>Check the I/O format, write <strong>code</strong>.</li>\n<li>Check if All sample cases are <strong>okay</strong>. If not, go to Step 4.</li>\n<li>Submit.</li>\n</ol>\n<ul>\n<li>We’ll get the hang of it upon practicing.</li>\n</ul>\n",
      "id": 315
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/a._Reading_problem_statements.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/a._Reading_problem_statements.html",
      "content": "# a. Reading problem statements\nCreated Thursday 23 April 2020\n\nWe have to read line by line... :)\n\n",
      "html": "<h1 id=\"a.-reading-problem-statements\">a. Reading problem statements <a class=\"heading-anchor-permalink\" href=\"#a.-reading-problem-statements\">#</a></h1>\n<p>Created Thursday 23 April 2020</p>\n<p>We have to read line by line… :)</p>\n",
      "id": 316
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/b._IO_Format.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/b._IO_Format.html",
      "content": "# b. IO Format\nCreated Thursday 23 April 2020\n\nInput:\n\n* We can be given a single problem instance.\n* We can be given test cases. Two approaches are possible here:\n\n\n1. Output is displayed **after** all input case are over - Here we need to **store the input**. We will iterate on the inputs and display afterwards, no need of **output** storage.\n\t* Snippets stored in vscode C++, snippets. One for array input one for single data input.\n2. Output displayed just after each case: No need to store the the ip's. Iterate and call the functions.\n\nHere we need to write a function to do our job. i.e effectively we made it a functional problem.\n\nOutput: Don't write stuff like \"Enter number\" etc. The output should match exactly.\n\n",
      "html": "<h1 id=\"b.-io-format\">b. IO Format <a class=\"heading-anchor-permalink\" href=\"#b.-io-format\">#</a></h1>\n<p>Created Thursday 23 April 2020</p>\n<p>Input:</p>\n<ul>\n<li>We can be given a single problem instance.</li>\n<li>We can be given test cases. Two approaches are possible here:</li>\n</ul>\n<ol>\n<li>Output is displayed <strong>after</strong> all input case are over - Here we need to <strong>store the input</strong>. We will iterate on the inputs and display afterwards, no need of <strong>output</strong> storage.\n<ul>\n<li>Snippets stored in vscode C++, snippets. One for array input one for single data input.</li>\n</ul>\n</li>\n<li>Output displayed just after each case: No need to store the the ip’s. Iterate and call the functions.</li>\n</ol>\n<p>Here we need to write a function to do our job. i.e effectively we made it a functional problem.</p>\n<p>Output: Don’t write stuff like “Enter number” etc. The output should match exactly.</p>\n",
      "id": 317
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/c._Constraints/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/c._Constraints/0_index.html",
      "content": "# c. Constraints\n\nCreated Thursday 23 April 2020\n\n1. Time Limit - Mostly 1 s or 2s or ... 100s(rare).\n2. Memory Limit - 256MB (it's never less generally).\n3. Input Range, e.g 1 <= N <= 10^6 ^- mostly integer.\n4. Element range, e.g 0<=A[i]<=10^8^ - helps us decide the type of input variable.\n\nHow to analyze the constraints:\n\n1. Average ops are 10^8 ^per second. If our T.C is > 10^8 ^\\* Time_Limit(in s), then we get TLE(Time Limit Exceeded). **We assume** **that all judges have the same speed.**\n\n![](/assets/c._Constraints-image-1.png)\n\nSlighltly better looking\n![](/assets/c._Constraints-image-2.jpg)\n",
      "html": "<h1 id=\"c.-constraints\">c. Constraints <a class=\"heading-anchor-permalink\" href=\"#c.-constraints\">#</a></h1>\n<p>Created Thursday 23 April 2020</p>\n<ol>\n<li>Time Limit - Mostly 1 s or 2s or … 100s(rare).</li>\n<li>Memory Limit - 256MB (it’s never less generally).</li>\n<li>Input Range, e.g 1 &lt;= N &lt;= 10^6 ^- mostly integer.</li>\n<li>Element range, e.g 0&lt;=A[i]&lt;=10^8^ - helps us decide the type of input variable.</li>\n</ol>\n<p>How to analyze the constraints:</p>\n<ol>\n<li>Average ops are 10^8 ^per second. If our T.C is &gt; 10^8 ^* Time_Limit(in s), then we get TLE(Time Limit Exceeded). <strong>We assume</strong> <strong>that all judges have the same speed.</strong></li>\n</ol>\n<p><img src=\"/assets/c._Constraints-image-1.png\" alt=\"\"></p>\n<p>Slighltly better looking\n<img src=\"/assets/c._Constraints-image-2.jpg\" alt=\"\"></p>\n",
      "id": 318
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/2._Time_and_Space_Complexity/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/2._Time_and_Space_Complexity/0_index.html",
      "content": "# 2. Time and Space Complexity\nCreated Monday 27 April 2020\n\nBeing comfortable with analysis of algorithms is extremely important in CP and CS in general.\n\n",
      "html": "<h1 id=\"2.-time-and-space-complexity\">2. Time and Space Complexity <a class=\"heading-anchor-permalink\" href=\"#2.-time-and-space-complexity\">#</a></h1>\n<p>Created Monday 27 April 2020</p>\n<p>Being comfortable with analysis of algorithms is extremely important in CP and CS in general.</p>\n",
      "id": 319
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/2._Time_and_Space_Complexity/Problems/1._Kadane's_Algorithm.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/2._Time_and_Space_Complexity/Problems/1._Kadane's_Algorithm.html",
      "content": "# 1. Kadane's Algorithm\nCreated Monday 27 April 2020\n\n\n* Largest Sum Subarray - return the maximum sum.\n\n#### Algorithm\n\n1. Traverse, but ignore. non-positive values at the start of the array.\n2. Select the first +ve chunk of positive values at the start. Store the sum in a ``global_sum``, which stores maximum sum.\n3. If you encouter a negative value, you have two choices:\n\t1. Include it - but only if the new sum(sum_till_now + value) is positive. \n\t2. Exclude it - If a. is not possible. Subarray ``temp_sum`` becomes zero, and a new subarray is started, from the nearest incoming positive number.\n4. Continue traversal and step 3.\n5. The value ``global_sum`` after traversing the array is the maxium sum.\n\n\nNote: Step 1 is unecessary, as it is already covered in the remaining steps.\n\n#### Motivation\n\n* Take a general example of an array with a lot of elements(more than 2).\n* Clear your mind by removing the non positive values at start.\n\n\n",
      "html": "<h1 id=\"1.-kadane%E2%80%99s-algorithm\">1. Kadane’s Algorithm <a class=\"heading-anchor-permalink\" href=\"#1.-kadane%E2%80%99s-algorithm\">#</a></h1>\n<p>Created Monday 27 April 2020</p>\n<ul>\n<li>Largest Sum Subarray - return the maximum sum.</li>\n</ul>\n<h4 id=\"algorithm\">Algorithm <a class=\"heading-anchor-permalink\" href=\"#algorithm\">#</a></h4>\n<ol>\n<li>Traverse, but ignore. non-positive values at the start of the array.</li>\n<li>Select the first +ve chunk of positive values at the start. Store the sum in a <code>global_sum</code>, which stores maximum sum.</li>\n<li>If you encouter a negative value, you have two choices:\n<ol>\n<li>Include it - but only if the new sum(sum_till_now + value) is positive.</li>\n<li>Exclude it - If a. is not possible. Subarray <code>temp_sum</code> becomes zero, and a new subarray is started, from the nearest incoming positive number.</li>\n</ol>\n</li>\n<li>Continue traversal and step 3.</li>\n<li>The value <code>global_sum</code> after traversing the array is the maxium sum.</li>\n</ol>\n<p>Note: Step 1 is unecessary, as it is already covered in the remaining steps.</p>\n<h4 id=\"motivation\">Motivation <a class=\"heading-anchor-permalink\" href=\"#motivation\">#</a></h4>\n<ul>\n<li>Take a general example of an array with a lot of elements(more than 2).</li>\n<li>Clear your mind by removing the non positive values at start.</li>\n</ul>\n",
      "id": 320
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/2._Time_and_Space_Complexity/Problems/2._LeftRight_Sum.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/2._Time_and_Space_Complexity/Problems/2._LeftRight_Sum.html",
      "content": "# 2. LeftRight Sum\nCreated Sunday 03 May 2020\n\nWe are given an array. We have to store the product of all the elements to the left, and the right in Ai. Time (O(n)) and space complexity should be constant. Division is not allowed.\nAlgorithm\n\n1. We store the left product in a variable.\n2. We calculate the right product and multiply it with left. Before doing this, store the current element in a variable. \n3. Contiue till the end.\n\n\nSpace O(1), Time O(n)\n\n",
      "html": "<h1 id=\"2.-leftright-sum\">2. LeftRight Sum <a class=\"heading-anchor-permalink\" href=\"#2.-leftright-sum\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<p>We are given an array. We have to store the product of all the elements to the left, and the right in Ai. Time (O(n)) and space complexity should be constant. Division is not allowed.\nAlgorithm</p>\n<ol>\n<li>We store the left product in a variable.</li>\n<li>We calculate the right product and multiply it with left. Before doing this, store the current element in a variable.</li>\n<li>Contiue till the end.</li>\n</ol>\n<p>Space O(1), Time O(n)</p>\n",
      "id": 321
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/0_index.html",
      "content": "# 3. IO Techniques\nCreated Thursday 23 April 2020\n\nSimple prerequisites like loops and all.\nIn C++, we can read and write from a file using stdin and stdout.\n\n\n* Always use <bits/stdc++.h> for competitive programming.\n* File Handling\n```c++\nfreopen(\"in.txt\", \"r\", stdin);\t// read mode\nfreopen(\"out.txt\", \"w\", stdout); // there's the append mode \"a\" too\n\ncin >> x; // writes to x from stdin, i.e the file\ncout << x; // writes the value of x to the file\n```\n\n* You can output simutaneously to multiple output files, but input is taken from one stream only.\n\nFor Python:\n```python\n# Below is Python3 code for input/output\n\nimport sys\n# For getting input from in.txt file\nsys.stdin = open('in.txt', 'r')\nx = input()\t# reading\n\n# Printing the Output to out.txt file\nsys.stdout = open('out.txt', 'w')\nprint(x)\t//writing\n```\n",
      "html": "<h1 id=\"3.-io-techniques\">3. IO Techniques <a class=\"heading-anchor-permalink\" href=\"#3.-io-techniques\">#</a></h1>\n<p>Created Thursday 23 April 2020</p>\n<p>Simple prerequisites like loops and all.\nIn C++, we can read and write from a file using stdin and stdout.</p>\n<ul>\n<li>Always use &lt;bits/stdc++.h&gt; for competitive programming.</li>\n<li>File Handling</li>\n</ul>\n<pre><code class=\"language-c++\">freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);\t// read mode\nfreopen(&quot;out.txt&quot;, &quot;w&quot;, stdout); // there's the append mode &quot;a&quot; too\n\ncin &gt;&gt; x; // writes to x from stdin, i.e the file\ncout &lt;&lt; x; // writes the value of x to the file\n</code></pre>\n<ul>\n<li>You can output simutaneously to multiple output files, but input is taken from one stream only.</li>\n</ul>\n<p>For Python:</p>\n<pre><code class=\"language-python\"># Below is Python3 code for input/output\n\nimport sys\n# For getting input from in.txt file\nsys.stdin = open('in.txt', 'r')\nx = input()\t# reading\n\n# Printing the Output to out.txt file\nsys.stdout = open('out.txt', 'w')\nprint(x)\t//writing\n</code></pre>\n",
      "id": 322
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/1._Console_streams.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/1._Console_streams.html",
      "content": "# 1. Console streams\nCreated Friday 21 August 2020\n\n<https://www.slideshare.net/basharkernel/acm-aleppo-cpc-training-second-session>\n\n\n* In general, cin cout streams are **slow** in programing contests.\n* To get faster IO use the C methods **printf** and **scanf**.\n* Or you may **put this** statement before any cin or cout statement.\n```c++\nios::sync_with_stdio (false);\n```\n • This statement turns off the synchronization between the C++ IO and C IO, so once you use it you **can’t use** printf and scanf.\n\n",
      "html": "<h1 id=\"1.-console-streams\">1. Console streams <a class=\"heading-anchor-permalink\" href=\"#1.-console-streams\">#</a></h1>\n<p>Created Friday 21 August 2020</p>\n<p><a href=\"https://www.slideshare.net/basharkernel/acm-aleppo-cpc-training-second-session\">https://www.slideshare.net/basharkernel/acm-aleppo-cpc-training-second-session</a></p>\n<ul>\n<li>In general, cin cout streams are <strong>slow</strong> in programing contests.</li>\n<li>To get faster IO use the C methods <strong>printf</strong> and <strong>scanf</strong>.</li>\n<li>Or you may <strong>put this</strong> statement before any cin or cout statement.</li>\n</ul>\n<pre><code class=\"language-c++\">ios::sync_with_stdio (false);\n</code></pre>\n<p>• This statement turns off the synchronization between the C++ IO and C IO, so once you use it you <strong>can’t use</strong> printf and scanf.</p>\n",
      "id": 323
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/0_index.html",
      "content": "# 2. C++ File streams\n\nCreated Saturday 25 April 2020\n\n- Streams are used for accessing data from some source(input devices, files or networks) or sending data to a network, file, output devices.\n\n![](/assets/2._C++_File_streams-image-1.png)\n\n- For achieving this communication, we use the mechanism of streams(literally a pipe or river) in C++.\n\n- In C++, for I/O we have a built-in class, called iostream - input output stream. This has two classes inside, istream, ostream.\n  - We have the cin built-in object of class istream which has the extraction operator(>>) overloaded with it.\n  - cout is an built-in object of ostream class and has the insertion operator(<<) overloaded with it.\n  - Both are available in iostream.\n\n![](/assets/2._C++_File_streams-image-2.png)\n![](/assets/2._C++_File_streams-image-3.png)\n\n- For file handling, we have fstream class, which has ifstream and ofstream.\n\n![](file:///Users/muhammadsanjar/Pictures/Selection_115.png)[~/home_files/git_dir/zim-desktop-wiki/zim/www.py](file:///Users/muhammadsanjar/home_files/git_dir/zim-desktop-wiki/zim/www.py)\n",
      "html": "<h1 id=\"2.-c%2B%2B-file-streams\">2. C++ File streams <a class=\"heading-anchor-permalink\" href=\"#2.-c%2B%2B-file-streams\">#</a></h1>\n<p>Created Saturday 25 April 2020</p>\n<ul>\n<li>Streams are used for accessing data from some source(input devices, files or networks) or sending data to a network, file, output devices.</li>\n</ul>\n<p><img src=\"/assets/2._C++_File_streams-image-1.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>For achieving this communication, we use the mechanism of streams(literally a pipe or river) in C++.</p>\n</li>\n<li>\n<p>In C++, for I/O we have a built-in class, called iostream - input output stream. This has two classes inside, istream, ostream.</p>\n<ul>\n<li>We have the cin built-in object of class istream which has the extraction operator(&gt;&gt;) overloaded with it.</li>\n<li>cout is an built-in object of ostream class and has the insertion operator(&lt;&lt;) overloaded with it.</li>\n<li>Both are available in iostream.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/assets/2._C++_File_streams-image-2.png\" alt=\"\">\n<img src=\"/assets/2._C++_File_streams-image-3.png\" alt=\"\"></p>\n<ul>\n<li>For file handling, we have fstream class, which has ifstream and ofstream.</li>\n</ul>\n<p>![](file:///Users/muhammadsanjar/Pictures/Selection_115.png)[~/home_files/git_dir/zim-desktop-wiki/zim/www.py](file:///Users/muhammadsanjar/home_files/git_dir/zim-desktop-wiki/zim/www.py)</p>\n",
      "id": 324
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/1._Writing_to_a_file.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/1._Writing_to_a_file.html",
      "content": "# 1. Writing to a file\nCreated Saturday 25 April 2020\n\n\n* Writing to a file - unlike cin and cout, we have to create the objects similar to cin and cout.\n* For writing, we need only the out file stream(ofstream) object.\n```c++\n#include<fstream>\n\nint main()\n{\n\t// provide the modes app, trunc - by default trunc is assumed\n\t// create an object to handle the file\n\n\tofstream outfile(\"my.txt\", ios::app); // it'll create a file(if it doesn't exist), else it will open the file\n\n\t// or outfile.write(\"my.txt\", ios:app);\n\n\toutfile << \"Hello\" << endl;\n\toutfile << 25 << endl;\n\n\t//closing the file - very important\n\toutfile.close(); // it's free now - i.e the OS knows that we have freed the file for other programs\n}\n```\n",
      "html": "<h1 id=\"1.-writing-to-a-file\">1. Writing to a file <a class=\"heading-anchor-permalink\" href=\"#1.-writing-to-a-file\">#</a></h1>\n<p>Created Saturday 25 April 2020</p>\n<ul>\n<li>Writing to a file - unlike cin and cout, we have to create the objects similar to cin and cout.</li>\n<li>For writing, we need only the out file stream(ofstream) object.</li>\n</ul>\n<pre><code class=\"language-c++\">#include&lt;fstream&gt;\n\nint main()\n{\n\t// provide the modes app, trunc - by default trunc is assumed\n\t// create an object to handle the file\n\n\tofstream outfile(&quot;my.txt&quot;, ios::app); // it'll create a file(if it doesn't exist), else it will open the file\n\n\t// or outfile.write(&quot;my.txt&quot;, ios:app);\n\n\toutfile &lt;&lt; &quot;Hello&quot; &lt;&lt; endl;\n\toutfile &lt;&lt; 25 &lt;&lt; endl;\n\n\t//closing the file - very important\n\toutfile.close(); // it's free now - i.e the OS knows that we have freed the file for other programs\n}\n</code></pre>\n",
      "id": 325
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/2._Reading_from_a_file.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/2._Reading_from_a_file.html",
      "content": "# 2. Reading from a file\nCreated Saturday 25 April 2020\n\n\n* Reading to a file - unlike cin and cout, we have to create the objects similar to cin and cout.\n* For writing, we need only the in file stream(ifstream) object.\n* Include fstream - it has ifstream and ofstream inside\n```c++\n#include<fstream>\n#include<iostream>\nusing namespace std;\n\nint main()\n{\n\t// provide the modes app, trunc - by default trunc is assumed\n\t// create an object to handle the file\n\n\t// the file must exist - we should check that it exists\n\tifstream infile;\t// infile points to the file, NULL if it does not exist\n\n\tinfile.open(\"my.txt\");\t//no need mention flag/mode, coz ifstream is for reading only\n\n\t// check or check if(infile)\n\tif(infile.is_open())\t// returns ifFileExists\n\t\tcout << \"Exists\\n\";\n\telse\n\t\tcout << \"Doesn't Exist\\n\";\n\n\t// printing the file to console\n\tstring x = \"\";\n\tinfile >> x;\t// assuming we know the format and the encoding\n\tcout << x;\t// infile pointer moves forward, jumps at whitespaces\n\n\t// for checking if file has ended\n\tif(infile.is_eof())\n\t\tcout << \"File Ended\";\n\n\t// for reading the whole/part file\n\twhile(infile.good())\n\t{\n\t\tinfile >> x;\n\t\tcout << x;\n\t}\n\n\t//closing the file - very important\n\tinfile.close(); // it's free now - i.e the OS knows that we have freed the file for other programs\n\n\treturn 0;\n}\n```\n",
      "html": "<h1 id=\"2.-reading-from-a-file\">2. Reading from a file <a class=\"heading-anchor-permalink\" href=\"#2.-reading-from-a-file\">#</a></h1>\n<p>Created Saturday 25 April 2020</p>\n<ul>\n<li>Reading to a file - unlike cin and cout, we have to create the objects similar to cin and cout.</li>\n<li>For writing, we need only the in file stream(ifstream) object.</li>\n<li>Include fstream - it has ifstream and ofstream inside</li>\n</ul>\n<pre><code class=\"language-c++\">#include&lt;fstream&gt;\n#include&lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n\t// provide the modes app, trunc - by default trunc is assumed\n\t// create an object to handle the file\n\n\t// the file must exist - we should check that it exists\n\tifstream infile;\t// infile points to the file, NULL if it does not exist\n\n\tinfile.open(&quot;my.txt&quot;);\t//no need mention flag/mode, coz ifstream is for reading only\n\n\t// check or check if(infile)\n\tif(infile.is_open())\t// returns ifFileExists\n\t\tcout &lt;&lt; &quot;Exists\\n&quot;;\n\telse\n\t\tcout &lt;&lt; &quot;Doesn't Exist\\n&quot;;\n\n\t// printing the file to console\n\tstring x = &quot;&quot;;\n\tinfile &gt;&gt; x;\t// assuming we know the format and the encoding\n\tcout &lt;&lt; x;\t// infile pointer moves forward, jumps at whitespaces\n\n\t// for checking if file has ended\n\tif(infile.is_eof())\n\t\tcout &lt;&lt; &quot;File Ended&quot;;\n\n\t// for reading the whole/part file\n\twhile(infile.good())\n\t{\n\t\tinfile &gt;&gt; x;\n\t\tcout &lt;&lt; x;\n\t}\n\n\t//closing the file - very important\n\tinfile.close(); // it's free now - i.e the OS knows that we have freed the file for other programs\n\n\treturn 0;\n}\n</code></pre>\n",
      "id": 326
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/3._Serialization.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/3._Serialization.html",
      "content": "# 3. Serialization\nCreated Saturday 25 April 2020\n\n\n* Serialization is the process of storing and retrieving the state of an object from a file.\n* We can overload the << and >> operators in our classes in order to read and write objects from files. \n\n\n",
      "html": "<h1 id=\"3.-serialization\">3. Serialization <a class=\"heading-anchor-permalink\" href=\"#3.-serialization\">#</a></h1>\n<p>Created Saturday 25 April 2020</p>\n<ul>\n<li>Serialization is the process of storing and retrieving the state of an object from a file.</li>\n<li>We can overload the &lt;&lt; and &gt;&gt; operators in our classes in order to read and write objects from files.</li>\n</ul>\n",
      "id": 327
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/3._General_tricks.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/3._IO_Techniques/3._General_tricks.html",
      "content": "# 3. General tricks\nCreated Friday 21 August 2020\n\n### Unknown number of inputs\n\n* If we have many test cases or don’t know how many test cases (or until you reach the end of the file) you can use **while(cin >> x)**\n* If we don’t know how many test cases but we know that the file end with zero we may use this statement: **while(cin >> x && x)** \n\n\n",
      "html": "<h1 id=\"3.-general-tricks\">3. General tricks <a class=\"heading-anchor-permalink\" href=\"#3.-general-tricks\">#</a></h1>\n<p>Created Friday 21 August 2020</p>\n<h3 id=\"unknown-number-of-inputs\">Unknown number of inputs <a class=\"heading-anchor-permalink\" href=\"#unknown-number-of-inputs\">#</a></h3>\n<ul>\n<li>If we have many test cases or don’t know how many test cases (or until you reach the end of the file) you can use <strong>while(cin &gt;&gt; x)</strong></li>\n<li>If we don’t know how many test cases but we know that the file end with zero we may use this statement: <strong>while(cin &gt;&gt; x &amp;&amp; x)</strong></li>\n</ul>\n",
      "id": 328
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/0_index.html",
      "content": "# 4. Language Tools\nCreated Sunday 03 May 2020\n\n[Language Tools for C++ CN](4._Language_Tools/Lang_Tools_C++.pdf)\n[Language Tools for Python CN](4._Language_Tools/Lang_Tools_Python.pdf)\n[Language Tools for Java CN](4._Language_Tools/Lang_Tools_Java.pdf)\n\n",
      "html": "<h1 id=\"4.-language-tools\">4. Language Tools <a class=\"heading-anchor-permalink\" href=\"#4.-language-tools\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<p><a href=\"4._Language_Tools/Lang_Tools_C++.pdf\">Language Tools for C++ CN</a>\n<a href=\"4._Language_Tools/Lang_Tools_Python.pdf\">Language Tools for Python CN</a>\n<a href=\"4._Language_Tools/Lang_Tools_Java.pdf\">Language Tools for Java CN</a></p>\n",
      "id": 329
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/0._Conveniences/1._pair.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/0._Conveniences/1._pair.html",
      "content": "# 1. pair\nCreated Sunday 03 May 2020\n\n\n* present in iostream, <untility>\n* pair<int, int> anything.\n* p.first, and p.second can be used here.\n* Initialized using (a, b) or {a, b} or using = make_pair(a, b).\n* Can be used freely using {a, b} - This is a pair by default.\n* Does copy based on content.\n\n\n",
      "html": "<h1 id=\"1.-pair\">1. pair <a class=\"heading-anchor-permalink\" href=\"#1.-pair\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<ul>\n<li>present in iostream, <untility></li>\n<li>pair&lt;int, int&gt; anything.</li>\n<li>p.first, and p.second can be used here.</li>\n<li>Initialized using (a, b) or {a, b} or using = make_pair(a, b).</li>\n<li>Can be used freely using {a, b} - This is a pair by default.</li>\n<li>Does copy based on content.</li>\n</ul>\n",
      "id": 330
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/0._Conveniences/2._tuple.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/0._Conveniences/2._tuple.html",
      "content": "# 2. tuple\nCreated Monday 18 May 2020\n\n\n1. **To declarize:**\n```c++\ntuple <type_1, type_2....> variable_name(val1, val2, ...)\n```\n\n\n2. **To change/access values:**\n```c++\n# tuple name is tupVariable\n\n# get <index> (VariableName);\n\nget<1>(tupVariable) = val1;\nget<2>(tupVariable) = val2;\n```\n\n3. **tuple_size **- Used with\n\n\n",
      "html": "<h1 id=\"2.-tuple\">2. tuple <a class=\"heading-anchor-permalink\" href=\"#2.-tuple\">#</a></h1>\n<p>Created Monday 18 May 2020</p>\n<ol>\n<li><strong>To declarize:</strong></li>\n</ol>\n<pre><code class=\"language-c++\">tuple &lt;type_1, type_2....&gt; variable_name(val1, val2, ...)\n</code></pre>\n<ol start=\"2\">\n<li><strong>To change/access values:</strong></li>\n</ol>\n<pre><code class=\"language-c++\"># tuple name is tupVariable\n\n# get &lt;index&gt; (VariableName);\n\nget&lt;1&gt;(tupVariable) = val1;\nget&lt;2&gt;(tupVariable) = val2;\n</code></pre>\n<ol start=\"3\">\n<li>**tuple_size **- Used with</li>\n</ol>\n",
      "id": 331
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/0_index.html",
      "content": "# 1. STL - Data Structures\nCreated Sunday 03 May 2020\n\n\n* STL - Standard Template Library\n\nWhy do we use it? - It is stupid to implement data structures in a contest.\n\n\n* STL consists of a library having many commonly used algorithms and data structures, implemented.\n* There are many things inside STL, in a contest, so we'll just use [CPP Reference](https://en.cppreference.com/w/Main_Page) if require somethimg rare, no need to remember anything.\n\n\n*****\n\nIt is something that can be done in order to make the thing go fast. It is present. I am there to work on the project.\nIt is expected to be completed by two-third in the time being, it is estimated that we cannot do well until prodded. What appears to be a great feeling is that which should be kept in order to make way for the things at hand. I can definitely not make it this way.\n\n",
      "html": "<h1 id=\"1.-stl---data-structures\">1. STL - Data Structures <a class=\"heading-anchor-permalink\" href=\"#1.-stl---data-structures\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<ul>\n<li>STL - Standard Template Library</li>\n</ul>\n<p>Why do we use it? - It is stupid to implement data structures in a contest.</p>\n<ul>\n<li>STL consists of a library having many commonly used algorithms and data structures, implemented.</li>\n<li>There are many things inside STL, in a contest, so we’ll just use <a href=\"https://en.cppreference.com/w/Main_Page\">CPP Reference</a> if require somethimg rare, no need to remember anything.</li>\n</ul>\n<hr>\n<p>It is something that can be done in order to make the thing go fast. It is present. I am there to work on the project.\nIt is expected to be completed by two-third in the time being, it is estimated that we cannot do well until prodded. What appears to be a great feeling is that which should be kept in order to make way for the things at hand. I can definitely not make it this way.</p>\n",
      "id": 332
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/1._Physical_Data_Structures/1._Vector/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/1._Physical_Data_Structures/1._Vector/0_index.html",
      "content": "# 1. Vector\nCreated Sunday 03 May 2020\n\n\n* It is a dynamic array. Reallocates and doubles size when size()>capacity().\n\nUses:\n```c++\n#include<iostream>\n#include<vector>\n\nint main()\n{\nvector<int> v(5);\n}\n```\n\nQ) What is an iterator?\nA) It is the pointer to an element within the range of the data structures.\n\n1. We can go to the next one by doing **+=1**\n2. We can access the element in the data structure by dereferencing.\n3. **vec.begin()** returns the starting element. **vec.end()** is the pointer **after **the last element in the DS.\n4. To make an iterator using\n```c++\nvector<int> :: iterator it = vec.begin();\n// we can also just use auto\n```\n\n*****\n\nVector is just another name of our Dynamic Array. Exactly the same as our implementation.\n\n* It has been implemented in STL.\n* Doubles the size when the size is less.\n* Keeps a size variable.\n* Keeps a capacity variable.\n* Starts from size 0, i.e NULL.\n* Can be used dynamically and statically.\n\n\n*****\n\nheader: **<vector>**\nDeclaration:\n```c++\nvector <data_type> v; \tstatic\nvector <data_type>* v = new vector<int>;\t//note the parentheses\nvector <data_type>* v = new vector<int>(23);\t//intial size is 23, not capacity\n// Our size is 23, not capacity. i.e push_back() increases size to 24.\n```\n// We can specify initial capacity by providing an integer paremeter to the constructor. e.g vector<int> pq(23); **Remember that this inserts a garbage of type int, i.e size()==capacity().**\n\n*****\n\nMethods:\n\n* vector_name.**push_back(T)** - append. We **must **use this function only, as it checks for capacity and updates size\n* **pop_back()** deletes the last element.\n* vector_name.**at(i)** - access/modify value at index i, if within size. **Can be used as lvalue too.**\n* v[i] can also be used, but it is not safe for **insertion**, as it does no range checking. Use it only when you are sure of the index. For insertion use **at()**\n* **vec.front() **and vec.**back**() are also useful.\n* v.**size() **- returns the number of elements in the vector.\n* v.**capacity() **- returns the capacity of the vector. i.e maxium elements which can be taken without resizing.\n* vector_name.**pop_front() **- is a **void function**\n\nLearnt on my own:\n\n* v.**reserve(int i)** - makes the initial capacity as the i places.\n* **clear() - **makes size = 0. size() does not return an lvalue.\n* v.**insert(position, value) **inserts the value at index position and returns the iterator to the place where it has inserted val.\n* v.**begin**() - returns iterator to the first element\n* v.**end**() - returns iterator to **one place after** the last element. i.e iterator to v.at(i+1). It may not exist though.\n* = operator does a **deep** copy of the vector, good.\n\n\n*****\n\nNote: Just don't try to break the abstraction.\nAdvantages:\n\n1. Very space efficient. Least wastage.\n2. Fastest access.\n3. Doubling decreases the sporadic insertion time. Can be compensated with reserve().\n\n\n",
      "html": "<h1 id=\"1.-vector\">1. Vector <a class=\"heading-anchor-permalink\" href=\"#1.-vector\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<ul>\n<li>It is a dynamic array. Reallocates and doubles size when size()&gt;capacity().</li>\n</ul>\n<p>Uses:</p>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;vector&gt;\n\nint main()\n{\nvector&lt;int&gt; v(5);\n}\n</code></pre>\n<p>Q) What is an iterator?\nA) It is the pointer to an element within the range of the data structures.</p>\n<ol>\n<li>We can go to the next one by doing <strong>+=1</strong></li>\n<li>We can access the element in the data structure by dereferencing.</li>\n<li><strong>vec.begin()</strong> returns the starting element. <strong>vec.end()</strong> is the pointer **after **the last element in the DS.</li>\n<li>To make an iterator using</li>\n</ol>\n<pre><code class=\"language-c++\">vector&lt;int&gt; :: iterator it = vec.begin();\n// we can also just use auto\n</code></pre>\n<hr>\n<p>Vector is just another name of our Dynamic Array. Exactly the same as our implementation.</p>\n<ul>\n<li>It has been implemented in STL.</li>\n<li>Doubles the size when the size is less.</li>\n<li>Keeps a size variable.</li>\n<li>Keeps a capacity variable.</li>\n<li>Starts from size 0, i.e NULL.</li>\n<li>Can be used dynamically and statically.</li>\n</ul>\n<hr>\n<p>header: <strong><vector></strong>\nDeclaration:</p>\n<pre><code class=\"language-c++\">vector &lt;data_type&gt; v; \tstatic\nvector &lt;data_type&gt;* v = new vector&lt;int&gt;;\t//note the parentheses\nvector &lt;data_type&gt;* v = new vector&lt;int&gt;(23);\t//intial size is 23, not capacity\n// Our size is 23, not capacity. i.e push_back() increases size to 24.\n</code></pre>\n<p>// We can specify initial capacity by providing an integer paremeter to the constructor. e.g vector<int> pq(23); <strong>Remember that this inserts a garbage of type int, i.e size()==capacity().</strong></p>\n<hr>\n<p>Methods:</p>\n<ul>\n<li>vector_name.<strong>push_back(T)</strong> - append. We **must **use this function only, as it checks for capacity and updates size</li>\n<li><strong>pop_back()</strong> deletes the last element.</li>\n<li>vector_name.<strong>at(i)</strong> - access/modify value at index i, if within size. <strong>Can be used as lvalue too.</strong></li>\n<li>v[i] can also be used, but it is not safe for <strong>insertion</strong>, as it does no range checking. Use it only when you are sure of the index. For insertion use <strong>at()</strong></li>\n<li>**vec.front() **and vec.<strong>back</strong>() are also useful.</li>\n<li>v.**size() **- returns the number of elements in the vector.</li>\n<li>v.**capacity() **- returns the capacity of the vector. i.e maxium elements which can be taken without resizing.</li>\n<li>vector_name.**pop_front() **- is a <strong>void function</strong></li>\n</ul>\n<p>Learnt on my own:</p>\n<ul>\n<li>v.<strong>reserve(int i)</strong> - makes the initial capacity as the i places.</li>\n<li>**clear() - **makes size = 0. size() does not return an lvalue.</li>\n<li>v.**insert(position, value) **inserts the value at index position and returns the iterator to the place where it has inserted val.</li>\n<li>v.<strong>begin</strong>() - returns iterator to the first element</li>\n<li>v.<strong>end</strong>() - returns iterator to <strong>one place after</strong> the last element. i.e iterator to <a href=\"http://v.at\">v.at</a>(i+1). It may not exist though.</li>\n<li>= operator does a <strong>deep</strong> copy of the vector, good.</li>\n</ul>\n<hr>\n<p>Note: Just don’t try to break the abstraction.\nAdvantages:</p>\n<ol>\n<li>Very space efficient. Least wastage.</li>\n<li>Fastest access.</li>\n<li>Doubling decreases the sporadic insertion time. Can be compensated with reserve().</li>\n</ol>\n",
      "id": 333
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/1._Physical_Data_Structures/2._List.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/1._Physical_Data_Structures/2._List.html",
      "content": "# 2. List\nCreated Sunday 03 May 2020\n\n\n* Doubly linked list\n\n\n",
      "html": "<h1 id=\"2.-list\">2. List <a class=\"heading-anchor-permalink\" href=\"#2.-list\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<ul>\n<li>Doubly linked list</li>\n</ul>\n",
      "id": 334
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/2._String.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/2._String.html",
      "content": "# 2. String\nCreated Sunday 03 May 2020\n\n\n* Collection of character\n* present in iostream, or <string>\n* = does deep copy. Common sense\n* Copy constructor does deep copy\n* + is used for concatenation\n* **.substr(a, b)** takes the substring from 'a' of length b.(incl a) ignores if b > length.\n* .**substr(a) **from a to the end\n* **s1.compare(s2) **- returns 0 if they are equal. positive if s1 comes before s2 in lexicographic order, else negative\n* **s.length() **same as **s.size()**\n* **substrn(start, length)**\n\n\n",
      "html": "<h1 id=\"2.-string\">2. String <a class=\"heading-anchor-permalink\" href=\"#2.-string\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<ul>\n<li>Collection of character</li>\n<li>present in iostream, or <string></li>\n<li>= does deep copy. Common sense</li>\n<li>Copy constructor does deep copy</li>\n<li>\n<ul>\n<li>is used for concatenation</li>\n</ul>\n</li>\n<li><strong>.substr(a, b)</strong> takes the substring from ‘a’ of length b.(incl a) ignores if b &gt; length.</li>\n<li>.**substr(a) **from a to the end</li>\n<li>**s1.compare(s2) **- returns 0 if they are equal. positive if s1 comes before s2 in lexicographic order, else negative</li>\n<li>**s.length() **same as <strong>s.size()</strong></li>\n<li><strong>substrn(start, length)</strong></li>\n</ul>\n",
      "id": 335
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/4._Stack.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/4._Stack.html",
      "content": "# 4. Stack\nCreated Sunday 03 May 2020\n\n\n* A stack\n\n[stack_STL.cpp](./4._Stack/stack_STL.cpp)\n\n* Stacks and has are already been implemented in C++ STL. **<stack>**\n* We will learn to use it.\n\n\n1. It's better that we use **.h** now. We do this so as to avoid making main() inside the .h, as this is not allowed.\n2. If we write \"something\".h, the header is in the directory of the main file. For anywhere else, specify the complete address or use . and .. if that does the job.\n3. Inbuilt headers are included using <>\n\n\nFor stacks header is: <stack> which is a template type.\n\n\n* What we have implemented is more or less the same. The interface is:\n\t0. stack is the name of the class Stack.\n\t1. push() is the same , i.e void push(T element);\n\t2. pop() is **different**, it is a void.\n\t3. top() is the same. returns the element on the top.\n\t4. empty() is the **changed** name in STL, same as our implementation.\n\t5. size() is the same.\n\nNote: There's no need for any other thing execpt that told here.\n\n\n\n",
      "html": "<h1 id=\"4.-stack\">4. Stack <a class=\"heading-anchor-permalink\" href=\"#4.-stack\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<ul>\n<li>A stack</li>\n</ul>\n<p><a href=\"./4._Stack/stack_STL.cpp\">stack_STL.cpp</a></p>\n<ul>\n<li>Stacks and has are already been implemented in C++ STL. <strong><stack></strong></li>\n<li>We will learn to use it.</li>\n</ul>\n<ol>\n<li>It’s better that we use <strong>.h</strong> now. We do this so as to avoid making main() inside the .h, as this is not allowed.</li>\n<li>If we write “something”.h, the header is in the directory of the main file. For anywhere else, specify the complete address or use . and … if that does the job.</li>\n<li>Inbuilt headers are included using &lt;&gt;</li>\n</ol>\n<p>For stacks header is: <stack> which is a template type.</p>\n<ul>\n<li>What we have implemented is more or less the same. The interface is:\n<ol start=\"0\">\n<li>stack is the name of the class Stack.</li>\n<li>push() is the same , i.e void push(T element);</li>\n<li>pop() is <strong>different</strong>, it is a void.</li>\n<li>top() is the same. returns the element on the top.</li>\n<li>empty() is the <strong>changed</strong> name in STL, same as our implementation.</li>\n<li>size() is the same.</li>\n</ol>\n</li>\n</ul>\n<p>Note: There’s no need for any other thing execpt that told here.</p>\n",
      "id": 336
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/5._Queue.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/5._Queue.html",
      "content": "# 5. Queue\nCreated Sunday 03 May 2020\n\n\n* Now we will focus only on the interface.\n* Queue has been implemented in C++ STL. We will use only that now.\n* header **<queue>**\n* It's a simple one sided queue\n* declaration is small 'q', queue <> variable_name.\n\nInterface:\n\n1. push(data) - the same as our enqueue(). Inserts the element in the queue.\n2. front() - returns the element at head if it exists, else generic value.\n3. void pop() - deletes an element but does not return the deleted value. It is a void.\n4. size() - same as our getSize(). Returns the size of the queue.\n5. empty() - returns true if empty, else false.\n6. back() - returns the element at the back.\n\n\nNote: Both stack and queue have the exact same interfaces. With the same signatures. Only the working changes. **pop and front are different!**\n\n* Print was not discussed here.\n\n\nFor both sides insertion and deletion, use <deque>.\n\n",
      "html": "<h1 id=\"5.-queue\">5. Queue <a class=\"heading-anchor-permalink\" href=\"#5.-queue\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<ul>\n<li>Now we will focus only on the interface.</li>\n<li>Queue has been implemented in C++ STL. We will use only that now.</li>\n<li>header <strong><queue></strong></li>\n<li>It’s a simple one sided queue</li>\n<li>declaration is small ‘q’, queue &lt;&gt; variable_name.</li>\n</ul>\n<p>Interface:</p>\n<ol>\n<li>push(data) - the same as our enqueue(). Inserts the element in the queue.</li>\n<li>front() - returns the element at head if it exists, else generic value.</li>\n<li>void pop() - deletes an element but does not return the deleted value. It is a void.</li>\n<li>size() - same as our getSize(). Returns the size of the queue.</li>\n<li>empty() - returns true if empty, else false.</li>\n<li>back() - returns the element at the back.</li>\n</ol>\n<p>Note: Both stack and queue have the exact same interfaces. With the same signatures. Only the working changes. <strong>pop and front are different!</strong></p>\n<ul>\n<li>Print was not discussed here.</li>\n</ul>\n<p>For both sides insertion and deletion, use <deque>.</p>\n",
      "id": 337
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/6._Map.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/6._Map.html",
      "content": "# 6. Map\n\nCreated Sunday 03 May 2020\n\n- Stores key value pairs.\n- Uses hashing.\n- mapn.insert(key, value)\n- = does deep copy\n- To check do .find(value) or .count(value)\n- We can use man[key] = value can be used for insertion as well as retrieval.\n- .at(key) is the same as mapn[key].\n- When using the iterator, element->first is the key, element->second->is the value. **Iterator points to the whole element block, not just the key or value.**\n\n![](/assets/6._Map-image-1.png)\n\n- map is made using BST - logn\n- unordered map is made using hashtable - O(1) for all ops.\n- map supports 'pair' while unordered_map does not support it.\n",
      "html": "<h1 id=\"6.-map\">6. Map <a class=\"heading-anchor-permalink\" href=\"#6.-map\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<ul>\n<li>Stores key value pairs.</li>\n<li>Uses hashing.</li>\n<li>mapn.insert(key, value)</li>\n<li>= does deep copy</li>\n<li>To check do .find(value) or .count(value)</li>\n<li>We can use man[key] = value can be used for insertion as well as retrieval.</li>\n<li>.at(key) is the same as mapn[key].</li>\n<li>When using the iterator, element-&gt;first is the key, element-&gt;second-&gt;is the value. <strong>Iterator points to the whole element block, not just the key or value.</strong></li>\n</ul>\n<p><img src=\"/assets/6._Map-image-1.png\" alt=\"\"></p>\n<ul>\n<li>map is made using BST - logn</li>\n<li>unordered map is made using hashtable - O(1) for all ops.</li>\n<li>map supports ‘pair’ while unordered_map does not support it.</li>\n</ul>\n",
      "id": 338
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/7._Set/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/7._Set/0_index.html",
      "content": "# 7. Set\nCreated Sunday 03 May 2020\n\nThere are two kinds unordered_set and set(this one is ordered):\n\n* Each element is a key.\n* **.insert(value) **inserts the value in the set. \n* **.remove(value) **removes the value if present.\n* **.max() **returns the maxium;\n* to check do **.count**(value) \n* **.find**(value) returns iterator to the value, returns set_name.end() if not found.\n* .begin(), .end() are useful here too.\n* iterator traverses non-linearly here, but it++ still works.\n* unordered_set does not support pair<>, unordered_map too does not support pair<>.\n\n\n\n* It(<set>) is implemented using a balanced BST: Everthing is log(n).\n* unordered_set takes O(1) average time for all ops.\n\n\n",
      "html": "<h1 id=\"7.-set\">7. Set <a class=\"heading-anchor-permalink\" href=\"#7.-set\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<p>There are two kinds unordered_set and set(this one is ordered):</p>\n<ul>\n<li>\n<p>Each element is a key.</p>\n</li>\n<li>\n<p>**.insert(value) **inserts the value in the set.</p>\n</li>\n<li>\n<p>**.remove(value) **removes the value if present.</p>\n</li>\n<li>\n<p>**.max() **returns the maxium;</p>\n</li>\n<li>\n<p>to check do <strong>.count</strong>(value)</p>\n</li>\n<li>\n<p><strong>.find</strong>(value) returns iterator to the value, returns set_name.end() if not found.</p>\n</li>\n<li>\n<p>.begin(), .end() are useful here too.</p>\n</li>\n<li>\n<p>iterator traverses non-linearly here, but it++ still works.</p>\n</li>\n<li>\n<p>unordered_set does not support pair&lt;&gt;, unordered_map too does not support pair&lt;&gt;.</p>\n</li>\n<li>\n<p>It(<set>) is implemented using a balanced BST: Everthing is log(n).</p>\n</li>\n<li>\n<p>unordered_set takes O(1) average time for all ops.</p>\n</li>\n</ul>\n",
      "id": 339
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/8._Prioirty_Queue.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/8._Prioirty_Queue.html",
      "content": "# 8. Prioirty Queue\nCreated Sunday 03 May 2020\n\n\n* max heap - priority_queue\n\n\n\n* The priority_queue is actually a max priority queue.\n* The only difference is in the remove and insert functions, i.e < becomes > and vice-versa, i.e sifting condition.\n* priority_queue<int, **vector<int>, greater<int>**> for min hep.\n* **No need to include<vector>, as queue has it already.**\n* By **default**, the **functor** is less<int>.\n* By **default**, priority_queue<int, vector<int>, less<int>>\n* We will see the details afterwards.\n\n\n",
      "html": "<h1 id=\"8.-prioirty-queue\">8. Prioirty Queue <a class=\"heading-anchor-permalink\" href=\"#8.-prioirty-queue\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<ul>\n<li>\n<p>max heap - priority_queue</p>\n</li>\n<li>\n<p>The priority_queue is actually a max priority queue.</p>\n</li>\n<li>\n<p>The only difference is in the remove and insert functions, i.e &lt; becomes &gt; and vice-versa, i.e sifting condition.</p>\n</li>\n<li>\n<p>priority_queue&lt;int, <strong>vector<int>, greater<int></strong>&gt; for min hep.</p>\n</li>\n<li>\n<p><strong>No need to include<vector>, as queue has it already.</strong></p>\n</li>\n<li>\n<p>By <strong>default</strong>, the <strong>functor</strong> is less<int>.</p>\n</li>\n<li>\n<p>By <strong>default</strong>, priority_queue&lt;int, vector<int>, less<int>&gt;</p>\n</li>\n<li>\n<p>We will see the details afterwards.</p>\n</li>\n</ul>\n",
      "id": 340
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/0_index.html",
      "content": "# 2. Functions\nCreated Sunday 03 May 2020\n\nCommonly implemented algorithms.\nIt takes too much time.\n\n",
      "html": "<h1 id=\"2.-functions\">2. Functions <a class=\"heading-anchor-permalink\" href=\"#2.-functions\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<p>Commonly implemented algorithms.\nIt takes too much time.</p>\n",
      "id": 341
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/1._Sorting.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/1._Sorting.html",
      "content": "# 1. Sorting\nCreated Sunday 03 May 2020\n\n`std::sort(ds.begin(), ds.end())`\n```c++\nint arr[] = {1,3,4,23,4,4};\nsort(arr, arr+len);\n```\n\n0. Library is ``<algorithm>``\n1. Requires begin and end iterator.\n2. For array: ``sort``(arr_head, arr_head+length).\n3. For reverse, pass the functor ``greater<int>``, i.e greater is okay. Decreasing order.\n4. Sorting on the basis of some object. Custom, write a custom function. Just overload the function(). We'll write our own comparator. Pass in a lambda.\n\t1. Sorting automatically calls the function and passes the elements(by value or reference).\n\t2. We just need to pass in the name or lamda.\n\t3. [ captures ] (parameters) -> returnTypesDeclaration { lambdaStatements; }\n\n\n",
      "html": "<h1 id=\"1.-sorting\">1. Sorting <a class=\"heading-anchor-permalink\" href=\"#1.-sorting\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<p><code>std::sort(ds.begin(), ds.end())</code></p>\n<pre><code class=\"language-c++\">int arr[] = {1,3,4,23,4,4};\nsort(arr, arr+len);\n</code></pre>\n<ol start=\"0\">\n<li>Library is <code>&lt;algorithm&gt;</code></li>\n<li>Requires begin and end iterator.</li>\n<li>For array: <code>sort</code>(arr_head, arr_head+length).</li>\n<li>For reverse, pass the functor <code>greater&lt;int&gt;</code>, i.e greater is okay. Decreasing order.</li>\n<li>Sorting on the basis of some object. Custom, write a custom function. Just overload the function(). We’ll write our own comparator. Pass in a lambda.\n<ol>\n<li>Sorting automatically calls the function and passes the elements(by value or reference).</li>\n<li>We just need to pass in the name or lamda.</li>\n<li>[ captures ] (parameters) -&gt; returnTypesDeclaration { lambdaStatements; }</li>\n</ol>\n</li>\n</ol>\n",
      "id": 342
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/2._Searching/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/2._Searching/0_index.html",
      "content": "# 2. Searching\n\nCreated Sunday 03 May 2020\n\n1. For sorted arrays, do **binary_search**(begin_it, end_it, key) - returns true if found, else false.\n2. Find the index of the key, we use **lower_bound**(arr, arr+l, key) - returns the iterator if found. Iterator is arr.end() if not found. **Search from left side.**\n   1. For finding the index as integer, do `lower_bound() - arr.begin()`\n   2. `lower_bound` - first element that is greater or equal.\n      1. If key > maximum, then .end() is returned.\n      2. If key exists, iterator to first occurrence of is returned.\n   3. `higher_bound` returns the iterator to an element > key.\n      1. If key is the last, returns `.end()`\n\nNote: The names are correct and to the point.\n![](/assets/2._Searching-image-1.png)\n\n3. **equal_range(**begin_it, end_it, key**) **returns a pair of iterators to the first and the last item equal to the key. This can be used to get the number of repeated key values. **It is used for getting the first iterator to a key(even if there's just one key)**\n\n```c++\nvector<int> A;\nint key;\nequal_range(A.begin(), A.end(), key).first; // iterator to first instance of key\n```\n\n4. For **linear search** - use **find(**begin_it, end_it, key**)** - returns the iterator to the first instance.\n\n- Use a lambda comparator for decreasing values.\n",
      "html": "<h1 id=\"2.-searching\">2. Searching <a class=\"heading-anchor-permalink\" href=\"#2.-searching\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<ol>\n<li>For sorted arrays, do <strong>binary_search</strong>(begin_it, end_it, key) - returns true if found, else false.</li>\n<li>Find the index of the key, we use <strong>lower_bound</strong>(arr, arr+l, key) - returns the iterator if found. Iterator is arr.end() if not found. <strong>Search from left side.</strong>\n<ol>\n<li>For finding the index as integer, do <code>lower_bound() - arr.begin()</code></li>\n<li><code>lower_bound</code> - first element that is greater or equal.\n<ol>\n<li>If key &gt; maximum, then .end() is returned.</li>\n<li>If key exists, iterator to first occurrence of is returned.</li>\n</ol>\n</li>\n<li><code>higher_bound</code> returns the iterator to an element &gt; key.\n<ol>\n<li>If key is the last, returns <code>.end()</code></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p>Note: The names are correct and to the point.\n<img src=\"/assets/2._Searching-image-1.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>**equal_range(<strong>begin_it, end_it, key</strong>) **returns a pair of iterators to the first and the last item equal to the key. This can be used to get the number of repeated key values. <strong>It is used for getting the first iterator to a key(even if there’s just one key)</strong></li>\n</ol>\n<pre><code class=\"language-c++\">vector&lt;int&gt; A;\nint key;\nequal_range(A.begin(), A.end(), key).first; // iterator to first instance of key\n</code></pre>\n<ol start=\"4\">\n<li>For <strong>linear search</strong> - use <strong>find(<strong>begin_it, end_it, key</strong>)</strong> - returns the iterator to the first instance.</li>\n</ol>\n<ul>\n<li>Use a lambda comparator for decreasing values.</li>\n</ul>\n",
      "id": 343
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/3._Math_functions.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/3._Math_functions.html",
      "content": "# 3. Math functions\nCreated Sunday 03 May \n\n\n1. abs() - absolute value  **stdlib iostream**\n2. __gcd(a,b) - Greatest common divisor of a and b. **algorithm**\n3. pow(a, b) returns a double a^b ^returns a long double. **cmath**\n\n\n\n",
      "html": "<h1 id=\"3.-math-functions\">3. Math functions <a class=\"heading-anchor-permalink\" href=\"#3.-math-functions\">#</a></h1>\n<p>Created Sunday 03 May</p>\n<ol>\n<li>abs() - absolute value  <strong>stdlib iostream</strong></li>\n<li>__gcd(a,b) - Greatest common divisor of a and b. <strong>algorithm</strong></li>\n<li>pow(a, b) returns a double a^b ^returns a long double. <strong>cmath</strong></li>\n</ol>\n",
      "id": 344
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/4._Utility_functions.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/4._Utility_functions.html",
      "content": "# 4. Utility functions\nCreated Sunday 03 May 2020\n\n\n1. swap() is a ubiquitous functions which is used to swap values, deeply.\n2. max(int x, int y)\n3. min(int x, int y)\n4. min_element(first, after end)\treturns the iterator of the first occurring minimum element. stdc++.h\n5. max_element(first, after end) returns the iterator of the first occurring maximum element. stdc++.h\n6. find(first, last, key) - returns the first item iterator if found by appropriate search\n7. minmax_element - returns a pair containing minimum and maximum\n\n\n*****\n\nSpecial case:\n\n1. memset(<type>* arr, <type> value, int length_of_array)\n\n\n",
      "html": "<h1 id=\"4.-utility-functions\">4. Utility functions <a class=\"heading-anchor-permalink\" href=\"#4.-utility-functions\">#</a></h1>\n<p>Created Sunday 03 May 2020</p>\n<ol>\n<li>swap() is a ubiquitous functions which is used to swap values, deeply.</li>\n<li>max(int x, int y)</li>\n<li>min(int x, int y)</li>\n<li>min_element(first, after end)\treturns the iterator of the first occurring minimum element. stdc++.h</li>\n<li>max_element(first, after end) returns the iterator of the first occurring maximum element. stdc++.h</li>\n<li>find(first, last, key) - returns the first item iterator if found by appropriate search</li>\n<li>minmax_element - returns a pair containing minimum and maximum</li>\n</ol>\n<hr>\n<p>Special case:</p>\n<ol>\n<li>memset(<type>* arr, <type> value, int length_of_array)</li>\n</ol>\n",
      "id": 345
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/3._Hussain_Set/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/1._CP_-_intro_and_tools/4._Language_Tools/3._Hussain_Set/0_index.html",
      "content": "# 3. Hussain Set\nCreated Monday 04 May 2020\n\n\n* Using priority queue, O(N) space, heapify, O(NlogN), O(QlogN) time for queries.\n* Another solution is to sort the set and use a normal queue.\n\t1. To get the maxium element, we'll the end of our array and queue.front()\n\t2. We'll take the maximum, and then insert in the queue if it is greater than 0.\n\t3. Max will always be at the start of our queue, coz, if a>b then a/2>b/2. If not we discard the value out of the system.\n\t4. T.C = O(NlogN) + O(Q)\n\t5. Space O(N)\n\nLesson Learnt: First try to make a solution, and then use a data structure.\nexit\n\n",
      "html": "<h1 id=\"3.-hussain-set\">3. Hussain Set <a class=\"heading-anchor-permalink\" href=\"#3.-hussain-set\">#</a></h1>\n<p>Created Monday 04 May 2020</p>\n<ul>\n<li>Using priority queue, O(N) space, heapify, O(NlogN), O(QlogN) time for queries.</li>\n<li>Another solution is to sort the set and use a normal queue.\n<ol>\n<li>To get the maxium element, we’ll the end of our array and queue.front()</li>\n<li>We’ll take the maximum, and then insert in the queue if it is greater than 0.</li>\n<li>Max will always be at the start of our queue, coz, if a&gt;b then a/2&gt;b/2. If not we discard the value out of the system.</li>\n<li>T.C = O(NlogN) + O(Q)</li>\n<li>Space O(N)</li>\n</ol>\n</li>\n</ul>\n<p>Lesson Learnt: First try to make a solution, and then use a data structure.\nexit</p>\n",
      "id": 346
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/0_index.html",
      "content": "# 10. TreesX\nCreated Thursday 08 April 2021\n\nX means advanced.\n\n",
      "html": "<h1 id=\"10.-treesx\">10. TreesX <a class=\"heading-anchor-permalink\" href=\"#10.-treesx\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<p>X means advanced.</p>\n",
      "id": 347
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/1._Tries/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/1._Tries/0_index.html",
      "content": "# 1. Tries\nCreated Monday 22 June 2020\n\n@ToBeDone\n\n",
      "html": "<h1 id=\"1.-tries\">1. Tries <a class=\"heading-anchor-permalink\" href=\"#1.-tries\">#</a></h1>\n<p>Created Monday 22 June 2020</p>\n<p>@ToBeDone</p>\n",
      "id": 348
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/1._Tries/1._Tries_and_XOR.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/1._Tries/1._Tries_and_XOR.html",
      "content": "# 1. Tries and XOR\n\nCreated Monday 27 July 2020\n\n![](/assets/1._Tries_and_XOR-image-1.png)\nReturn maximum bitwise XOR pair possible with the query.\nHere we have 7 - 111 and 1 - 001 i.e 110 is the max.\nO(n^2^) - naive possible.\n\nBut it can be done in nlog(max) using trie.\n\n---\n\n- We construct a trie by inserting the elements one by one.\n- Now we are given queries, with a given argument. argument ⊕ ele = most ones(starting from left, i.e 1100 is better than 0111). We search for ~argument. Because that will increase our xor value.\n- This is easily searchable in a tree.\n- Consequently, we have our answer after the tree is fully constructed.\n- Time for insertion = log(bits in maximum)\n- Searching = log(bits in maximum)\n- T.C = O(N \\* log(max_n))\n\nCode: 10 minutes.\nMake a node. Has no value, we just want to represent the bit.\n[./code/trieMaxXOR.cpp](./1._Tries_and_XOR/code/trieMaxXOR.cpp)\n",
      "html": "<h1 id=\"1.-tries-and-xor\">1. Tries and XOR <a class=\"heading-anchor-permalink\" href=\"#1.-tries-and-xor\">#</a></h1>\n<p>Created Monday 27 July 2020</p>\n<p><img src=\"/assets/1._Tries_and_XOR-image-1.png\" alt=\"\">\nReturn maximum bitwise XOR pair possible with the query.\nHere we have 7 - 111 and 1 - 001 i.e 110 is the max.\nO(n^2^) - naive possible.</p>\n<p>But it can be done in nlog(max) using trie.</p>\n<hr>\n<ul>\n<li>We construct a trie by inserting the elements one by one.</li>\n<li>Now we are given queries, with a given argument. argument ⊕ ele = most ones(starting from left, i.e 1100 is better than 0111). We search for ~argument. Because that will increase our xor value.</li>\n<li>This is easily searchable in a tree.</li>\n<li>Consequently, we have our answer after the tree is fully constructed.</li>\n<li>Time for insertion = log(bits in maximum)</li>\n<li>Searching = log(bits in maximum)</li>\n<li>T.C = O(N * log(max_n))</li>\n</ul>\n<p>Code: 10 minutes.\nMake a node. Has no value, we just want to represent the bit.\n<a href=\"./1._Tries_and_XOR/code/trieMaxXOR.cpp\">./code/trieMaxXOR.cpp</a></p>\n",
      "id": 349
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/1._Tries/2._Maximum_XOR_value_of_subarray.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/1._Tries/2._Maximum_XOR_value_of_subarray.html",
      "content": "# 2. Maximum XOR value of subarray\nCreated Monday 27 July 2020\n\nGiven an array, find the maximum XOR value possible among the elements of some subarray.\n\n\n* Naively, this is O(n^2^) problem.\n* If we use some memory, we can do better. We're going to use a tree data structure because it helps us to avoid non-maximum paths.\n* We calculate the XOR's of ending at and beginning from. These are 2*n XORs. All other XOR's are a combination of these. \n* We insert both the sets in the array as bits.\n* Next we traverse through these are find the maximum possible.\n* We return the value.\n\n\n",
      "html": "<h1 id=\"2.-maximum-xor-value-of-subarray\">2. Maximum XOR value of subarray <a class=\"heading-anchor-permalink\" href=\"#2.-maximum-xor-value-of-subarray\">#</a></h1>\n<p>Created Monday 27 July 2020</p>\n<p>Given an array, find the maximum XOR value possible among the elements of some subarray.</p>\n<ul>\n<li>Naively, this is O(n^2^) problem.</li>\n<li>If we use some memory, we can do better. We’re going to use a tree data structure because it helps us to avoid non-maximum paths.</li>\n<li>We calculate the XOR’s of ending at and beginning from. These are 2*n XORs. All other XOR’s are a combination of these.</li>\n<li>We insert both the sets in the array as bits.</li>\n<li>Next we traverse through these are find the maximum possible.</li>\n<li>We return the value.</li>\n</ul>\n",
      "id": 350
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/1._Introduction_To_Segment_Tree.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/1._Introduction_To_Segment_Tree.html",
      "content": "# 1. Introduction To Segment Tree\nCreated Saturday 25 July 2020\n\n\n* Segment trees are used when two conditions are met:\n\t1. Range queries - Return a value between two indexes, L and R in an array → O(R-L) naive method.\n\t2. Updates - values can be changed in the array. This update can change the range query answer → O(1) naive method.\n* If queries are less the above method works, but if we have many queries, we need to store some values in order to answer the queries quickly, here O(1) is the query time. O(n) will be the updation.\n* But if we queries and updates are equally frequent, then we use a data structure called a segment tree.\n* **__Segment Tree__ **is a **binary** tree used when both updates and queries are **equally frequent**. Here updates and queries are **both** O(**log n**) - a great data structure.\n\t* It is always balanced.\n\t* The leaf nodes are the values of the array.\n\n\n",
      "html": "<h1 id=\"1.-introduction-to-segment-tree\">1. Introduction To Segment Tree <a class=\"heading-anchor-permalink\" href=\"#1.-introduction-to-segment-tree\">#</a></h1>\n<p>Created Saturday 25 July 2020</p>\n<ul>\n<li>Segment trees are used when two conditions are met:\n<ol>\n<li>Range queries - Return a value between two indexes, L and R in an array → O(R-L) naive method.</li>\n<li>Updates - values can be changed in the array. This update can change the range query answer → O(1) naive method.</li>\n</ol>\n</li>\n<li>If queries are less the above method works, but if we have many queries, we need to store some values in order to answer the queries quickly, here O(1) is the query time. O(n) will be the updation.</li>\n<li>But if we queries and updates are equally frequent, then we use a data structure called a segment tree.</li>\n<li>**<strong>Segment Tree</strong> **is a <strong>binary</strong> tree used when both updates and queries are <strong>equally frequent</strong>. Here updates and queries are <strong>both</strong> O(<strong>log n</strong>) - a great data structure.\n<ul>\n<li>It is always balanced.</li>\n<li>The leaf nodes are the values of the array.</li>\n</ul>\n</li>\n</ul>\n",
      "id": 351
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/2._Building_a_segment_tree.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/2._Building_a_segment_tree.html",
      "content": "# 2. Building a segment tree\n\nCreated Saturday 25 July 2020\n\n- We make an implicit tree, like heap.\n- Total elements = 2N-1 check this mathematically.\n- We take an array of size 2N, where index 0 is unused, and the 0-N _sum_ is stored at index 1. Children of a node are stored at 2*r and 2*r+1.\n- Build tree - O(N)\n- Before building, decide what the segment tree will store, i.e _sum_, _product_ etc.\n\n[buildTree.h](./segment_tree_code/buildTree.h)\n![](/assets/2._Building_a_segment_tree-image-1.png)\n",
      "html": "<h1 id=\"2.-building-a-segment-tree\">2. Building a segment tree <a class=\"heading-anchor-permalink\" href=\"#2.-building-a-segment-tree\">#</a></h1>\n<p>Created Saturday 25 July 2020</p>\n<ul>\n<li>We make an implicit tree, like heap.</li>\n<li>Total elements = 2N-1 check this mathematically.</li>\n<li>We take an array of size 2N, where index 0 is unused, and the 0-N <em>sum</em> is stored at index 1. Children of a node are stored at 2<em>r and 2</em>r+1.</li>\n<li>Build tree - O(N)</li>\n<li>Before building, decide what the segment tree will store, i.e <em>sum</em>, <em>product</em> etc.</li>\n</ul>\n<p><a href=\"./segment_tree_code/buildTree.h\">buildTree.h</a>\n<img src=\"/assets/2._Building_a_segment_tree-image-1.png\" alt=\"\"></p>\n",
      "id": 352
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/3._Update_on_a_segment_tree.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/3._Update_on_a_segment_tree.html",
      "content": "# 3. Update on a segment tree\nCreated Saturday 25 July 2020\n\n\n* Update - O(log N)\n* Go to the required branch.\n* Change the value at index.\n* While coming back, recalculate the nodes. Sum in this case, just by using 2*r, 2*r+1.\n\n[updateTree.h](./segment_tree_code/updateTree.h)\n\n",
      "html": "<h1 id=\"3.-update-on-a-segment-tree\">3. Update on a segment tree <a class=\"heading-anchor-permalink\" href=\"#3.-update-on-a-segment-tree\">#</a></h1>\n<p>Created Saturday 25 July 2020</p>\n<ul>\n<li>Update - O(log N)</li>\n<li>Go to the required branch.</li>\n<li>Change the value at index.</li>\n<li>While coming back, recalculate the nodes. Sum in this case, just by using 2<em>r, 2</em>r+1.</li>\n</ul>\n<p><a href=\"./segment_tree_code/updateTree.h\">updateTree.h</a></p>\n",
      "id": 353
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/4._Query_on_a_Segment_Tree.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/4._Query_on_a_Segment_Tree.html",
      "content": "# 4. Query on a Segment Tree\nCreated Saturday 25 July 2020\n\n\n* Query - O(log N)\n* Return the value.\n\n\nThere are 3 cases:\n\n1. Completey outside, i.e need 3,3 have 1,2. No calls further, return 0.\n2. Completely inside - e.g 2,4 need 1-5, no calls further, return the answer.\n3. Partial - e.g 2,4 need 3-4, return left and right ones:\n\t1. Left inside - start, mid\n\t2. Right inside - mid+1, end\n\nreturn a+b;\n[queryTree.h](./segment_tree_code/queryTree.h)\n\n",
      "html": "<h1 id=\"4.-query-on-a-segment-tree\">4. Query on a Segment Tree <a class=\"heading-anchor-permalink\" href=\"#4.-query-on-a-segment-tree\">#</a></h1>\n<p>Created Saturday 25 July 2020</p>\n<ul>\n<li>Query - O(log N)</li>\n<li>Return the value.</li>\n</ul>\n<p>There are 3 cases:</p>\n<ol>\n<li>Completey outside, i.e need 3,3 have 1,2. No calls further, return 0.</li>\n<li>Completely inside - e.g 2,4 need 1-5, no calls further, return the answer.</li>\n<li>Partial - e.g 2,4 need 3-4, return left and right ones:\n<ol>\n<li>Left inside - start, mid</li>\n<li>Right inside - mid+1, end</li>\n</ol>\n</li>\n</ol>\n<p>return a+b;\n<a href=\"./segment_tree_code/queryTree.h\">queryTree.h</a></p>\n",
      "id": 354
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/5._Size_of_a_segment_tree.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/5._Size_of_a_segment_tree.html",
      "content": "# 5. Size of a segment tree\nCreated Saturday 25 July 2020\n\n\n* Approximately 4N. This is always sufficient.\n\n\n",
      "html": "<h1 id=\"5.-size-of-a-segment-tree\">5. Size of a segment tree <a class=\"heading-anchor-permalink\" href=\"#5.-size-of-a-segment-tree\">#</a></h1>\n<p>Created Saturday 25 July 2020</p>\n<ul>\n<li>Approximately 4N. This is always sufficient.</li>\n</ul>\n",
      "id": 355
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/Assignments/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/Assignments/0_index.html",
      "content": "# Assignments\nCreated Saturday 25 July 2020\n\n![](./Assignments/pasted_image.png)\n\n",
      "html": "<h1 id=\"assignments\">Assignments <a class=\"heading-anchor-permalink\" href=\"#assignments\">#</a></h1>\n<p>Created Saturday 25 July 2020</p>\n<p><img src=\"./Assignments/pasted_image.png\" alt=\"\"></p>\n",
      "id": 356
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/zAssignments/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/2._Segment_Tree/zAssignments/0_index.html",
      "content": "# zAssignments\nCreated Saturday 25 July 2020\n\n![](./zAssignments/pasted_image.png)\n\n",
      "html": "<h1 id=\"zassignments\">zAssignments <a class=\"heading-anchor-permalink\" href=\"#zassignments\">#</a></h1>\n<p>Created Saturday 25 July 2020</p>\n<p><img src=\"./zAssignments/pasted_image.png\" alt=\"\"></p>\n",
      "id": 357
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/3._Fenwick_Tree.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/10._TreesX/3._Fenwick_Tree.html",
      "content": "# 3. Fenwick Tree\nCreated Tuesday 28 July 2020\n\n@ToBeDone\n\n* Also called Binary Index Tree(BIT)\n* Used for range queries and updates.\n* Segment trees are used for the same.\n* Why this:\n\t1. Code is easy and short.\n\t2. Takes less space, n+1 instead of 4n\n\n\n*****\n\nHow is the array built?\n\n* Index starts from 1. This is why there are n+1 nodes, index 0 is a dummy node.\n* 1 → 2^0^+0, 2 = 2^1^+0, 3 = 2^1^+1, 4 = 2^2^+0, 5=2^2^+2^0 ^⇒ i.e abcdefghi = binary representation.\n\n\n",
      "html": "<h1 id=\"3.-fenwick-tree\">3. Fenwick Tree <a class=\"heading-anchor-permalink\" href=\"#3.-fenwick-tree\">#</a></h1>\n<p>Created Tuesday 28 July 2020</p>\n<p>@ToBeDone</p>\n<ul>\n<li>Also called Binary Index Tree(BIT)</li>\n<li>Used for range queries and updates.</li>\n<li>Segment trees are used for the same.</li>\n<li>Why this:\n<ol>\n<li>Code is easy and short.</li>\n<li>Takes less space, n+1 instead of 4n</li>\n</ol>\n</li>\n</ul>\n<hr>\n<p>How is the array built?</p>\n<ul>\n<li>Index starts from 1. This is why there are n+1 nodes, index 0 is a dummy node.</li>\n<li>1 → 2^0^+0, 2 = 2^1^+0, 3 = 2^1^+1, 4 = 2^2^+0, 5=2^2^+2^0 ^⇒ i.e abcdefghi = binary representation.</li>\n</ul>\n",
      "id": 358
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/1._Modulo_Arithmetic/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/1._Modulo_Arithmetic/0_index.html",
      "content": "# 1. Modulo Arithmetic\nCreated Monday 22 June 2020\n\n**Modular arithmetic** is a **system of arithmeti**c for __integers__, which considers the remainder. In modular arithmetic, numbers \"wrap around\" upon reaching a given fixed quantity (this given quantity is known as the modulus) to leave a remainder.\n\n\n* An intuitive usage of modular arithmetic is with a 12-hour clock. If it is 10:00 now, then in 5 hours the clock will show 3:00 instead of 15:00. 3 is the remainder of 15 with a modulus of 12.\n* Remainders are always whole numbers. Very important.\n\n15 mod(9) = 6\n(-15) mod 9 = 3\n\n\n*****\n\nApplications of the % operator:\n\n1. To avoid overflow.\n\ne.g long long is 8 bytes, i.e 2^63^-1 is the maximum number it can store. \n\n* If our answer is 2^32 ^* 2^40^, it cannot be stored even in long long. \n* To verify the solution, we use the modulo operator to avoid, and hence get a mapping which we can represent. \n* The modulo is generally taken w.r.t to a number which is:\n\t1. Very large  - so that there are many mappings, available.\n\t2. It is prime, so that distribution is uniform.\n* Mostly 10^9^+7 is taken, as it satisfies both the criteria(big and prime).\n\n\n",
      "html": "<h1 id=\"1.-modulo-arithmetic\">1. Modulo Arithmetic <a class=\"heading-anchor-permalink\" href=\"#1.-modulo-arithmetic\">#</a></h1>\n<p>Created Monday 22 June 2020</p>\n<p><strong>Modular arithmetic</strong> is a <strong>system of arithmeti</strong>c for <strong>integers</strong>, which considers the remainder. In modular arithmetic, numbers “wrap around” upon reaching a given fixed quantity (this given quantity is known as the modulus) to leave a remainder.</p>\n<ul>\n<li>An intuitive usage of modular arithmetic is with a 12-hour clock. If it is 10:00 now, then in 5 hours the clock will show 3:00 instead of 15:00. 3 is the remainder of 15 with a modulus of 12.</li>\n<li>Remainders are always whole numbers. Very important.</li>\n</ul>\n<p>15 mod(9) = 6\n(-15) mod 9 = 3</p>\n<hr>\n<p>Applications of the % operator:</p>\n<ol>\n<li>To avoid overflow.</li>\n</ol>\n<p>e.g long long is 8 bytes, i.e 2^63^-1 is the maximum number it can store.</p>\n<ul>\n<li>If our answer is 2^32 ^* 2^40^, it cannot be stored even in long long.</li>\n<li>To verify the solution, we use the modulo operator to avoid, and hence get a mapping which we can represent.</li>\n<li>The modulo is generally taken w.r.t to a number which is:\n<ol>\n<li>Very large  - so that there are many mappings, available.</li>\n<li>It is prime, so that distribution is uniform.</li>\n</ol>\n</li>\n<li>Mostly 10^9^+7 is taken, as it satisfies both the criteria(big and prime).</li>\n</ul>\n",
      "id": 359
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/1._Modulo_Arithmetic/1._Modulo_operation/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/1._Modulo_Arithmetic/1._Modulo_operation/0_index.html",
      "content": "# 1. Modulo operation\n\nCreated Tuesday 30 June 2020\n\n**Modulo Operation**\n\n- Simplty asks the remainder when **a** is divided by **n**\n\nremainder when a/n = a mod(n)\n\n---\n\n**Congruence**\nThis is different from modulo operation. It is actually a comparison operator.\nTwo numbers **a** and **b **are said to be congruent if they belong to the same bucket.\n![](/assets/1._Modulo_operation-image-1.png) iff ![](/assets/1._Modulo_operation-image-2.png)\n\n- = and ≡ are different\n- Important: a ≡ b mod(n) ↔ -a ≡ -b mod(n)\n",
      "html": "<h1 id=\"1.-modulo-operation\">1. Modulo operation <a class=\"heading-anchor-permalink\" href=\"#1.-modulo-operation\">#</a></h1>\n<p>Created Tuesday 30 June 2020</p>\n<p><strong>Modulo Operation</strong></p>\n<ul>\n<li>Simplty asks the remainder when <strong>a</strong> is divided by <strong>n</strong></li>\n</ul>\n<p>remainder when a/n = a mod(n)</p>\n<hr>\n<p><strong>Congruence</strong>\nThis is different from modulo operation. It is actually a comparison operator.\nTwo numbers <strong>a</strong> and **b **are said to be congruent if they belong to the same bucket.\n<img src=\"/assets/1._Modulo_operation-image-1.png\" alt=\"\"> iff <img src=\"/assets/1._Modulo_operation-image-2.png\" alt=\"\"></p>\n<ul>\n<li>= and ≡ are different</li>\n<li>Important: a ≡ b mod(n) ↔ -a ≡ -b mod(n)</li>\n</ul>\n",
      "id": 360
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/1._Modulo_Arithmetic/2._Modulo_properties.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/1._Modulo_Arithmetic/2._Modulo_properties.html",
      "content": "# 2. Modulo properties\n\nCreated Tuesday 30 June 2020\n\n**Proof**: Visualize a = k\\*n + r\n\n**Addition/Subtraction/Multiplication** - all have equivalent laws\n\n- (a ◦ b) mod(n)= (a mod(n) ◦ b mod(n)) mod(n) - Basic\n- If a ≡ b mod(n), then a◦k ≡ (b◦k) mod(n) - for any int k\n- If a ≡ b mod(n) and\n\nc ≡ d mod(n), then\na◦c ≡ b◦d mod(n)\n\n---\n\n**Exponentiation**(with 3rd number)\n\n- If a ≡ b mod(n) → a^k^ ≡ b^k^ mod(n)\n- In many exams, last k digits are asked, it is just N mod(10^k^)\n\nNote: Binomial theorem is also required here for proof\n\n---\n\n**Division**\n\n- *This is tricky - consider *4 ≡ 8 mod(4), dividing would yield 1 ≡ 2 mod(4) or 2 ≡ 4 mod(3) both are wrong. So division is not **well defined.**\n-\n\n- Use modulo at each **intermediate stage**, so that no range overflow can occur, if there's a chance.\n- Modulo is O(1), so no problem with complexity. **Note: This is not accurate**\n- 2^64^ is the range.\n\n![](/assets/2._Modulo_properties-image-1.png) ![](/assets/2._Modulo_properties-image-2.png)\n",
      "html": "<h1 id=\"2.-modulo-properties\">2. Modulo properties <a class=\"heading-anchor-permalink\" href=\"#2.-modulo-properties\">#</a></h1>\n<p>Created Tuesday 30 June 2020</p>\n<p><strong>Proof</strong>: Visualize a = k*n + r</p>\n<p><strong>Addition/Subtraction/Multiplication</strong> - all have equivalent laws</p>\n<ul>\n<li>(a ◦ b) mod(n)= (a mod(n) ◦ b mod(n)) mod(n) - Basic</li>\n<li>If a ≡ b mod(n), then a◦k ≡ (b◦k) mod(n) - for any int k</li>\n<li>If a ≡ b mod(n) and</li>\n</ul>\n<p>c ≡ d mod(n), then\na◦c ≡ b◦d mod(n)</p>\n<hr>\n<p><strong>Exponentiation</strong>(with 3rd number)</p>\n<ul>\n<li>If a ≡ b mod(n) → a^k^ ≡ b^k^ mod(n)</li>\n<li>In many exams, last k digits are asked, it is just N mod(10^k^)</li>\n</ul>\n<p>Note: Binomial theorem is also required here for proof</p>\n<hr>\n<p><strong>Division</strong></p>\n<ul>\n<li>\n<p>*This is tricky - consider *4 ≡ 8 mod(4), dividing would yield 1 ≡ 2 mod(4) or 2 ≡ 4 mod(3) both are wrong. So division is not <strong>well defined.</strong></p>\n</li>\n<li></li>\n<li>\n<p>Use modulo at each <strong>intermediate stage</strong>, so that no range overflow can occur, if there’s a chance.</p>\n</li>\n<li>\n<p>Modulo is O(1), so no problem with complexity. <strong>Note: This is not accurate</strong></p>\n</li>\n<li>\n<p>2^64^ is the range.</p>\n</li>\n</ul>\n<p><img src=\"/assets/2._Modulo_properties-image-1.png\" alt=\"\"> <img src=\"/assets/2._Modulo_properties-image-2.png\" alt=\"\"></p>\n",
      "id": 361
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/1._Modulo_Arithmetic/3._Modulo_properties_continued.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/1._Modulo_Arithmetic/3._Modulo_properties_continued.html",
      "content": "# 3. Modulo properties continued\nCreated Tuesday 30 June 2020\n\nWhat about negative numbers, how does modulo behave?\n\n* For positive  - a%p ∈ [0, p-1]\n* If a%p comes out of negative, we take (a%p + p)%p. Works for all cases.\n\n\n*****\n\n**Exponentiation**\nIf a ≡ b(modN), then a^k^ ≡ b^k^(modN) any positive integer k.\n\n",
      "html": "<h1 id=\"3.-modulo-properties-continued\">3. Modulo properties continued <a class=\"heading-anchor-permalink\" href=\"#3.-modulo-properties-continued\">#</a></h1>\n<p>Created Tuesday 30 June 2020</p>\n<p>What about negative numbers, how does modulo behave?</p>\n<ul>\n<li>For positive  - a%p ∈ [0, p-1]</li>\n<li>If a%p comes out of negative, we take (a%p + p)%p. Works for all cases.</li>\n</ul>\n<hr>\n<p><strong>Exponentiation</strong>\nIf a ≡ b(modN), then a^k^ ≡ b^k^(modN) any positive integer k.</p>\n",
      "id": 362
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/1._Modulo_Arithmetic/4._Exercise_-_number_of_Binary_Trees/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/1._Modulo_Arithmetic/4._Exercise_-_number_of_Binary_Trees/0_index.html",
      "content": "# 4. Exercise - number of Binary Trees\nCreated Tuesday 30 June 2020\n\n\n* For a given height h, how many balanced binary trees are possible.\n* For h=0 ⇒1 (no tree), h=1⇒1(only root), h=2 ⇒ 3\n* It is actually quite simple: For height h, take the root. On the left and right, there are 3 possibilities\n\t1. h-1 and h-1\n\t2. h-1 and h-2\n\t3. h-2 and h-2\n* f(h) = f(h-1)*(f(h-1)+2*f(h-2))\n* It has lots of duplicates, memoization.\n* We can form the bigger solutions from smaller ones here. Dynamic programming is applicable.\n\n\n",
      "html": "<h1 id=\"4.-exercise---number-of-binary-trees\">4. Exercise - number of Binary Trees <a class=\"heading-anchor-permalink\" href=\"#4.-exercise---number-of-binary-trees\">#</a></h1>\n<p>Created Tuesday 30 June 2020</p>\n<ul>\n<li>For a given height h, how many balanced binary trees are possible.</li>\n<li>For h=0 ⇒1 (no tree), h=1⇒1(only root), h=2 ⇒ 3</li>\n<li>It is actually quite simple: For height h, take the root. On the left and right, there are 3 possibilities\n<ol>\n<li>h-1 and h-1</li>\n<li>h-1 and h-2</li>\n<li>h-2 and h-2</li>\n</ol>\n</li>\n<li>f(h) = f(h-1)<em>(f(h-1)+2</em>f(h-2))</li>\n<li>It has lots of duplicates, memoization.</li>\n<li>We can form the bigger solutions from smaller ones here. Dynamic programming is applicable.</li>\n</ul>\n",
      "id": 363
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/1._Primes/1._Find_prime_numbers_between_1_and_N.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/1._Primes/1._Find_prime_numbers_between_1_and_N.html",
      "content": "# 1. Find prime numbers between 1 and N\nCreated Tuesday 28 July 2020\n\nFind all the prime between 1 and N. N<10^6^\nApproach 1: Iterate over 1 to N, check_prime(i). n^2 ^**Not accepted**\nApproach 2: Iterate over 1 to N, check_prime_sqrt(i). O(n√n) **Not** **Accepted.**\n\n",
      "html": "<h1 id=\"1.-find-prime-numbers-between-1-and-n\">1. Find prime numbers between 1 and N <a class=\"heading-anchor-permalink\" href=\"#1.-find-prime-numbers-between-1-and-n\">#</a></h1>\n<p>Created Tuesday 28 July 2020</p>\n<p>Find all the prime between 1 and N. N&lt;10^6^\nApproach 1: Iterate over 1 to N, check_prime(i). n^2 ^<strong>Not accepted</strong>\nApproach 2: Iterate over 1 to N, check_prime_sqrt(i). O(n√n) <strong>Not</strong> <strong>Accepted.</strong></p>\n",
      "id": 364
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/1._Primes/2._Sieve_of_Eratosthenes/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/1._Primes/2._Sieve_of_Eratosthenes/0_index.html",
      "content": "# 2. Sieve of Eratosthenes\nCreated Tuesday 28 July 2020\n\n\n1. We write all the numbers in a bool array.\n2. All are true initially.\n3. We start from 2, mark all its multiples as false.\n4. Then continue for the rest till √n i.e highest factor.\n\n\n*****\n\nTweaks:\n\n1. As we go to multiples, we can start from the current one i.e start from i*i\n2. We can skip a number if number % is multiple of any of the previous numbers. Skip 4 because 2 is already over.\n3. We go till √n, and not till n. Everything has been covered.\n\n\n",
      "html": "<h1 id=\"2.-sieve-of-eratosthenes\">2. Sieve of Eratosthenes <a class=\"heading-anchor-permalink\" href=\"#2.-sieve-of-eratosthenes\">#</a></h1>\n<p>Created Tuesday 28 July 2020</p>\n<ol>\n<li>We write all the numbers in a bool array.</li>\n<li>All are true initially.</li>\n<li>We start from 2, mark all its multiples as false.</li>\n<li>Then continue for the rest till √n i.e highest factor.</li>\n</ol>\n<hr>\n<p>Tweaks:</p>\n<ol>\n<li>As we go to multiples, we can start from the current one i.e start from i*i</li>\n<li>We can skip a number if number % is multiple of any of the previous numbers. Skip 4 because 2 is already over.</li>\n<li>We go till √n, and not till n. Everything has been covered.</li>\n</ol>\n",
      "id": 365
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/1._Primes/3._Complexity_of_Sieve_of_Eratosthenes.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/1._Primes/3._Complexity_of_Sieve_of_Eratosthenes.html",
      "content": "# 3. Complexity of Sieve of Eratosthenes\n\nCreated Tuesday 28 July 2020\n\n![](/assets/3._Complexity_of_Sieve_of_Eratosthenes-image-1.png)\nThe answer for the above series is log(logn) for n primes. **Merten's Theorem**.\nSo the time complexity is nloglog(√n) = O(n\\*log(log(n))) **Accepted.**\n",
      "html": "<h1 id=\"3.-complexity-of-sieve-of-eratosthenes\">3. Complexity of Sieve of Eratosthenes <a class=\"heading-anchor-permalink\" href=\"#3.-complexity-of-sieve-of-eratosthenes\">#</a></h1>\n<p>Created Tuesday 28 July 2020</p>\n<p><img src=\"/assets/3._Complexity_of_Sieve_of_Eratosthenes-image-1.png\" alt=\"\">\nThe answer for the above series is log(logn) for n primes. <strong>Merten’s Theorem</strong>.\nSo the time complexity is nloglog(√n) = O(n*log(log(n))) <strong>Accepted.</strong></p>\n",
      "id": 366
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/1._GCD_-_Euclid's_Algorithm.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/1._GCD_-_Euclid's_Algorithm.html",
      "content": "# 1. GCD - Euclid's Algorithm\nCreated Tuesday 28 July 2020\n\nGCD(Greatest Common Divisor) - aka HCF(Highest Common Factor) - Name is enough for description.\n\nNaive algorithm:\n```c++\n// if a==0 or b==0, gcd = min(a, b)\n\ngcd(a, b):\n\tgcd_val = 1;\n\tsmall = min(a, b);// smaller of the two, can potentially be the max gcd\n\tfor(int i=1; i<small; i++)\n\t\tif(a%i==0m && b%i==0)\n\t\t\tgcd_val = i;\n\treturn gcd_val\n```\n\nO(n) approach, very slow.\n\n*****\n\nEuclid's Algorithm:\n\n* It is an ancient, yet efficient algorithm to find GCD of two numbers.\n\nAlgorithm(Statement):\n```c++\ngcd(a, b) = gcd(b, a%b); // b is the smaller one\ngcd(0, n) = x; // base case\n```\nProof by observation.\n\n\n*****\n\nDivisor property:\ngcd(a,b) = gcd(a-b, b); // holds primarily\n\n",
      "html": "<h1 id=\"1.-gcd---euclid%E2%80%99s-algorithm\">1. GCD - Euclid’s Algorithm <a class=\"heading-anchor-permalink\" href=\"#1.-gcd---euclid%E2%80%99s-algorithm\">#</a></h1>\n<p>Created Tuesday 28 July 2020</p>\n<p>GCD(Greatest Common Divisor) - aka HCF(Highest Common Factor) - Name is enough for description.</p>\n<p>Naive algorithm:</p>\n<pre><code class=\"language-c++\">// if a==0 or b==0, gcd = min(a, b)\n\ngcd(a, b):\n\tgcd_val = 1;\n\tsmall = min(a, b);// smaller of the two, can potentially be the max gcd\n\tfor(int i=1; i&lt;small; i++)\n\t\tif(a%i==0m &amp;&amp; b%i==0)\n\t\t\tgcd_val = i;\n\treturn gcd_val\n</code></pre>\n<p>O(n) approach, very slow.</p>\n<hr>\n<p>Euclid’s Algorithm:</p>\n<ul>\n<li>It is an ancient, yet efficient algorithm to find GCD of two numbers.</li>\n</ul>\n<p>Algorithm(Statement):</p>\n<pre><code class=\"language-c++\">gcd(a, b) = gcd(b, a%b); // b is the smaller one\ngcd(0, n) = x; // base case\n</code></pre>\n<p>Proof by observation.</p>\n<hr>\n<p>Divisor property:\ngcd(a,b) = gcd(a-b, b); // holds primarily</p>\n",
      "id": 367
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/2._Complexity_of_Euclid's_GCD_algorithm.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/2._Complexity_of_Euclid's_GCD_algorithm.html",
      "content": "# 2. Complexity of Euclid's GCD algorithm\n\nCreated Tuesday 28 July 2020\n\nDo two steps of the algorithm, then consider the minimum possible changes. The value of smaller < a/2.\n![](/assets/2._Complexity_of_Euclid's_GCD_algorithm-image-1.png)\nThis will halve again in two steps. And so on. We can say that for the worst case, we have a/2^k^. This will reach 1 in k =log(a) steps. a = max(a, b).\nHence, the complexity is O(log~2~(max(a, b))).\nAnd this is obviously < O(min(a, b))\n",
      "html": "<h1 id=\"2.-complexity-of-euclid%E2%80%99s-gcd-algorithm\">2. Complexity of Euclid’s GCD algorithm <a class=\"heading-anchor-permalink\" href=\"#2.-complexity-of-euclid%E2%80%99s-gcd-algorithm\">#</a></h1>\n<p>Created Tuesday 28 July 2020</p>\n<p>Do two steps of the algorithm, then consider the minimum possible changes. The value of smaller &lt; a/2.\n<img src=\"/assets/2._Complexity_of_Euclid's_GCD_algorithm-image-1.png\" alt=\"\">\nThis will halve again in two steps. And so on. We can say that for the worst case, we have a/2^k^. This will reach 1 in k =log(a) steps. a = max(a, b).\nHence, the complexity is O(log~2~(max(a, b))).\nAnd this is obviously &lt; O(min(a, b))</p>\n",
      "id": 368
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/3._Diophantine_Equations/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/3._Diophantine_Equations/0_index.html",
      "content": "# 3. Diophantine Equations\n\nCreated Wednesday 29 July 2020\n\nDiohphantine Equations - These are polynomial equations for which integral solutions exist.\n\n---\n\nWe need to study only about linear Diophantine equations.\n\n- ![](/assets/3._Diophantine_Equations-image-1.png)\n- Solutions(integral) exist for this if gcd(a,b) is a factor of C.\n- We are not going to prove this, but the intuition is easy:\n  1.  gcd(a,b) is a factor of a, b\n  2.  gcd(a, b) will divide ax+by\n  3.  We represent this by c.\n\ne.g ![](/assets/3._Diophantine_Equations-image-2.png) has solutions, while ![](/assets/3._Diophantine_Equations-image-3.png) has no integral solutions.\n\n- We are studying this in order to apply extended Euclidean algorithm.\n",
      "html": "<h1 id=\"3.-diophantine-equations\">3. Diophantine Equations <a class=\"heading-anchor-permalink\" href=\"#3.-diophantine-equations\">#</a></h1>\n<p>Created Wednesday 29 July 2020</p>\n<p>Diohphantine Equations - These are polynomial equations for which integral solutions exist.</p>\n<hr>\n<p>We need to study only about linear Diophantine equations.</p>\n<ul>\n<li><img src=\"/assets/3._Diophantine_Equations-image-1.png\" alt=\"\"></li>\n<li>Solutions(integral) exist for this if gcd(a,b) is a factor of C.</li>\n<li>We are not going to prove this, but the intuition is easy:\n<ol>\n<li>gcd(a,b) is a factor of a, b</li>\n<li>gcd(a, b) will divide ax+by</li>\n<li>We represent this by c.</li>\n</ol>\n</li>\n</ul>\n<p>e.g <img src=\"/assets/3._Diophantine_Equations-image-2.png\" alt=\"\"> has solutions, while <img src=\"/assets/3._Diophantine_Equations-image-3.png\" alt=\"\"> has no integral solutions.</p>\n<ul>\n<li>We are studying this in order to apply extended Euclidean algorithm.</li>\n</ul>\n",
      "id": 369
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/4._Extended_Euclidean_Algorithm/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/4._Extended_Euclidean_Algorithm/0_index.html",
      "content": "# 4. Extended Euclidean Algorithm\nCreated Wednesday 29 July 2020\n\nStatement: If ax+by=gcd(a, b) then we can solve for x and y using extended Euclidean algorithm.\n\n\n* gcd(a, b) = gcd(b, a%b) = bx~1~+(a%b)y~1~\n* gcd(a, b) = bx~1~+(a-b*floor(a/b))y~1~\n* ax+by = ay~1~+b(x~1~-floor(a/b)*y~1~), comparing coefficients, we can solve for x and y x=y~1~, y=x~1~-floor(a/b)*y~1~\n* We may have to do this step mant times, till we get equation of the form gcd(1, x).\n* Then we solve backwards.\n\n\n",
      "html": "<h1 id=\"4.-extended-euclidean-algorithm\">4. Extended Euclidean Algorithm <a class=\"heading-anchor-permalink\" href=\"#4.-extended-euclidean-algorithm\">#</a></h1>\n<p>Created Wednesday 29 July 2020</p>\n<p>Statement: If ax+by=gcd(a, b) then we can solve for x and y using extended Euclidean algorithm.</p>\n<ul>\n<li>gcd(a, b) = gcd(b, a%b) = bx~1~+(a%b)y~1~</li>\n<li>gcd(a, b) = bx~1~+(a-b*floor(a/b))y~1~</li>\n<li>ax+by = ay~1~+b(x~1~-floor(a/b)*y~1~), comparing coefficients, we can solve for x and y x=y~1~, y=x~1~-floor(a/b)*y~1~</li>\n<li>We may have to do this step mant times, till we get equation of the form gcd(1, x).</li>\n<li>Then we solve backwards.</li>\n</ul>\n",
      "id": 370
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/3._Multiplicative_Modulo_Inverse.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/3._Multiplicative_Modulo_Inverse.html",
      "content": "# 3. Multiplicative Modulo Inverse\nCreated Wednesday 29 July 2020\n\nMultiplicative Inverse: For **a**!=0, multiplicative inverse is 1/a\n\nMultiplicative Modulo Inverse: For **a**, multiplicative inverse **under** m is a number **b** such that (a*b)mod(m)=1\na.b + mQ = 1. Both a, m need to be coprime.\n\n* b is calcuated using extended Euclid algorithm.\n\n\n\n",
      "html": "<h1 id=\"3.-multiplicative-modulo-inverse\">3. Multiplicative Modulo Inverse <a class=\"heading-anchor-permalink\" href=\"#3.-multiplicative-modulo-inverse\">#</a></h1>\n<p>Created Wednesday 29 July 2020</p>\n<p>Multiplicative Inverse: For <strong>a</strong>!=0, multiplicative inverse is 1/a</p>\n<p>Multiplicative Modulo Inverse: For <strong>a</strong>, multiplicative inverse <strong>under</strong> m is a number <strong>b</strong> such that (a*b)mod(m)=1\na.b + mQ = 1. Both a, m need to be coprime.</p>\n<ul>\n<li>b is calcuated using extended Euclid algorithm.</li>\n</ul>\n",
      "id": 371
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/4._Applications_Of_NT_-_1/1._Sachin_and_Varun/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/4._Applications_Of_NT_-_1/1._Sachin_and_Varun/0_index.html",
      "content": "# 1. Sachin and Varun\n\nCreated Wednesday 29 July 2020\n\nWe need number of pairs.\n![](/assets/1._Sachin_and_Varun-image-1.png)\nTwo for loops, O(d^2^/a.b) ~ 10^18^ **not accepted**\n\n---\n\nOnly one loop, check divisibility, One y for one x.\nO(d/b) ~ 10^9^ **not accepted**\n\n---\n\nax+by=d ⇒\n",
      "html": "<h1 id=\"1.-sachin-and-varun\">1. Sachin and Varun <a class=\"heading-anchor-permalink\" href=\"#1.-sachin-and-varun\">#</a></h1>\n<p>Created Wednesday 29 July 2020</p>\n<p>We need number of pairs.\n<img src=\"/assets/1._Sachin_and_Varun-image-1.png\" alt=\"\">\nTwo for loops, O(d^2^/a.b) ~ 10^18^ <strong>not accepted</strong></p>\n<hr>\n<p>Only one loop, check divisibility, One y for one x.\nO(d/b) ~ 10^9^ <strong>not accepted</strong></p>\n<hr>\n<p>ax+by=d ⇒</p>\n",
      "id": 372
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/4._Applications_Of_NT_-_1/2._Advanced_GCD.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/2._Prime_generator_and_GCD/4._Applications_Of_NT_-_1/2._Advanced_GCD.html",
      "content": "# 2. Advanced GCD\nCreated Thursday 30 July 2020\n\nNeed to find the gcd of two numbers. But the range of 0<b<10^250^ and 0<a<40000. b cannot be stored in an integer.\n\nWe take the input b in a string, as it can be stored;\n\n",
      "html": "<h1 id=\"2.-advanced-gcd\">2. Advanced GCD <a class=\"heading-anchor-permalink\" href=\"#2.-advanced-gcd\">#</a></h1>\n<p>Created Thursday 30 July 2020</p>\n<p>Need to find the gcd of two numbers. But the range of 0&lt;b&lt;10^250^ and 0&lt;a&lt;40000. b cannot be stored in an integer.</p>\n<p>We take the input b in a string, as it can be stored;</p>\n",
      "id": 373
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/3._Totient_Function/1._Euler's_Totient_Function.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/3._Totient_Function/1._Euler's_Totient_Function.html",
      "content": "# 1. Euler's Totient Function\nCreated Thursday 30 July 2020\n\nDenoted by φ(n) → Number of 'm' such that:\n\n1. 1<=m<n\n2. gcd(m, n) = 1\n3. m ∈ N\n\n\ne.g φ(3) = 2 {1, 2}\nφ(4) = 2 {1, 3}\nφ(5) = 4 {1, 2, 3, 4}\n\n*****\n\n\n1. Multiplicative properties:\n\t* **φ(ab) = φ(a)*φ(b)** if **gcd(a, b) = 1**\n\t* Proof omitted\n2. Prime property:\n\n**φ(p^a^) = p^a^-p^a-1^=p^a^(1-1/p)**\nMore specifically **φ(p) = p-1**\n\n3. Generator function:\n\nAny number can be expressed as a product of its's powers of distinct primes.\nAnd all of the powers of primes are coprime. So\n**φ(n) = φ(p~1~^a^) * φ(p~2~^b^) ... φ(p~k~^k^)**\nUsing prime property, we can say\n**φ(n) = n*(1-1/p~1~)*(1-1/p~2~)...**\n\n*****\n\nWe can find φ(n) using the generator property. T.C = Sieve of Eratosthenes\n\n",
      "html": "<h1 id=\"1.-euler%E2%80%99s-totient-function\">1. Euler’s Totient Function <a class=\"heading-anchor-permalink\" href=\"#1.-euler%E2%80%99s-totient-function\">#</a></h1>\n<p>Created Thursday 30 July 2020</p>\n<p>Denoted by φ(n) → Number of ‘m’ such that:</p>\n<ol>\n<li>1&lt;=m&lt;n</li>\n<li>gcd(m, n) = 1</li>\n<li>m ∈ N</li>\n</ol>\n<p>e.g φ(3) = 2 {1, 2}\nφ(4) = 2 {1, 3}\nφ(5) = 4 {1, 2, 3, 4}</p>\n<hr>\n<ol>\n<li>Multiplicative properties:\n<ul>\n<li>*<em>φ(ab) = φ(a)<em>φ(b)</em></em> if <strong>gcd(a, b) = 1</strong></li>\n<li>Proof omitted</li>\n</ul>\n</li>\n<li>Prime property:</li>\n</ol>\n<p><strong>φ(p^a^) = p^a^-p^a-1^=p^a^(1-1/p)</strong>\nMore specifically <strong>φ§ = p-1</strong></p>\n<ol start=\"3\">\n<li>Generator function:</li>\n</ol>\n<p>Any number can be expressed as a product of its’s powers of distinct primes.\nAnd all of the powers of primes are coprime. So\n<strong>φ(n) = φ(p~1~^a^) * φ(p~2~^b^) … φ(p~k~^k^)</strong>\nUsing prime property, we can say\n<em><em>φ(n) = n</em>(1-1/p~1~)*(1-1/p~2~)…</em>*</p>\n<hr>\n<p>We can find φ(n) using the generator property. T.C = Sieve of Eratosthenes</p>\n",
      "id": 374
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/3._Totient_Function/2._LCM_Sum.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/3._Totient_Function/2._LCM_Sum.html",
      "content": "# 2. LCM Sum\n\nCreated Thursday 30 July 2020\n\n![](/assets/2._LCM_Sum-image-1.png)\n",
      "html": "<h1 id=\"2.-lcm-sum\">2. LCM Sum <a class=\"heading-anchor-permalink\" href=\"#2.-lcm-sum\">#</a></h1>\n<p>Created Thursday 30 July 2020</p>\n<p><img src=\"/assets/2._LCM_Sum-image-1.png\" alt=\"\"></p>\n",
      "id": 375
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/1._Optimized_Power_Function/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/1._Optimized_Power_Function/0_index.html",
      "content": "# 1. Optimized Power Function\nCreated Saturday 01 August 2020\n\n\n* Naive solution: for loop, O(n)\n* But the solution is symmetric, so their's heterogeneous repetition of work.\n* But we can work in squares(symmetry is minimum of 2).\n\n\nx^8^ = ((x^2^)^2^)^2^ 3 multiplications, instead of 8\nx^9^ = x*x^8^ 4 multiplications\n\n\n",
      "html": "<h1 id=\"1.-optimized-power-function\">1. Optimized Power Function <a class=\"heading-anchor-permalink\" href=\"#1.-optimized-power-function\">#</a></h1>\n<p>Created Saturday 01 August 2020</p>\n<ul>\n<li>Naive solution: for loop, O(n)</li>\n<li>But the solution is symmetric, so their’s heterogeneous repetition of work.</li>\n<li>But we can work in squares(symmetry is minimum of 2).</li>\n</ul>\n<p>x^8^ = ((x^2^)^2^)^2^ 3 multiplications, instead of 8\nx^9^ = x*x^8^ 4 multiplications</p>\n",
      "id": 376
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/2._Modular_exponentiation/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/2._Modular_exponentiation/0_index.html",
      "content": "# 2. Modular exponentiation\nCreated Saturday 01 August 2020\n\nmod_exp(a, b, c) - same as \n\n*****\n\nFor iterative, do the exponentiation w.r.t the bit in the binary representation. b&1 will do the bit checking.\n\n",
      "html": "<h1 id=\"2.-modular-exponentiation\">2. Modular exponentiation <a class=\"heading-anchor-permalink\" href=\"#2.-modular-exponentiation\">#</a></h1>\n<p>Created Saturday 01 August 2020</p>\n<p>mod_exp(a, b, c) - same as</p>\n<hr>\n<p>For iterative, do the exponentiation w.r.t the bit in the binary representation. b&amp;1 will do the bit checking.</p>\n",
      "id": 377
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/3._Matrix_Exponentiation/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/3._Matrix_Exponentiation/0_index.html",
      "content": "# 3. Matrix Exponentiation\n\nCreated Saturday 01 August 2020\n\n- It is used in representing and solving recurrence relation.\n- We need to find a square M, such that M x kth_state = k+1_th_state. If we can do so, matrix exponentiation is applicable. k_th state is a column vector.\n- We can find the nth Fibonacci number using this in [log(n)](https://www.youtube.com/watch?v=EEb6JP3NXBI) time.\n\n![](/assets/3._Matrix_Exponentiation-image-1.png)\n\n- This is DP\n- Used very often in CP\n",
      "html": "<h1 id=\"3.-matrix-exponentiation\">3. Matrix Exponentiation <a class=\"heading-anchor-permalink\" href=\"#3.-matrix-exponentiation\">#</a></h1>\n<p>Created Saturday 01 August 2020</p>\n<ul>\n<li>It is used in representing and solving recurrence relation.</li>\n<li>We need to find a square M, such that M x kth_state = k+1_th_state. If we can do so, matrix exponentiation is applicable. k_th state is a column vector.</li>\n<li>We can find the nth Fibonacci number using this in <a href=\"https://www.youtube.com/watch?v=EEb6JP3NXBI\">log(n)</a> time.</li>\n</ul>\n<p><img src=\"/assets/3._Matrix_Exponentiation-image-1.png\" alt=\"\"></p>\n<ul>\n<li>This is DP</li>\n<li>Used very often in CP</li>\n</ul>\n",
      "id": 378
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/3._Matrix_Exponentiation/1._Matrix_Exponentiation_-_More_Recurrence_Relation.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/3._Matrix_Exponentiation/1._Matrix_Exponentiation_-_More_Recurrence_Relation.html",
      "content": "# 1. Matrix Exponentiation - More Recurrence Relation\n\nCreated Saturday 01 August 2020\n\n1. a*f(n-1)+b*f(n-2)\n\n![](/assets/1._Matrix_Exponentiation_-_More_Recurrence_Relation-image-1.png)\n\n2. Adding a constant\n\n![](/assets/1._Matrix_Exponentiation_-_More_Recurrence_Relation-image-2.png)\n\n3. Having a difference of 2. We need to keep f(n-2) as well.\n\n![](/assets/1._Matrix_Exponentiation_-_More_Recurrence_Relation-image-3.png)\n\n4. All in one\n\n![](/assets/1._Matrix_Exponentiation_-_More_Recurrence_Relation-image-4.png)\n\n5. For piece wise, do the matrix piece wise(if statement)\n\n![](/assets/1._Matrix_Exponentiation_-_More_Recurrence_Relation-image-5.png)\n\n- All solutions are log(n). Assuming matrix multiplications to be O(1).\n",
      "html": "<h1 id=\"1.-matrix-exponentiation---more-recurrence-relation\">1. Matrix Exponentiation - More Recurrence Relation <a class=\"heading-anchor-permalink\" href=\"#1.-matrix-exponentiation---more-recurrence-relation\">#</a></h1>\n<p>Created Saturday 01 August 2020</p>\n<ol>\n<li>a<em>f(n-1)+b</em>f(n-2)</li>\n</ol>\n<p><img src=\"/assets/1._Matrix_Exponentiation_-_More_Recurrence_Relation-image-1.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>Adding a constant</li>\n</ol>\n<p><img src=\"/assets/1._Matrix_Exponentiation_-_More_Recurrence_Relation-image-2.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>Having a difference of 2. We need to keep f(n-2) as well.</li>\n</ol>\n<p><img src=\"/assets/1._Matrix_Exponentiation_-_More_Recurrence_Relation-image-3.png\" alt=\"\"></p>\n<ol start=\"4\">\n<li>All in one</li>\n</ol>\n<p><img src=\"/assets/1._Matrix_Exponentiation_-_More_Recurrence_Relation-image-4.png\" alt=\"\"></p>\n<ol start=\"5\">\n<li>For piece wise, do the matrix piece wise(if statement)</li>\n</ol>\n<p><img src=\"/assets/1._Matrix_Exponentiation_-_More_Recurrence_Relation-image-5.png\" alt=\"\"></p>\n<ul>\n<li>All solutions are log(n). Assuming matrix multiplications to be O(1).</li>\n</ul>\n",
      "id": 379
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/3._Matrix_Exponentiation/2._Matrix_Expo_Fibonacci_Sum.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/3._Matrix_Exponentiation/2._Matrix_Expo_Fibonacci_Sum.html",
      "content": "# 2. Matrix Expo Fibonacci Sum\nCreated Sunday 02 August 2020\n\n\n* Given m, n. Find fib(m)+fib(m+1)+...+fib(n)\n* Find the first two - logn, then add them. O(m) Not Accepted.\n* If we algebra, we can see that sum from start to nth, S(n) = F(n+2)-1\n* We need S(m)-S(n-1) = which is log(m)+log(n+1). Accepted\n\n\nBring any problem down to fibonacci, which is always solvable in f(n)\n\n",
      "html": "<h1 id=\"2.-matrix-expo-fibonacci-sum\">2. Matrix Expo Fibonacci Sum <a class=\"heading-anchor-permalink\" href=\"#2.-matrix-expo-fibonacci-sum\">#</a></h1>\n<p>Created Sunday 02 August 2020</p>\n<ul>\n<li>Given m, n. Find fib(m)+fib(m+1)+…+fib(n)</li>\n<li>Find the first two - logn, then add them. O(m) Not Accepted.</li>\n<li>If we algebra, we can see that sum from start to nth, S(n) = F(n+2)-1</li>\n<li>We need S(m)-S(n-1) = which is log(m)+log(n+1). Accepted</li>\n</ul>\n<p>Bring any problem down to fibonacci, which is always solvable in f(n)</p>\n",
      "id": 380
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/4._Fermat's_Little_Theorem/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/4._Fermat's_Little_Theorem/0_index.html",
      "content": "# 4. Fermat's Little Theorem\n\nCreated Sunday 02 August 2020\n\n- Used very frequently.\n\n- **For a number 'a' and a prime 'p' **![](/assets/4._Fermat's_Little_Theorem-image-1.png) a.s.a ![](/assets/4._Fermat's_Little_Theorem-image-2.png)\n- Where is it used? To find multiplicative inverse in a prime environment, using modular exponentiation.\n\n![](/assets/4._Fermat's_Little_Theorem-image-3.png)\n",
      "html": "<h1 id=\"4.-fermat%E2%80%99s-little-theorem\">4. Fermat’s Little Theorem <a class=\"heading-anchor-permalink\" href=\"#4.-fermat%E2%80%99s-little-theorem\">#</a></h1>\n<p>Created Sunday 02 August 2020</p>\n<ul>\n<li>\n<p>Used very frequently.</p>\n</li>\n<li>\n<p>**For a number ‘a’ and a prime ‘p’ **<img src=\"/assets/4._Fermat's_Little_Theorem-image-1.png\" alt=\"\"> a.s.a <img src=\"/assets/4._Fermat's_Little_Theorem-image-2.png\" alt=\"\"></p>\n</li>\n<li>\n<p>Where is it used? To find multiplicative inverse in a prime environment, using modular exponentiation.</p>\n</li>\n</ul>\n<p><img src=\"/assets/4._Fermat's_Little_Theorem-image-3.png\" alt=\"\"></p>\n",
      "id": 381
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/5._Wilson's_Theorem.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/5._Wilson's_Theorem.html",
      "content": "# 5. Wilson's Theorem\nCreated Sunday 02 August 2020\n\nIf p is a prime number, then (p-1)! mod(p) = -1 or p-1\n\n* This is used if we need to solve quickly for a given case of (n!)mod(p) when n is p-1\n\n\n",
      "html": "<h1 id=\"5.-wilson%E2%80%99s-theorem\">5. Wilson’s Theorem <a class=\"heading-anchor-permalink\" href=\"#5.-wilson%E2%80%99s-theorem\">#</a></h1>\n<p>Created Sunday 02 August 2020</p>\n<p>If p is a prime number, then (p-1)! mod§ = -1 or p-1</p>\n<ul>\n<li>This is used if we need to solve quickly for a given case of (n!)mod§ when n is p-1</li>\n</ul>\n",
      "id": 382
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/6._Income_on_the_Nth_day.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/11._Number_Theory/4._Solving_equations_using_NT/6._Income_on_the_Nth_day.html",
      "content": "# 6. Income on the Nth day\nCreated Sunday 02 August 2020\n\nF(n) = F(n-1)+F(n-2)+F(n-1)*F(n-2)\n\nUses all 4:\n\n1. Matrix Exponentiation\n2. Modular Exponentiation\n3. Fermat's Little theorem\n4. Recurrence Relations\n\n\n",
      "html": "<h1 id=\"6.-income-on-the-nth-day\">6. Income on the Nth day <a class=\"heading-anchor-permalink\" href=\"#6.-income-on-the-nth-day\">#</a></h1>\n<p>Created Sunday 02 August 2020</p>\n<p>F(n) = F(n-1)+F(n-2)+F(n-1)*F(n-2)</p>\n<p>Uses all 4:</p>\n<ol>\n<li>Matrix Exponentiation</li>\n<li>Modular Exponentiation</li>\n<li>Fermat’s Little theorem</li>\n<li>Recurrence Relations</li>\n</ol>\n",
      "id": 383
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/1._Intro_to_Game_Theory.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/1._Intro_to_Game_Theory.html",
      "content": "# 1. Intro to Game Theory\nCreated Sunday 02 August 2020\n\n\n* Generally two players are playing the game.\n* We need to predict the winner.\n* We use basic maths here.\n* We are studying combinatorial game theory - a game that ends. e.g Chess can be brought to a loop.\n* There are two types of games:\n\t1. Impartial Games - both are playing similar things.\n\t2. Partisan Games - Both players have different moves available to them.\n* We are focusing more for impartial games.\n\n\n",
      "html": "<h1 id=\"1.-intro-to-game-theory\">1. Intro to Game Theory <a class=\"heading-anchor-permalink\" href=\"#1.-intro-to-game-theory\">#</a></h1>\n<p>Created Sunday 02 August 2020</p>\n<ul>\n<li>Generally two players are playing the game.</li>\n<li>We need to predict the winner.</li>\n<li>We use basic maths here.</li>\n<li>We are studying combinatorial game theory - a game that ends. e.g Chess can be brought to a loop.</li>\n<li>There are two types of games:\n<ol>\n<li>Impartial Games - both are playing similar things.</li>\n<li>Partisan Games - Both players have different moves available to them.</li>\n</ol>\n</li>\n<li>We are focusing more for impartial games.</li>\n</ul>\n",
      "id": 384
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/2._Game_of_Nim.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/2._Game_of_Nim.html",
      "content": "# 2. Game of Nim\nCreated Sunday 02 August 2020\n\n\n* Rule - Any player can remove any number of stones from a pile.\n* Loser - The first person who has no stones to remove loses.\n\n\n\n* Nimsum = XOR of all the stones in the piles, e.g 3 ^ 4 ^ 5.\n\n\nTheorem of Nim:\n```c++\nif(nimsum==0)\n  player 1 loses;\nelse\n  player 1 wins;\n  // assuming both are playing optimally\n```\n",
      "html": "<h1 id=\"2.-game-of-nim\">2. Game of Nim <a class=\"heading-anchor-permalink\" href=\"#2.-game-of-nim\">#</a></h1>\n<p>Created Sunday 02 August 2020</p>\n<ul>\n<li>\n<p>Rule - Any player can remove any number of stones from a pile.</p>\n</li>\n<li>\n<p>Loser - The first person who has no stones to remove loses.</p>\n</li>\n<li>\n<p>Nimsum = XOR of all the stones in the piles, e.g 3 ^ 4 ^ 5.</p>\n</li>\n</ul>\n<p>Theorem of Nim:</p>\n<pre><code class=\"language-c++\">if(nimsum==0)\n  player 1 loses;\nelse\n  player 1 wins;\n  // assuming both are playing optimally\n</code></pre>\n",
      "id": 385
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/3._Proof_of_Nim_Formula.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/3._Proof_of_Nim_Formula.html",
      "content": "# 3. Proof of Nim Formula\nCreated Sunday 02 August 2020\n\n\n* Make the cumulative XOR zero. This ensures our win.\n\n\n",
      "html": "<h1 id=\"3.-proof-of-nim-formula\">3. Proof of Nim Formula <a class=\"heading-anchor-permalink\" href=\"#3.-proof-of-nim-formula\">#</a></h1>\n<p>Created Sunday 02 August 2020</p>\n<ul>\n<li>Make the cumulative XOR zero. This ensures our win.</li>\n</ul>\n",
      "id": 386
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/4._Grundy_Numbers.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/4._Grundy_Numbers.html",
      "content": "# 4. Grundy Numbers\nCreated Sunday 02 August 2020\n\nMex - Minimum Excludent Set.\nFor numbers, it is the smallest non-negative number which is absent.\nmex{0,1} = {2}\nmex{1,2,3} = {0}\nmex{0,1, 3} = {2}\n\n\n* Grundy numbers is very important w.r.t game theory.\n* Grundy(n) = mex{Grundy(p1), Grundy(p2)...}\n* Grundy(0) = 0, the final position.\n\n\n\n",
      "html": "<h1 id=\"4.-grundy-numbers\">4. Grundy Numbers <a class=\"heading-anchor-permalink\" href=\"#4.-grundy-numbers\">#</a></h1>\n<p>Created Sunday 02 August 2020</p>\n<p>Mex - Minimum Excludent Set.\nFor numbers, it is the smallest non-negative number which is absent.\nmex{0,1} = {2}\nmex{1,2,3} = {0}\nmex{0,1, 3} = {2}</p>\n<ul>\n<li>Grundy numbers is very important w.r.t game theory.</li>\n<li>Grundy(n) = mex{Grundy(p1), Grundy(p2)…}</li>\n<li>Grundy(0) = 0, the final position.</li>\n</ul>\n",
      "id": 387
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/5._Sprague-Grundy_Theorem.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/5._Sprague-Grundy_Theorem.html",
      "content": "# 5. Sprague-Grundy Theorem\nCreated Sunday 02 August 2020\n\nTake cumulative XOR of grundy value of each pile.\nif cumXOR == 0:\nplayer 1 loses;\nelse\nplayer 1 wins;\nProof omitted.\n\n\n",
      "html": "<h1 id=\"5.-sprague-grundy-theorem\">5. Sprague-Grundy Theorem <a class=\"heading-anchor-permalink\" href=\"#5.-sprague-grundy-theorem\">#</a></h1>\n<p>Created Sunday 02 August 2020</p>\n<p>Take cumulative XOR of grundy value of each pile.\nif cumXOR == 0:\nplayer 1 loses;\nelse\nplayer 1 wins;\nProof omitted.</p>\n",
      "id": 388
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/6._MinMax_Algorithm.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/12._Game_Theory/6._MinMax_Algorithm.html",
      "content": "# 6. MinMax Algorithm\nCreated Sunday 02 August 2020\n\nThere are two players in the game.\n\n1. Maximizer - wants their score to be maximum.\n2. Minimizer - wants the score of opponent to be minimum.\n\n\n",
      "html": "<h1 id=\"6.-minmax-algorithm\">6. MinMax Algorithm <a class=\"heading-anchor-permalink\" href=\"#6.-minmax-algorithm\">#</a></h1>\n<p>Created Sunday 02 August 2020</p>\n<p>There are two players in the game.</p>\n<ol>\n<li>Maximizer - wants their score to be maximum.</li>\n<li>Minimizer - wants the score of opponent to be minimum.</li>\n</ol>\n",
      "id": 389
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/0_index.html",
      "content": "# 13. Computational Geometry\nCreated Monday 22 June 2020\n\nVectors are represented.\n\n",
      "html": "<h1 id=\"13.-computational-geometry\">13. Computational Geometry <a class=\"heading-anchor-permalink\" href=\"#13.-computational-geometry\">#</a></h1>\n<p>Created Monday 22 June 2020</p>\n<p>Vectors are represented.</p>\n",
      "id": 390
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/1._Intro_to_Computational_Geometry.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/1._Intro_to_Computational_Geometry.html",
      "content": "# 1. Intro to Computational Geometry\nCreated Thursday 20 August 2020\n\n\n* We use elementary geometry to solve problems here.\n* Vector concepts are used here, like products(dot and cross), magnitudes, displacement etc.\n* Dot product (x~1~, y~1~), (x~2~, y~2~) = x~1~x~2~+y~1~y~2~ = |a|*|b|*cos(θ)\n* Cross product - Area of triangle(AxB/2), Area of parallelogram(AxB)\n\n\n",
      "html": "<h1 id=\"1.-intro-to-computational-geometry\">1. Intro to Computational Geometry <a class=\"heading-anchor-permalink\" href=\"#1.-intro-to-computational-geometry\">#</a></h1>\n<p>Created Thursday 20 August 2020</p>\n<ul>\n<li>We use elementary geometry to solve problems here.</li>\n<li>Vector concepts are used here, like products(dot and cross), magnitudes, displacement etc.</li>\n<li>Dot product (x~1~, y~1~), (x~2~, y~2~) = x~1~x~2~+y~1~y~2~ = |a|*|b|*cos(θ)</li>\n<li>Cross product - Area of triangle(AxB/2), Area of parallelogram(AxB)</li>\n</ul>\n",
      "id": 391
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/2._Distance_betwn_point_and_line.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/2._Distance_betwn_point_and_line.html",
      "content": "# 2. Distance betwn point and line\n\nCreated Thursday 20 August 2020\n\n- Point to line: AB to C = ABxAC/|AB| = (area of triangle)/base\n\n![](/assets/2._Distance_betwn_point_and_line-image-1.png)\n\n- Line segment to point: Find nearby point(using dot product, obtuse-acute)\n\nTry both AB.AC and AB.BC, if anyone is negative, then find using cartesian distance.\nElse(both + ve) find the perpendicular distance using the area formula.\n![](/assets/2._Distance_betwn_point_and_line-image-2.png)\n",
      "html": "<h1 id=\"2.-distance-betwn-point-and-line\">2. Distance betwn point and line <a class=\"heading-anchor-permalink\" href=\"#2.-distance-betwn-point-and-line\">#</a></h1>\n<p>Created Thursday 20 August 2020</p>\n<ul>\n<li>Point to line: AB to C = ABxAC/|AB| = (area of triangle)/base</li>\n</ul>\n<p><img src=\"/assets/2._Distance_betwn_point_and_line-image-1.png\" alt=\"\"></p>\n<ul>\n<li>Line segment to point: Find nearby point(using dot product, obtuse-acute)</li>\n</ul>\n<p>Try both <a href=\"http://AB.AC\">AB.AC</a> and AB.BC, if anyone is negative, then find using cartesian distance.\nElse(both + ve) find the perpendicular distance using the area formula.\n<img src=\"/assets/2._Distance_betwn_point_and_line-image-2.png\" alt=\"\"></p>\n",
      "id": 392
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/3._Area_of_a_polygon.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/3._Area_of_a_polygon.html",
      "content": "# 3. Area of a polygon\nCreated Thursday 20 August 2020\n\n**Triangulation method**\n\n* For finding the area of a polygon, divide it into triangles and find the area.\n* Just add all. Don't worry about convexity, the cross products will handle it.(They can be positive or negative)\n* Area = abs(ABC + ACD + ADE + ... - (the last one subtracted))\n\n\n",
      "html": "<h1 id=\"3.-area-of-a-polygon\">3. Area of a polygon <a class=\"heading-anchor-permalink\" href=\"#3.-area-of-a-polygon\">#</a></h1>\n<p>Created Thursday 20 August 2020</p>\n<p><strong>Triangulation method</strong></p>\n<ul>\n<li>For finding the area of a polygon, divide it into triangles and find the area.</li>\n<li>Just add all. Don’t worry about convexity, the cross products will handle it.(They can be positive or negative)</li>\n<li>Area = abs(ABC + ACD + ADE + … - (the last one subtracted))</li>\n</ul>\n",
      "id": 393
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/4._Intersection_of_two_lines.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/4._Intersection_of_two_lines.html",
      "content": "# 4. Intersection of two lines\nCreated Thursday 20 August 2020\n\n**Intersection of lines**\n\n* We are given 2 pairs of points, which lie on one line each.\n* Do they intersect. Represent them as lines. If det()=0, then they are parallel.\n\n\n**Intersection of line segments**\n\n* Check if the intersect.\n* Check if intersecting point lies using this\n\nif min(x~1~, x~2~)≤ x ≤ max(x~1~, x~2~) and min(y~1~, y~2~)≤ y ≤ min(y~1~, y~2~)\n\n",
      "html": "<h1 id=\"4.-intersection-of-two-lines\">4. Intersection of two lines <a class=\"heading-anchor-permalink\" href=\"#4.-intersection-of-two-lines\">#</a></h1>\n<p>Created Thursday 20 August 2020</p>\n<p><strong>Intersection of lines</strong></p>\n<ul>\n<li>We are given 2 pairs of points, which lie on one line each.</li>\n<li>Do they intersect. Represent them as lines. If det()=0, then they are parallel.</li>\n</ul>\n<p><strong>Intersection of line segments</strong></p>\n<ul>\n<li>Check if the intersect.</li>\n<li>Check if intersecting point lies using this</li>\n</ul>\n<p>if min(x~1~, x~2~)≤ x ≤ max(x~1~, x~2~) and min(y~1~, y~2~)≤ y ≤ min(y~1~, y~2~)</p>\n",
      "id": 394
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/5._Convex_Hull.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/13._Computational_Geometry/5._Convex_Hull.html",
      "content": "# 5. Convex Hull\n\nCreated Thursday 20 August 2020\n\n- Using Jarvis algorithm\n- Dot product is used(to check for obtusity)\n- O(n^2^) approach\n\n![](/assets/5._Convex_Hull-image-1.png)\n",
      "html": "<h1 id=\"5.-convex-hull\">5. Convex Hull <a class=\"heading-anchor-permalink\" href=\"#5.-convex-hull\">#</a></h1>\n<p>Created Thursday 20 August 2020</p>\n<ul>\n<li>Using Jarvis algorithm</li>\n<li>Dot product is used(to check for obtusity)</li>\n<li>O(n^2^) approach</li>\n</ul>\n<p><img src=\"/assets/5._Convex_Hull-image-1.png\" alt=\"\"></p>\n",
      "id": 395
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/14._FFT.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/14._FFT.html",
      "content": "# 14. FFT\nCreated Monday 22 June 2020\n\nFIXME\n\n",
      "html": "<h1 id=\"14.-fft\">14. FFT <a class=\"heading-anchor-permalink\" href=\"#14.-fft\">#</a></h1>\n<p>Created Monday 22 June 2020</p>\n<p>FIXME</p>\n",
      "id": 396
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/15._HLD/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/15._HLD/0_index.html",
      "content": "# 15. HLD\nCreated Monday 22 June 2020\n\nHeavilide decomposition.\nFIXME\n\n",
      "html": "<h1 id=\"15.-hld\">15. HLD <a class=\"heading-anchor-permalink\" href=\"#15.-hld\">#</a></h1>\n<p>Created Monday 22 June 2020</p>\n<p>Heavilide decomposition.\nFIXME</p>\n",
      "id": 397
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/15._HLD/1._Intro_to_HLD.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/15._HLD/1._Intro_to_HLD.html",
      "content": "# 1. Intro to HLD\nCreated Tuesday 04 August 2020\n\nWe have a chain, we are being asked queries like max or sum etc. We can do this using Fenwick Tree or Segment tree.\n\n",
      "html": "<h1 id=\"1.-intro-to-hld\">1. Intro to HLD <a class=\"heading-anchor-permalink\" href=\"#1.-intro-to-hld\">#</a></h1>\n<p>Created Tuesday 04 August 2020</p>\n<p>We have a chain, we are being asked queries like max or sum etc. We can do this using Fenwick Tree or Segment tree.</p>\n",
      "id": 398
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/15._HLD/2._Basics_of_HLD.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/15._HLD/2._Basics_of_HLD.html",
      "content": "# 2. Basics of HLD\nCreated Tuesday 04 August 2020\n\n\n* Special Child → Child with maximum number of descendants\n* Special Edge → The edge connecting the current node to the special child.\n* Non-special children start a new chain.\n\n\n",
      "html": "<h1 id=\"2.-basics-of-hld\">2. Basics of HLD <a class=\"heading-anchor-permalink\" href=\"#2.-basics-of-hld\">#</a></h1>\n<p>Created Tuesday 04 August 2020</p>\n<ul>\n<li>Special Child → Child with maximum number of descendants</li>\n<li>Special Edge → The edge connecting the current node to the special child.</li>\n<li>Non-special children start a new chain.</li>\n</ul>\n",
      "id": 399
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/15._HLD/3._Importance_of_HLD.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/15._HLD/3._Importance_of_HLD.html",
      "content": "# 3. Importance of HLD\nCreated Tuesday 04 August 2020\n\n\n* We are given a tree, not necessarily a binary tree.\n* A tree with change ath edge and a findMaxEdge(between and b) operation.\n\n\nIf we use HLD, we will do findMax in log(n) and change in log^2^(n)\nWe do this using LCA.\n\n",
      "html": "<h1 id=\"3.-importance-of-hld\">3. Importance of HLD <a class=\"heading-anchor-permalink\" href=\"#3.-importance-of-hld\">#</a></h1>\n<p>Created Tuesday 04 August 2020</p>\n<ul>\n<li>We are given a tree, not necessarily a binary tree.</li>\n<li>A tree with change ath edge and a findMaxEdge(between and b) operation.</li>\n</ul>\n<p>If we use HLD, we will do findMax in log(n) and change in log^2^(n)\nWe do this using LCA.</p>\n",
      "id": 400
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/15._HLD/4._Complexity_of_operations.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/15._HLD/4._Complexity_of_operations.html",
      "content": "# 4. Complexity of operations\nCreated Tuesday 04 August 2020\n\n\n* Least child of special child is ceil(S/m), m children for the current node.\n* Maximum children of any node is S/m. Tree size is halving. logn is the maximum time for change.\n* find does it in (logn)^2^\n\n\n",
      "html": "<h1 id=\"4.-complexity-of-operations\">4. Complexity of operations <a class=\"heading-anchor-permalink\" href=\"#4.-complexity-of-operations\">#</a></h1>\n<p>Created Tuesday 04 August 2020</p>\n<ul>\n<li>Least child of special child is ceil(S/m), m children for the current node.</li>\n<li>Maximum children of any node is S/m. Tree size is halving. logn is the maximum time for change.</li>\n<li>find does it in (logn)^2^</li>\n</ul>\n",
      "id": 401
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/0_index.html",
      "content": "# 2. Unconventional use of Searching And Sorting\nCreated Monday 22 June 2020\n\n[power of binary search](https://www.topcoder.com/community/competitive-programming/tutorials/binary-search/)\n\n",
      "html": "<h1 id=\"2.-unconventional-use-of-searching-and-sorting\">2. Unconventional use of Searching And Sorting <a class=\"heading-anchor-permalink\" href=\"#2.-unconventional-use-of-searching-and-sorting\">#</a></h1>\n<p>Created Monday 22 June 2020</p>\n<p><a href=\"https://www.topcoder.com/community/competitive-programming/tutorials/binary-search/\">power of binary search</a></p>\n",
      "id": 402
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/1._Aggressive_Cows.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/1._Aggressive_Cows.html",
      "content": "# 1. Aggressive Cows\nCreated Monday 22 June 2020\n\n\n* Given some cows and stalls(number of stalls > cows).\n\nThe solution:\nObservations:\nThe minimum number of cows possible are two: \n\n1. The range of distance is 0(all in one stall) vs x~max ~- x~min~(only 2 cos present) - This is true for any input.\n2. To find out Largest minimum distance, we need to be able to arrange the cows with gaps of atleast that value.\n3. Suppose we are at the answer, d, we can arrange the cows where atleast one distance is d.\n4. For d+1, we won't be able to arrange the cows, not enough stalls.\n5. For d-1, we should still be able to arrange the cows, because stalls are remaining.\n6. This means that starting from the ends is a waste of time. We can instead start in the middle.\n7. The middle of what? If we just take the case of 2 cows. The solution works out in ClogD. Remember we are sorting. So the solution is nlon.\n8. Is a better solution possible - maybe. But this is it for now.\n\n\n",
      "html": "<h1 id=\"1.-aggressive-cows\">1. Aggressive Cows <a class=\"heading-anchor-permalink\" href=\"#1.-aggressive-cows\">#</a></h1>\n<p>Created Monday 22 June 2020</p>\n<ul>\n<li>Given some cows and stalls(number of stalls &gt; cows).</li>\n</ul>\n<p>The solution:\nObservations:\nThe minimum number of cows possible are two:</p>\n<ol>\n<li>The range of distance is 0(all in one stall) vs x~max ~- x~min~(only 2 cos present) - This is true for any input.</li>\n<li>To find out Largest minimum distance, we need to be able to arrange the cows with gaps of atleast that value.</li>\n<li>Suppose we are at the answer, d, we can arrange the cows where atleast one distance is d.</li>\n<li>For d+1, we won’t be able to arrange the cows, not enough stalls.</li>\n<li>For d-1, we should still be able to arrange the cows, because stalls are remaining.</li>\n<li>This means that starting from the ends is a waste of time. We can instead start in the middle.</li>\n<li>The middle of what? If we just take the case of 2 cows. The solution works out in ClogD. Remember we are sorting. So the solution is nlon.</li>\n<li>Is a better solution possible - maybe. But this is it for now.</li>\n</ol>\n",
      "id": 403
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/2._Inversion_Count/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/2._Inversion_Count/0_index.html",
      "content": "# 2. Inversion Count\nCreated Monday 22 June 2020\n\n![](./2._Inversion_Count/Jun%2022%2019h07.svgz)\n\n* Simply calculate the problems in the array while sorting. We do the comparisons anyway. Same as that for merge sort.\n* A simple method is to sort and iterate. Easier to code.\n* Another method is to a variable which counts the inversions. Implementing merge sort again.\n\n\n",
      "html": "<h1 id=\"2.-inversion-count\">2. Inversion Count <a class=\"heading-anchor-permalink\" href=\"#2.-inversion-count\">#</a></h1>\n<p>Created Monday 22 June 2020</p>\n<p><img src=\"./2._Inversion_Count/Jun%2022%2019h07.svgz\" alt=\"\"></p>\n<ul>\n<li>Simply calculate the problems in the array while sorting. We do the comparisons anyway. Same as that for merge sort.</li>\n<li>A simple method is to sort and iterate. Easier to code.</li>\n<li>Another method is to a variable which counts the inversions. Implementing merge sort again.</li>\n</ul>\n",
      "id": 404
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/3._chef/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/3._chef/0_index.html",
      "content": "# 3. chef\nCreated Monday 22 June 2020\n\n[Chef](3._chef/chef.cpp)\n\n",
      "html": "<h1 id=\"3.-chef\">3. chef <a class=\"heading-anchor-permalink\" href=\"#3.-chef\">#</a></h1>\n<p>Created Monday 22 June 2020</p>\n<p><a href=\"3._chef/chef.cpp\">Chef</a></p>\n",
      "id": 405
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/4._Variation/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/4._Variation/0_index.html",
      "content": "# 4. Variation\nCreated Monday 22 June 2020\n\n<https://www.codechef.com/ZCOPRAC/problems/ZCO15002/>\n\n[Solution - Variates](4._Variation/variates.cpp)\n\n",
      "html": "<h1 id=\"4.-variation\">4. Variation <a class=\"heading-anchor-permalink\" href=\"#4.-variation\">#</a></h1>\n<p>Created Monday 22 June 2020</p>\n<p><a href=\"https://www.codechef.com/ZCOPRAC/problems/ZCO15002/\">https://www.codechef.com/ZCOPRAC/problems/ZCO15002/</a></p>\n<p><a href=\"4._Variation/variates.cpp\">Solution - Variates</a></p>\n",
      "id": 406
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/5._Murder/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/5._Murder/0_index.html",
      "content": "# 5. Murder\nCreated Tuesday 23 June 2020\n\n**Murder**\nOnce detective Saikat was solving a murder case. While going to the crime scene he took the stairs and saw that a number is written on every stair. He found it suspicious and decides to remember all the numbers that he has seen till now. While remembering the numbers he found that he can find some pattern in those numbers. So he decides that for each number on the stairs he will note down the sum of all the numbers previously seen on the stairs which are smaller than the present number. Calculate the sum of all the numbers written on his notes diary.\nAnswer may not fit in integer . You have to take long.\n**Input**\nFirst line gives T, number of test cases.\n\n2T lines follow.\n\nFirst line gives you the number of stairs N\n\nNext line gives you N numbers written on the stairs.\n**Output**\nFor each test case output one line giving the final sum for each test case.\n**Constraints**\nT<=10\n\n1<=N<=10^5\n\nAll numbers will be between 0 and 10^6.\n**Sample Input:**\n1\n5\n1 5 3 6 4\n**Sample Output:**\n15\n**Explanation:**\nFor the first number, the contribution to the sum is 0.\nFor the second number, the contribution to the sum is 1.\nFor the third number, the contribution to the sum is 1.\nFor the fourth number, the contribution to the sum is 9 (1+5+3).\nFor the fifth number, the contribution to the sum is 4 (1+3).\nHence the sum is 15 (0+1+1+9+4).\n\n*****\n\nThis is nothing but counting anti inversion - nlogn time. Using the idea of Divide and Conquer.\n[murder.cpp](5._Murder/murder.cpp)\n\n",
      "html": "<h1 id=\"5.-murder\">5. Murder <a class=\"heading-anchor-permalink\" href=\"#5.-murder\">#</a></h1>\n<p>Created Tuesday 23 June 2020</p>\n<p><strong>Murder</strong>\nOnce detective Saikat was solving a murder case. While going to the crime scene he took the stairs and saw that a number is written on every stair. He found it suspicious and decides to remember all the numbers that he has seen till now. While remembering the numbers he found that he can find some pattern in those numbers. So he decides that for each number on the stairs he will note down the sum of all the numbers previously seen on the stairs which are smaller than the present number. Calculate the sum of all the numbers written on his notes diary.\nAnswer may not fit in integer . You have to take long.\n<strong>Input</strong>\nFirst line gives T, number of test cases.</p>\n<p>2T lines follow.</p>\n<p>First line gives you the number of stairs N</p>\n<p>Next line gives you N numbers written on the stairs.\n<strong>Output</strong>\nFor each test case output one line giving the final sum for each test case.\n<strong>Constraints</strong>\nT&lt;=10</p>\n<p>1&lt;=N&lt;=10^5</p>\n<p>All numbers will be between 0 and 10^6.\n<strong>Sample Input:</strong>\n1\n5\n1 5 3 6 4\n<strong>Sample Output:</strong>\n15\n<strong>Explanation:</strong>\nFor the first number, the contribution to the sum is 0.\nFor the second number, the contribution to the sum is 1.\nFor the third number, the contribution to the sum is 1.\nFor the fourth number, the contribution to the sum is 9 (1+5+3).\nFor the fifth number, the contribution to the sum is 4 (1+3).\nHence the sum is 15 (0+1+1+9+4).</p>\n<hr>\n<p>This is nothing but counting anti inversion - nlogn time. Using the idea of Divide and Conquer.\n<a href=\"5._Murder/murder.cpp\">murder.cpp</a></p>\n",
      "id": 407
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/6._Momos_Market/type.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/6._Momos_Market/type.html",
      "content": "",
      "html": "",
      "id": 408
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/7._Distribute_Candies/distribute_candies.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/7._Distribute_Candies/distribute_candies.html",
      "content": "Distribute Candies\n\nShaky has N (1<=N<=50000) candy boxes each of them contains a non-zero number of candies (between 1 and 1000000000). Shaky want to distibute these candies among his K (1<=K<=1000000000) IIIT-Delhi students. He want to distibute them in a way such that:\n\n1. All students get equal number of candies.\n2. All the candies which a student get must be from a single box only.\nAs he want to make all of them happy so he want to give as many candies as possible. Help Shaky in finding out what is the maximum number of candies which a student can get.\nInput\nFirst line contains 1<=T<=20 the number of test cases. Then T test cases follow. First line of each test case contains N and K. Next line contains N integers, ith of which is the number of candies in ith box.\nOutput\nFor each test case print the required answer in a seperate line.\nSample Input:\n2\n3 2\n3 1 4\n4 1\n3 2 3 9\nSample Output:\n3\n9\n",
      "html": "<p>Distribute Candies</p>\n<p>Shaky has N (1&lt;=N&lt;=50000) candy boxes each of them contains a non-zero number of candies (between 1 and 1000000000). Shaky want to distibute these candies among his K (1&lt;=K&lt;=1000000000) IIIT-Delhi students. He want to distibute them in a way such that:</p>\n<ol>\n<li>All students get equal number of candies.</li>\n<li>All the candies which a student get must be from a single box only.\nAs he want to make all of them happy so he want to give as many candies as possible. Help Shaky in finding out what is the maximum number of candies which a student can get.\nInput\nFirst line contains 1&lt;=T&lt;=20 the number of test cases. Then T test cases follow. First line of each test case contains N and K. Next line contains N integers, ith of which is the number of candies in ith box.\nOutput\nFor each test case print the required answer in a seperate line.\nSample Input:\n2\n3 2\n3 1 4\n4 1\n3 2 3 9\nSample Output:\n3\n9</li>\n</ol>\n",
      "id": 409
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/8._Taj_Mahal_Entry/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/2._Unconventional_use_of_Searching_And_Sorting/8._Taj_Mahal_Entry/0_index.html",
      "content": "# 8. Taj Mahal Entry\nCreated Wednesday 24 June 2020\n\n**Taj Mahal Entry**\nTaj Mahal is one of the seven wonders of the world. Aahad loves to travel places and wants to visit Taj Mahal. He visited Agra to view Taj Mahal. There is a ticketing system at Taj Mahal. There are total ‘n’ windows which provide the tickets to get entry into Taj Mahal. There are ‘Ai’ people already present at each window to get the tickets. Each window gives ticket to one person in one minute. Initially, Aahad stands in front of the first window. After each minute, if he didn’t get the ticket, he moves on to the next window to get the ticket. If he is at window 1, he will move to 2. If at 2nd, he will move to 3rd. If he is at last window, he will move to 1st again and so on. Find the window number at which he will get the ticket.\n**Input Format:**\nFirst line contains a single integer ‘n’ denoting the no. of windows.\nNext line contains ‘n’ space separated integers denoting the no. of people already standing in front of the ith window. (1 <= i <= n)\n**Output Format:**\nPrint a single integer denoting the window number that Aahad will get ticket from.\n**Constraints:**\n1 <= n <= 10^5\n1 <= Ai <= 10^9\n**Sample Input:**\n4\n2 3 2 0\n**Sample Output:**\n3\n**Explanation:**\nAahad at Window 1: [2, 3, 2, 0]\nAahad at Window 2: [1, 2, 1, 0]\nAahad at Window 3: [0, 1, 0, 0]\nSo, when Aahad is at window 3, he got zero people before him. Hence, he will get the ticket at window 3.\n\n",
      "html": "<h1 id=\"8.-taj-mahal-entry\">8. Taj Mahal Entry <a class=\"heading-anchor-permalink\" href=\"#8.-taj-mahal-entry\">#</a></h1>\n<p>Created Wednesday 24 June 2020</p>\n<p><strong>Taj Mahal Entry</strong>\nTaj Mahal is one of the seven wonders of the world. Aahad loves to travel places and wants to visit Taj Mahal. He visited Agra to view Taj Mahal. There is a ticketing system at Taj Mahal. There are total ‘n’ windows which provide the tickets to get entry into Taj Mahal. There are ‘Ai’ people already present at each window to get the tickets. Each window gives ticket to one person in one minute. Initially, Aahad stands in front of the first window. After each minute, if he didn’t get the ticket, he moves on to the next window to get the ticket. If he is at window 1, he will move to 2. If at 2nd, he will move to 3rd. If he is at last window, he will move to 1st again and so on. Find the window number at which he will get the ticket.\n<strong>Input Format:</strong>\nFirst line contains a single integer ‘n’ denoting the no. of windows.\nNext line contains ‘n’ space separated integers denoting the no. of people already standing in front of the ith window. (1 &lt;= i &lt;= n)\n<strong>Output Format:</strong>\nPrint a single integer denoting the window number that Aahad will get ticket from.\n<strong>Constraints:</strong>\n1 &lt;= n &lt;= 10^5\n1 &lt;= Ai &lt;= 10^9\n<strong>Sample Input:</strong>\n4\n2 3 2 0\n<strong>Sample Output:</strong>\n3\n<strong>Explanation:</strong>\nAahad at Window 1: [2, 3, 2, 0]\nAahad at Window 2: [1, 2, 1, 0]\nAahad at Window 3: [0, 1, 0, 0]\nSo, when Aahad is at window 3, he got zero people before him. Hence, he will get the ticket at window 3.</p>\n",
      "id": 410
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/1._BackTracking/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/1._BackTracking/0_index.html",
      "content": "# 1. BackTracking\n\nCreated Monday 22 June 2020\n\n**Lecture:**\n\n- Backtracking is an approach where we explore all possible paths.\n\ne.g There are 10 bags with some items.\nPrint the name on the bag if a ball exists in the bag.\n\n- Backtracking is a kind of thinking(approach), not an algorithm.\n- Backtracking and recursion are different. Backtracking is an approach and recursion is the algorithm used to solve the problem.\n- Backtracking is implemented using recursion.\n\n---\n\nN Queens Problem:\nGiven an NxN grid and N queens, following the rules of chess. We need to place the queens such that no queen is able to attack any other queen. Find and print the ways in which this is possible.\n\nHow to approach this problem:\n\n1. Place the queens one by one.\n2. After placing some queens, place a queen out from the killzone of the queens.\n3. If a queen becomes unplaceable, change the queen which came before this - the previous queen caused the problem.\n4. Keep doing this until we are able to place the queens effectively. We can confirm a configuration if all queens are placed correctly.\n5. **Backtrack** even after a successful config. See what is possible, if the current queen was not placed here. **Do** Mark the current as marked.\n\nNote: We end the search when we have seen all initial configurations.\n\n![](/assets/1._BackTracking-image-1.png)\n\n---\n\n- For solving a problem which involves backtracking, first solve an example(not a very trivial one), then generalize.\n",
      "html": "<h1 id=\"1.-backtracking\">1. BackTracking <a class=\"heading-anchor-permalink\" href=\"#1.-backtracking\">#</a></h1>\n<p>Created Monday 22 June 2020</p>\n<p><strong>Lecture:</strong></p>\n<ul>\n<li>Backtracking is an approach where we explore all possible paths.</li>\n</ul>\n<p>e.g There are 10 bags with some items.\nPrint the name on the bag if a ball exists in the bag.</p>\n<ul>\n<li>Backtracking is a kind of thinking(approach), not an algorithm.</li>\n<li>Backtracking and recursion are different. Backtracking is an approach and recursion is the algorithm used to solve the problem.</li>\n<li>Backtracking is implemented using recursion.</li>\n</ul>\n<hr>\n<p>N Queens Problem:\nGiven an NxN grid and N queens, following the rules of chess. We need to place the queens such that no queen is able to attack any other queen. Find and print the ways in which this is possible.</p>\n<p>How to approach this problem:</p>\n<ol>\n<li>Place the queens one by one.</li>\n<li>After placing some queens, place a queen out from the killzone of the queens.</li>\n<li>If a queen becomes unplaceable, change the queen which came before this - the previous queen caused the problem.</li>\n<li>Keep doing this until we are able to place the queens effectively. We can confirm a configuration if all queens are placed correctly.</li>\n<li><strong>Backtrack</strong> even after a successful config. See what is possible, if the current queen was not placed here. <strong>Do</strong> Mark the current as marked.</li>\n</ol>\n<p>Note: We end the search when we have seen all initial configurations.</p>\n<p><img src=\"/assets/1._BackTracking-image-1.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li>For solving a problem which involves backtracking, first solve an example(not a very trivial one), then generalize.</li>\n</ul>\n",
      "id": 411
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/1._BackTracking/1._N_Queens_Problem_-_Exercise/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/1._BackTracking/1._N_Queens_Problem_-_Exercise/0_index.html",
      "content": "# 1. N Queens Problem - Exercise\nCreated Thursday 25 June 2020\n\n**N-Queen Problem**\n\nYou are given N, and for a given N x N chessboard, find a way to place N queens such that no queen can attack any other queen on the chess board. A queen can be killed when it lies in the same row, or same column, or the same diagonal of any of the other queens. You have to print all such configurations.\n**Input Format :**\nLine 1 : Integer N\n**Output Format :**\nOne Line for every board configuration. \nEvery line will have N*N board elements printed row wise and are separated by space\nNote : Don't print anything if there isn't any valid configuration.\n**Constraints :**\n1<=N<=10\n**Sample Input 1:**\n4\n**Sample Output 1 :**\n0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 \n0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 \n\n*****\n\n[nqueens.cpp](1._N_Queens_Problem_-_Exercise/nqueens.cpp)\n\n**Q) **Why don't we try all the places, and start from the first row.\n**A)** We can do anything systematic if we are exploring all paths. It does not matter.\n\n",
      "html": "<h1 id=\"1.-n-queens-problem---exercise\">1. N Queens Problem - Exercise <a class=\"heading-anchor-permalink\" href=\"#1.-n-queens-problem---exercise\">#</a></h1>\n<p>Created Thursday 25 June 2020</p>\n<p><strong>N-Queen Problem</strong></p>\n<p>You are given N, and for a given N x N chessboard, find a way to place N queens such that no queen can attack any other queen on the chess board. A queen can be killed when it lies in the same row, or same column, or the same diagonal of any of the other queens. You have to print all such configurations.\n<strong>Input Format :</strong>\nLine 1 : Integer N\n<strong>Output Format :</strong>\nOne Line for every board configuration.\nEvery line will have N*N board elements printed row wise and are separated by space\nNote : Don’t print anything if there isn’t any valid configuration.\n<strong>Constraints :</strong>\n1&lt;=N&lt;=10\n<strong>Sample Input 1:</strong>\n4\n<strong>Sample Output 1 :</strong>\n0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0\n0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0</p>\n<hr>\n<p><a href=\"1._N_Queens_Problem_-_Exercise/nqueens.cpp\">nqueens.cpp</a></p>\n<p>**Q) **Why don’t we try all the places, and start from the first row.\n<strong>A)</strong> We can do anything systematic if we are exploring all paths. It does not matter.</p>\n",
      "id": 412
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/1._BackTracking/2._Rat_And_Maze_problem/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/1._BackTracking/2._Rat_And_Maze_problem/0_index.html",
      "content": "# 2. Rat And Maze problem\nCreated Thursday 25 June 2020\n\nA rat has to travel between the top-left and the bottom right in a *square grid*. The maze has two types of places, normal floor(1) and holes(0).  Find and print the number of ways it can do this, given the following contraints:\n\n1. Holes are to be avoided.\n2. Direction of movement from a cell can only be Left, Right, Up, Down.\n3. We cannot pass through the walls.\n\n\n\n* This is typical backtracking problem.\n* Recursion will help us maintain current state.\n\n\n*****\n\nCode:\n\n* We need to keep a path matrix - We use this for printing the way.\n* It is also used to keep track of the path.\n* We place 0 for the unvisited places and 1 for the visited places.\n* This **path matrix** is different from the **maze **matrix.`\n\n\n",
      "html": "<h1 id=\"2.-rat-and-maze-problem\">2. Rat And Maze problem <a class=\"heading-anchor-permalink\" href=\"#2.-rat-and-maze-problem\">#</a></h1>\n<p>Created Thursday 25 June 2020</p>\n<p>A rat has to travel between the top-left and the bottom right in a <em>square grid</em>. The maze has two types of places, normal floor(1) and holes(0).  Find and print the number of ways it can do this, given the following contraints:</p>\n<ol>\n<li>Holes are to be avoided.</li>\n<li>Direction of movement from a cell can only be Left, Right, Up, Down.</li>\n<li>We cannot pass through the walls.</li>\n</ol>\n<ul>\n<li>This is typical backtracking problem.</li>\n<li>Recursion will help us maintain current state.</li>\n</ul>\n<hr>\n<p>Code:</p>\n<ul>\n<li>We need to keep a path matrix - We use this for printing the way.</li>\n<li>It is also used to keep track of the path.</li>\n<li>We place 0 for the unvisited places and 1 for the visited places.</li>\n<li>This <strong>path matrix</strong> is different from the **maze **matrix.`</li>\n</ul>\n",
      "id": 413
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/1._BackTracking/3._Sudoku_Puzzle/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/1._BackTracking/3._Sudoku_Puzzle/0_index.html",
      "content": "# 3. Sudoku Puzzle\n\nCreated Friday 26 June 2020\n\nGiven:\n\n- A 9x9 sudoku, with the well known rules.\n- Has only one solution.\n\n---\n\n- It is a typical backtracking problem.\n- Store the missing numbers in a pair vector. This is better than reiterating on the list. Do it while taking the input.\n- We first produced a locally possible list, after checking the rows, columns and the 3x3 cell. **This is better than checking for all 1 to 9**, space vs time tradeoff. We just have to maintain a 1 to 9 boolean array, used as a map.\n- In this approach a config is wrong **iff** the local possible list is empty.\n- Used bool for the sudoku function. The reason is simple, we should return true and end the solution, as there's only one solution. There's only one **positive **base case.\n- **This **algorithm's running time is independent of the difficulty of the sudoku problem, assuming a single solution exists.\n- Time complexity depends only on the number of missing values.\n\nParikh's solution:\n![](/assets/3._Sudoku_Puzzle-image-1.png)s\n\n---\n\n**Jargon - Only used in case of Backtracking**\n\n1. Positive Base case: Indicates that the intended task is successfully completed. e.g a successful config for N-queens, sudoku\n2. Negative Base case: Indicates that the task is stuck, won't be able to proceed further. e.g An n-queens config which is in the middle of completing a config but a queen is impossible to place.\n\nNote:\n\n1. There may be multiple postive and negative base cases.\n2. Number of times positives base case evoked = number of successful configs(if known/given before hand). All other are negative ones.\n",
      "html": "<h1 id=\"3.-sudoku-puzzle\">3. Sudoku Puzzle <a class=\"heading-anchor-permalink\" href=\"#3.-sudoku-puzzle\">#</a></h1>\n<p>Created Friday 26 June 2020</p>\n<p>Given:</p>\n<ul>\n<li>A 9x9 sudoku, with the well known rules.</li>\n<li>Has only one solution.</li>\n</ul>\n<hr>\n<ul>\n<li>It is a typical backtracking problem.</li>\n<li>Store the missing numbers in a pair vector. This is better than reiterating on the list. Do it while taking the input.</li>\n<li>We first produced a locally possible list, after checking the rows, columns and the 3x3 cell. <strong>This is better than checking for all 1 to 9</strong>, space vs time tradeoff. We just have to maintain a 1 to 9 boolean array, used as a map.</li>\n<li>In this approach a config is wrong <strong>iff</strong> the local possible list is empty.</li>\n<li>Used bool for the sudoku function. The reason is simple, we should return true and end the solution, as there’s only one solution. There’s only one **positive **base case.</li>\n<li>**This **algorithm’s running time is independent of the difficulty of the sudoku problem, assuming a single solution exists.</li>\n<li>Time complexity depends only on the number of missing values.</li>\n</ul>\n<p>Parikh’s solution:\n<img src=\"/assets/3._Sudoku_Puzzle-image-1.png\" alt=\"\">s</p>\n<hr>\n<p><strong>Jargon - Only used in case of Backtracking</strong></p>\n<ol>\n<li>Positive Base case: Indicates that the intended task is successfully completed. e.g a successful config for N-queens, sudoku</li>\n<li>Negative Base case: Indicates that the task is stuck, won’t be able to proceed further. e.g An n-queens config which is in the middle of completing a config but a queen is impossible to place.</li>\n</ol>\n<p>Note:</p>\n<ol>\n<li>There may be multiple postive and negative base cases.</li>\n<li>Number of times positives base case evoked = number of successful configs(if known/given before hand). All other are negative ones.</li>\n</ol>\n",
      "id": 414
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/1._BackTracking/4._Crossword_Problem/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/1._BackTracking/4._Crossword_Problem/0_index.html",
      "content": "# 4. Crossword Problem\nCreated Friday 26 June 2020\n\n**Crossword Problem**\nCodingNinjas has provided a crossword of 10*10 grid. The grid contains '+' or '-' as its cell values. Now, you are also provided with a word list that needs to placed accurately in the grid. Cells marked with '-' are to be filled with word list.\n**Note:** We have provided such test cases that there is only one solution for the given input.\n**Input format:**\nThe first 10 lines of input contain crossword. Each of 10 lines has a character array of size 10. Input characters are either '+' or '-'.\nThe next line of input contains the word list, in which each word is separated by ';'.\n**Output format:**\nPrint the crossword grid, after placing the words of word list in '-' cells.\n**Sample Test Cases:**\n**Sample Input 1:**\n```c++\n+-++++++++\n+-++-+++++\n+-------++\n+-++-+++++\n+-++-+++++\n+-++-+++++\n++++-+++++\n++++-+++++\n++++++++++\n----------\nCALIFORNIA;NIGERIA;CANADA;TELAVIV\n```\n\n**Sample Output 1:**\n```c++\n+C++++++++\n+A++T+++++\n+NIGERIA++\n+A++L+++++\n+D++A+++++\n+A++V+++++\n++++I+++++\n++++V+++++\n++++++++++\nCALIFORNIA\n```\n\n*****\n\n\n* There's no choice but to check all possible cases. This is a backtracking problem.\n* We can calculate the starting coordinates, type(across or down) and length of the missing letters.\n* Then we'll try to place them one by one.\n* We have to also take into account that multiple words can cross each other. An intersection must be the same letter.\n\n[./crossword.cpp](4._Crossword_Problem/crossword.cpp)\n\n*****\n\nHas a weird error.\n\n",
      "html": "<h1 id=\"4.-crossword-problem\">4. Crossword Problem <a class=\"heading-anchor-permalink\" href=\"#4.-crossword-problem\">#</a></h1>\n<p>Created Friday 26 June 2020</p>\n<p><strong>Crossword Problem</strong>\nCodingNinjas has provided a crossword of 10*10 grid. The grid contains ‘+’ or ‘-’ as its cell values. Now, you are also provided with a word list that needs to placed accurately in the grid. Cells marked with ‘-’ are to be filled with word list.\n<strong>Note:</strong> We have provided such test cases that there is only one solution for the given input.\n<strong>Input format:</strong>\nThe first 10 lines of input contain crossword. Each of 10 lines has a character array of size 10. Input characters are either ‘+’ or ‘-’.\nThe next line of input contains the word list, in which each word is separated by ‘;’.\n<strong>Output format:</strong>\nPrint the crossword grid, after placing the words of word list in ‘-’ cells.\n<strong>Sample Test Cases:</strong>\n<strong>Sample Input 1:</strong></p>\n<pre><code class=\"language-c++\">+-++++++++\n+-++-+++++\n+-------++\n+-++-+++++\n+-++-+++++\n+-++-+++++\n++++-+++++\n++++-+++++\n++++++++++\n----------\nCALIFORNIA;NIGERIA;CANADA;TELAVIV\n</code></pre>\n<p><strong>Sample Output 1:</strong></p>\n<pre><code class=\"language-c++\">+C++++++++\n+A++T+++++\n+NIGERIA++\n+A++L+++++\n+D++A+++++\n+A++V+++++\n++++I+++++\n++++V+++++\n++++++++++\nCALIFORNIA\n</code></pre>\n<hr>\n<ul>\n<li>There’s no choice but to check all possible cases. This is a backtracking problem.</li>\n<li>We can calculate the starting coordinates, type(across or down) and length of the missing letters.</li>\n<li>Then we’ll try to place them one by one.</li>\n<li>We have to also take into account that multiple words can cross each other. An intersection must be the same letter.</li>\n</ul>\n<p><a href=\"4._Crossword_Problem/crossword.cpp\">./crossword.cpp</a></p>\n<hr>\n<p>Has a weird error.</p>\n",
      "id": 415
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/1._Find_Power_of_number.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/1._Find_Power_of_number.html",
      "content": "# 1. Find Power of number\nCreated Sunday 28 June 2020\n\n**Find power of a number**\nWrite a program to find x to the power n (i.e. x^n). Take x and n from the user. You need to print the answer.\n**Note :** For this question, you can assume that 0 raised to the power of 0 is 1\n**Input format :**\nTwo integers x and n (separated by space)\n**Output Format :**\nx^n (i.e. x raise to the power n)\n**Constraints:**\n0 <= x <= 8 \n0 <= n <= 9\n**Sample Input 1 :**\n 3 4\n**Sample Output 1 :**\n81\n**Sample Input 2 :**\n 2 5\n**Sample Output 2 :**\n32\n[power_of_number.cpp](./1._Find_Power_of_number/power_of_number.cpp)\n\n*****\n\n\n",
      "html": "<h1 id=\"1.-find-power-of-number\">1. Find Power of number <a class=\"heading-anchor-permalink\" href=\"#1.-find-power-of-number\">#</a></h1>\n<p>Created Sunday 28 June 2020</p>\n<p><strong>Find power of a number</strong>\nWrite a program to find x to the power n (i.e. x^n). Take x and n from the user. You need to print the answer.\n<strong>Note :</strong> For this question, you can assume that 0 raised to the power of 0 is 1\n<strong>Input format :</strong>\nTwo integers x and n (separated by space)\n<strong>Output Format :</strong>\nx^n (i.e. x raise to the power n)\n<strong>Constraints:</strong>\n0 &lt;= x &lt;= 8\n0 &lt;= n &lt;= 9\n<strong>Sample Input 1 :</strong>\n3 4\n<strong>Sample Output 1 :</strong>\n81\n<strong>Sample Input 2 :</strong>\n2 5\n<strong>Sample Output 2 :</strong>\n32\n<a href=\"./1._Find_Power_of_number/power_of_number.cpp\">power_of_number.cpp</a></p>\n<hr>\n",
      "id": 416
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/2._Sorting_the_Skills.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/2._Sorting_the_Skills.html",
      "content": "# 2. Sorting the Skills\nCreated Sunday 28 June 2020\n\n**Sorting the Skills**\nThere is a company named James Peterson & Co. The company has ‘n’ employees. The employees have skills from 0 to n-1. All the employees have distinct skills. The manager of James Peterson & Co. wants to sort the employees on the basis of their skills in ascending order. He is only allowed to swap two employees which are adjacent to each other. He is given the skills of employees in an array of size ‘n’. He can swap the skills as long as the absolute difference between their skills is 1. You need to help the manager out and tell whether it is possible to sort the skills of employees or not.\n**Input Format:**\nFirst Line will have an integer ‘t’ denoting the no. of test cases.\nFirst line of each test case contains an integer ‘n’ denoting the no. of employees in the company.\nSecond line of each test case contains ‘n’ distinct integers in the range [0, n-1].\n**Output Format:**\nFor each test case, print “Yes” if it is possible to sort the skills otherwise “No”.\n**Constraints:**\n1 <= t <= 10\n1 <= n <= 10^5\n**Sample Input:**\n2\n4\n1 0 3 2\n3\n2 1 0\n**Sample Output:**\nYes\nNo\n**Explanation:**\nIn first T.C., [1, 0, 3, 2] -> [0, 1, 3, 2] -> [0, 1, 2, 3]\nIn second T.C., [2, 1, 0] -> [1, 2, 0]  OR  [2, 1, 0] -> [2, 0, 1] So, it is impossible to sort.\n\n",
      "html": "<h1 id=\"2.-sorting-the-skills\">2. Sorting the Skills <a class=\"heading-anchor-permalink\" href=\"#2.-sorting-the-skills\">#</a></h1>\n<p>Created Sunday 28 June 2020</p>\n<p><strong>Sorting the Skills</strong>\nThere is a company named James Peterson &amp; Co. The company has ‘n’ employees. The employees have skills from 0 to n-1. All the employees have distinct skills. The manager of James Peterson &amp; Co. wants to sort the employees on the basis of their skills in ascending order. He is only allowed to swap two employees which are adjacent to each other. He is given the skills of employees in an array of size ‘n’. He can swap the skills as long as the absolute difference between their skills is 1. You need to help the manager out and tell whether it is possible to sort the skills of employees or not.\n<strong>Input Format:</strong>\nFirst Line will have an integer ‘t’ denoting the no. of test cases.\nFirst line of each test case contains an integer ‘n’ denoting the no. of employees in the company.\nSecond line of each test case contains ‘n’ distinct integers in the range [0, n-1].\n<strong>Output Format:</strong>\nFor each test case, print “Yes” if it is possible to sort the skills otherwise “No”.\n<strong>Constraints:</strong>\n1 &lt;= t &lt;= 10\n1 &lt;= n &lt;= 10^5\n<strong>Sample Input:</strong>\n2\n4\n1 0 3 2\n3\n2 1 0\n<strong>Sample Output:</strong>\nYes\nNo\n<strong>Explanation:</strong>\nIn first T.C., [1, 0, 3, 2] -&gt; [0, 1, 3, 2] -&gt; [0, 1, 2, 3]\nIn second T.C., [2, 1, 0] -&gt; [1, 2, 0]  OR  [2, 1, 0] -&gt; [2, 0, 1] So, it is impossible to sort.</p>\n",
      "id": 417
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/3._Collecing_the_balls.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/3._Collecing_the_balls.html",
      "content": "# 3. Collecing the balls\nCreated Sunday 28 June 2020\n\n**Collecting the balls**\nThere are ‘n’ number of balls in a container. Mr. Sharma and Singh want to take balls out from the container. At each step, Mr. Sharma took ‘k’ balls out of the box and Mr. Singh took one-tenth of the remaining balls. Suppose there are 29 balls at the moment and k=4. Then, Mr. Sharma will take 4 balls and Mr. Singh will take 2 balls (29-4 = 25; 25/10 = 2). If there are less than ‘k’ balls remaining at some moment, then Mr. Sharma will take all the balls which will get the container empty. The process will last until the container becomes empty. Your task is to choose minimal ‘k’ for Mr. Sharma such that Mr. Sharma will take at least half of the balls from the container.\n**Input Format:**\nThe Only line of input contains a single integer ‘n’.\n**Output Format:**\nPrint a single integer denoting the minimal value of ‘k’.\nConstraints:\n1 <= n <= 10^18\nTime Limit: 1 second\n**Sample Input:**\n68\n**Sample Output:**\n3\n**Explanation:**\n68-3 = 65; 65/10 = 6; 65-6 = 59\n59-3 = 56; 56/10 = 5; 56-5 = 51\n51-3 = 48; 48/10 = 4; 48-4 = 44\n44-3 = 41; 41/10 = 4; 41-4 = 37\n…..\n…..\n…..\n6-3 = 3; 3/10 = 0; 3-0 = 3\n3-3 = 0; 0/10 = 0; 0-0 = 0\n\n",
      "html": "<h1 id=\"3.-collecing-the-balls\">3. Collecing the balls <a class=\"heading-anchor-permalink\" href=\"#3.-collecing-the-balls\">#</a></h1>\n<p>Created Sunday 28 June 2020</p>\n<p><strong>Collecting the balls</strong>\nThere are ‘n’ number of balls in a container. Mr. Sharma and Singh want to take balls out from the container. At each step, Mr. Sharma took ‘k’ balls out of the box and Mr. Singh took one-tenth of the remaining balls. Suppose there are 29 balls at the moment and k=4. Then, Mr. Sharma will take 4 balls and Mr. Singh will take 2 balls (29-4 = 25; 25/10 = 2). If there are less than ‘k’ balls remaining at some moment, then Mr. Sharma will take all the balls which will get the container empty. The process will last until the container becomes empty. Your task is to choose minimal ‘k’ for Mr. Sharma such that Mr. Sharma will take at least half of the balls from the container.\n<strong>Input Format:</strong>\nThe Only line of input contains a single integer ‘n’.\n<strong>Output Format:</strong>\nPrint a single integer denoting the minimal value of ‘k’.\nConstraints:\n1 &lt;= n &lt;= 10^18\nTime Limit: 1 second\n<strong>Sample Input:</strong>\n68\n<strong>Sample Output:</strong>\n3\n<strong>Explanation:</strong>\n68-3 = 65; 65/10 = 6; 65-6 = 59\n59-3 = 56; 56/10 = 5; 56-5 = 51\n51-3 = 48; 48/10 = 4; 48-4 = 44\n44-3 = 41; 41/10 = 4; 41-4 = 37\n……\n……\n……\n6-3 = 3; 3/10 = 0; 3-0 = 3\n3-3 = 0; 0/10 = 0; 0-0 = 0</p>\n",
      "id": 418
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/4._Sudoku_Solver.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/4._Sudoku_Solver.html",
      "content": "# 4. Sudoku Solver\nCreated Sunday 28 June 2020\n\n**Sudoku Solver**\nGiven a 9*9 sudoku board, in which some entries are filled and others are 0 (0 indicates that the cell is empty), you need to find out whether the Sudoku puzzle can be solved or not i.e. return true or false.\n**Input Format:**\n9 Lines where ith line contains ith row elements separated by space\n**Output Format:**\ntrue or false\n**Sample Input :**\n```\n9 0 0 0 2 0 7 5 0\n6 0 0 0 5 0 0 4 0\n0 2 0 4 0 0 0 1 0\n2 0 8 0 0 0 0 0 0\n0 7 0 5 0 9 0 6 0\n0 0 0 0 0 0 4 0 1\n0 1 0 0 0 5 0 8 0\n0 9 0 0 7 0 0 0 4\n0 8 2 0 4 0 0 0 6\n```\n**Sample Output :**\n```\ntrue\n```\n\n\n",
      "html": "<h1 id=\"4.-sudoku-solver\">4. Sudoku Solver <a class=\"heading-anchor-permalink\" href=\"#4.-sudoku-solver\">#</a></h1>\n<p>Created Sunday 28 June 2020</p>\n<p><strong>Sudoku Solver</strong>\nGiven a 9*9 sudoku board, in which some entries are filled and others are 0 (0 indicates that the cell is empty), you need to find out whether the Sudoku puzzle can be solved or not i.e. return true or false.\n<strong>Input Format:</strong>\n9 Lines where ith line contains ith row elements separated by space\n<strong>Output Format:</strong>\ntrue or false\n<strong>Sample Input :</strong></p>\n<pre><code>9 0 0 0 2 0 7 5 0\n6 0 0 0 5 0 0 4 0\n0 2 0 4 0 0 0 1 0\n2 0 8 0 0 0 0 0 0\n0 7 0 5 0 9 0 6 0\n0 0 0 0 0 0 4 0 1\n0 1 0 0 0 5 0 8 0\n0 9 0 0 7 0 0 0 4\n0 8 2 0 4 0 0 0 6\n</code></pre>\n<p><strong>Sample Output :</strong></p>\n<pre><code>true\n</code></pre>\n",
      "id": 419
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/0_index.html",
      "content": "# 4. Bit Manipulation\nCreated Monday 22 June 2020\n\n\n* We've worked with int and float. But never considered using the property of binary digits.\n* Bit manipulation is a very elegant and optimized way of solving problems.\n* Bit operation are O(1)\n* Bit manip has **many** applications in competitive programming.\n\nWhere is Bit manip used:\n\n1. Competitive Programming\n2. Data Compression\n\n\nNote: Everything happens in standard notation(2's complement form)\nOperator precedence:\n\n1. Complement (~)\n2. Shift operators (<<) and (>>)\n3. Bitwise manip(^, &, |)\n\n\n*****\n\nDifference between logical and bitwise ops:\n\n1. Bitwise ops don't short circuit, logical do.\n2. XOR operator is absent for logical ops.\n\n\n*****\n\nApproach:\n\n1. Choose the operator.\n2. Find the mask. Consider 2^i when i is given. Else use +1, -1, *-1\n3. Make the mask using the least ops.\n4. Apply the mask.\n\n\n",
      "html": "<h1 id=\"4.-bit-manipulation\">4. Bit Manipulation <a class=\"heading-anchor-permalink\" href=\"#4.-bit-manipulation\">#</a></h1>\n<p>Created Monday 22 June 2020</p>\n<ul>\n<li>We’ve worked with int and float. But never considered using the property of binary digits.</li>\n<li>Bit manipulation is a very elegant and optimized way of solving problems.</li>\n<li>Bit operation are O(1)</li>\n<li>Bit manip has <strong>many</strong> applications in competitive programming.</li>\n</ul>\n<p>Where is Bit manip used:</p>\n<ol>\n<li>Competitive Programming</li>\n<li>Data Compression</li>\n</ol>\n<p>Note: Everything happens in standard notation(2’s complement form)\nOperator precedence:</p>\n<ol>\n<li>Complement (~)</li>\n<li>Shift operators (&lt;&lt;) and (&gt;&gt;)</li>\n<li>Bitwise manip(^, &amp;, |)</li>\n</ol>\n<hr>\n<p>Difference between logical and bitwise ops:</p>\n<ol>\n<li>Bitwise ops don’t short circuit, logical do.</li>\n<li>XOR operator is absent for logical ops.</li>\n</ol>\n<hr>\n<p>Approach:</p>\n<ol>\n<li>Choose the operator.</li>\n<li>Find the mask. Consider 2^i when i is given. Else use +1, -1, *-1</li>\n<li>Make the mask using the least ops.</li>\n<li>Apply the mask.</li>\n</ol>\n",
      "id": 420
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/1._Shift_Operators/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/1._Shift_Operators/0_index.html",
      "content": "# 1. Shift Operators\n\nCreated Sunday 28 June 2020\n\nThe basic ops for bits are shifts, there are two kinds:\n\n### Left shift\n\n- Left most bit(s) are lost.\n- Value added to the right are zeroes(0), always.\n- Syntax:\n\n```c++\nx << 1;\n2 << 1;\n```\n\n![](/assets/1._Shift_Operators-image-1.png)![](/assets/1._Shift_Operators-image-2.png)\n\n- Significance of left shift: Multiplication by 2^k^.\n\n![](/assets/1._Shift_Operators-image-3.png)\n\n### Right shift\n\n- Right most bit(s) are lost.\n- Value added to the left is 0 for positive and 1 for negative, i.e sign retained.\n- Syntax:\n\n```c++\nx >> 1;\n8 >> 1;\n```\n\n![](/assets/1._Shift_Operators-image-4.png) ![](/assets/1._Shift_Operators-image-5.png)\n\n- Significance of right shift: Division by 2^k^, **floor** value.\n\n![](/assets/1._Shift_Operators-image-6.png)\n\n---\n\nNote: Shift behaves the same in all languages, because shifting is mathematical.\n",
      "html": "<h1 id=\"1.-shift-operators\">1. Shift Operators <a class=\"heading-anchor-permalink\" href=\"#1.-shift-operators\">#</a></h1>\n<p>Created Sunday 28 June 2020</p>\n<p>The basic ops for bits are shifts, there are two kinds:</p>\n<h3 id=\"left-shift\">Left shift <a class=\"heading-anchor-permalink\" href=\"#left-shift\">#</a></h3>\n<ul>\n<li>Left most bit(s) are lost.</li>\n<li>Value added to the right are zeroes(0), always.</li>\n<li>Syntax:</li>\n</ul>\n<pre><code class=\"language-c++\">x &lt;&lt; 1;\n2 &lt;&lt; 1;\n</code></pre>\n<p><img src=\"/assets/1._Shift_Operators-image-1.png\" alt=\"\"><img src=\"/assets/1._Shift_Operators-image-2.png\" alt=\"\"></p>\n<ul>\n<li>Significance of left shift: Multiplication by 2^k^.</li>\n</ul>\n<p><img src=\"/assets/1._Shift_Operators-image-3.png\" alt=\"\"></p>\n<h3 id=\"right-shift\">Right shift <a class=\"heading-anchor-permalink\" href=\"#right-shift\">#</a></h3>\n<ul>\n<li>Right most bit(s) are lost.</li>\n<li>Value added to the left is 0 for positive and 1 for negative, i.e sign retained.</li>\n<li>Syntax:</li>\n</ul>\n<pre><code class=\"language-c++\">x &gt;&gt; 1;\n8 &gt;&gt; 1;\n</code></pre>\n<p><img src=\"/assets/1._Shift_Operators-image-4.png\" alt=\"\"> <img src=\"/assets/1._Shift_Operators-image-5.png\" alt=\"\"></p>\n<ul>\n<li>Significance of right shift: Division by 2^k^, <strong>floor</strong> value.</li>\n</ul>\n<p><img src=\"/assets/1._Shift_Operators-image-6.png\" alt=\"\"></p>\n<hr>\n<p>Note: Shift behaves the same in all languages, because shifting is mathematical.</p>\n",
      "id": 421
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/2._Remaining_Bitwise_Operators/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/2._Remaining_Bitwise_Operators/0_index.html",
      "content": "# 2. Remaining Bitwise Operators\n\nCreated Sunday 28 June 2020\n\n- **Bitwise ops: **The operators which perform the logical gate operations on corresponding bits of two variables.\n\n**Note:**\n\n1. These are different from &&, || and ! which are meant for booleans only.\n2. All 4 ops are commutative, associative and distributive.\n\nTypes of gate bitwise ops:\n\n1. AND ⇒ &\n\n![](/assets/2._Remaining_Bitwise_Operators-image-1.png) ![](/assets/2._Remaining_Bitwise_Operators-image-2.png)\n\n- Uses:\n  1.  Turn off bit\n  ```c++\n  x & 0 == 0; //true for any number\n  // e.g 110 , turn off second bit\n  // 110 & 101\n  ```\n\n2. Check if bit is set/unset, inter-alia check if even or odd(no shifts required)\n\n   ```c++\n   x & 1 = x; // check if a bit is set/unset\n   ```\n\n3. OR ⇒ |\n\n![](/assets/2._Remaining_Bitwise_Operators-image-3.png) ![](/assets/2._Remaining_Bitwise_Operators-image-4.png)\n\n- Use:\n  1.  Set bit(s)\n  ```c++\n   x | 0 == x; // true\n   // 1010, turn on bit 1\n   // 101 | 0100 = 1110\n  ```\n\n2. Check if bit is set/unset\n\n   ```c++\n   x | 0 = x; // x is a bit\n   ```\n\n3. NOT ⇒ ~ ⇒ unary operator\n\n![](/assets/2._Remaining_Bitwise_Operators-image-5.png)\n\n- Use:\n\n  1.  Unset bit(s)\n  2.  Produce all 1's\n\n  ```c++\n  ~0;// 11111111... useful\n  0; // 0000.. obvious\n  ```\n\n- Interesting and useful fact:\n  ```c++\n  ~x == -(x+1); // follows from the definition of 2's complement, given x is an integer\n  ```\n\n4. XOR ⇒ ^ (The most useful)\n\n![](/assets/2._Remaining_Bitwise_Operators-image-6.png)\n\n- Use\n  1.  Check if two bits are equal\n  ```c++\n  x ^ x == 0; // works for only two numbers(or even numbers)\n  ```\n\n2. Works as binary switch for any bit\n   ```c++\n   x ^ 1 = ~x; // same as ~x\n   ```\n\n---\n\n1. **Predict The Output**\n\n```c++\n#include<iostream>\nusing namespace std;\nint main(){\n\tif(~0 == 1) {\n\t\tcout << \"yes\";\n\t}\n\telse {\n\t\tcout << \"no\";\n\t}\n}\n```\n\n1. yes\n2. no\n3. Compile time error\n4. Undefined\n\nAnswer: B. ~0 = -(0+1) = -1 and not 1. Bitwise. not !\n\n2. **Predict The Output**\n\n```c++\n#include <iostream>\nusing namespace std;\nint main(){\n    int y = 0;\n    if(1 | (y = 1)) {\n        cout << \"y is \" << y;\n    }\n    else {\n        cout << y;\n    }\n}\n```\n\n1. y is 0\n2. y is 1\n3. 1\n4. 0\n\nAnswer: B. Because in C++ an assigment has a value equal to the rvalue. So y==1 is the same as 1. This is allowed only in low level languages.\n\n3. **Predict The Output**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main(){\n   int y = 1;\n   if(y & (y = 2))\n      cout << \"true\";\n   else\n   cout << \"false\";\n}\n```\n\nAnswer: true\n![](/assets/2._Remaining_Bitwise_Operators-image-7.png)\nReason: 32 is the answer in the assigment because no buffer is created.\nin 2 & 3 ⇒ 2 and 3 both have different buffer variables.\nin (y=2) & (y=3) ⇒ there are no buffer variables created, this is how assignment operator works. So is is like 3 & 3.\nin (y=3) & (y=2) ⇒ 2 & 2\n",
      "html": "<h1 id=\"2.-remaining-bitwise-operators\">2. Remaining Bitwise Operators <a class=\"heading-anchor-permalink\" href=\"#2.-remaining-bitwise-operators\">#</a></h1>\n<p>Created Sunday 28 June 2020</p>\n<ul>\n<li>**Bitwise ops: **The operators which perform the logical gate operations on corresponding bits of two variables.</li>\n</ul>\n<p><strong>Note:</strong></p>\n<ol>\n<li>These are different from &amp;&amp;, || and ! which are meant for booleans only.</li>\n<li>All 4 ops are commutative, associative and distributive.</li>\n</ol>\n<p>Types of gate bitwise ops:</p>\n<ol>\n<li>AND ⇒ &amp;</li>\n</ol>\n<p><img src=\"/assets/2._Remaining_Bitwise_Operators-image-1.png\" alt=\"\"> <img src=\"/assets/2._Remaining_Bitwise_Operators-image-2.png\" alt=\"\"></p>\n<ul>\n<li>Uses:\n<ol>\n<li>Turn off bit</li>\n</ol>\n<pre><code class=\"language-c++\">x &amp; 0 == 0; //true for any number\n// e.g 110 , turn off second bit\n// 110 &amp; 101\n</code></pre>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>Check if bit is set/unset, inter-alia check if even or odd(no shifts required)</p>\n<pre><code class=\"language-c++\">x &amp; 1 = x; // check if a bit is set/unset\n</code></pre>\n</li>\n<li>\n<p>OR ⇒ |</p>\n</li>\n</ol>\n<p><img src=\"/assets/2._Remaining_Bitwise_Operators-image-3.png\" alt=\"\"> <img src=\"/assets/2._Remaining_Bitwise_Operators-image-4.png\" alt=\"\"></p>\n<ul>\n<li>Use:\n<ol>\n<li>Set bit(s)</li>\n</ol>\n<pre><code class=\"language-c++\"> x | 0 == x; // true\n // 1010, turn on bit 1\n // 101 | 0100 = 1110\n</code></pre>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>Check if bit is set/unset</p>\n<pre><code class=\"language-c++\">x | 0 = x; // x is a bit\n</code></pre>\n</li>\n<li>\n<p>NOT ⇒ ~ ⇒ unary operator</p>\n</li>\n</ol>\n<p><img src=\"/assets/2._Remaining_Bitwise_Operators-image-5.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>Use:</p>\n<ol>\n<li>Unset bit(s)</li>\n<li>Produce all 1’s</li>\n</ol>\n<pre><code class=\"language-c++\">~0;// 11111111... useful\n0; // 0000.. obvious\n</code></pre>\n</li>\n<li>\n<p>Interesting and useful fact:</p>\n<pre><code class=\"language-c++\">~x == -(x+1); // follows from the definition of 2's complement, given x is an integer\n</code></pre>\n</li>\n</ul>\n<ol start=\"4\">\n<li>XOR ⇒ ^ (The most useful)</li>\n</ol>\n<p><img src=\"/assets/2._Remaining_Bitwise_Operators-image-6.png\" alt=\"\"></p>\n<ul>\n<li>Use\n<ol>\n<li>Check if two bits are equal</li>\n</ol>\n<pre><code class=\"language-c++\">x ^ x == 0; // works for only two numbers(or even numbers)\n</code></pre>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Works as binary switch for any bit<pre><code class=\"language-c++\">x ^ 1 = ~x; // same as ~x\n</code></pre>\n</li>\n</ol>\n<hr>\n<ol>\n<li><strong>Predict The Output</strong></li>\n</ol>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\nusing namespace std;\nint main(){\n\tif(~0 == 1) {\n\t\tcout &lt;&lt; &quot;yes&quot;;\n\t}\n\telse {\n\t\tcout &lt;&lt; &quot;no&quot;;\n\t}\n}\n</code></pre>\n<ol>\n<li>yes</li>\n<li>no</li>\n<li>Compile time error</li>\n<li>Undefined</li>\n</ol>\n<p>Answer: B. ~0 = -(0+1) = -1 and not 1. Bitwise. not !</p>\n<ol start=\"2\">\n<li><strong>Predict The Output</strong></li>\n</ol>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\nint main(){\n    int y = 0;\n    if(1 | (y = 1)) {\n        cout &lt;&lt; &quot;y is &quot; &lt;&lt; y;\n    }\n    else {\n        cout &lt;&lt; y;\n    }\n}\n</code></pre>\n<ol>\n<li>y is 0</li>\n<li>y is 1</li>\n<li>1</li>\n<li>0</li>\n</ol>\n<p>Answer: B. Because in C++ an assigment has a value equal to the rvalue. So y==1 is the same as 1. This is allowed only in low level languages.</p>\n<ol start=\"3\">\n<li><strong>Predict The Output</strong></li>\n</ol>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n\nint main(){\n   int y = 1;\n   if(y &amp; (y = 2))\n      cout &lt;&lt; &quot;true&quot;;\n   else\n   cout &lt;&lt; &quot;false&quot;;\n}\n</code></pre>\n<p>Answer: true\n<img src=\"/assets/2._Remaining_Bitwise_Operators-image-7.png\" alt=\"\">\nReason: 32 is the answer in the assigment because no buffer is created.\nin 2 &amp; 3 ⇒ 2 and 3 both have different buffer variables.\nin (y=2) &amp; (y=3) ⇒ there are no buffer variables created, this is how assignment operator works. So is is like 3 &amp; 3.\nin (y=3) &amp; (y=2) ⇒ 2 &amp; 2</p>\n",
      "id": 422
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/3._ith_bit/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/3._ith_bit/0_index.html",
      "content": "# 3. ith bit\nCreated Monday 29 June 2020\n\n\n1. **Return** ith bit.\n\nA simple way to do this would be\n```c++\nN = 100010101 // suppose we need 2nd bit - zero based counting\n```\nApproach 1 - Shift+Modulus:\n\n1. Shift by k to the right\n2. Check last bit\n```c++\nreturn (n >> i)%2; // Booth's algorithm - O(n)\n```\nApproach 2 - Shift and AND:\nWe can produce pow(2, i) using the left shift operator\n```c++\nreturn (n >> i) & 1; // returns 1 if set and 0 if unset\n```\n### ----\n\n2. **Set** ith bit - OR\n```c++\n\t// 01101 to set 2nd bit we need 00100 i.e 2^i\n\t// to set we use OR\n\tn|=(1<<i); // O(1)\n```\n### ----\n\n3. **Unset** ith bit - AND and NOT\n```c++\n\t// the\n\tn&=~(1<<i);\n```\n\n",
      "html": "<h1 id=\"3.-ith-bit\">3. ith bit <a class=\"heading-anchor-permalink\" href=\"#3.-ith-bit\">#</a></h1>\n<p>Created Monday 29 June 2020</p>\n<ol>\n<li><strong>Return</strong> ith bit.</li>\n</ol>\n<p>A simple way to do this would be</p>\n<pre><code class=\"language-c++\">N = 100010101 // suppose we need 2nd bit - zero based counting\n</code></pre>\n<p>Approach 1 - Shift+Modulus:</p>\n<ol>\n<li>Shift by k to the right</li>\n<li>Check last bit</li>\n</ol>\n<pre><code class=\"language-c++\">return (n &gt;&gt; i)%2; // Booth's algorithm - O(n)\n</code></pre>\n<p>Approach 2 - Shift and AND:\nWe can produce pow(2, i) using the left shift operator</p>\n<pre><code class=\"language-c++\">return (n &gt;&gt; i) &amp; 1; // returns 1 if set and 0 if unset\n</code></pre>\n<h3 id=\"----\">---- <a class=\"heading-anchor-permalink\" href=\"#----\">#</a></h3>\n<ol start=\"2\">\n<li><strong>Set</strong> ith bit - OR</li>\n</ol>\n<pre><code class=\"language-c++\">\t// 01101 to set 2nd bit we need 00100 i.e 2^i\n\t// to set we use OR\n\tn|=(1&lt;&lt;i); // O(1)\n</code></pre>\n<h3 id=\"-----2\">---- <a class=\"heading-anchor-permalink\" href=\"#-----2\">#</a></h3>\n<ol start=\"3\">\n<li><strong>Unset</strong> ith bit - AND and NOT</li>\n</ol>\n<pre><code class=\"language-c++\">\t// the\n\tn&amp;=~(1&lt;&lt;i);\n</code></pre>\n",
      "id": 423
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/4._Flipping_a_specific_bit.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/4._Flipping_a_specific_bit.html",
      "content": "# 4. Flipping a specific bit\nCreated Monday 29 June 2020\n\n\n* Flipping a single bit, negation.\n* Flipping a bit at a position.\n\ne.g 111011, i = 2\nWe can XOR this with 000100. This is 2^i\n```c++\nn^=(1<<i); // flip ith bit O(1)\n```\n",
      "html": "<h1 id=\"4.-flipping-a-specific-bit\">4. Flipping a specific bit <a class=\"heading-anchor-permalink\" href=\"#4.-flipping-a-specific-bit\">#</a></h1>\n<p>Created Monday 29 June 2020</p>\n<ul>\n<li>Flipping a single bit, negation.</li>\n<li>Flipping a bit at a position.</li>\n</ul>\n<p>e.g 111011, i = 2\nWe can XOR this with 000100. This is 2^i</p>\n<pre><code class=\"language-c++\">n^=(1&lt;&lt;i); // flip ith bit O(1)\n</code></pre>\n",
      "id": 424
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/5._Check_if_oddeven.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/5._Check_if_oddeven.html",
      "content": "# 5. Check if oddeven\nCreated Monday 29 June 2020\n\n\n* n%2 - O(n) Booth's op\n* For odd ⇔ 1 is the 0th bit always ⇔ 0 at 0th bit means even number.\n```c++\nn & 1;\n```\n",
      "html": "<h1 id=\"5.-check-if-oddeven\">5. Check if oddeven <a class=\"heading-anchor-permalink\" href=\"#5.-check-if-oddeven\">#</a></h1>\n<p>Created Monday 29 June 2020</p>\n<ul>\n<li>n%2 - O(n) Booth’s op</li>\n<li>For odd ⇔ 1 is the 0th bit always ⇔ 0 at 0th bit means even number.</li>\n</ul>\n<pre><code class=\"language-c++\">n &amp; 1;\n</code></pre>\n",
      "id": 425
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/6._Check_if_number_is_power_of_2.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/6._Check_if_number_is_power_of_2.html",
      "content": "# 6. Check if number is power of 2\nCreated Monday 29 June 2020\n\nA number which is a power of 2 is of the form:\n```c++\n000...1...000;// 1 is at the ith bit(unknown)\n```\nSolutions:\n\n1. While Loop - Divide by 2 if possible, if we reach 1 return true ⇒ O(logn)\n2. Count number of 1's in the binary representation ⇒ O(1) ⇒ 32 or 64 steps - Clumsy needs a for loop\n3. return (n & (n-1))==0\n\n\n*****\n\nInspiration - Observing that a power of 2 has all 0's except one, and n-1 of that has all 1's but just before the 1 in n ⇒ (n& n-1) = 0 for powers of 2. Then checking if the reverse is true. No counter example found, so tried to prove that it works only for powers of 2.\n**isPower of 2 theorem**\n**To prove: **n is power of 2 ⇔ n&(n-1) is 0\n\n1. If n is a power of 2 ⇒ n&(n-1) is 0\n\nn     = 0...**1**0...0\nn-1 = 0...**0**1...1\nn & n-1 = 0...0\nProved\n\n2. If n&(n-1) is 0 ⇒ n is a power of 2\n\nIf n is odd:\nn      = 0...edcba1\nn - 1= 0...edcba0\nans = n & (n-1) = 0...edbca0 ∵ x & x = x\nans = 0 iff all edcba are 0 ⇒ only n=1 is the odd power of 2. And the theorem **works**.\nIf n is even(with more than 1 ones):\nCase 1: only 1 one\nBy definition correct, works.\nCase 2:  Aleast two ones\nn = 0...0edcba0...0 where there are atleast 2 ones. 1 ones are alread\nSuppose a is the first one\nn-1 = 0...0edcb01...1\nn & n-1 =  0...0edcba0...0\n  0...0edcb01...1\n=   0...0edcb0000\n!=0 because there's at least a 1\nDoesn't work on any even numbers which is not a square\nProved\nQ.E.D\n\n*****\n\n\n* For situations where the i is unknown, do manipulations like -1, +1, *-1. Compare with n.\n\n\n",
      "html": "<h1 id=\"6.-check-if-number-is-power-of-2\">6. Check if number is power of 2 <a class=\"heading-anchor-permalink\" href=\"#6.-check-if-number-is-power-of-2\">#</a></h1>\n<p>Created Monday 29 June 2020</p>\n<p>A number which is a power of 2 is of the form:</p>\n<pre><code class=\"language-c++\">000...1...000;// 1 is at the ith bit(unknown)\n</code></pre>\n<p>Solutions:</p>\n<ol>\n<li>While Loop - Divide by 2 if possible, if we reach 1 return true ⇒ O(logn)</li>\n<li>Count number of 1’s in the binary representation ⇒ O(1) ⇒ 32 or 64 steps - Clumsy needs a for loop</li>\n<li>return (n &amp; (n-1))==0</li>\n</ol>\n<hr>\n<p>Inspiration - Observing that a power of 2 has all 0’s except one, and n-1 of that has all 1’s but just before the 1 in n ⇒ (n&amp; n-1) = 0 for powers of 2. Then checking if the reverse is true. No counter example found, so tried to prove that it works only for powers of 2.\n<strong>isPower of 2 theorem</strong>\n**To prove: **n is power of 2 ⇔ n&amp;(n-1) is 0</p>\n<ol>\n<li>If n is a power of 2 ⇒ n&amp;(n-1) is 0</li>\n</ol>\n<p>n     = 0…<strong>1</strong>0…0\nn-1 = 0…<strong>0</strong>1…1\nn &amp; n-1 = 0…0\nProved</p>\n<ol start=\"2\">\n<li>If n&amp;(n-1) is 0 ⇒ n is a power of 2</li>\n</ol>\n<p>If n is odd:\nn      = 0…edcba1\nn - 1= 0…edcba0\nans = n &amp; (n-1) = 0…edbca0 ∵ x &amp; x = x\nans = 0 iff all edcba are 0 ⇒ only n=1 is the odd power of 2. And the theorem <strong>works</strong>.\nIf n is even(with more than 1 ones):\nCase 1: only 1 one\nBy definition correct, works.\nCase 2:  Aleast two ones\nn = 0…0edcba0…0 where there are atleast 2 ones. 1 ones are alread\nSuppose a is the first one\nn-1 = 0…0edcb01…1\nn &amp; n-1 =  0…0edcba0…0\n0…0edcb01…1\n=   0…0edcb0000\n!=0 because there’s at least a 1\nDoesn’t work on any even numbers which is not a square\nProved\nQ.E.D</p>\n<hr>\n<ul>\n<li>For situations where the i is unknown, do manipulations like -1, +1, *-1. Compare with n.</li>\n</ul>\n",
      "id": 426
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/7._First_Set_bit.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/7._First_Set_bit.html",
      "content": "# 7. First Set bit\nCreated Tuesday 30 June 2020\n\n\n* Find the first set bit and return it with the LSB's\n\ne.g 101010**1**00 ⇒ **1**00\n\nWe don't now where the first 1 is, do manips, and we don't\n```c++\nn =    101010100\nn-1;// 101010011 // useless\n-n; // 010101101\nn & -n\n```\n\n* n & n-1\n\n\n*****\n\nTurn off first set bit\n```c++\nn =    101010100\nn-1;// 101010011\nn & (n-1);// nothing was affected on the left\n```\n",
      "html": "<h1 id=\"7.-first-set-bit\">7. First Set bit <a class=\"heading-anchor-permalink\" href=\"#7.-first-set-bit\">#</a></h1>\n<p>Created Tuesday 30 June 2020</p>\n<ul>\n<li>Find the first set bit and return it with the LSB’s</li>\n</ul>\n<p>e.g 101010<strong>1</strong>00 ⇒ <strong>1</strong>00</p>\n<p>We don’t now where the first 1 is, do manips, and we don’t</p>\n<pre><code class=\"language-c++\">n =    101010100\nn-1;// 101010011 // useless\n-n; // 010101101\nn &amp; -n\n</code></pre>\n<ul>\n<li>n &amp; n-1</li>\n</ul>\n<hr>\n<p>Turn off first set bit</p>\n<pre><code class=\"language-c++\">n =    101010100\nn-1;// 101010011\nn &amp; (n-1);// nothing was affected on the left\n</code></pre>\n",
      "id": 427
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/8._Clear_all_bits_from_the_LSB.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/4._Bit_Manipulation/8._Clear_all_bits_from_the_LSB.html",
      "content": "# 8. Clear all bits from the LSB\nCreated Tuesday 30 June 2020\n\nGiven n(base 2 number) and i(integer), unset all bits on the right of i, incl.\n```c++\nx =   10100; // i=3\n2^(i+1) = 1000; // i = 3\n// we need  11000\n// 2(i+1)-1 00111\n// flip it, ~\nreturn x & ~((1<<(i+1))-1));\n```\n\n*****\n\nClear all bits from MSB\ne.g 10**1**01, i = 2. Ans = 10000\n\n* AND\n* Mask required: 11**0**00\n* 2^i = 00**1**00\n* 2^i-1 =\n\n\n",
      "html": "<h1 id=\"8.-clear-all-bits-from-the-lsb\">8. Clear all bits from the LSB <a class=\"heading-anchor-permalink\" href=\"#8.-clear-all-bits-from-the-lsb\">#</a></h1>\n<p>Created Tuesday 30 June 2020</p>\n<p>Given n(base 2 number) and i(integer), unset all bits on the right of i, incl.</p>\n<pre><code class=\"language-c++\">x =   10100; // i=3\n2^(i+1) = 1000; // i = 3\n// we need  11000\n// 2(i+1)-1 00111\n// flip it, ~\nreturn x &amp; ~((1&lt;&lt;(i+1))-1));\n</code></pre>\n<hr>\n<p>Clear all bits from MSB\ne.g 10<strong>1</strong>01, i = 2. Ans = 10000</p>\n<ul>\n<li>AND</li>\n<li>Mask required: 11<strong>0</strong>00</li>\n<li>2^i = 00<strong>1</strong>00</li>\n<li>2^i-1 =</li>\n</ul>\n",
      "id": 428
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/0_index.html",
      "content": "# 5. Adhoc Problems\nCreated Monday 22 June 2020\n\n\n* These are problems we reduce the given constraints to something fundamental, and not all of the information, operations are used in their full form.\n* In other words - using some of the choices is better than using all choices.\n* In these problems a specific method does the job, and generalization is not really required.\n\n\n",
      "html": "<h1 id=\"5.-adhoc-problems\">5. Adhoc Problems <a class=\"heading-anchor-permalink\" href=\"#5.-adhoc-problems\">#</a></h1>\n<p>Created Monday 22 June 2020</p>\n<ul>\n<li>These are problems we reduce the given constraints to something fundamental, and not all of the information, operations are used in their full form.</li>\n<li>In other words - using some of the choices is better than using all choices.</li>\n<li>In these problems a specific method does the job, and generalization is not really required.</li>\n</ul>\n",
      "id": 429
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/1._Equalize_CodeForces/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/1._Equalize_CodeForces/0_index.html",
      "content": "# 1. Equalize CodeForces\nCreated Tuesday 30 June 2020\n\n<https://codeforces.com/problemset/problem/1037/C>\n\nApproach 1 - Use only flips\nWe traverse the list and do the following:\n\n1. If the elements are the same, do nothing.\n2. If an element does not match, flip it.\t\n\nCost: n worst case\nIs this the fastest, don't seem to be:\ne.g 0110 and 1001\nOur cost = 4\nIf we flipped = 2\n\n* Note swapping is to be used iff its cost is less than flip. A flip makes a character correct in cost 1. A swap makes two adjacent characters(which are wrong) in cost 1(which is better than doing 2 flips - 2).\n* If we have two characters which are swappable and have are not adjacent, it is better to just use flipping.\n* Conclusion: We do only adjacent swaps and flips.\n\n\n*****\n\n[equalize.cpp](1._Equalize_CodeForces/equalize.cpp)\n\n",
      "html": "<h1 id=\"1.-equalize-codeforces\">1. Equalize CodeForces <a class=\"heading-anchor-permalink\" href=\"#1.-equalize-codeforces\">#</a></h1>\n<p>Created Tuesday 30 June 2020</p>\n<p><a href=\"https://codeforces.com/problemset/problem/1037/C\">https://codeforces.com/problemset/problem/1037/C</a></p>\n<p>Approach 1 - Use only flips\nWe traverse the list and do the following:</p>\n<ol>\n<li>If the elements are the same, do nothing.</li>\n<li>If an element does not match, flip it.</li>\n</ol>\n<p>Cost: n worst case\nIs this the fastest, don’t seem to be:\ne.g 0110 and 1001\nOur cost = 4\nIf we flipped = 2</p>\n<ul>\n<li>Note swapping is to be used iff its cost is less than flip. A flip makes a character correct in cost 1. A swap makes two adjacent characters(which are wrong) in cost 1(which is better than doing 2 flips - 2).</li>\n<li>If we have two characters which are swappable and have are not adjacent, it is better to just use flipping.</li>\n<li>Conclusion: We do only adjacent swaps and flips.</li>\n</ul>\n<hr>\n<p><a href=\"1._Equalize_CodeForces/equalize.cpp\">equalize.cpp</a></p>\n",
      "id": 430
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/2._Rectangular_Area/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/2._Rectangular_Area/0_index.html",
      "content": "# 2. Rectangular Area\n\nCreated Tuesday 30 June 2020\n\nCodingNinjas has given you N rectangles, which are\ncentered in the center of the Cartesian coordinate system\nand their sides are parallel to the coordinate axes. Fach\nrectangle is uniquely identified with its width (along the x\naxis) and height (along the y-axis). Navdeep has coloured\neach rectangle in a certain colour and now wants to know\nthe area of the coloured part of the paper. Please refer to\nthe image below for more details. The given image for\nthe test case\n\n**Sample input 1:**\n3\n8 2 (represented by black coloured rectangle)\n4 4 (represented by blue coloured rectangle)\n2 6 (represented by yellow coloured rectangle)\n**Sample output 1:**\n28\n![](/assets/2._Rectangular_Area-image-1.png)\nIn other words, he wants to know the number of unit\nsquares that belong to at least one rectangle.\n\nSolution:\n**We'll not use Parikh's solution as that's too granular. And too slow if big numbers are involved.**\nApproach:\n\n1. Step 1 - Take the input coordinates.\n2. See only the 1st quadrant, like steps.\n3. For each point on the x-axis, till the point on the left, the height is the same as the current point.\n4. Area for a point p = (p.x-p~left~.x)\\*p.y\n5. For the left most point, we need a point on the left. We'll add it to the input.\n\nCode:\n\n1. Make a pair<int, int> array of size n+1. 1 for the left most\n2. Take the inputs, record the maximum height, the left most point is (0, hmax).\n3. Sort the array(by default happens with the first in pair, x coordinate)\n4. For each point, traverse for all the point entries with same X:\n   1. calculate hmax_local for them.\n   2. Set the starting point's X as hmax_local\n   3. Continue to the next point(i.e with the next value of X)\n   4. Keep a counter of the number of distinct points = neff\n5. Traverse neff from right to left. area+=(p.x-p~left~.x)\\*p.y\n6. We don't need to multiply 4. As we never subtracted the input by 4. No floats required, easy.\n\n[rect_area.cpp](2._Rectangular_Area/rect_area.cpp)\n",
      "html": "<h1 id=\"2.-rectangular-area\">2. Rectangular Area <a class=\"heading-anchor-permalink\" href=\"#2.-rectangular-area\">#</a></h1>\n<p>Created Tuesday 30 June 2020</p>\n<p>CodingNinjas has given you N rectangles, which are\ncentered in the center of the Cartesian coordinate system\nand their sides are parallel to the coordinate axes. Fach\nrectangle is uniquely identified with its width (along the x\naxis) and height (along the y-axis). Navdeep has coloured\neach rectangle in a certain colour and now wants to know\nthe area of the coloured part of the paper. Please refer to\nthe image below for more details. The given image for\nthe test case</p>\n<p><strong>Sample input 1:</strong>\n3\n8 2 (represented by black coloured rectangle)\n4 4 (represented by blue coloured rectangle)\n2 6 (represented by yellow coloured rectangle)\n<strong>Sample output 1:</strong>\n28\n<img src=\"/assets/2._Rectangular_Area-image-1.png\" alt=\"\">\nIn other words, he wants to know the number of unit\nsquares that belong to at least one rectangle.</p>\n<p>Solution:\n<strong>We’ll not use Parikh’s solution as that’s too granular. And too slow if big numbers are involved.</strong>\nApproach:</p>\n<ol>\n<li>Step 1 - Take the input coordinates.</li>\n<li>See only the 1st quadrant, like steps.</li>\n<li>For each point on the x-axis, till the point on the left, the height is the same as the current point.</li>\n<li>Area for a point p = (p.x-p~left~.x)*p.y</li>\n<li>For the left most point, we need a point on the left. We’ll add it to the input.</li>\n</ol>\n<p>Code:</p>\n<ol>\n<li>Make a pair&lt;int, int&gt; array of size n+1. 1 for the left most</li>\n<li>Take the inputs, record the maximum height, the left most point is (0, hmax).</li>\n<li>Sort the array(by default happens with the first in pair, x coordinate)</li>\n<li>For each point, traverse for all the point entries with same X:\n<ol>\n<li>calculate hmax_local for them.</li>\n<li>Set the starting point’s X as hmax_local</li>\n<li>Continue to the next point(i.e with the next value of X)</li>\n<li>Keep a counter of the number of distinct points = neff</li>\n</ol>\n</li>\n<li>Traverse neff from right to left. area+=(p.x-p~left~.x)*p.y</li>\n<li>We don’t need to multiply 4. As we never subtracted the input by 4. No floats required, easy.</li>\n</ol>\n<p><a href=\"2._Rectangular_Area/rect_area.cpp\">rect_area.cpp</a></p>\n",
      "id": 431
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/3._Light_up_the_bulbs/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/3._Light_up_the_bulbs/0_index.html",
      "content": "# 3. Light up the bulbs\nCreated Tuesday 30 June 2020\n\n**Light Up the Bulbs**\nA bulb can be ‘ON’ or ‘OFF’. Mr. Navdeep got ‘n’ number of bulbs and their status, whether they are ‘ON’ or ‘OFF’. Their status is represented in a string of size ‘n’ consisting of 0’s and 1’s, where ‘0’ represents the bulb is in ‘OFF’ condition and ‘1’ represent the bulb is ‘ON’. Mr. Navdeep has been given the task to light up all the bulbs.\n\t\nHe can perform two operations.\n\t\n*First*, chose any segment of bulbs and reverse them means chose any substring and reverse it. E.g. “0 110 001” -> “0 011 001”. Substring (1, 3) is reversed here. This operation will cost him Rs. ‘X’.\n\t\n*Second*, chose any segment of bulbs and reverse their present condition. i.e. if the bulb is ‘ON’, make it ‘OFF’ and if it is ‘OFF’, make it ‘ON’. E.g. “0 011 001” -> “0 100 001”. Substring (1, 3) is complemented. This operation will cost him Rs. ‘Y’.\n\t\nYou need to help Mr. Navdeep that how much minimum amount it will require to make all the bulbs lightened. (or make all the characters as ‘1’ in the representation string)\n**Input Format:**\nThe first line will contain three space separated integers: ‘n’, ‘X’, ‘Y’ denoting the number of bulbs, cost of first operation and cost of second operation respectively.\nThe second line contains a representation string of length ‘n’ consisting of 0’s and 1’s representing whether the bulb is ‘OFF’ or ‘ON’.\n**Output Format:**\nPrint a single integer denoting the minimum cost required to light up all the bulbs.\n**Constraints:**\n1 <= n <= 3,00,000\n0 <= X, Y <= 10^9\nTime Limit: 1 second\n**Sample Input:**\n5 1 10\n01000\n**Sample Output:**\n11\n**Explanation:**\nFirst, Reverse substring (0, 1): “01000” -> “10000”, COST = 1\nSecond, Invert substring (1, 4): “10000” -> “11111”, COST = 10\nTotal cost = 1+10 => 11\n\n\n",
      "html": "<h1 id=\"3.-light-up-the-bulbs\">3. Light up the bulbs <a class=\"heading-anchor-permalink\" href=\"#3.-light-up-the-bulbs\">#</a></h1>\n<p>Created Tuesday 30 June 2020</p>\n<p><strong>Light Up the Bulbs</strong>\nA bulb can be ‘ON’ or ‘OFF’. Mr. Navdeep got ‘n’ number of bulbs and their status, whether they are ‘ON’ or ‘OFF’. Their status is represented in a string of size ‘n’ consisting of 0’s and 1’s, where ‘0’ represents the bulb is in ‘OFF’ condition and ‘1’ represent the bulb is ‘ON’. Mr. Navdeep has been given the task to light up all the bulbs.</p>\n<p>He can perform two operations.</p>\n<p><em>First</em>, chose any segment of bulbs and reverse them means chose any substring and reverse it. E.g. “0 110 001” -&gt; “0 011 001”. Substring (1, 3) is reversed here. This operation will cost him Rs. ‘X’.</p>\n<p><em>Second</em>, chose any segment of bulbs and reverse their present condition. i.e. if the bulb is ‘ON’, make it ‘OFF’ and if it is ‘OFF’, make it ‘ON’. E.g. “0 011 001” -&gt; “0 100 001”. Substring (1, 3) is complemented. This operation will cost him Rs. ‘Y’.</p>\n<p>You need to help Mr. Navdeep that how much minimum amount it will require to make all the bulbs lightened. (or make all the characters as ‘1’ in the representation string)\n<strong>Input Format:</strong>\nThe first line will contain three space separated integers: ‘n’, ‘X’, ‘Y’ denoting the number of bulbs, cost of first operation and cost of second operation respectively.\nThe second line contains a representation string of length ‘n’ consisting of 0’s and 1’s representing whether the bulb is ‘OFF’ or ‘ON’.\n<strong>Output Format:</strong>\nPrint a single integer denoting the minimum cost required to light up all the bulbs.\n<strong>Constraints:</strong>\n1 &lt;= n &lt;= 3,00,000\n0 &lt;= X, Y &lt;= 10^9\nTime Limit: 1 second\n<strong>Sample Input:</strong>\n5 1 10\n01000\n<strong>Sample Output:</strong>\n11\n<strong>Explanation:</strong>\nFirst, Reverse substring (0, 1): “01000” -&gt; “10000”, COST = 1\nSecond, Invert substring (1, 4): “10000” -&gt; “11111”, COST = 10\nTotal cost = 1+10 =&gt; 11</p>\n",
      "id": 432
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/4._Circular_List_of_students/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/4._Circular_List_of_students/0_index.html",
      "content": "# 4. Circular List of students\nCreated Tuesday 30 June 2020\n\n**Circular List of Students:**\nYou are given a circular list of students as follows:\n0 -> 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 10 -> 11\nThis list is circular, means that 11 will follow 0 again. You will be given the student number ‘i’ and some position ‘p’. You will have to tell that if the list will start from (i+1)th student, then which student will be at pth position.\n**Input Format:**\nFirst line will have an integer ‘t’, denoting the number of test cases.\nNext line will have two space separated integers denoting the value of ‘i’ and ‘p’ respectively.\n**Output Format:**\nPrint ‘t’ lines containing single integer denoting the student number.\n**Constraints:**\n1 <= t <= 10^5\n0 <= i <= 11\n1 <= p <= 12\n**Sample Input:**\n2\n2 3\n5 8\n**Sample Output:**\n5\n1\n**Explanation:**\nFirst, list will start at 3. 3 -> 4 -> 5. Hence, 5 will be at third position.\nSecond, list will start at 6. 6 -> 7 -> 8 -> 9 -> 10 -> 11 -> 0 -> 1. Hence, 1 will be at 8th position.\n\n",
      "html": "<h1 id=\"4.-circular-list-of-students\">4. Circular List of students <a class=\"heading-anchor-permalink\" href=\"#4.-circular-list-of-students\">#</a></h1>\n<p>Created Tuesday 30 June 2020</p>\n<p><strong>Circular List of Students:</strong>\nYou are given a circular list of students as follows:\n0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 -&gt; 9 -&gt; 10 -&gt; 11\nThis list is circular, means that 11 will follow 0 again. You will be given the student number ‘i’ and some position ‘p’. You will have to tell that if the list will start from (i+1)th student, then which student will be at pth position.\n<strong>Input Format:</strong>\nFirst line will have an integer ‘t’, denoting the number of test cases.\nNext line will have two space separated integers denoting the value of ‘i’ and ‘p’ respectively.\n<strong>Output Format:</strong>\nPrint ‘t’ lines containing single integer denoting the student number.\n<strong>Constraints:</strong>\n1 &lt;= t &lt;= 10^5\n0 &lt;= i &lt;= 11\n1 &lt;= p &lt;= 12\n<strong>Sample Input:</strong>\n2\n2 3\n5 8\n<strong>Sample Output:</strong>\n5\n1\n<strong>Explanation:</strong>\nFirst, list will start at 3. 3 -&gt; 4 -&gt; 5. Hence, 5 will be at third position.\nSecond, list will start at 6. 6 -&gt; 7 -&gt; 8 -&gt; 9 -&gt; 10 -&gt; 11 -&gt; 0 -&gt; 1. Hence, 1 will be at 8th position.</p>\n",
      "id": 433
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/5._Interesting_Sequences/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/5._Interesting_Sequences/0_index.html",
      "content": "# 5. Interesting Sequences\nCreated Tuesday 30 June 2020\n\n**Interesting Sequences**\nProfessor Jain has a class full of notorious students. To get anything done from them is a herculean task. Prof Jain wanted to organize a test. He gave this responsibility to Aahad. Aahad did an excellent job of organizing the test. As a reward, the professor gave him an sequence of numbers to play with. But Aahad likes playing with \"interesting\" sequence of numbers, which are sequences that have equal elements.\nNow, the problem is - Prof Jain has a sequence with elements, and that sequence isn't always \"interesting”. To ensure sequence has equal elements, Prof Jain has 2 options:\n1) Choose two elements of sequence . DECREASE the first element by 1 and INCREASE the second element by 1. This operation costs 'k' coins.\n2) Choose one element of array and INCREASE it by 1. This operation costs 'l' coins.\nWhat’s the minimum number of coins Prof Jain needs to turn his sequence into a “interesting\" sequence for Aahad?\n**Input Format**\nThe first line of input contains three space-separated integers: n, k, l . Integer n is the size of array . Integer k is the number of coins needed to perform the first operation. Integer l is the number of coins needed to perform the second operation.\n\nThe second line contains n integers: (a1, a2, a3... an) representing sequence.\n**Constraints:**\n1 <= n, k, l <= 1000\n1 <= ai <= 1000\nTime Limit: 1 second\n**Output Format**\nIn single line, print one integer number: the minimum number of coins required to make \"interesting\" sequence.\n**Sample Test Cases:**\n**Sample Input 1:**\n4 1 2\n3 4 2 2\n**Sample Output 1:**\n3\n**Explanation Output 1 :**\n**The professor has a sequence with 4 elements. To perform the first operation, they must pay 1 coin and to perform the second operation, they must pay 2 coins. The optimal strategy is:**\n\n-Perform the second operation on the fourth element. Now the sequence is {3, 4, 2, 3}. This costs 2 coins.\n\n-Perform the first operation on the second and third element. The sequence is now \"interesting\", and it looks like {3, 3, 3, 3}. This costs 1 coin.\n\nThe total amount of coins needed is 2 + 1 = 3.\n**Sample Input 2:**\n3 2 1\n5 5 5\n**Sample Output 2:**\n0\n**Explanation Output 2 :**\nThe given sequence is already \"interesting\". The professor would spend 0 coins.\n**Sample Input 3:**\n5 2 1\n1 2 3 4 5\n**Sample Output 3:**\n6\n**Explanation Output 3 :**\n**The professor has a sequence with 5 elements. To perform the first operation, they must pay 2 coin and to perform the second operation, they must pay 1 coin. The optimal strategy is:**\n\n-Perform the first operation on the first and last element. Now the sequence is {2, 2, 3, 4, 4}. This costs 2 coins.\n\n-Perform the first operation again on the first and last element. Now the sequence is {3, 2, 3, 4, 3}. This costs 2 coins.\n\n-Perform the first operation on the second and second last element. Now the sequence is {3, 3, 3, 3, 3}. This costs 2 coins.\n\nThe total amount of coins needed is 2 + 2 + 2 = 6.\n\n",
      "html": "<h1 id=\"5.-interesting-sequences\">5. Interesting Sequences <a class=\"heading-anchor-permalink\" href=\"#5.-interesting-sequences\">#</a></h1>\n<p>Created Tuesday 30 June 2020</p>\n<p><strong>Interesting Sequences</strong>\nProfessor Jain has a class full of notorious students. To get anything done from them is a herculean task. Prof Jain wanted to organize a test. He gave this responsibility to Aahad. Aahad did an excellent job of organizing the test. As a reward, the professor gave him an sequence of numbers to play with. But Aahad likes playing with “interesting” sequence of numbers, which are sequences that have equal elements.\nNow, the problem is - Prof Jain has a sequence with elements, and that sequence isn’t always &quot;interesting”. To ensure sequence has equal elements, Prof Jain has 2 options:</p>\n<ol>\n<li>Choose two elements of sequence . DECREASE the first element by 1 and INCREASE the second element by 1. This operation costs ‘k’ coins.</li>\n<li>Choose one element of array and INCREASE it by 1. This operation costs ‘l’ coins.\nWhat’s the minimum number of coins Prof Jain needs to turn his sequence into a “interesting&quot; sequence for Aahad?\n<strong>Input Format</strong>\nThe first line of input contains three space-separated integers: n, k, l . Integer n is the size of array . Integer k is the number of coins needed to perform the first operation. Integer l is the number of coins needed to perform the second operation.</li>\n</ol>\n<p>The second line contains n integers: (a1, a2, a3… an) representing sequence.\n<strong>Constraints:</strong>\n1 &lt;= n, k, l &lt;= 1000\n1 &lt;= ai &lt;= 1000\nTime Limit: 1 second\n<strong>Output Format</strong>\nIn single line, print one integer number: the minimum number of coins required to make “interesting” sequence.\n<strong>Sample Test Cases:</strong>\n<strong>Sample Input 1:</strong>\n4 1 2\n3 4 2 2\n<strong>Sample Output 1:</strong>\n3\n<strong>Explanation Output 1 :</strong>\n<strong>The professor has a sequence with 4 elements. To perform the first operation, they must pay 1 coin and to perform the second operation, they must pay 2 coins. The optimal strategy is:</strong></p>\n<p>-Perform the second operation on the fourth element. Now the sequence is {3, 4, 2, 3}. This costs 2 coins.</p>\n<p>-Perform the first operation on the second and third element. The sequence is now “interesting”, and it looks like {3, 3, 3, 3}. This costs 1 coin.</p>\n<p>The total amount of coins needed is 2 + 1 = 3.\n<strong>Sample Input 2:</strong>\n3 2 1\n5 5 5\n<strong>Sample Output 2:</strong>\n0\n<strong>Explanation Output 2 :</strong>\nThe given sequence is already “interesting”. The professor would spend 0 coins.\n<strong>Sample Input 3:</strong>\n5 2 1\n1 2 3 4 5\n<strong>Sample Output 3:</strong>\n6\n<strong>Explanation Output 3 :</strong>\n<strong>The professor has a sequence with 5 elements. To perform the first operation, they must pay 2 coin and to perform the second operation, they must pay 1 coin. The optimal strategy is:</strong></p>\n<p>-Perform the first operation on the first and last element. Now the sequence is {2, 2, 3, 4, 4}. This costs 2 coins.</p>\n<p>-Perform the first operation again on the first and last element. Now the sequence is {3, 2, 3, 4, 3}. This costs 2 coins.</p>\n<p>-Perform the first operation on the second and second last element. Now the sequence is {3, 3, 3, 3, 3}. This costs 2 coins.</p>\n<p>The total amount of coins needed is 2 + 2 + 2 = 6.</p>\n",
      "id": 434
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/6._Winning_Strategy/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/5._Adhoc_Problems/6._Winning_Strategy/0_index.html",
      "content": "# 6. Winning Strategy\nCreated Tuesday 30 June 2020\n\n**Winning strategy**\nOur college team is going to the sports fest to play a football match with our coach. There are n players in our team, numbered from 1 to n.\nThe coach will know the position of another team hence create a winning strategy. He creates the position of every player in a specific order so that we will win and then he starts swapping two players at a time to form the positions.\nHe swaps payers in such a way that it can't be understood by another team:\n\n1. Any player can swap with the player directly at front him\n2. One player can swap at most with two other players\n\nIf the specific order is formed then our team will win otherwise we will lose\n**Input Format**\nThe First line contains numbers of players in team: n\nThe second line contains n space separated integers denoting the specific position of players: i-th integer denotes the position of Ai player in winning strategy\n**Output Format**\nIf our team wins print \"YES\"(without quotes) and in next line print the minimum numbers of swapping required to form this specific order otherwise print \"NO\"(without quotes)\n**Constraints**\n1 =< n <= 10^5\n1 <= Ai <= n\n**Sample Input1:**\n5\n2 1 5 3 4\n**Sample Output1:**\nYES\n3\n**Sample Input2:**\n5\n2 5 1 3 4\n**Sample Output3:**\nNO\nExplaination\nIn the First Sample case,\nInitial state: 1 2 3 4 5\n**Three moves required to form this order:**\n1 2 3 4 5 -> 1 2 3 5 4 -> 1 2 5 3 4 -> 2 1 5 3 4\nIn the second case, no way to form this specific order\n\n",
      "html": "<h1 id=\"6.-winning-strategy\">6. Winning Strategy <a class=\"heading-anchor-permalink\" href=\"#6.-winning-strategy\">#</a></h1>\n<p>Created Tuesday 30 June 2020</p>\n<p><strong>Winning strategy</strong>\nOur college team is going to the sports fest to play a football match with our coach. There are n players in our team, numbered from 1 to n.\nThe coach will know the position of another team hence create a winning strategy. He creates the position of every player in a specific order so that we will win and then he starts swapping two players at a time to form the positions.\nHe swaps payers in such a way that it can’t be understood by another team:</p>\n<ol>\n<li>Any player can swap with the player directly at front him</li>\n<li>One player can swap at most with two other players</li>\n</ol>\n<p>If the specific order is formed then our team will win otherwise we will lose\n<strong>Input Format</strong>\nThe First line contains numbers of players in team: n\nThe second line contains n space separated integers denoting the specific position of players: i-th integer denotes the position of Ai player in winning strategy\n<strong>Output Format</strong>\nIf our team wins print “YES”(without quotes) and in next line print the minimum numbers of swapping required to form this specific order otherwise print “NO”(without quotes)\n<strong>Constraints</strong>\n1 =&lt; n &lt;= 10^5\n1 &lt;= Ai &lt;= n\n<strong>Sample Input1:</strong>\n5\n2 1 5 3 4\n<strong>Sample Output1:</strong>\nYES\n3\n<strong>Sample Input2:</strong>\n5\n2 5 1 3 4\n<strong>Sample Output3:</strong>\nNO\nExplaination\nIn the First Sample case,\nInitial state: 1 2 3 4 5\n<strong>Three moves required to form this order:</strong>\n1 2 3 4 5 -&gt; 1 2 3 5 4 -&gt; 1 2 5 3 4 -&gt; 2 1 5 3 4\nIn the second case, no way to form this specific order</p>\n",
      "id": 435
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/0_index.html",
      "content": "# 6. Dynamic ProgrammingX\nCreated Thursday 08 April 2021\n\nPatterns - <https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns>\n\n",
      "html": "<h1 id=\"6.-dynamic-programmingx\">6. Dynamic ProgrammingX <a class=\"heading-anchor-permalink\" href=\"#6.-dynamic-programmingx\">#</a></h1>\n<p>Created Thursday 08 April 2021</p>\n<p>Patterns - <a href=\"https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns\">https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns</a></p>\n",
      "id": 436
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/0_index.html",
      "content": "# 1. Classic problems\nCreated Monday 22 June 2020\n\n\n* DP is very interesting.\n* DP is not difficult, but requires the correct approach, both for study and practice.\n* We'll go from the basics to the tougher problems.\n\n\n",
      "html": "<h1 id=\"1.-classic-problems\">1. Classic problems <a class=\"heading-anchor-permalink\" href=\"#1.-classic-problems\">#</a></h1>\n<p>Created Monday 22 June 2020</p>\n<ul>\n<li>DP is very interesting.</li>\n<li>DP is not difficult, but requires the correct approach, both for study and practice.</li>\n<li>We’ll go from the basics to the tougher problems.</li>\n</ul>\n",
      "id": 437
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/1._DP_Basics_-_Fibonacci_Number/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/1._DP_Basics_-_Fibonacci_Number/0_index.html",
      "content": "# 1. DP Basics - Fibonacci Number\n\nCreated Tuesday 30 June 2020\n\n- Forget about DP let's talk about fibonacci numbers.\n- 0, 1, 1, 2, 3, 5, 8 ...\n\n![](/assets/1._DP_Basics_-_Fibonacci_Number-image-1.png)\n\n- This solution is very bad - O(2^n^)\n- We can store our work to reduce the time complexity.\n- Memoization - Top down. Intialized to zero - O(n)\n\n![](/assets/1._DP_Basics_-_Fibonacci_Number-image-2.png)\n\n- Bottom up approach: We start with the base cases and an array which stores the answers. Note that an array is not necessary in recursion, because dependencies are just the previous two values. But in many problems they are very important.\n\n---\n\nOur main problem is divided into subproblems, for which some of their work is common, i.e they are dependent on some 3rd level subproblem(s). These type of problems are called dynamic programming problem.\n",
      "html": "<h1 id=\"1.-dp-basics---fibonacci-number\">1. DP Basics - Fibonacci Number <a class=\"heading-anchor-permalink\" href=\"#1.-dp-basics---fibonacci-number\">#</a></h1>\n<p>Created Tuesday 30 June 2020</p>\n<ul>\n<li>Forget about DP let’s talk about fibonacci numbers.</li>\n<li>0, 1, 1, 2, 3, 5, 8 …</li>\n</ul>\n<p><img src=\"/assets/1._DP_Basics_-_Fibonacci_Number-image-1.png\" alt=\"\"></p>\n<ul>\n<li>This solution is very bad - O(2^n^)</li>\n<li>We can store our work to reduce the time complexity.</li>\n<li>Memoization - Top down. Intialized to zero - O(n)</li>\n</ul>\n<p><img src=\"/assets/1._DP_Basics_-_Fibonacci_Number-image-2.png\" alt=\"\"></p>\n<ul>\n<li>Bottom up approach: We start with the base cases and an array which stores the answers. Note that an array is not necessary in recursion, because dependencies are just the previous two values. But in many problems they are very important.</li>\n</ul>\n<hr>\n<p>Our main problem is divided into subproblems, for which some of their work is common, i.e they are dependent on some 3rd level subproblem(s). These type of problems are called dynamic programming problem.</p>\n",
      "id": 438
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/2._AlphaCode/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/2._AlphaCode/0_index.html",
      "content": "# 2. AlphaCode\nCreated Tuesday 30 June 2020\n\nVery simple:\n\n1. f(n) = the number of codes for an array of length n(starting from the head)\n2. f(1223) = f(223) + f(23), because 12 can also be treated an individual\n```\nWe calculate values for only the arrays of increasing length. Then, we start adding\n```\n",
      "html": "<h1 id=\"2.-alphacode\">2. AlphaCode <a class=\"heading-anchor-permalink\" href=\"#2.-alphacode\">#</a></h1>\n<p>Created Tuesday 30 June 2020</p>\n<p>Very simple:</p>\n<ol>\n<li>f(n) = the number of codes for an array of length n(starting from the head)</li>\n<li>f(1223) = f(223) + f(23), because 12 can also be treated an individual</li>\n</ol>\n<pre><code>We calculate values for only the arrays of increasing length. Then, we start adding\n</code></pre>\n",
      "id": 439
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/3._Longest_Increasing_subsequence/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/3._Longest_Increasing_subsequence/0_index.html",
      "content": "# 3. Longest Increasing subsequence\n\nCreated Wednesday 01 July 2020\n\nGiven an array find the longest increasing subsequence.\n\n1. Bruteforce solution\n   - Find all subsequences and choose the longest increasing one.\n   - Number of subsequences = 2^n^\n   - Time complexity = O(2^n^)\n2. A better approach - Check dependency:\n   - LIS = max(all increasing subsequences) = max(LIS(starting from 0), LIS(starting from1)...) = max(LIS(ending at 0), LIS(ending at 1)...) **Both are equivalent, we'll use L->R for convenience.**\n   - ![](/assets/3._Longest_Increasing_subsequence-image-1.png)\n   - We will store the LIS ending at each index. memo[i] = max(memo[i-1 to 0] where end is less than memo[i])\n   - A caveat here: It can happen that a sequence is reset. And the big memo values lie far to the left. To capture these large values, we should search the whole array to the left, updating only if arr[left] < arr[i] && (1+val[left]) < val[i]. Do set val[i] = 1 before the inner loop starts.\n   - O(n^2^) time, O(n) space.\n\n[LIS.cpp](3._Longest_Increasing_subsequence/LIS.cpp)\n\nNote: We skipped a step, i.e we directly used bottom-up approach.\n",
      "html": "<h1 id=\"3.-longest-increasing-subsequence\">3. Longest Increasing subsequence <a class=\"heading-anchor-permalink\" href=\"#3.-longest-increasing-subsequence\">#</a></h1>\n<p>Created Wednesday 01 July 2020</p>\n<p>Given an array find the longest increasing subsequence.</p>\n<ol>\n<li>Bruteforce solution\n<ul>\n<li>Find all subsequences and choose the longest increasing one.</li>\n<li>Number of subsequences = 2^n^</li>\n<li>Time complexity = O(2^n^)</li>\n</ul>\n</li>\n<li>A better approach - Check dependency:\n<ul>\n<li>LIS = max(all increasing subsequences) = max(LIS(starting from 0), LIS(starting from1)…) = max(LIS(ending at 0), LIS(ending at 1)…) <strong>Both are equivalent, we’ll use L-&gt;R for convenience.</strong></li>\n<li><img src=\"/assets/3._Longest_Increasing_subsequence-image-1.png\" alt=\"\"></li>\n<li>We will store the LIS ending at each index. memo[i] = max(memo[i-1 to 0] where end is less than memo[i])</li>\n<li>A caveat here: It can happen that a sequence is reset. And the big memo values lie far to the left. To capture these large values, we should search the whole array to the left, updating only if arr[left] &lt; arr[i] &amp;&amp; (1+val[left]) &lt; val[i]. Do set val[i] = 1 before the inner loop starts.</li>\n<li>O(n^2^) time, O(n) space.</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"3._Longest_Increasing_subsequence/LIS.cpp\">LIS.cpp</a></p>\n<p>Note: We skipped a step, i.e we directly used bottom-up approach.</p>\n",
      "id": 440
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/4._Largest_Bitonic_Subsequence/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/4._Largest_Bitonic_Subsequence/0_index.html",
      "content": "# 4. Largest Bitonic Subsequence\nCreated Wednesday 01 July 2020\n\n**Largest Bitonic Subsequence**\nYou are given an array of positive integers as input. Write a code to return the length of the largest such subsequence in which the values are arranged first in strictly ascending order and then in strictly descending order.\n\nSuch a subsequence is known as bitonic subsequence. A purely increasing or purely decreasing subsequence will also be considered as a bitonic sequence with the other part empty.\n\nNote that the elements in bitonic subsequence need not be consecutive in the given array but the order should remain same.\n**Input Format:**\nLine 1 : A positive Integer N, i.e., the size of array\nLine 2 : N space-separated integers as elements of the array \n**Output Format:**\nLength of Largest Bitonic subsequence\n**Input Constraints:**\n1<= N <= 100000\n**Sample Input 1:**\n6\n15 20 20 6 4 2\n**Sample Output 1:**\n5\n**Sample Output 1 Explanation:**\nHere, longest Bitonic subsequence is {15, 20, 6, 4, 2} which has length = 5.\n//Sample Input 2://\n2\n1 5\n**Sample Output 2:**\n2\n**Sample Input 3:**\n2\n5 1\n**Sample Output 3:**\n2\n\n*****\n\n\n* This is like the longest increasing subsequence.\n* We basically maintain two values, longest increasing subsequence ending at i. Longest decreasing subsequence starting from i.\n* We add the pair-values and pick the maximum.\n* We need to subtract one, as the topmost point was calculated for both the increasing and the decreasing part of the bitonic subarry.\n\n\n",
      "html": "<h1 id=\"4.-largest-bitonic-subsequence\">4. Largest Bitonic Subsequence <a class=\"heading-anchor-permalink\" href=\"#4.-largest-bitonic-subsequence\">#</a></h1>\n<p>Created Wednesday 01 July 2020</p>\n<p><strong>Largest Bitonic Subsequence</strong>\nYou are given an array of positive integers as input. Write a code to return the length of the largest such subsequence in which the values are arranged first in strictly ascending order and then in strictly descending order.</p>\n<p>Such a subsequence is known as bitonic subsequence. A purely increasing or purely decreasing subsequence will also be considered as a bitonic sequence with the other part empty.</p>\n<p>Note that the elements in bitonic subsequence need not be consecutive in the given array but the order should remain same.\n<strong>Input Format:</strong>\nLine 1 : A positive Integer N, i.e., the size of array\nLine 2 : N space-separated integers as elements of the array\n<strong>Output Format:</strong>\nLength of Largest Bitonic subsequence\n<strong>Input Constraints:</strong>\n1&lt;= N &lt;= 100000\n<strong>Sample Input 1:</strong>\n6\n15 20 20 6 4 2\n<strong>Sample Output 1:</strong>\n5\n<strong>Sample Output 1 Explanation:</strong>\nHere, longest Bitonic subsequence is {15, 20, 6, 4, 2} which has length = 5.\n//Sample Input 2://\n2\n1 5\n<strong>Sample Output 2:</strong>\n2\n<strong>Sample Input 3:</strong>\n2\n5 1\n<strong>Sample Output 3:</strong>\n2</p>\n<hr>\n<ul>\n<li>This is like the longest increasing subsequence.</li>\n<li>We basically maintain two values, longest increasing subsequence ending at i. Longest decreasing subsequence starting from i.</li>\n<li>We add the pair-values and pick the maximum.</li>\n<li>We need to subtract one, as the topmost point was calculated for both the increasing and the decreasing part of the bitonic subarry.</li>\n</ul>\n",
      "id": 441
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/5._Coin_change_and_stair_case/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/5._Coin_change_and_stair_case/0_index.html",
      "content": "# 5. Coin change and stair case\n\nCreated Wednesday 01 July 2020\n\n1. Staircase problem: Given n stairs, count the number of ways of going to the top using steps of 1, 2 and 3.\n   - Let f(n) be the number of ways to traverse n steps.\n   - Our **last** steps can be 1, 2 or 3.\n   - So the total number of steps = f(n-1)*1 + f(n-2)*1 + f(n-3)\\*1 = f(n-1)+f(n-2)+f(n-3)\n   - This is just like Fibonacci - Redundant work - O(n)\n   - Skip the code.\n   - Beware of the mathematical method here - It does not help, because order also matters here.\n   - Order of steps matter here.\n\n![](/assets/5._Coin_change_and_stair_case-image-1.png)\n[staircase.cpp](5._Coin_change_and_stair_case/staircase.cpp)\n\n2. Coin change problem: Given denominations D~0~, D~1~, D~2~ ... and a value n. Count the number of ways to make up n using the denominations.\n   - Ending with coin denomination and solving like Staircase - wrong, order does not matter here.\n   - For each coin, either it is used or it is not. And it may be used multiple times.\n   - f(n, denArr, denom) = f(n-denarr[0], denarr, denom) + f(n, denarr+1, denom)\n   - Denarr current head and denom(length) have a one-one relation, because we are decreasing denarr from left to right.\n   - As each function is identified by n and denarr array, we'll need a 2d array of size = n+1 \\* denom+1\n   - We can see that each denom can at max occupy n/denarr[i] space. So we can create an array of array. Space complexity will still be the same. n^2^ to n^2^/2.\n\n![](/assets/5._Coin_change_and_stair_case-image-2.png) ![](/assets/5._Coin_change_and_stair_case-image-3.png)\n[coinchange.cpp](5._Coin_change_and_stair_case/coinchange.cpp)\n",
      "html": "<h1 id=\"5.-coin-change-and-stair-case\">5. Coin change and stair case <a class=\"heading-anchor-permalink\" href=\"#5.-coin-change-and-stair-case\">#</a></h1>\n<p>Created Wednesday 01 July 2020</p>\n<ol>\n<li>Staircase problem: Given n stairs, count the number of ways of going to the top using steps of 1, 2 and 3.\n<ul>\n<li>Let f(n) be the number of ways to traverse n steps.</li>\n<li>Our <strong>last</strong> steps can be 1, 2 or 3.</li>\n<li>So the total number of steps = f(n-1)*1 + f(n-2)*1 + f(n-3)*1 = f(n-1)+f(n-2)+f(n-3)</li>\n<li>This is just like Fibonacci - Redundant work - O(n)</li>\n<li>Skip the code.</li>\n<li>Beware of the mathematical method here - It does not help, because order also matters here.</li>\n<li>Order of steps matter here.</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/assets/5._Coin_change_and_stair_case-image-1.png\" alt=\"\">\n<a href=\"5._Coin_change_and_stair_case/staircase.cpp\">staircase.cpp</a></p>\n<ol start=\"2\">\n<li>Coin change problem: Given denominations D~0~, D~1~, D~2~ … and a value n. Count the number of ways to make up n using the denominations.\n<ul>\n<li>Ending with coin denomination and solving like Staircase - wrong, order does not matter here.</li>\n<li>For each coin, either it is used or it is not. And it may be used multiple times.</li>\n<li>f(n, denArr, denom) = f(n-denarr[0], denarr, denom) + f(n, denarr+1, denom)</li>\n<li>Denarr current head and denom(length) have a one-one relation, because we are decreasing denarr from left to right.</li>\n<li>As each function is identified by n and denarr array, we’ll need a 2d array of size = n+1 * denom+1</li>\n<li>We can see that each denom can at max occupy n/denarr[i] space. So we can create an array of array. Space complexity will still be the same. n^2^ to n^2^/2.</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/assets/5._Coin_change_and_stair_case-image-2.png\" alt=\"\"> <img src=\"/assets/5._Coin_change_and_stair_case-image-3.png\" alt=\"\">\n<a href=\"5._Coin_change_and_stair_case/coinchange.cpp\">coinchange.cpp</a></p>\n",
      "id": 442
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/6._Minimum_Cost/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/6._Minimum_Cost/0_index.html",
      "content": "# 6. Minimum Cost\n\nCreated Thursday 02 July 2020\n\n- In DP problems, we do need multidimensional arrays. Dimension = number of state parameters.\n- Finding the answer to this problem. We start from the top-left and go to the bottom-right.\n\n![](/assets/6._Minimum_Cost-image-1.png)\n\n- We can say f(i, j) = min(f(i+1, j)+f(i+1, j+1)+f(i, j+1))\n- There's a lot of repeated work.\n- As movement is to the R,D or RD - the answer for any cell depends its L, U and LU. This makes a bottom-up approach possible, as only previous problems decide the current problem.\n- We'll need a 2D array - i and j uniquely identify the cell: Path starting from i, j. Previous path does not matter.\n- For borders cost is ∞, so they rejected.\n- Time O(n^2^), Space O(n^2^)\n\n### Iterative Solution\n\n- Each value depends on R, D and RD.\n- The **destination** value = destination_value, because it has no R, D or RD.\n- We can fill the one above the **destination**, because it has only D, R and RD are absent. Value = current+down.\n- We can full the one on the left of the **destination**, because it has no D or RD. Has only R. Value = current+right.\n- This can be filled directly.\n- After this we fill the LT of the destination, which has all prerequisites fullfilled.\n- This way, in RLDT we will arrive at the staring point. Which will have the value of the minimum cost. **Done**.\n",
      "html": "<h1 id=\"6.-minimum-cost\">6. Minimum Cost <a class=\"heading-anchor-permalink\" href=\"#6.-minimum-cost\">#</a></h1>\n<p>Created Thursday 02 July 2020</p>\n<ul>\n<li>In DP problems, we do need multidimensional arrays. Dimension = number of state parameters.</li>\n<li>Finding the answer to this problem. We start from the top-left and go to the bottom-right.</li>\n</ul>\n<p><img src=\"/assets/6._Minimum_Cost-image-1.png\" alt=\"\"></p>\n<ul>\n<li>We can say f(i, j) = min(f(i+1, j)+f(i+1, j+1)+f(i, j+1))</li>\n<li>There’s a lot of repeated work.</li>\n<li>As movement is to the R,D or RD - the answer for any cell depends its L, U and LU. This makes a bottom-up approach possible, as only previous problems decide the current problem.</li>\n<li>We’ll need a 2D array - i and j uniquely identify the cell: Path starting from i, j. Previous path does not matter.</li>\n<li>For borders cost is ∞, so they rejected.</li>\n<li>Time O(n^2^), Space O(n^2^)</li>\n</ul>\n<h3 id=\"iterative-solution\">Iterative Solution <a class=\"heading-anchor-permalink\" href=\"#iterative-solution\">#</a></h3>\n<ul>\n<li>Each value depends on R, D and RD.</li>\n<li>The <strong>destination</strong> value = destination_value, because it has no R, D or RD.</li>\n<li>We can fill the one above the <strong>destination</strong>, because it has only D, R and RD are absent. Value = current+down.</li>\n<li>We can full the one on the left of the <strong>destination</strong>, because it has no D or RD. Has only R. Value = current+right.</li>\n<li>This can be filled directly.</li>\n<li>After this we fill the LT of the destination, which has all prerequisites fullfilled.</li>\n<li>This way, in RLDT we will arrive at the staring point. Which will have the value of the minimum cost. <strong>Done</strong>.</li>\n</ul>\n",
      "id": 443
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/7._Magic_Grid/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/7._Magic_Grid/0_index.html",
      "content": "# 7. Magic Grid\n\nCreated Thursday 02 July 2020\n\n![](/assets/7._Magic_Grid-image-1.png) ![](/assets/7._Magic_Grid-image-2.png) ![](/assets/7._Magic_Grid-image-3.png)\n\n---\n\n- Proof by construction is very important in DP. Dependencies are never reversed, the depedencies are made using other properties. No need to find a so-called inverse function.\n\n[magicGrid.cpp](7._Magic_Grid/magicGrid.cpp)\n",
      "html": "<h1 id=\"7.-magic-grid\">7. Magic Grid <a class=\"heading-anchor-permalink\" href=\"#7.-magic-grid\">#</a></h1>\n<p>Created Thursday 02 July 2020</p>\n<p><img src=\"/assets/7._Magic_Grid-image-1.png\" alt=\"\"> <img src=\"/assets/7._Magic_Grid-image-2.png\" alt=\"\"> <img src=\"/assets/7._Magic_Grid-image-3.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li>Proof by construction is very important in DP. Dependencies are never reversed, the depedencies are made using other properties. No need to find a so-called inverse function.</li>\n</ul>\n<p><a href=\"7._Magic_Grid/magicGrid.cpp\">magicGrid.cpp</a></p>\n",
      "id": 444
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/1._Loot_Houses_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/1._Loot_Houses_-_80.html",
      "content": "# 1. Loot Houses\n\nCreated Saturday 18 July 2020\n\n![](/assets/1._Loot_Houses_-_80-image-1.png)\n\n```c++\n// main code\n#include <iostream>\n#include \"solution.h\"\nusing namespace std;\nint main(){\n    int n;\n    cin >> n;\n    int arr[10000];\n    for(int i=0; i<n; i++){\n        cin >> arr[i];\n    }\n    cout << getMaxMoney(arr, n);\n}\n#your code\nint getMaxMoney(int arr[], int n){\n\t/*Write your code here.\n\t *Don’t write main().\n\t *Don’t take input, it is passed as function argument.\n\t *Don’t print output.\n\t *Taking input and printing output is handled automatically.\n         */\n}\n```\n",
      "html": "<h1 id=\"1.-loot-houses\">1. Loot Houses <a class=\"heading-anchor-permalink\" href=\"#1.-loot-houses\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<p><img src=\"/assets/1._Loot_Houses_-_80-image-1.png\" alt=\"\"></p>\n<pre><code class=\"language-c++\">// main code\n#include &lt;iostream&gt;\n#include &quot;solution.h&quot;\nusing namespace std;\nint main(){\n    int n;\n    cin &gt;&gt; n;\n    int arr[10000];\n    for(int i=0; i&lt;n; i++){\n        cin &gt;&gt; arr[i];\n    }\n    cout &lt;&lt; getMaxMoney(arr, n);\n}\n#your code\nint getMaxMoney(int arr[], int n){\n\t/*Write your code here.\n\t *Don’t write main().\n\t *Don’t take input, it is passed as function argument.\n\t *Don’t print output.\n\t *Taking input and printing output is handled automatically.\n         */\n}\n</code></pre>\n",
      "id": 445
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/2._Maximum_Square_Matrix_With_All_Zeros_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/2._Maximum_Square_Matrix_With_All_Zeros_-_80.html",
      "content": "# 2. Maximum Square Matrix With All Zeros\n\nCreated Saturday 18 July 2020\n\n![](/assets/2._Maximum_Square_Matrix_With_All_Zeros_-_80-image-1.png)![](/assets/2._Maximum_Square_Matrix_With_All_Zeros_-_80-image-2.png)\n\n```c++\n//main code\n#include<iostream>\n#include\"solution.h\"\nusing namespace std;\nint main()\n {\n  int **arr,n,m,i,j;\n  cin>>n>>m;\n  arr=new int*[n];\n  for(i=0;i<n;i++)\n      {\n       arr[i]=new int[m];\n      }\n  for(i=0;i<n;i++)\n     {\n      for(j=0;j<m;j++)\n\t    {\n\t     cin>>arr[i][j];\n\t    }\n     }\n  cout << findMaxSquareWithAllZeros(arr,n,m) << endl;\n  delete arr;\n  return 0;\n}\n// your code\nint findMaxSquareWithAllZeros(int** arr, int row, int col){\n    /* Don't write main().\n     *  Don't read input, it is passed as function argument.\n     *  Return output and don't print it.\n     *  Taking input and printing output is handled automatically.\n     */\n}\n```\n",
      "html": "<h1 id=\"2.-maximum-square-matrix-with-all-zeros\">2. Maximum Square Matrix With All Zeros <a class=\"heading-anchor-permalink\" href=\"#2.-maximum-square-matrix-with-all-zeros\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<p><img src=\"/assets/2._Maximum_Square_Matrix_With_All_Zeros_-_80-image-1.png\" alt=\"\"><img src=\"/assets/2._Maximum_Square_Matrix_With_All_Zeros_-_80-image-2.png\" alt=\"\"></p>\n<pre><code class=\"language-c++\">//main code\n#include&lt;iostream&gt;\n#include&quot;solution.h&quot;\nusing namespace std;\nint main()\n {\n  int **arr,n,m,i,j;\n  cin&gt;&gt;n&gt;&gt;m;\n  arr=new int*[n];\n  for(i=0;i&lt;n;i++)\n      {\n       arr[i]=new int[m];\n      }\n  for(i=0;i&lt;n;i++)\n     {\n      for(j=0;j&lt;m;j++)\n\t    {\n\t     cin&gt;&gt;arr[i][j];\n\t    }\n     }\n  cout &lt;&lt; findMaxSquareWithAllZeros(arr,n,m) &lt;&lt; endl;\n  delete arr;\n  return 0;\n}\n// your code\nint findMaxSquareWithAllZeros(int** arr, int row, int col){\n    /* Don't write main().\n     *  Don't read input, it is passed as function argument.\n     *  Return output and don't print it.\n     *  Taking input and printing output is handled automatically.\n     */\n}\n</code></pre>\n",
      "id": 446
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/3._Count_BSTs_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/3._Count_BSTs_-_80.html",
      "content": "# 3. Count BSTs\n\nCreated Saturday 18 July 2020\n\n![](/assets/3._Count_BSTs_-_80-image-1.png)\n![](/assets/3._Count_BSTs_-_80-image-2.png)\n\n```c++\n// main\n#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n#include \"solution.h\"\nint main()\n{\n\tint n ;\n\tcin>>n;\n\tcout<<countBST(n);\n\treturn 0;\n}\n//your\nint countBST( int n)\n{\n  /* Don't write main().\n     * Don't read input, it is passed as function argument.\n     * Return output and don't print it.\n     * Taking input and printing output is handled automatically.\n     */\n}\n```\n",
      "html": "<h1 id=\"3.-count-bsts\">3. Count BSTs <a class=\"heading-anchor-permalink\" href=\"#3.-count-bsts\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<p><img src=\"/assets/3._Count_BSTs_-_80-image-1.png\" alt=\"\">\n<img src=\"/assets/3._Count_BSTs_-_80-image-2.png\" alt=\"\"></p>\n<pre><code class=\"language-c++\">// main\n#include &lt;cmath&gt;\n#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n#include &quot;solution.h&quot;\nint main()\n{\n\tint n ;\n\tcin&gt;&gt;n;\n\tcout&lt;&lt;countBST(n);\n\treturn 0;\n}\n//your\nint countBST( int n)\n{\n  /* Don't write main().\n     * Don't read input, it is passed as function argument.\n     * Return output and don't print it.\n     * Taking input and printing output is handled automatically.\n     */\n}\n</code></pre>\n",
      "id": 447
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/4._Boredom_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/4._Boredom_-_80.html",
      "content": "# 4. Boredom\n\nCreated Saturday 18 July 2020\n\n![](/assets/4._Boredom_-_80-image-1.png)\n![](/assets/4._Boredom_-_80-image-2.png)\n\n```c++\n// main code\n#include<iostream>\n#include<vector>\nusing namespace std;\n#include \"solution.h\"\nint n;\nvector<int>A;\nint main()\n{\n\tcin>>n;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tint x;\n\t\tcin>>x;\n\t\tA.push_back(x);\n\t}\n\tcout<<solve(n,A)<<endl;\n}\n// your coe\nint solve(int n,vector<int>A){\n  /* Don't write main().\n     Don't read input, it is passed as function argument.\n     Return output and don't print it.\n     Taking input and printing output is handled automatically.\n  */\n}\n```\n",
      "html": "<h1 id=\"4.-boredom\">4. Boredom <a class=\"heading-anchor-permalink\" href=\"#4.-boredom\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<p><img src=\"/assets/4._Boredom_-_80-image-1.png\" alt=\"\">\n<img src=\"/assets/4._Boredom_-_80-image-2.png\" alt=\"\"></p>\n<pre><code class=\"language-c++\">// main code\n#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\n#include &quot;solution.h&quot;\nint n;\nvector&lt;int&gt;A;\nint main()\n{\n\tcin&gt;&gt;n;\n\tfor(int i=0;i&lt;n;i++)\n\t{\n\t\tint x;\n\t\tcin&gt;&gt;x;\n\t\tA.push_back(x);\n\t}\n\tcout&lt;&lt;solve(n,A)&lt;&lt;endl;\n}\n// your coe\nint solve(int n,vector&lt;int&gt;A){\n  /* Don't write main().\n     Don't read input, it is passed as function argument.\n     Return output and don't print it.\n     Taking input and printing output is handled automatically.\n  */\n}\n</code></pre>\n",
      "id": 448
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/5._Minimum_Number_of_Chocolates_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/5._Minimum_Number_of_Chocolates_-_80.html",
      "content": "# 5. Minimum Number of Chocolates\n\nCreated Saturday 18 July 2020\n\n![](/assets/5._Minimum_Number_of_Chocolates_-_80-image-1.png)\n![](/assets/5._Minimum_Number_of_Chocolates_-_80-image-2.png)\n\n```c++\n// main\n#include <iostream>\n#include <stdio.h>\n#include \"solution.h\"\nusing namespace std;\nint main(){\n    int n;\n    cin >> n;\n    int *arr = new int[n];\n    for(int i = 0; i < n; i++){\n        cin >> arr[i];\n    }\n    cout << getMin(arr, n);\n    delete []arr;\n}\n//your\nint getMin(int *arr, int n){\n   /* Don't write main().\n      Don't read input, it is passed as function argument.\n      Return output and don't print it.\n      Taking input and printing output is handled automatically.\n   */\n}\n```\n",
      "html": "<h1 id=\"5.-minimum-number-of-chocolates\">5. Minimum Number of Chocolates <a class=\"heading-anchor-permalink\" href=\"#5.-minimum-number-of-chocolates\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<p><img src=\"/assets/5._Minimum_Number_of_Chocolates_-_80-image-1.png\" alt=\"\">\n<img src=\"/assets/5._Minimum_Number_of_Chocolates_-_80-image-2.png\" alt=\"\"></p>\n<pre><code class=\"language-c++\">// main\n#include &lt;iostream&gt;\n#include &lt;stdio.h&gt;\n#include &quot;solution.h&quot;\nusing namespace std;\nint main(){\n    int n;\n    cin &gt;&gt; n;\n    int *arr = new int[n];\n    for(int i = 0; i &lt; n; i++){\n        cin &gt;&gt; arr[i];\n    }\n    cout &lt;&lt; getMin(arr, n);\n    delete []arr;\n}\n//your\nint getMin(int *arr, int n){\n   /* Don't write main().\n      Don't read input, it is passed as function argument.\n      Return output and don't print it.\n      Taking input and printing output is handled automatically.\n   */\n}\n</code></pre>\n",
      "id": 449
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/6._Minimum_Count_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/6._Minimum_Count_-_80.html",
      "content": "# 6. Minimum Count\n\nCreated Saturday 18 July 2020\n\n![](/assets/6._Minimum_Count_-_80-image-1.png)\n![](/assets/6._Minimum_Count_-_80-image-2.png)\n\n```c++\n//main\n#include <bits/stdc++.h>\nusing namespace std;\n#include \"solution.h\"\n\nint main()\n{\n\tint n;\n\tcin >> n;\n\tcout << minCount(n);\n}\n\n//your\nint minCount(int n)\n{\n\t//Write your code here\n}\n```\n",
      "html": "<h1 id=\"6.-minimum-count\">6. Minimum Count <a class=\"heading-anchor-permalink\" href=\"#6.-minimum-count\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<p><img src=\"/assets/6._Minimum_Count_-_80-image-1.png\" alt=\"\">\n<img src=\"/assets/6._Minimum_Count_-_80-image-2.png\" alt=\"\"></p>\n<pre><code class=\"language-c++\">//main\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#include &quot;solution.h&quot;\n\nint main()\n{\n\tint n;\n\tcin &gt;&gt; n;\n\tcout &lt;&lt; minCount(n);\n}\n\n//your\nint minCount(int n)\n{\n\t//Write your code here\n}\n</code></pre>\n",
      "id": 450
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/1._Hasan_and_Trip_-_40.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/1._Hasan_and_Trip_-_40.html",
      "content": "# 1. Hasan and Trip\n\nCreated Saturday 18 July 2020\n\n![](/assets/1._Hasan_and_Trip_-_40-image-1.png)\n![](/assets/1._Hasan_and_Trip_-_40-image-2.png)\nWrite All.\n",
      "html": "<h1 id=\"1.-hasan-and-trip\">1. Hasan and Trip <a class=\"heading-anchor-permalink\" href=\"#1.-hasan-and-trip\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<p><img src=\"/assets/1._Hasan_and_Trip_-_40-image-1.png\" alt=\"\">\n<img src=\"/assets/1._Hasan_and_Trip_-_40-image-2.png\" alt=\"\">\nWrite All.</p>\n",
      "id": 451
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/2._Vanya_and_GCD_-_40.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/2._Vanya_and_GCD_-_40.html",
      "content": "# 2. Vanya and GCD\n\nCreated Saturday 18 July 2020\n\n![](/assets/2._Vanya_and_GCD_-_40-image-1.png)\n![](/assets/2._Vanya_and_GCD_-_40-image-2.png)\n\n- Write All\n",
      "html": "<h1 id=\"2.-vanya-and-gcd\">2. Vanya and GCD <a class=\"heading-anchor-permalink\" href=\"#2.-vanya-and-gcd\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<p><img src=\"/assets/2._Vanya_and_GCD_-_40-image-1.png\" alt=\"\">\n<img src=\"/assets/2._Vanya_and_GCD_-_40-image-2.png\" alt=\"\"></p>\n<ul>\n<li>Write All</li>\n</ul>\n",
      "id": 452
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/3._Adjacent_Bit_Counts_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/3._Adjacent_Bit_Counts_-_80.html",
      "content": "# 3. Adjacent Bit Counts\n\nCreated Saturday 18 July 2020\n\n![](/assets/3._Adjacent_Bit_Counts_-_80-image-1.png)\n![](/assets/3._Adjacent_Bit_Counts_-_80-image-2.png)\n![](/assets/3._Adjacent_Bit_Counts_-_80-image-3.png)\n\n- Write all\n",
      "html": "<h1 id=\"3.-adjacent-bit-counts\">3. Adjacent Bit Counts <a class=\"heading-anchor-permalink\" href=\"#3.-adjacent-bit-counts\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<p><img src=\"/assets/3._Adjacent_Bit_Counts_-_80-image-1.png\" alt=\"\">\n<img src=\"/assets/3._Adjacent_Bit_Counts_-_80-image-2.png\" alt=\"\">\n<img src=\"/assets/3._Adjacent_Bit_Counts_-_80-image-3.png\" alt=\"\"></p>\n<ul>\n<li>Write all</li>\n</ul>\n",
      "id": 453
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/4._Roy_and_Coin_Boxes_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/4._Roy_and_Coin_Boxes_-_80.html",
      "content": "# 4. Roy and Coin Boxes\n\nCreated Saturday 18 July 2020\n\n![](/assets/4._Roy_and_Coin_Boxes_-_80-image-1.png)\n![](/assets/4._Roy_and_Coin_Boxes_-_80-image-2.png)\n\n- Write All\n",
      "html": "<h1 id=\"4.-roy-and-coin-boxes\">4. Roy and Coin Boxes <a class=\"heading-anchor-permalink\" href=\"#4.-roy-and-coin-boxes\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<p><img src=\"/assets/4._Roy_and_Coin_Boxes_-_80-image-1.png\" alt=\"\">\n<img src=\"/assets/4._Roy_and_Coin_Boxes_-_80-image-2.png\" alt=\"\"></p>\n<ul>\n<li>Write All</li>\n</ul>\n",
      "id": 454
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/5._Jon_Snow_and_his_favourite_number_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/5._Jon_Snow_and_his_favourite_number_-_80.html",
      "content": "# 5. Jon Snow and his favourite number\n\nCreated Saturday 18 July 2020\n\n![](/assets/5._Jon_Snow_and_his_favourite_number_-_80-image-1.png)\n![](/assets/5._Jon_Snow_and_his_favourite_number_-_80-image-2.png)\n![](/assets/5._Jon_Snow_and_his_favourite_number_-_80-image-3.png)\n\n- WAll\n",
      "html": "<h1 id=\"5.-jon-snow-and-his-favourite-number\">5. Jon Snow and his favourite number <a class=\"heading-anchor-permalink\" href=\"#5.-jon-snow-and-his-favourite-number\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<p><img src=\"/assets/5._Jon_Snow_and_his_favourite_number_-_80-image-1.png\" alt=\"\">\n<img src=\"/assets/5._Jon_Snow_and_his_favourite_number_-_80-image-2.png\" alt=\"\">\n<img src=\"/assets/5._Jon_Snow_and_his_favourite_number_-_80-image-3.png\" alt=\"\"></p>\n<ul>\n<li>WAll</li>\n</ul>\n",
      "id": 455
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/6._Alyona_and_Spreadsheet_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/6._Alyona_and_Spreadsheet_-_80.html",
      "content": "# 6. Alyona and Spreadsheet\n\nCreated Saturday 18 July 2020\n\n![](/assets/6._Alyona_and_Spreadsheet_-_80-image-1.png)\n![](/assets/6._Alyona_and_Spreadsheet_-_80-image-2.png)\n![](/assets/6._Alyona_and_Spreadsheet_-_80-image-3.png)\n\n- WAll\n",
      "html": "<h1 id=\"6.-alyona-and-spreadsheet\">6. Alyona and Spreadsheet <a class=\"heading-anchor-permalink\" href=\"#6.-alyona-and-spreadsheet\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<p><img src=\"/assets/6._Alyona_and_Spreadsheet_-_80-image-1.png\" alt=\"\">\n<img src=\"/assets/6._Alyona_and_Spreadsheet_-_80-image-2.png\" alt=\"\">\n<img src=\"/assets/6._Alyona_and_Spreadsheet_-_80-image-3.png\" alt=\"\"></p>\n<ul>\n<li>WAll</li>\n</ul>\n",
      "id": 456
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/7._Angry_Children_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/7._Angry_Children_-_80.html",
      "content": "# 7. Angry Children\n\nCreated Saturday 18 July 2020\n\n![](/assets/7._Angry_Children_-_80-image-1.png)\n![](/assets/7._Angry_Children_-_80-image-2.png)\n![](/assets/7._Angry_Children_-_80-image-3.png)\n\n- Wall\n",
      "html": "<h1 id=\"7.-angry-children\">7. Angry Children <a class=\"heading-anchor-permalink\" href=\"#7.-angry-children\">#</a></h1>\n<p>Created Saturday 18 July 2020</p>\n<p><img src=\"/assets/7._Angry_Children_-_80-image-1.png\" alt=\"\">\n<img src=\"/assets/7._Angry_Children_-_80-image-2.png\" alt=\"\">\n<img src=\"/assets/7._Angry_Children_-_80-image-3.png\" alt=\"\"></p>\n<ul>\n<li>Wall</li>\n</ul>\n",
      "id": 457
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/1._LCS_-_Problem_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/1._LCS_-_Problem_-_80.html",
      "content": "# 1. LCS - Problem\n\nCreated Sunday 19 July 2020\n\n![](/assets/1._LCS_-_Problem_-_80-image-1.png)\n\n```c++\n//main\n#include \"Solution.h\"\n\nint main(){\n\n  string s1;\n  string s2;\n\n  cin >> s1;\n  cin >> s2;\n\n  cout << lcs(s1,s2) << endl;\n}\n\n//your code\n#include<iostream>\n#include<cstring>\nusing namespace std;\n\nint lcs(string s1, string s2){\n  /*  Don't write main().\n   *  Don't read input, it is passed as function argument.\n   *  Return output and don't print it.\n   *  Taking input and printing output is handled automatically.\n   */\n}\n```\n",
      "html": "<h1 id=\"1.-lcs---problem\">1. LCS - Problem <a class=\"heading-anchor-permalink\" href=\"#1.-lcs---problem\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/1._LCS_-_Problem_-_80-image-1.png\" alt=\"\"></p>\n<pre><code class=\"language-c++\">//main\n#include &quot;Solution.h&quot;\n\nint main(){\n\n  string s1;\n  string s2;\n\n  cin &gt;&gt; s1;\n  cin &gt;&gt; s2;\n\n  cout &lt;&lt; lcs(s1,s2) &lt;&lt; endl;\n}\n\n//your code\n#include&lt;iostream&gt;\n#include&lt;cstring&gt;\nusing namespace std;\n\nint lcs(string s1, string s2){\n  /*  Don't write main().\n   *  Don't read input, it is passed as function argument.\n   *  Return output and don't print it.\n   *  Taking input and printing output is handled automatically.\n   */\n}\n</code></pre>\n",
      "id": 458
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/2._Edit_Distance_-_Problem_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/2._Edit_Distance_-_Problem_-_80.html",
      "content": "# 2. Edit Distance - Problem\n\nCreated Sunday 19 July 2020\n\n![](/assets/2._Edit_Distance_-_Problem_-_80-image-1.png)![](/assets/2._Edit_Distance_-_Problem_-_80-image-2.png)\n\n```c++\n//main code\n#include \"Solution.h\"\n\nint main(){\n  string s1;\n  string s2;\n\n  cin >> s1;\n  cin >> s2;\n\n  cout << editDistance(s1,s2) << endl;\n}\n\n// your code\n#include<iostream>\n#include<cstring>\nusing namespace std;\n\nint editDistance(string s1, string s2){\n  /*  Don't write main().\n   *  Don't read input, it is passed as function argument.\n   *  Return output and don't print it.\n   *  Taking input and printing output is handled automatically.\n   */\n}\n```\n",
      "html": "<h1 id=\"2.-edit-distance---problem\">2. Edit Distance - Problem <a class=\"heading-anchor-permalink\" href=\"#2.-edit-distance---problem\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/2._Edit_Distance_-_Problem_-_80-image-1.png\" alt=\"\"><img src=\"/assets/2._Edit_Distance_-_Problem_-_80-image-2.png\" alt=\"\"></p>\n<pre><code class=\"language-c++\">//main code\n#include &quot;Solution.h&quot;\n\nint main(){\n  string s1;\n  string s2;\n\n  cin &gt;&gt; s1;\n  cin &gt;&gt; s2;\n\n  cout &lt;&lt; editDistance(s1,s2) &lt;&lt; endl;\n}\n\n// your code\n#include&lt;iostream&gt;\n#include&lt;cstring&gt;\nusing namespace std;\n\nint editDistance(string s1, string s2){\n  /*  Don't write main().\n   *  Don't read input, it is passed as function argument.\n   *  Return output and don't print it.\n   *  Taking input and printing output is handled automatically.\n   */\n}\n</code></pre>\n",
      "id": 459
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/3._Balika_Vadhu-_Problem_-_120.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/3._Balika_Vadhu-_Problem_-_120.html",
      "content": "# 3. Balika Vadhu- Problem\n\nCreated Sunday 19 July 2020\n\n![](/assets/3._Balika_Vadhu-_Problem_-_120-image-1.png)\n![](/assets/3._Balika_Vadhu-_Problem_-_120-image-2.png)\n\n- WA\n",
      "html": "<h1 id=\"3.-balika-vadhu--problem\">3. Balika Vadhu- Problem <a class=\"heading-anchor-permalink\" href=\"#3.-balika-vadhu--problem\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/3._Balika_Vadhu-_Problem_-_120-image-1.png\" alt=\"\">\n<img src=\"/assets/3._Balika_Vadhu-_Problem_-_120-image-2.png\" alt=\"\"></p>\n<ul>\n<li>WA</li>\n</ul>\n",
      "id": 460
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/4._Knapsnack_-_Problem_-_120.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/4._Knapsnack_-_Problem_-_120.html",
      "content": "# 4. Knapsnack - Problem\n\nCreated Sunday 19 July 2020\n\n![](/assets/4._Knapsnack_-_Problem_-_120-image-1.png)![](/assets/4._Knapsnack_-_Problem_-_120-image-2.png)\n\n```c++\n// main code\n#include<iostream>\nusing namespace std;\n\n#include \"Solution.h\"\n\nint main(){\n  int n;\n  cin >> n;\n  int* weights = new int[n];\n  int* values = new int[n];\n\n  for(int i = 0; i < n; i++){\n    cin >> weights[i];\n  }\n\n  for(int i = 0; i < n; i++){\n    cin >> values[i];\n  }\n\n  int maxWeight;\n  cin >> maxWeight;\n\n  cout << knapsack(weights, values, n, maxWeight);\n}\n\n//your code\nint knapsack(int* weights, int* values, int n, int maxWeight){\n  /* Don't write main().\n   *  Don't read input, it is passed as function argument.\n   *  Return output and don't print it.\n   *  Taking input and printing output is handled automatically.\n  */\n}\n```\n",
      "html": "<h1 id=\"4.-knapsnack---problem\">4. Knapsnack - Problem <a class=\"heading-anchor-permalink\" href=\"#4.-knapsnack---problem\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/4._Knapsnack_-_Problem_-_120-image-1.png\" alt=\"\"><img src=\"/assets/4._Knapsnack_-_Problem_-_120-image-2.png\" alt=\"\"></p>\n<pre><code class=\"language-c++\">// main code\n#include&lt;iostream&gt;\nusing namespace std;\n\n#include &quot;Solution.h&quot;\n\nint main(){\n  int n;\n  cin &gt;&gt; n;\n  int* weights = new int[n];\n  int* values = new int[n];\n\n  for(int i = 0; i &lt; n; i++){\n    cin &gt;&gt; weights[i];\n  }\n\n  for(int i = 0; i &lt; n; i++){\n    cin &gt;&gt; values[i];\n  }\n\n  int maxWeight;\n  cin &gt;&gt; maxWeight;\n\n  cout &lt;&lt; knapsack(weights, values, n, maxWeight);\n}\n\n//your code\nint knapsack(int* weights, int* values, int n, int maxWeight){\n  /* Don't write main().\n   *  Don't read input, it is passed as function argument.\n   *  Return output and don't print it.\n   *  Taking input and printing output is handled automatically.\n  */\n}\n</code></pre>\n",
      "id": 461
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/5._PARTY_-_Problem_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/5._PARTY_-_Problem_-_80.html",
      "content": "# 5. PARTY - Problem\n\nCreated Sunday 19 July 2020\n\n![](/assets/5._PARTY_-_Problem_-_80-image-1.png)![](/assets/5._PARTY_-_Problem_-_80-image-2.png)![](/assets/5._PARTY_-_Problem_-_80-image-3.png)\n\n- WA\n",
      "html": "<h1 id=\"5.-party---problem\">5. PARTY - Problem <a class=\"heading-anchor-permalink\" href=\"#5.-party---problem\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/5._PARTY_-_Problem_-_80-image-1.png\" alt=\"\"><img src=\"/assets/5._PARTY_-_Problem_-_80-image-2.png\" alt=\"\"><img src=\"/assets/5._PARTY_-_Problem_-_80-image-3.png\" alt=\"\"></p>\n<ul>\n<li>WA</li>\n</ul>\n",
      "id": 462
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/6._Subset_Sum_-_Problem_-_40.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/6._Subset_Sum_-_Problem_-_40.html",
      "content": "# 6. Subset Sum - Problem\n\nCreated Sunday 19 July 2020\n\n![](/assets/6._Subset_Sum_-_Problem_-_40-image-1.png)\n\n- WA\n",
      "html": "<h1 id=\"6.-subset-sum---problem\">6. Subset Sum - Problem <a class=\"heading-anchor-permalink\" href=\"#6.-subset-sum---problem\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/6._Subset_Sum_-_Problem_-_40-image-1.png\" alt=\"\"></p>\n<ul>\n<li>WA</li>\n</ul>\n",
      "id": 463
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/1._Miser_Man_-_40.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/1._Miser_Man_-_40.html",
      "content": "# 1. Miser Man\n\nCreated Sunday 19 July 2020\n\n![](/assets/1._Miser_Man_-_40-image-1.png)\n![](/assets/1._Miser_Man_-_40-image-2.png)\n\n- WA\n",
      "html": "<h1 id=\"1.-miser-man\">1. Miser Man <a class=\"heading-anchor-permalink\" href=\"#1.-miser-man\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/1._Miser_Man_-_40-image-1.png\" alt=\"\">\n<img src=\"/assets/1._Miser_Man_-_40-image-2.png\" alt=\"\"></p>\n<ul>\n<li>WA</li>\n</ul>\n",
      "id": 464
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/2._Trader_Profit_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/2._Trader_Profit_-_80.html",
      "content": "# 2. Trader Profit\n\nCreated Sunday 19 July 2020\n\n![](/assets/2._Trader_Profit_-_80-image-1.png)\n![](/assets/2._Trader_Profit_-_80-image-2.png)\n![](/assets/2._Trader_Profit_-_80-image-3.png)\n\n- WA\n",
      "html": "<h1 id=\"2.-trader-profit\">2. Trader Profit <a class=\"heading-anchor-permalink\" href=\"#2.-trader-profit\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/2._Trader_Profit_-_80-image-1.png\" alt=\"\">\n<img src=\"/assets/2._Trader_Profit_-_80-image-2.png\" alt=\"\">\n<img src=\"/assets/2._Trader_Profit_-_80-image-3.png\" alt=\"\"></p>\n<ul>\n<li>WA</li>\n</ul>\n",
      "id": 465
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/3._Charlie_and_Pilots_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/3._Charlie_and_Pilots_-_80.html",
      "content": "# 3. Charlie and Pilots\n\nCreated Sunday 19 July 2020\n\n![](/assets/3._Charlie_and_Pilots_-_80-image-1.png)\n![](/assets/3._Charlie_and_Pilots_-_80-image-2.png)\n\n- WA\n",
      "html": "<h1 id=\"3.-charlie-and-pilots\">3. Charlie and Pilots <a class=\"heading-anchor-permalink\" href=\"#3.-charlie-and-pilots\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/3._Charlie_and_Pilots_-_80-image-1.png\" alt=\"\">\n<img src=\"/assets/3._Charlie_and_Pilots_-_80-image-2.png\" alt=\"\"></p>\n<ul>\n<li>WA</li>\n</ul>\n",
      "id": 466
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/4._Square_Brackets_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/4._Square_Brackets_-_80.html",
      "content": "# 4. Square Brackets\n\nCreated Sunday 19 July 2020\n\n![](/assets/4._Square_Brackets_-_80-image-1.png)\n![](/assets/4._Square_Brackets_-_80-image-2.png)\n![](/assets/4._Square_Brackets_-_80-image-3.png)\n\n- WA\n",
      "html": "<h1 id=\"4.-square-brackets\">4. Square Brackets <a class=\"heading-anchor-permalink\" href=\"#4.-square-brackets\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/4._Square_Brackets_-_80-image-1.png\" alt=\"\">\n<img src=\"/assets/4._Square_Brackets_-_80-image-2.png\" alt=\"\">\n<img src=\"/assets/4._Square_Brackets_-_80-image-3.png\" alt=\"\"></p>\n<ul>\n<li>WA</li>\n</ul>\n",
      "id": 467
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/5._Distinct_Subsequences_-_120.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/5._Distinct_Subsequences_-_120.html",
      "content": "# 5. Distinct Subsequences\n\nCreated Sunday 19 July 2020\n\n![](/assets/5._Distinct_Subsequences_-_120-image-1.png)\n![](/assets/5._Distinct_Subsequences_-_120-image-2.png)\n\n- WA\n",
      "html": "<h1 id=\"5.-distinct-subsequences\">5. Distinct Subsequences <a class=\"heading-anchor-permalink\" href=\"#5.-distinct-subsequences\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/5._Distinct_Subsequences_-_120-image-1.png\" alt=\"\">\n<img src=\"/assets/5._Distinct_Subsequences_-_120-image-2.png\" alt=\"\"></p>\n<ul>\n<li>WA</li>\n</ul>\n",
      "id": 468
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/6._Smallest_Super-Sequence_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/6._Smallest_Super-Sequence_-_80.html",
      "content": "# 6. Smallest Super-Sequence\n\nCreated Sunday 19 July 2020\n\n![](/assets/6._Smallest_Super-Sequence_-_80-image-1.png)\n![](/assets/6._Smallest_Super-Sequence_-_80-image-2.png)\n\n```c++\n// main\n#include<iostream>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\n\n#include \"solution.h\"\n\nint main()\n{\n    char str1[50], str2[50];\n\n    cin>>str1;\n    cin>>str2;\n\n    int len1 = strlen(str1);\n    int len2 = strlen(str2);\n    int min_len = smallestSuperSequence(str1, len1, str2, len2);\n\n    cout<<min_len;\n    return 0;\n}\n\n// your code\nint smallestSuperSequence(char str1[], int len1, char str2[], int len2) {\n  /* Don't write main().\n     Don't read input, it is passed as function argument.\n     Return output and don't print it.\n     Taking input and printing output is handled automatically.\n  */\n}\n```\n",
      "html": "<h1 id=\"6.-smallest-super-sequence\">6. Smallest Super-Sequence <a class=\"heading-anchor-permalink\" href=\"#6.-smallest-super-sequence\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/6._Smallest_Super-Sequence_-_80-image-1.png\" alt=\"\">\n<img src=\"/assets/6._Smallest_Super-Sequence_-_80-image-2.png\" alt=\"\"></p>\n<pre><code class=\"language-c++\">// main\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;cstring&gt;\nusing namespace std;\n\n#include &quot;solution.h&quot;\n\nint main()\n{\n    char str1[50], str2[50];\n\n    cin&gt;&gt;str1;\n    cin&gt;&gt;str2;\n\n    int len1 = strlen(str1);\n    int len2 = strlen(str2);\n    int min_len = smallestSuperSequence(str1, len1, str2, len2);\n\n    cout&lt;&lt;min_len;\n    return 0;\n}\n\n// your code\nint smallestSuperSequence(char str1[], int len1, char str2[], int len2) {\n  /* Don't write main().\n     Don't read input, it is passed as function argument.\n     Return output and don't print it.\n     Taking input and printing output is handled automatically.\n  */\n}\n</code></pre>\n",
      "id": 469
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/7._Shortest_Subsequence_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/7._Shortest_Subsequence_-_80.html",
      "content": "# 7. Shortest Subsequence\n\nCreated Sunday 19 July 2020\n\n![](/assets/7._Shortest_Subsequence_-_80-image-1.png)\n\n```c++\n// main\n#include<bits/stdc++.h>\nusing namespace std;\n\n#include \"solution.h\"\n\nint main()\n{\n\tstring S,V;\n\tcin>>S>>V;\n\tcout<<solve(S,V)<<endl;\n\treturn 0;\n}\n\n//yourc code\nint smallestSuperSequence(char str1[], int len1, char str2[], int len2) {\n  /* Don't write main().\n     Don't read input, it is passed as function argument.\n     Return output and don't print it.\n     Taking input and printing output is handled automatically.\n  */\n}\n```\n",
      "html": "<h1 id=\"7.-shortest-subsequence\">7. Shortest Subsequence <a class=\"heading-anchor-permalink\" href=\"#7.-shortest-subsequence\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/7._Shortest_Subsequence_-_80-image-1.png\" alt=\"\"></p>\n<pre><code class=\"language-c++\">// main\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\n#include &quot;solution.h&quot;\n\nint main()\n{\n\tstring S,V;\n\tcin&gt;&gt;S&gt;&gt;V;\n\tcout&lt;&lt;solve(S,V)&lt;&lt;endl;\n\treturn 0;\n}\n\n//yourc code\nint smallestSuperSequence(char str1[], int len1, char str2[], int len2) {\n  /* Don't write main().\n     Don't read input, it is passed as function argument.\n     Return output and don't print it.\n     Taking input and printing output is handled automatically.\n  */\n}\n</code></pre>\n",
      "id": 470
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/0_index.html",
      "content": "# 3. DP & Bitmasking\nCreated Monday 22 June 2020\n\n@ToBeDone\n\n",
      "html": "<h1 id=\"3.-dp-%26-bitmasking\">3. DP &amp; Bitmasking <a class=\"heading-anchor-permalink\" href=\"#3.-dp-%26-bitmasking\">#</a></h1>\n<p>Created Monday 22 June 2020</p>\n<p>@ToBeDone</p>\n",
      "id": 471
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/1._What_is_bitmasking.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/1._What_is_bitmasking.html",
      "content": "# 1. What is bitmasking\n\nCreated Tuesday 28 July 2020\n\nMask - A collect of bits which represents something.\ne.g subsets of elements of an array. Represent absence/presence by a bit. There are 2^n^ subsets.\n![](/assets/1._What_is_bitmasking-image-1.png)\n\n- Bitmasking means representing things as binary numbers.\n",
      "html": "<h1 id=\"1.-what-is-bitmasking\">1. What is bitmasking <a class=\"heading-anchor-permalink\" href=\"#1.-what-is-bitmasking\">#</a></h1>\n<p>Created Tuesday 28 July 2020</p>\n<p>Mask - A collect of bits which represents something.\ne.g subsets of elements of an array. Represent absence/presence by a bit. There are 2^n^ subsets.\n<img src=\"/assets/1._What_is_bitmasking-image-1.png\" alt=\"\"></p>\n<ul>\n<li>Bitmasking means representing things as binary numbers.</li>\n</ul>\n",
      "id": 472
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/2._More_about_Bitmasking.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/2._More_about_Bitmasking.html",
      "content": "# 2. More about Bitmasking\n\nCreated Tuesday 28 July 2020\n\nSuppose we are given this array:![](/assets/2._More_about_Bitmasking-image-1.png),we need to return the subsets which sum to k.\n\n- Naive way is to generate the subsets, using recursion.\n- But if we use bitmasking, we already have all our subsets. We can do **for(i=0; i < (1<<n)-1; i++)** and get our value, this requires no extra memory, but the time complexity is the same(although constant factor is much smaller). Check ith bit is also very easy, (mask & 1<<i==1)\n- We avoided recursion and did it iteratively. Complexity n.2^n^, works if n<=16.\n\n![](/assets/2._More_about_Bitmasking-image-2.png)\n\n- The real power is comes when we use Dynamic Programming with Bitmasking.\n",
      "html": "<h1 id=\"2.-more-about-bitmasking\">2. More about Bitmasking <a class=\"heading-anchor-permalink\" href=\"#2.-more-about-bitmasking\">#</a></h1>\n<p>Created Tuesday 28 July 2020</p>\n<p>Suppose we are given this array:<img src=\"/assets/2._More_about_Bitmasking-image-1.png\" alt=\"\">,we need to return the subsets which sum to k.</p>\n<ul>\n<li>Naive way is to generate the subsets, using recursion.</li>\n<li>But if we use bitmasking, we already have all our subsets. We can do <strong>for(i=0; i &lt; (1&lt;&lt;n)-1; i++)</strong> and get our value, this requires no extra memory, but the time complexity is the same(although constant factor is much smaller). Check ith bit is also very easy, (mask &amp; 1&lt;&lt;i==1)</li>\n<li>We avoided recursion and did it iteratively. Complexity n.2^n^, works if n&lt;=16.</li>\n</ul>\n<p><img src=\"/assets/2._More_about_Bitmasking-image-2.png\" alt=\"\"></p>\n<ul>\n<li>The real power is comes when we use Dynamic Programming with Bitmasking.</li>\n</ul>\n",
      "id": 473
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/3._Dynamic_Programming_with_Bitmasking.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/3._Dynamic_Programming_with_Bitmasking.html",
      "content": "# 3. Dynamic Programming with Bitmasking\n\nCreated Tuesday 28 July 2020\n\nQ) We have n people and given n jobs. we are given a matrix in which the time for the nth person in doing n job is written. Now we have to do all the n jobs. Each person can be assigned to one job, and each job can be assigned to one person. We need to do this in the minimum time possible. We solve this using DP and bitmasking.\nA) Our mask consists of n bits, with the person and the depth of the tree being the job and the person being 1 if doing the job.\n![](/assets/3._Dynamic_Programming_with_Bitmasking-image-1.png)\n\n- We are having overlapping sub-problems. We can solve this by keeping a count of numbers and heights.\n",
      "html": "<h1 id=\"3.-dynamic-programming-with-bitmasking\">3. Dynamic Programming with Bitmasking <a class=\"heading-anchor-permalink\" href=\"#3.-dynamic-programming-with-bitmasking\">#</a></h1>\n<p>Created Tuesday 28 July 2020</p>\n<p>Q) We have n people and given n jobs. we are given a matrix in which the time for the nth person in doing n job is written. Now we have to do all the n jobs. Each person can be assigned to one job, and each job can be assigned to one person. We need to do this in the minimum time possible. We solve this using DP and bitmasking.\nA) Our mask consists of n bits, with the person and the depth of the tree being the job and the person being 1 if doing the job.\n<img src=\"/assets/3._Dynamic_Programming_with_Bitmasking-image-1.png\" alt=\"\"></p>\n<ul>\n<li>We are having overlapping sub-problems. We can solve this by keeping a count of numbers and heights.</li>\n</ul>\n",
      "id": 474
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/4._Code_Memoization_and_Recursion/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/4._Code_Memoization_and_Recursion/0_index.html",
      "content": "# 4. Code Memoization and Recursion\nCreated Tuesday 28 July 2020\n\nWe are going to code minimum cost jobs.\n\n",
      "html": "<h1 id=\"4.-code-memoization-and-recursion\">4. Code Memoization and Recursion <a class=\"heading-anchor-permalink\" href=\"#4.-code-memoization-and-recursion\">#</a></h1>\n<p>Created Tuesday 28 July 2020</p>\n<p>We are going to code minimum cost jobs.</p>\n",
      "id": 475
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/1._Introduction_to_Greedy_technique/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/1._Introduction_to_Greedy_technique/0_index.html",
      "content": "# 1. Introduction to Greedy technique\n\nCreated Sunday 19 July 2020\n\n- It is technique, not an algorithm.\n- What is it? - We try to optimize myopically at each step.\n\n![](/assets/1._Introduction_to_Greedy_technique-image-1.png)\n\n- It is applicable only if the next steps don't depend on the current step.\n- If there is a dependency, then it is a dynamic programming problem.\n\n- It is applicable in certain scenarios, and gives the best solution.\n- The requirements for greedy solution is:\n\n1. Optimal substructure - Choosing the optimal path for each step gives us the optimal answer to the whole problem.\n2. Greedy workout - Greedy technique really works.\n\nExamples using:\n\n1. Sorting\n2. Find maximum\n3. Interval problems\n\n---\n\nExample: We have some activities with their starting and ending time given. We need to choose activities such that number of activities chosen is maximum.\n**Greedy Hunch**: Select the activity that ends the quickest, as this will leave room for the activities coming up ahead. And this works.\n",
      "html": "<h1 id=\"1.-introduction-to-greedy-technique\">1. Introduction to Greedy technique <a class=\"heading-anchor-permalink\" href=\"#1.-introduction-to-greedy-technique\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<ul>\n<li>It is technique, not an algorithm.</li>\n<li>What is it? - We try to optimize myopically at each step.</li>\n</ul>\n<p><img src=\"/assets/1._Introduction_to_Greedy_technique-image-1.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>It is applicable only if the next steps don’t depend on the current step.</p>\n</li>\n<li>\n<p>If there is a dependency, then it is a dynamic programming problem.</p>\n</li>\n<li>\n<p>It is applicable in certain scenarios, and gives the best solution.</p>\n</li>\n<li>\n<p>The requirements for greedy solution is:</p>\n</li>\n</ul>\n<ol>\n<li>Optimal substructure - Choosing the optimal path for each step gives us the optimal answer to the whole problem.</li>\n<li>Greedy workout - Greedy technique really works.</li>\n</ol>\n<p>Examples using:</p>\n<ol>\n<li>Sorting</li>\n<li>Find maximum</li>\n<li>Interval problems</li>\n</ol>\n<hr>\n<p>Example: We have some activities with their starting and ending time given. We need to choose activities such that number of activities chosen is maximum.\n<strong>Greedy Hunch</strong>: Select the activity that ends the quickest, as this will leave room for the activities coming up ahead. And this works.</p>\n",
      "id": 476
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/2._Minimum_Absolute_difference_in_an_array.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/2._Minimum_Absolute_difference_in_an_array.html",
      "content": "# 2. Minimum Absolute difference in an array\nCreated Sunday 19 July 2020\n\n\n* Sort the array. Now consecutive difference is the minimum difference if any.\n* This creates an optimal substructure - going all the way from left to right.\n* Greedy works out - minimum is the minimum consecutive difference.\n\n\n",
      "html": "<h1 id=\"2.-minimum-absolute-difference-in-an-array\">2. Minimum Absolute difference in an array <a class=\"heading-anchor-permalink\" href=\"#2.-minimum-absolute-difference-in-an-array\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<ul>\n<li>Sort the array. Now consecutive difference is the minimum difference if any.</li>\n<li>This creates an optimal substructure - going all the way from left to right.</li>\n<li>Greedy works out - minimum is the minimum consecutive difference.</li>\n</ul>\n",
      "id": 477
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_1/1._Min._Absolute_Difference_In_Array_-_40.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_1/1._Min._Absolute_Difference_In_Array_-_40.html",
      "content": "# 1. Min. Absolute Difference In Array\n\nCreated Sunday 19 July 2020\n\n![](/assets/1._Min._Absolute_Difference_In_Array_-_40-image-1.png)\n\n```c++\n// main\n#include <iostream>\n#include \"solution.h\"\nusing namespace std;\n\nint main() {\n\tint size;\n\tcin >> size;\n\n\tint *input = new int[1 + size];\n\n\tfor(int i = 0; i < size; i++)\n\t\tcin >> input[i];\n\n\tcout<< minAbsoluteDiff(input,size) << endl;\n\treturn 0;\n}\n\n//your code\n// arr - input array\n// n - size of array\n\nint minAbsoluteDiff(int arr[], int n) {\n    /* Don't write main().\n     * Don't read input, it is passed as function argument.\n     * Return output and don't print it.\n     * Taking input and printing output is handled automatically.\n     */\n}\n```\n",
      "html": "<h1 id=\"1.-min.-absolute-difference-in-array\">1. Min. Absolute Difference In Array <a class=\"heading-anchor-permalink\" href=\"#1.-min.-absolute-difference-in-array\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/1._Min._Absolute_Difference_In_Array_-_40-image-1.png\" alt=\"\"></p>\n<pre><code class=\"language-c++\">// main\n#include &lt;iostream&gt;\n#include &quot;solution.h&quot;\nusing namespace std;\n\nint main() {\n\tint size;\n\tcin &gt;&gt; size;\n\n\tint *input = new int[1 + size];\n\n\tfor(int i = 0; i &lt; size; i++)\n\t\tcin &gt;&gt; input[i];\n\n\tcout&lt;&lt; minAbsoluteDiff(input,size) &lt;&lt; endl;\n\treturn 0;\n}\n\n//your code\n// arr - input array\n// n - size of array\n\nint minAbsoluteDiff(int arr[], int n) {\n    /* Don't write main().\n     * Don't read input, it is passed as function argument.\n     * Return output and don't print it.\n     * Taking input and printing output is handled automatically.\n     */\n}\n</code></pre>\n",
      "id": 478
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_1/2._Nikunj_and_Donuts_-_40.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_1/2._Nikunj_and_Donuts_-_40.html",
      "content": "# 2. Nikunj and Donuts\n\nCreated Sunday 19 July 2020\n\n![](/assets/2._Nikunj_and_Donuts_-_40-image-1.png)![](/assets/2._Nikunj_and_Donuts_-_40-image-2.png)\n\n- WA\n\nSolution: Sort the array. Eat the largest cake, first, mult=1. Then the second largest mult=2 etc. This will solve the problem. Because we can only control j and not i.\n",
      "html": "<h1 id=\"2.-nikunj-and-donuts\">2. Nikunj and Donuts <a class=\"heading-anchor-permalink\" href=\"#2.-nikunj-and-donuts\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/2._Nikunj_and_Donuts_-_40-image-1.png\" alt=\"\"><img src=\"/assets/2._Nikunj_and_Donuts_-_40-image-2.png\" alt=\"\"></p>\n<ul>\n<li>WA</li>\n</ul>\n<p>Solution: Sort the array. Eat the largest cake, first, mult=1. Then the second largest mult=2 etc. This will solve the problem. Because we can only control j and not i.</p>\n",
      "id": 479
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_1/3._Activity_Selection_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_1/3._Activity_Selection_-_80.html",
      "content": "# 3. Activity Selection\n\nCreated Sunday 19 July 2020\n\n![](/assets/3._Activity_Selection_-_80-image-1.png)![](/assets/3._Activity_Selection_-_80-image-2.png)\n\n- WA\n\nSort the activities w.r.t ending time.\nPick the activities which end early. This creates an optimal substructure.\nGreedy works because we allow for other activities to take place, most activities are available in our approach.\n",
      "html": "<h1 id=\"3.-activity-selection\">3. Activity Selection <a class=\"heading-anchor-permalink\" href=\"#3.-activity-selection\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/3._Activity_Selection_-_80-image-1.png\" alt=\"\"><img src=\"/assets/3._Activity_Selection_-_80-image-2.png\" alt=\"\"></p>\n<ul>\n<li>WA</li>\n</ul>\n<p>Sort the activities w.r.t ending time.\nPick the activities which end early. This creates an optimal substructure.\nGreedy works because we allow for other activities to take place, most activities are available in our approach.</p>\n",
      "id": 480
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_1/4._Fractional_Knapsack_-_40.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_1/4._Fractional_Knapsack_-_40.html",
      "content": "# 4. Fractional Knapsack\n\nCreated Sunday 19 July 2020\n\n![](/assets/4._Fractional_Knapsack_-_40-image-1.png)![](/assets/4._Fractional_Knapsack_-_40-image-2.png)\n\n- WA\n\nPick the items with highest profit/weight ratio.\nOptimal substructure exists.\nGreedy works because we allow more space to be there even after picking the maximum values.\n",
      "html": "<h1 id=\"4.-fractional-knapsack\">4. Fractional Knapsack <a class=\"heading-anchor-permalink\" href=\"#4.-fractional-knapsack\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/4._Fractional_Knapsack_-_40-image-1.png\" alt=\"\"><img src=\"/assets/4._Fractional_Knapsack_-_40-image-2.png\" alt=\"\"></p>\n<ul>\n<li>WA</li>\n</ul>\n<p>Pick the items with highest profit/weight ratio.\nOptimal substructure exists.\nGreedy works because we allow more space to be there even after picking the maximum values.</p>\n",
      "id": 481
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_1/5._Weighted_Job_Scheduling_-_80.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_1/5._Weighted_Job_Scheduling_-_80.html",
      "content": "# 5. Weighted Job Scheduling\n\nCreated Sunday 19 July 2020\n\n![](/assets/5._Weighted_Job_Scheduling_-_80-image-1.png)![](/assets/5._Weighted_Job_Scheduling_-_80-image-2.png)\n\n- WA\n\nSolution: Sort the array based on finishing time.\nNext apply DP and find which jobs will give the maximum profit using binary search.\n",
      "html": "<h1 id=\"5.-weighted-job-scheduling\">5. Weighted Job Scheduling <a class=\"heading-anchor-permalink\" href=\"#5.-weighted-job-scheduling\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/5._Weighted_Job_Scheduling_-_80-image-1.png\" alt=\"\"><img src=\"/assets/5._Weighted_Job_Scheduling_-_80-image-2.png\" alt=\"\"></p>\n<ul>\n<li>WA</li>\n</ul>\n<p>Solution: Sort the array based on finishing time.\nNext apply DP and find which jobs will give the maximum profit using binary search.</p>\n",
      "id": 482
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_2/1._Perimeter_with_conditions_-_40.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_2/1._Perimeter_with_conditions_-_40.html",
      "content": "# 1. Perimeter with conditions\n\nCreated Sunday 19 July 2020\n\n![](/assets/1._Perimeter_with_conditions_-_40-image-1.png)\n![](/assets/1._Perimeter_with_conditions_-_40-image-2.png)\n\n- WA\n",
      "html": "<h1 id=\"1.-perimeter-with-conditions\">1. Perimeter with conditions <a class=\"heading-anchor-permalink\" href=\"#1.-perimeter-with-conditions\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/1._Perimeter_with_conditions_-_40-image-1.png\" alt=\"\">\n<img src=\"/assets/1._Perimeter_with_conditions_-_40-image-2.png\" alt=\"\"></p>\n<ul>\n<li>WA</li>\n</ul>\n",
      "id": 483
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_2/2._Problem_discussion_-_40.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_2/2._Problem_discussion_-_40.html",
      "content": "# 2. Problem discussion\n\nCreated Sunday 19 July 2020\n\n![](/assets/2._Problem_discussion_-_40-image-1.png)\n![](/assets/2._Problem_discussion_-_40-image-2.png)\n\n- WA\n",
      "html": "<h1 id=\"2.-problem-discussion\">2. Problem discussion <a class=\"heading-anchor-permalink\" href=\"#2.-problem-discussion\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/2._Problem_discussion_-_40-image-1.png\" alt=\"\">\n<img src=\"/assets/2._Problem_discussion_-_40-image-2.png\" alt=\"\"></p>\n<ul>\n<li>WA</li>\n</ul>\n",
      "id": 484
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_2/3._Winning_Lottery_-_40.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/7._Greedy_Method/Assignment_2/3._Winning_Lottery_-_40.html",
      "content": "# 3. Winning Lottery\n\nCreated Sunday 19 July 2020\n\n![](/assets/3._Winning_Lottery_-_40-image-1.png)\n![](/assets/3._Winning_Lottery_-_40-image-2.png)\n\n- WA\n",
      "html": "<h1 id=\"3.-winning-lottery\">3. Winning Lottery <a class=\"heading-anchor-permalink\" href=\"#3.-winning-lottery\">#</a></h1>\n<p>Created Sunday 19 July 2020</p>\n<p><img src=\"/assets/3._Winning_Lottery_-_40-image-1.png\" alt=\"\">\n<img src=\"/assets/3._Winning_Lottery_-_40-image-2.png\" alt=\"\"></p>\n<ul>\n<li>WA</li>\n</ul>\n",
      "id": 485
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/1._Connected_Components.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/1._Connected_Components.html",
      "content": "# 1. Connected Components\nCreated Sunday 26 July 2020\n\n\n* We return a sets of connected vertices.\n* We are using adjacency list.\n* Easy to do.\n\n\n",
      "html": "<h1 id=\"1.-connected-components\">1. Connected Components <a class=\"heading-anchor-permalink\" href=\"#1.-connected-components\">#</a></h1>\n<p>Created Sunday 26 July 2020</p>\n<ul>\n<li>We return a sets of connected vertices.</li>\n<li>We are using adjacency list.</li>\n<li>Easy to do.</li>\n</ul>\n",
      "id": 486
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/2._Permutation_Swaps.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/2._Permutation_Swaps.html",
      "content": "# 2. Permutation Swaps\nCreated Sunday 26 July 2020\n\n**Question**\n\n* We are given a permutation P, of numbers from 1 to n. Some of the places can be flipped, as many times as required.\n* We are given another permutation Q. Same rules.\n* We need to answer if P ↔\tQ by doing flips.\n\n\n*****\n\n**Answer**\n\n1. Change the representation from string to graph.\n2. If all components are connected, then equivalence may be possible.\n3. But if the components are disjoint, then equivalence is impossible.\n4. So we'll find the connected components and show that they are equivalent to the other permutations, this way we prove that the graphs are equivalent.\n\n\n",
      "html": "<h1 id=\"2.-permutation-swaps\">2. Permutation Swaps <a class=\"heading-anchor-permalink\" href=\"#2.-permutation-swaps\">#</a></h1>\n<p>Created Sunday 26 July 2020</p>\n<p><strong>Question</strong></p>\n<ul>\n<li>We are given a permutation P, of numbers from 1 to n. Some of the places can be flipped, as many times as required.</li>\n<li>We are given another permutation Q. Same rules.</li>\n<li>We need to answer if P ↔\tQ by doing flips.</li>\n</ul>\n<hr>\n<p><strong>Answer</strong></p>\n<ol>\n<li>Change the representation from string to graph.</li>\n<li>If all components are connected, then equivalence may be possible.</li>\n<li>But if the components are disjoint, then equivalence is impossible.</li>\n<li>So we’ll find the connected components and show that they are equivalent to the other permutations, this way we prove that the graphs are equivalent.</li>\n</ol>\n",
      "id": 487
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/3._Connected_Horses.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/3._Connected_Horses.html",
      "content": "# 3. Connected Horses\nCreated Sunday 26 July 2020\n\n**Question**\n\n* We are given a chessboard with horses on it.\n* Using Euclid equivalence principle, we can say that two horses are changeable. If they share a 3rd common equivalent horse.\n\n\n*****\n\n**Answer**\n\n* Change representation from chessboard to graph.\n* Return component size factorial.\n\n\n",
      "html": "<h1 id=\"3.-connected-horses\">3. Connected Horses <a class=\"heading-anchor-permalink\" href=\"#3.-connected-horses\">#</a></h1>\n<p>Created Sunday 26 July 2020</p>\n<p><strong>Question</strong></p>\n<ul>\n<li>We are given a chessboard with horses on it.</li>\n<li>Using Euclid equivalence principle, we can say that two horses are changeable. If they share a 3rd common equivalent horse.</li>\n</ul>\n<hr>\n<p><strong>Answer</strong></p>\n<ul>\n<li>Change representation from chessboard to graph.</li>\n<li>Return component size factorial.</li>\n</ul>\n",
      "id": 488
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/4._Strongly_connected_components.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/4._Strongly_connected_components.html",
      "content": "# 4. Strongly connected components\n\nCreated Sunday 26 July 2020\n\n- A directed graph is said to be **strongly connected** if there's a path between all pairs of vertices.\n- strong connectedness is valid only for directed graphs.\n\n**Strongly connected component(SCC)**\nAn SCC is a **maximal strongly connected subgraph**.\n\nIn other words: A connected subgraph where all pairs of vertices have a path between them, such that no larger(i.e containing more vectices) connected subgraph is possible containing the same vertices.\n\nSCCs can be thought of as **self-contained** **cycles**.\n\nExample of SCCs\n![](/assets/4._Strongly_connected_components-image-1.png)\n**Note**\n\n- A single vertex is considered strongly connected.\n- Each strongly connected component is actually a DAG.\n\n---\n\n17. How to find SCCs for a give graph?\n18. Kosaraju's algorithm - Returns strongly connected components of a directed graph.\n\n### Kosaraju's Algorithm\n\n1. Perform DFS and store completely visited vertex in a stack.\n2. While doing DFS, [transpose](https://en.wikipedia.org/wiki/Transpose_graph) the graph(All in-edges become out-edges and vice-versa).\n3. Perform DFS w.r.t the stack. A new component is created for a popped unvisited element, else just popped.\n\nDone!\n\n---\n\n### How does Kosaraju's algorithm work?\n\n1. In our stack, top will be filled by vertices from a component with an outgoing edge. This is for sure going to happen. Property of DFS and our stack selection.\n2. In the transpose the outgoing will become in-edges. So the components(with vertex near the top) will be caught. The other component vertices are now open. But all others are now visited. The components are therefore fully isolated.\n\n![](/assets/4._Strongly_connected_components-image-2.png)\n![](/assets/4._Strongly_connected_components-image-3.png)\n![](/assets/4._Strongly_connected_components-image-4.png)\n\n---\n\nT.C → Same as DFS → O(V)\n",
      "html": "<h1 id=\"4.-strongly-connected-components\">4. Strongly connected components <a class=\"heading-anchor-permalink\" href=\"#4.-strongly-connected-components\">#</a></h1>\n<p>Created Sunday 26 July 2020</p>\n<ul>\n<li>A directed graph is said to be <strong>strongly connected</strong> if there’s a path between all pairs of vertices.</li>\n<li>strong connectedness is valid only for directed graphs.</li>\n</ul>\n<p><strong>Strongly connected component(SCC)</strong>\nAn SCC is a <strong>maximal strongly connected subgraph</strong>.</p>\n<p>In other words: A connected subgraph where all pairs of vertices have a path between them, such that no larger(i.e containing more vectices) connected subgraph is possible containing the same vertices.</p>\n<p>SCCs can be thought of as <strong>self-contained</strong> <strong>cycles</strong>.</p>\n<p>Example of SCCs\n<img src=\"/assets/4._Strongly_connected_components-image-1.png\" alt=\"\">\n<strong>Note</strong></p>\n<ul>\n<li>A single vertex is considered strongly connected.</li>\n<li>Each strongly connected component is actually a DAG.</li>\n</ul>\n<hr>\n<ol start=\"17\">\n<li>How to find SCCs for a give graph?</li>\n<li>Kosaraju’s algorithm - Returns strongly connected components of a directed graph.</li>\n</ol>\n<h3 id=\"kosaraju%E2%80%99s-algorithm\">Kosaraju’s Algorithm <a class=\"heading-anchor-permalink\" href=\"#kosaraju%E2%80%99s-algorithm\">#</a></h3>\n<ol>\n<li>Perform DFS and store completely visited vertex in a stack.</li>\n<li>While doing DFS, <a href=\"https://en.wikipedia.org/wiki/Transpose_graph\">transpose</a> the graph(All in-edges become out-edges and vice-versa).</li>\n<li>Perform DFS w.r.t the stack. A new component is created for a popped unvisited element, else just popped.</li>\n</ol>\n<p>Done!</p>\n<hr>\n<h3 id=\"how-does-kosaraju%E2%80%99s-algorithm-work%3F\">How does Kosaraju’s algorithm work? <a class=\"heading-anchor-permalink\" href=\"#how-does-kosaraju%E2%80%99s-algorithm-work%3F\">#</a></h3>\n<ol>\n<li>In our stack, top will be filled by vertices from a component with an outgoing edge. This is for sure going to happen. Property of DFS and our stack selection.</li>\n<li>In the transpose the outgoing will become in-edges. So the components(with vertex near the top) will be caught. The other component vertices are now open. But all others are now visited. The components are therefore fully isolated.</li>\n</ol>\n<p><img src=\"/assets/4._Strongly_connected_components-image-2.png\" alt=\"\">\n<img src=\"/assets/4._Strongly_connected_components-image-3.png\" alt=\"\">\n<img src=\"/assets/4._Strongly_connected_components-image-4.png\" alt=\"\"></p>\n<hr>\n<p>T.C → Same as DFS → O(V)</p>\n",
      "id": 489
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/5._Bottom_of_the_graph.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/5._Bottom_of_the_graph.html",
      "content": "# 5. Bottom of the graph\n\nCreated Monday 27 July 2020\n\n- Bottom of the graph - All vertices v such that if a path from v to w is present, then a path from w to v is also present. It may be that w is inexistent.\n\n![](/assets/5._Bottom_of_the_graph-image-1.png)\nHere only def is a bottom of the graph.\nBottom of the graph = SCC without outgoing edge.\n",
      "html": "<h1 id=\"5.-bottom-of-the-graph\">5. Bottom of the graph <a class=\"heading-anchor-permalink\" href=\"#5.-bottom-of-the-graph\">#</a></h1>\n<p>Created Monday 27 July 2020</p>\n<ul>\n<li>Bottom of the graph - All vertices v such that if a path from v to w is present, then a path from w to v is also present. It may be that w is inexistent.</li>\n</ul>\n<p><img src=\"/assets/5._Bottom_of_the_graph-image-1.png\" alt=\"\">\nHere only def is a bottom of the graph.\nBottom of the graph = SCC without outgoing edge.</p>\n",
      "id": 490
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/6._Bipartite_Graph.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/6._Bipartite_Graph.html",
      "content": "# 6. Bipartite Graph\n\nCreated Monday 27 July 2020\n\nWhen a graph can be divided into two parts such that all edges are between the two parts.\n![](/assets/6._Bipartite_Graph-image-1.png)\nQuestion: Given a graph, check whether it is bipartite or not?\n\n- A useful property of a bipartite graph - A graph is bipartite iff it has no odd lengthed cycle.\n\nProof: A graph = tree with cycles. Trees are always bipartite. The only thing left are cycles. A cycle is never bipartite, so a graph with cycle is never bipartite. And a graph with no cycle(a tree) is always bipartite.\n\nAlgorithm:\n\n1. Do DFS and put vertices in a queue\n2. Put a vertex in set1, and try to put all it's neigbours in set2.\n",
      "html": "<h1 id=\"6.-bipartite-graph\">6. Bipartite Graph <a class=\"heading-anchor-permalink\" href=\"#6.-bipartite-graph\">#</a></h1>\n<p>Created Monday 27 July 2020</p>\n<p>When a graph can be divided into two parts such that all edges are between the two parts.\n<img src=\"/assets/6._Bipartite_Graph-image-1.png\" alt=\"\">\nQuestion: Given a graph, check whether it is bipartite or not?</p>\n<ul>\n<li>A useful property of a bipartite graph - A graph is bipartite iff it has no odd lengthed cycle.</li>\n</ul>\n<p>Proof: A graph = tree with cycles. Trees are always bipartite. The only thing left are cycles. A cycle is never bipartite, so a graph with cycle is never bipartite. And a graph with no cycle(a tree) is always bipartite.</p>\n<p>Algorithm:</p>\n<ol>\n<li>Do DFS and put vertices in a queue</li>\n<li>Put a vertex in set1, and try to put all it’s neigbours in set2.</li>\n</ol>\n",
      "id": 491
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/7._Fill_Matrix.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/8._GraphsX/7._Fill_Matrix.html",
      "content": "# 7. Fill Matrix\nCreated Monday 27 July 2020\n\nProblem:\n\n1. We are given a matrix of zeros, ones and blanks(at diagonals).\n2. Is there an array B such that\n\n@ToBeDone\n\n",
      "html": "<h1 id=\"7.-fill-matrix\">7. Fill Matrix <a class=\"heading-anchor-permalink\" href=\"#7.-fill-matrix\">#</a></h1>\n<p>Created Monday 27 July 2020</p>\n<p>Problem:</p>\n<ol>\n<li>We are given a matrix of zeros, ones and blanks(at diagonals).</li>\n<li>Is there an array B such that</li>\n</ol>\n<p>@ToBeDone</p>\n",
      "id": 492
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/9._String_Algorithms/1._Pattern_Matching_Basics.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/9._String_Algorithms/1._Pattern_Matching_Basics.html",
      "content": "# 1. Pattern Matching Basics\n\nCreated Monday 27 July 2020\n\nWe need to tell if a given pattern exists in a given string.\n![](/assets/1._Pattern_Matching_Basics-image-1.png)\n\n### Naive Approach\n\nWe search one by one. We traverse the patter only if the starting letters match first. O(n\\*m) - This is the naive approach.\n",
      "html": "<h1 id=\"1.-pattern-matching-basics\">1. Pattern Matching Basics <a class=\"heading-anchor-permalink\" href=\"#1.-pattern-matching-basics\">#</a></h1>\n<p>Created Monday 27 July 2020</p>\n<p>We need to tell if a given pattern exists in a given string.\n<img src=\"/assets/1._Pattern_Matching_Basics-image-1.png\" alt=\"\"></p>\n<h3 id=\"naive-approach\">Naive Approach <a class=\"heading-anchor-permalink\" href=\"#naive-approach\">#</a></h3>\n<p>We search one by one. We traverse the patter only if the starting letters match first. O(n*m) - This is the naive approach.</p>\n",
      "id": 493
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/9._String_Algorithms/2._KMP_algorithm/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/9._String_Algorithms/2._KMP_algorithm/0_index.html",
      "content": "# 2. KMP algorithm\n\nCreated Monday 27 July 2020\n\nKnuth-Morris-Pratt algorithm\nDoes efficient pattern searching.\nT.C O(m)+O(n)\nHow → It selects a prefix(from the pattern) and marks it's occurrences throughout the pattern, this way, we can start the search somewhere midway instead of the start. This also ensures that we don't have to backtrack in the original string. This way we can search out pattern in one pass.\n![](/assets/2._KMP_algorithm-image-1.png)\nBuilding the pi table:\n\n```c++\nfor(int i=0; i<l; i++)\n{\n\twhile(char at i!=char at j)\n\t\tj = arr[j -1];\n\tarr[i] = ++j;\n}\n```\n",
      "html": "<h1 id=\"2.-kmp-algorithm\">2. KMP algorithm <a class=\"heading-anchor-permalink\" href=\"#2.-kmp-algorithm\">#</a></h1>\n<p>Created Monday 27 July 2020</p>\n<p>Knuth-Morris-Pratt algorithm\nDoes efficient pattern searching.\nT.C O(m)+O(n)\nHow → It selects a prefix(from the pattern) and marks it’s occurrences throughout the pattern, this way, we can start the search somewhere midway instead of the start. This also ensures that we don’t have to backtrack in the original string. This way we can search out pattern in one pass.\n<img src=\"/assets/2._KMP_algorithm-image-1.png\" alt=\"\">\nBuilding the pi table:</p>\n<pre><code class=\"language-c++\">for(int i=0; i&lt;l; i++)\n{\n\twhile(char at i!=char at j)\n\t\tj = arr[j -1];\n\tarr[i] = ++j;\n}\n</code></pre>\n",
      "id": 494
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/9._String_Algorithms/3._Z-algorithm_for_pattern_matching.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/9._String_Algorithms/3._Z-algorithm_for_pattern_matching.html",
      "content": "# 3. Z-algorithm for pattern matching\nCreated Monday 27 July 2020\n\nIt is a patten matching algorithm.\nZ(k) → length of longest substring starting at k which is also the prefix of the string\ne.g \na a c  b y a a k a a c\n0 1 0 0 0 2 1 0 3 1 0\nMake the array\n@ToBeDone\n\n",
      "html": "<h1 id=\"3.-z-algorithm-for-pattern-matching\">3. Z-algorithm for pattern matching <a class=\"heading-anchor-permalink\" href=\"#3.-z-algorithm-for-pattern-matching\">#</a></h1>\n<p>Created Monday 27 July 2020</p>\n<p>It is a patten matching algorithm.\nZ(k) → length of longest substring starting at k which is also the prefix of the string\ne.g\na a c  b y a a k a a c\n0 1 0 0 0 2 1 0 3 1 0\nMake the array\n@ToBeDone</p>\n",
      "id": 495
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/Home/0_index.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/Home/0_index.html",
      "content": "# Home\nCreated Wednesday 13 May 2020\n\nCourse notes made from Coding Ninjas course - Competitive Programming Ninja Track.\n[../book.pdf](./book.pdf)\n\n",
      "html": "<h1 id=\"home\">Home <a class=\"heading-anchor-permalink\" href=\"#home\">#</a></h1>\n<p>Created Wednesday 13 May 2020</p>\n<p>Course notes made from Coding Ninjas course - Competitive Programming Ninja Track.\n<a href=\"./book.pdf\">…/book.pdf</a></p>\n",
      "id": 496
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/Home/3._Resources.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/Home/3._Resources.html",
      "content": "# 3. Resources\nCreated Thursday 25 November 2021\n\n\n1. CSES problem set. <https://cses.fi/problemset/>\n2. CP book - 3. See [cpbook](cpbook.net.md)\n3. For\n\n\n",
      "html": "<h1 id=\"3.-resources\">3. Resources <a class=\"heading-anchor-permalink\" href=\"#3.-resources\">#</a></h1>\n<p>Created Thursday 25 November 2021</p>\n<ol>\n<li>CSES problem set. <a href=\"https://cses.fi/problemset/\">https://cses.fi/problemset/</a></li>\n<li>CP book - 3. See <a href=\"cpbook.net.html\">cpbook</a></li>\n<li>For</li>\n</ol>\n",
      "id": 497
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/Home/cpbook.net.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/Home/cpbook.net.html",
      "content": "# cpbook.net\n\n",
      "html": "<h1 id=\"cpbook.net\"><a href=\"http://cpbook.net\">cpbook.net</a> <a class=\"heading-anchor-permalink\" href=\"#cpbook.net\">#</a></h1>\n",
      "id": 498
    },
    {
      "path": "home/4_resource_itineraries/3_CN_Competitive_programming/notebook.md",
      "url": "home/4_resource_itineraries/3_CN_Competitive_programming/notebook.html",
      "content": "# Index of Competitive_Prog_Studies_CN\n\n* [1. CP - intro and tools](1._CP_-_intro_and_tools.md)\n\t* [1. Intro to Competitive Programming](1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming.md)\n\t\t* [1. What is CP](1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/1._What_is_CP.md)\n\t\t* [2. Why CP](1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/2._Why_CP.md)\n\t\t* [3. Various Types of Errors](1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/3._Various_Types_of_Errors.md)\n\t\t* [4. How to approach a problem in a competitive programming contest](1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest.md)\n\t\t\t* [a. Reading problem statements](1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/a._Reading_problem_statements.md)\n\t\t\t* [b. IO Format](1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/b._IO_Format.md)\n\t\t\t* [c. Constraints](1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/c._Constraints.md)\n\t* [2. Time and Space Complexity](1._CP_-_intro_and_tools/2._Time_and_Space_Complexity.md)\n\t\t* [Problems](1._CP_-_intro_and_tools/2._Time_and_Space_Complexity/Problems.md)\n\t\t\t* [1. Kadane's Algorithm](1._CP_-_intro_and_tools/2._Time_and_Space_Complexity/Problems/1._Kadane's_Algorithm.md)\n\t\t\t* [2. LeftRight Sum](1._CP_-_intro_and_tools/2._Time_and_Space_Complexity/Problems/2._LeftRight_Sum.md)\n\t* [3. IO Techniques](1._CP_-_intro_and_tools/3._IO_Techniques.md)\n\t\t* [1. Console streams](1._CP_-_intro_and_tools/3._IO_Techniques/1._Console_streams.md)\n\t\t* [2. C++ File streams](1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams.md)\n\t\t\t* [1. Writing to a file](1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/1._Writing_to_a_file.md)\n\t\t\t* [2. Reading from a file](1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/2._Reading_from_a_file.md)\n\t\t\t* [3. Serialization](1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/3._Serialization.md)\n\t\t* [3. General tricks](1._CP_-_intro_and_tools/3._IO_Techniques/3._General_tricks.md)\n\t* [4. Language Tools](1._CP_-_intro_and_tools/4._Language_Tools.md)\n\t\t* [1. STL - Data Structures](1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures.md)\n\t\t\t* [0. Conveniences](1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/0._Conveniences.md)\n\t\t\t\t* [1. pair](1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/0._Conveniences/1._pair.md)\n\t\t\t\t* [2. tuple](1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/0._Conveniences/2._tuple.md)\n\t\t\t* [1. Physical Data Structures](1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/1._Physical_Data_Structures.md)\n\t\t\t\t* [1. Vector](1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/1._Physical_Data_Structures/1._Vector.md)\n\t\t\t\t* [2. List](1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/1._Physical_Data_Structures/2._List.md)\n\t\t\t* [2. ADTs](1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs.md)\n\t\t\t\t* [2. String](1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/2._String.md)\n\t\t\t\t* [4. Stack](1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/4._Stack.md)\n\t\t\t\t* [5. Queue](1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/5._Queue.md)\n\t\t\t\t* [6. Map](1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/6._Map.md)\n\t\t\t\t* [7. Set](1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/7._Set.md)\n\t\t\t\t* [8. Prioirty Queue](1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/8._Prioirty_Queue.md)\n\t\t* [2. Functions](1._CP_-_intro_and_tools/4._Language_Tools/2._Functions.md)\n\t\t\t* [1. Sorting](1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/1._Sorting.md)\n\t\t\t* [2. Searching](1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/2._Searching.md)\n\t\t\t* [3. Math functions](1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/3._Math_functions.md)\n\t\t\t* [4. Utility functions](1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/4._Utility_functions.md)\n\t\t* [3. Hussain Set](1._CP_-_intro_and_tools/4._Language_Tools/3._Hussain_Set.md)\n* [2. Unconventional use of Searching And Sorting](2._Unconventional_use_of_Searching_And_Sorting.md)\n\t* [1. Aggressive Cows](2._Unconventional_use_of_Searching_And_Sorting/1._Aggressive_Cows.md)\n\t* [2. Inversion Count](2._Unconventional_use_of_Searching_And_Sorting/2._Inversion_Count.md)\n\t* [3. chef](2._Unconventional_use_of_Searching_And_Sorting/3._chef.md)\n\t* [4. Variation](2._Unconventional_use_of_Searching_And_Sorting/4._Variation.md)\n\t* [5. Murder](2._Unconventional_use_of_Searching_And_Sorting/5._Murder.md)\n\t* [6. Momos Market](2._Unconventional_use_of_Searching_And_Sorting/6._Momos_Market.md)\n\t* [7. Distribute Candies](2._Unconventional_use_of_Searching_And_Sorting/7._Distribute_Candies.md)\n\t* [8. Taj Mahal Entry](2._Unconventional_use_of_Searching_And_Sorting/8._Taj_Mahal_Entry.md)\n* [3. RecursionX](3._RecursionX.md)\n\t* [1. BackTracking](3._RecursionX/1._BackTracking.md)\n\t\t* [1. N Queens Problem - Exercise](3._RecursionX/1._BackTracking/1._N_Queens_Problem_-_Exercise.md)\n\t\t* [2. Rat And Maze problem](3._RecursionX/1._BackTracking/2._Rat_And_Maze_problem.md)\n\t\t* [3. Sudoku Puzzle](3._RecursionX/1._BackTracking/3._Sudoku_Puzzle.md)\n\t\t* [4. Crossword Problem](3._RecursionX/1._BackTracking/4._Crossword_Problem.md)\n\t* [2. BackTracking Assignment - BackTracking, Binary Search And Merge Sort Problems](3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems.md)\n\t\t* [1. Find Power of number](3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/1._Find_Power_of_number.md)\n\t\t* [2. Sorting the Skills](3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/2._Sorting_the_Skills.md)\n\t\t* [3. Collecing the balls](3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/3._Collecing_the_balls.md)\n\t\t* [4. Sudoku Solver](3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/4._Sudoku_Solver.md)\n* [4. Bit Manipulation](4._Bit_Manipulation.md)\n\t* [1. Shift Operators](4._Bit_Manipulation/1._Shift_Operators.md)\n\t* [2. Remaining Bitwise Operators](4._Bit_Manipulation/2._Remaining_Bitwise_Operators.md)\n\t* [3. ith bit](4._Bit_Manipulation/3._ith_bit.md)\n\t* [4. Flipping a specific bit](4._Bit_Manipulation/4._Flipping_a_specific_bit.md)\n\t* [5. Check if oddeven](4._Bit_Manipulation/5._Check_if_oddeven.md)\n\t* [6. Check if number is power of 2](4._Bit_Manipulation/6._Check_if_number_is_power_of_2.md)\n\t* [7. First Set bit](4._Bit_Manipulation/7._First_Set_bit.md)\n\t* [8. Clear all bits from the LSB](4._Bit_Manipulation/8._Clear_all_bits_from_the_LSB.md)\n* [5. Adhoc Problems](5._Adhoc_Problems.md)\n\t* [1. Equalize CodeForces](5._Adhoc_Problems/1._Equalize_CodeForces.md)\n\t* [2. Rectangular Area](5._Adhoc_Problems/2._Rectangular_Area.md)\n\t* [3. Light up the bulbs](5._Adhoc_Problems/3._Light_up_the_bulbs.md)\n\t* [4. Circular List of students](5._Adhoc_Problems/4._Circular_List_of_students.md)\n\t* [5. Interesting Sequences](5._Adhoc_Problems/5._Interesting_Sequences.md)\n\t* [6. Winning Strategy](5._Adhoc_Problems/6._Winning_Strategy.md)\n* [6. Dynamic ProgrammingX](6._Dynamic_ProgrammingX.md)\n\t* [1. Classic problems](6._Dynamic_ProgrammingX/1._Classic_problems.md)\n\t\t* [1. DP Basics - Fibonacci Number](6._Dynamic_ProgrammingX/1._Classic_problems/1._DP_Basics_-_Fibonacci_Number.md)\n\t\t* [2. AlphaCode](6._Dynamic_ProgrammingX/1._Classic_problems/2._AlphaCode.md)\n\t\t* [3. Longest Increasing subsequence](6._Dynamic_ProgrammingX/1._Classic_problems/3._Longest_Increasing_subsequence.md)\n\t\t* [4. Largest Bitonic Subsequence](6._Dynamic_ProgrammingX/1._Classic_problems/4._Largest_Bitonic_Subsequence.md)\n\t\t* [5. Coin change and stair case](6._Dynamic_ProgrammingX/1._Classic_problems/5._Coin_change_and_stair_case.md)\n\t\t* [6. Minimum Cost](6._Dynamic_ProgrammingX/1._Classic_problems/6._Minimum_Cost.md)\n\t\t* [7. Magic Grid](6._Dynamic_ProgrammingX/1._Classic_problems/7._Magic_Grid.md)\n\t\t* [Assignments 1](6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1.md)\n\t\t\t* [1. Loot Houses - 80](6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/1._Loot_Houses_-_80.md)\n\t\t\t* [2. Maximum Square Matrix With All Zeros - 80](6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/2._Maximum_Square_Matrix_With_All_Zeros_-_80.md)\n\t\t\t* [3. Count BSTs - 80](6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/3._Count_BSTs_-_80.md)\n\t\t\t* [4. Boredom - 80](6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/4._Boredom_-_80.md)\n\t\t\t* [5. Minimum Number of Chocolates - 80](6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/5._Minimum_Number_of_Chocolates_-_80.md)\n\t\t\t* [6. Minimum Count - 80](6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/6._Minimum_Count_-_80.md)\n\t\t* [Assignments 2](6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2.md)\n\t\t\t* [1. Hasan and Trip - 40](6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/1._Hasan_and_Trip_-_40.md)\n\t\t\t* [2. Vanya and GCD - 40](6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/2._Vanya_and_GCD_-_40.md)\n\t\t\t* [3. Adjacent Bit Counts - 80](6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/3._Adjacent_Bit_Counts_-_80.md)\n\t\t\t* [4. Roy and Coin Boxes - 80](6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/4._Roy_and_Coin_Boxes_-_80.md)\n\t\t\t* [5. Jon Snow and his favourite number - 80](6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/5._Jon_Snow_and_his_favourite_number_-_80.md)\n\t\t\t* [6. Alyona and Spreadsheet - 80](6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/6._Alyona_and_Spreadsheet_-_80.md)\n\t\t\t* [7. Angry Children - 80](6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/7._Angry_Children_-_80.md)\n\t* [2. Practice Problems](6._Dynamic_ProgrammingX/2._Practice_Problems.md)\n\t\t* [Assignment 1](6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1.md)\n\t\t\t* [1. LCS - Problem - 80](6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/1._LCS_-_Problem_-_80.md)\n\t\t\t* [2. Edit Distance - Problem - 80](6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/2._Edit_Distance_-_Problem_-_80.md)\n\t\t\t* [3. Balika Vadhu- Problem - 120](6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/3._Balika_Vadhu-_Problem_-_120.md)\n\t\t\t* [4. Knapsnack - Problem - 120](6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/4._Knapsnack_-_Problem_-_120.md)\n\t\t\t* [5. PARTY - Problem - 80](6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/5._PARTY_-_Problem_-_80.md)\n\t\t\t* [6. Subset Sum - Problem - 40](6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/6._Subset_Sum_-_Problem_-_40.md)\n\t\t* [Assignment 2](6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2.md)\n\t\t\t* [1. Miser Man - 40](6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/1._Miser_Man_-_40.md)\n\t\t\t* [2. Trader Profit - 80](6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/2._Trader_Profit_-_80.md)\n\t\t\t* [3. Charlie and Pilots - 80](6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/3._Charlie_and_Pilots_-_80.md)\n\t\t\t* [4. Square Brackets - 80](6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/4._Square_Brackets_-_80.md)\n\t\t\t* [5. Distinct Subsequences - 120](6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/5._Distinct_Subsequences_-_120.md)\n\t\t\t* [6. Smallest Super-Sequence - 80](6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/6._Smallest_Super-Sequence_-_80.md)\n\t\t\t* [7. Shortest Subsequence - 80](6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/7._Shortest_Subsequence_-_80.md)\n\t* [3. DP & Bitmasking](6._Dynamic_ProgrammingX/3._DP_&_Bitmasking.md)\n\t\t* [1. What is bitmasking](6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/1._What_is_bitmasking.md)\n\t\t* [2. More about Bitmasking](6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/2._More_about_Bitmasking.md)\n\t\t* [3. Dynamic Programming with Bitmasking](6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/3._Dynamic_Programming_with_Bitmasking.md)\n\t\t* [4. Code Memoization and Recursion](6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/4._Code_Memoization_and_Recursion.md)\n\t\t* [5. Code Iterative](6._Dynamic_ProgrammingX/3._DP_&_Bitmasking/5._Code_Iterative.md)\n* [7. Greedy Method](7._Greedy_Method.md)\n\t* [1. Introduction to Greedy technique](7._Greedy_Method/1._Introduction_to_Greedy_technique.md)\n\t* [2. Minimum Absolute difference in an array](7._Greedy_Method/2._Minimum_Absolute_difference_in_an_array.md)\n\t* [Assignment 1](7._Greedy_Method/Assignment_1.md)\n\t\t* [1. Min. Absolute Difference In Array - 40](7._Greedy_Method/Assignment_1/1._Min._Absolute_Difference_In_Array_-_40.md)\n\t\t* [2. Nikunj and Donuts - 40](7._Greedy_Method/Assignment_1/2._Nikunj_and_Donuts_-_40.md)\n\t\t* [3. Activity Selection - 80](7._Greedy_Method/Assignment_1/3._Activity_Selection_-_80.md)\n\t\t* [4. Fractional Knapsack - 40](7._Greedy_Method/Assignment_1/4._Fractional_Knapsack_-_40.md)\n\t\t* [5. Weighted Job Scheduling - 80](7._Greedy_Method/Assignment_1/5._Weighted_Job_Scheduling_-_80.md)\n\t* [Assignment 2](7._Greedy_Method/Assignment_2.md)\n\t\t* [1. Perimeter with conditions - 40](7._Greedy_Method/Assignment_2/1._Perimeter_with_conditions_-_40.md)\n\t\t* [2. Problem discussion - 40](7._Greedy_Method/Assignment_2/2._Problem_discussion_-_40.md)\n\t\t* [3. Winning Lottery - 40](7._Greedy_Method/Assignment_2/3._Winning_Lottery_-_40.md)\n* [8. GraphsX](8._GraphsX.md)\n\t* [1. Connected Components](8._GraphsX/1._Connected_Components.md)\n\t* [2. Permutation Swaps](8._GraphsX/2._Permutation_Swaps.md)\n\t* [3. Connected Horses](8._GraphsX/3._Connected_Horses.md)\n\t* [4. Strongly connected components](8._GraphsX/4._Strongly_connected_components.md)\n\t* [5. Bottom of the graph](8._GraphsX/5._Bottom_of_the_graph.md)\n\t* [6. Bipartite Graph](8._GraphsX/6._Bipartite_Graph.md)\n\t* [7. Fill Matrix](8._GraphsX/7._Fill_Matrix.md)\n* [9. String Algorithms](9._String_Algorithms.md)\n\t* [1. Pattern Matching Basics](9._String_Algorithms/1._Pattern_Matching_Basics.md)\n\t* [2. KMP algorithm](9._String_Algorithms/2._KMP_algorithm.md)\n\t* [3. Z-algorithm for pattern matching](9._String_Algorithms/3._Z-algorithm_for_pattern_matching.md)\n* [10. TreesX](10._TreesX.md)\n\t* [1. Tries](10._TreesX/1._Tries.md)\n\t\t* [1. Tries and XOR](10._TreesX/1._Tries/1._Tries_and_XOR.md)\n\t\t* [2. Maximum XOR value of subarray](10._TreesX/1._Tries/2._Maximum_XOR_value_of_subarray.md)\n\t* [2. Segment Tree](10._TreesX/2._Segment_Tree.md)\n\t\t* [1. Introduction To Segment Tree](10._TreesX/2._Segment_Tree/1._Introduction_To_Segment_Tree.md)\n\t\t* [2. Building a segment tree](10._TreesX/2._Segment_Tree/2._Building_a_segment_tree.md)\n\t\t* [3. Update on a segment tree](10._TreesX/2._Segment_Tree/3._Update_on_a_segment_tree.md)\n\t\t* [4. Query on a Segment Tree](10._TreesX/2._Segment_Tree/4._Query_on_a_Segment_Tree.md)\n\t\t* [5. Size of a segment tree](10._TreesX/2._Segment_Tree/5._Size_of_a_segment_tree.md)\n\t\t* [Assignments](10._TreesX/2._Segment_Tree/Assignments.md)\n\t\t\t* [1. Minimum In SubArray - 40](10._TreesX/2._Segment_Tree/Assignments/1._Minimum_In_SubArray_-_40.md)\n\t\t\t* [2. Maximum Pair Sum - 80](10._TreesX/2._Segment_Tree/Assignments/2._Maximum_Pair_Sum_-_80.md)\n\t\t\t* [3. Maximum Sum In Subarray - 120](10._TreesX/2._Segment_Tree/Assignments/3._Maximum_Sum_In_Subarray_-_120.md)\n\t\t\t* [4. Sum Of Squares - 120](10._TreesX/2._Segment_Tree/Assignments/4._Sum_Of_Squares_-_120.md)\n\t\t* [zAssignments](10._TreesX/2._Segment_Tree/zAssignments.md)\n\t\t\t* [1. Counting EvenOdd - 40](10._TreesX/2._Segment_Tree/zAssignments/1._Counting_EvenOdd_-_40.md)\n\t\t\t* [2. Vasya vs Rhezo - 40](10._TreesX/2._Segment_Tree/zAssignments/2._Vasya_vs_Rhezo_-_40.md)\n\t\t\t* [3. 2 vs 3 - 80](10._TreesX/2._Segment_Tree/zAssignments/3._2_vs_3_-_80.md)\n\t\t\t* [4. Horrible Queries - 120](10._TreesX/2._Segment_Tree/zAssignments/4._Horrible_Queries_-_120.md)\n\t* [3. Fenwick Tree](10._TreesX/3._Fenwick_Tree.md)\n* [11. Number Theory](11._Number_Theory.md)\n\t* [1. Modulo Arithmetic](11._Number_Theory/1._Modulo_Arithmetic.md)\n\t\t* [1. Modulo operation](11._Number_Theory/1._Modulo_Arithmetic/1._Modulo_operation.md)\n\t\t* [2. Modulo properties](11._Number_Theory/1._Modulo_Arithmetic/2._Modulo_properties.md)\n\t\t* [3. Modulo properties continued](11._Number_Theory/1._Modulo_Arithmetic/3._Modulo_properties_continued.md)\n\t\t* [4. Exercise - number of Binary Trees](11._Number_Theory/1._Modulo_Arithmetic/4._Exercise_-_number_of_Binary_Trees.md)\n\t* [2. Prime generator and GCD](11._Number_Theory/2._Prime_generator_and_GCD.md)\n\t\t* [1. Primes](11._Number_Theory/2._Prime_generator_and_GCD/1._Primes.md)\n\t\t\t* [1. Find prime numbers between 1 and N](11._Number_Theory/2._Prime_generator_and_GCD/1._Primes/1._Find_prime_numbers_between_1_and_N.md)\n\t\t\t* [2. Sieve of Eratosthenes](11._Number_Theory/2._Prime_generator_and_GCD/1._Primes/2._Sieve_of_Eratosthenes.md)\n\t\t\t* [3. Complexity of Sieve of Eratosthenes](11._Number_Theory/2._Prime_generator_and_GCD/1._Primes/3._Complexity_of_Sieve_of_Eratosthenes.md)\n\t\t* [2. Euclid's Algo](11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo.md)\n\t\t\t* [1. GCD - Euclid's Algorithm](11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/1._GCD_-_Euclid's_Algorithm.md)\n\t\t\t* [2. Complexity of Euclid's GCD algorithm](11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/2._Complexity_of_Euclid's_GCD_algorithm.md)\n\t\t\t* [3. Diophantine Equations](11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/3._Diophantine_Equations.md)\n\t\t\t* [4. Extended Euclidean Algorithm](11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/4._Extended_Euclidean_Algorithm.md)\n\t\t* [3. Multiplicative Modulo Inverse](11._Number_Theory/2._Prime_generator_and_GCD/3._Multiplicative_Modulo_Inverse.md)\n\t\t* [4. Applications Of NT - 1](11._Number_Theory/2._Prime_generator_and_GCD/4._Applications_Of_NT_-_1.md)\n\t\t\t* [1. Sachin and Varun](11._Number_Theory/2._Prime_generator_and_GCD/4._Applications_Of_NT_-_1/1._Sachin_and_Varun.md)\n\t\t\t* [2. Advanced GCD](11._Number_Theory/2._Prime_generator_and_GCD/4._Applications_Of_NT_-_1/2._Advanced_GCD.md)\n\t* [3. Totient Function](11._Number_Theory/3._Totient_Function.md)\n\t\t* [1. Euler's Totient Function](11._Number_Theory/3._Totient_Function/1._Euler's_Totient_Function.md)\n\t\t* [2. LCM Sum](11._Number_Theory/3._Totient_Function/2._LCM_Sum.md)\n\t* [4. Solving equations using NT](11._Number_Theory/4._Solving_equations_using_NT.md)\n\t\t* [1. Optimized Power Function](11._Number_Theory/4._Solving_equations_using_NT/1._Optimized_Power_Function.md)\n\t\t* [2. Modular exponentiation](11._Number_Theory/4._Solving_equations_using_NT/2._Modular_exponentiation.md)\n\t\t* [3. Matrix Exponentiation](11._Number_Theory/4._Solving_equations_using_NT/3._Matrix_Exponentiation.md)\n\t\t\t* [1. Matrix Exponentiation - More Recurrence Relation](11._Number_Theory/4._Solving_equations_using_NT/3._Matrix_Exponentiation/1._Matrix_Exponentiation_-_More_Recurrence_Relation.md)\n\t\t\t* [2. Matrix Expo Fibonacci Sum](11._Number_Theory/4._Solving_equations_using_NT/3._Matrix_Exponentiation/2._Matrix_Expo_Fibonacci_Sum.md)\n\t\t* [4. Fermat's Little Theorem](11._Number_Theory/4._Solving_equations_using_NT/4._Fermat's_Little_Theorem.md)\n\t\t* [5. Wilson's Theorem](11._Number_Theory/4._Solving_equations_using_NT/5._Wilson's_Theorem.md)\n\t\t* [6. Income on the Nth day](11._Number_Theory/4._Solving_equations_using_NT/6._Income_on_the_Nth_day.md)\n* [12. Game Theory](12._Game_Theory.md)\n\t* [1. Intro to Game Theory](12._Game_Theory/1._Intro_to_Game_Theory.md)\n\t* [2. Game of Nim](12._Game_Theory/2._Game_of_Nim.md)\n\t* [3. Proof of Nim Formula](12._Game_Theory/3._Proof_of_Nim_Formula.md)\n\t* [4. Grundy Numbers](12._Game_Theory/4._Grundy_Numbers.md)\n\t* [5. Sprague-Grundy Theorem](12._Game_Theory/5._Sprague-Grundy_Theorem.md)\n\t* [6. MinMax Algorithm](12._Game_Theory/6._MinMax_Algorithm.md)\n* [13. Computational Geometry](13._Computational_Geometry.md)\n\t* [1. Intro to Computational Geometry](13._Computational_Geometry/1._Intro_to_Computational_Geometry.md)\n\t* [2. Distance betwn point and line](13._Computational_Geometry/2._Distance_betwn_point_and_line.md)\n\t* [3. Area of a polygon](13._Computational_Geometry/3._Area_of_a_polygon.md)\n\t* [4. Intersection of two lines](13._Computational_Geometry/4._Intersection_of_two_lines.md)\n\t* [5. Convex Hull](13._Computational_Geometry/5._Convex_Hull.md)\n* [14. FFT](14._FFT.md)\n* [15. HLD](15._HLD.md)\n\t* [1. Intro to HLD](15._HLD/1._Intro_to_HLD.md)\n\t* [2. Basics of HLD](15._HLD/2._Basics_of_HLD.md)\n\t* [3. Importance of HLD](15._HLD/3._Importance_of_HLD.md)\n\t* [4. Complexity of operations](15._HLD/4._Complexity_of_operations.md)\n* [Home](Home.md)\n\t* [1. Motivation](Home/1._Motivation.md)\n\t* [2. Roadmap](Home/2._Roadmap.md)\n\t* [3. Resources](Home/3._Resources.md)\n\t* [cpbook.net](Home/cpbook.net.md)\n\n\n",
      "html": "<h1 id=\"index-of-competitive_prog_studies_cn\">Index of Competitive_Prog_Studies_CN <a class=\"heading-anchor-permalink\" href=\"#index-of-competitive_prog_studies_cn\">#</a></h1>\n<ul>\n<li><a href=\"1._CP_-_intro_and_tools.html\">1. CP - intro and tools</a>\n<ul>\n<li><a href=\"1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming.html\">1. Intro to Competitive Programming</a>\n<ul>\n<li><a href=\"1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/1._What_is_CP.html\">1. What is CP</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/2._Why_CP.html\">2. Why CP</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/3._Various_Types_of_Errors.html\">3. Various Types of Errors</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest.html\">4. How to approach a problem in a competitive programming contest</a>\n<ul>\n<li><a href=\"1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/a._Reading_problem_statements.html\">a. Reading problem statements</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/b._IO_Format.html\">b. IO Format</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/1._Intro_to_Competitive_Programming/4._How_to_approach_a_problem_in_a_competitive_programming_contest/c._Constraints.html\">c. Constraints</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"1._CP_-_intro_and_tools/2._Time_and_Space_Complexity.html\">2. Time and Space Complexity</a>\n<ul>\n<li><a href=\"1._CP_-_intro_and_tools/2._Time_and_Space_Complexity/Problems.html\">Problems</a>\n<ul>\n<li><a href=\"1._CP_-_intro_and_tools/2._Time_and_Space_Complexity/Problems/1._Kadane's_Algorithm.html\">1. Kadane’s Algorithm</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/2._Time_and_Space_Complexity/Problems/2._LeftRight_Sum.html\">2. LeftRight Sum</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"1._CP_-_intro_and_tools/3._IO_Techniques.html\">3. IO Techniques</a>\n<ul>\n<li><a href=\"1._CP_-_intro_and_tools/3._IO_Techniques/1._Console_streams.html\">1. Console streams</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams.html\">2. C++ File streams</a>\n<ul>\n<li><a href=\"1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/1._Writing_to_a_file.html\">1. Writing to a file</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/2._Reading_from_a_file.html\">2. Reading from a file</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/3._IO_Techniques/2._C++_File_streams/3._Serialization.html\">3. Serialization</a></li>\n</ul>\n</li>\n<li><a href=\"1._CP_-_intro_and_tools/3._IO_Techniques/3._General_tricks.html\">3. General tricks</a></li>\n</ul>\n</li>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools.html\">4. Language Tools</a>\n<ul>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures.html\">1. STL - Data Structures</a>\n<ul>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/0._Conveniences.html\">0. Conveniences</a>\n<ul>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/0._Conveniences/1._pair.html\">1. pair</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/0._Conveniences/2._tuple.html\">2. tuple</a></li>\n</ul>\n</li>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/1._Physical_Data_Structures.html\">1. Physical Data Structures</a>\n<ul>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/1._Physical_Data_Structures/1._Vector.html\">1. Vector</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/1._Physical_Data_Structures/2._List.html\">2. List</a></li>\n</ul>\n</li>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs.html\">2. ADTs</a>\n<ul>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/2._String.html\">2. String</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/4._Stack.html\">4. Stack</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/5._Queue.html\">5. Queue</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/6._Map.html\">6. Map</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/7._Set.html\">7. Set</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/1._STL_-_Data_Structures/2._ADTs/8._Prioirty_Queue.html\">8. Prioirty Queue</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/2._Functions.html\">2. Functions</a>\n<ul>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/1._Sorting.html\">1. Sorting</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/2._Searching.html\">2. Searching</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/3._Math_functions.html\">3. Math functions</a></li>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/2._Functions/4._Utility_functions.html\">4. Utility functions</a></li>\n</ul>\n</li>\n<li><a href=\"1._CP_-_intro_and_tools/4._Language_Tools/3._Hussain_Set.html\">3. Hussain Set</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"2._Unconventional_use_of_Searching_And_Sorting.html\">2. Unconventional use of Searching And Sorting</a>\n<ul>\n<li><a href=\"2._Unconventional_use_of_Searching_And_Sorting/1._Aggressive_Cows.html\">1. Aggressive Cows</a></li>\n<li><a href=\"2._Unconventional_use_of_Searching_And_Sorting/2._Inversion_Count.html\">2. Inversion Count</a></li>\n<li><a href=\"2._Unconventional_use_of_Searching_And_Sorting/3._chef.html\">3. chef</a></li>\n<li><a href=\"2._Unconventional_use_of_Searching_And_Sorting/4._Variation.html\">4. Variation</a></li>\n<li><a href=\"2._Unconventional_use_of_Searching_And_Sorting/5._Murder.html\">5. Murder</a></li>\n<li><a href=\"2._Unconventional_use_of_Searching_And_Sorting/6._Momos_Market.html\">6. Momos Market</a></li>\n<li><a href=\"2._Unconventional_use_of_Searching_And_Sorting/7._Distribute_Candies.html\">7. Distribute Candies</a></li>\n<li><a href=\"2._Unconventional_use_of_Searching_And_Sorting/8._Taj_Mahal_Entry.html\">8. Taj Mahal Entry</a></li>\n</ul>\n</li>\n<li><a href=\"3._RecursionX.html\">3. RecursionX</a>\n<ul>\n<li><a href=\"3._RecursionX/1._BackTracking.html\">1. BackTracking</a>\n<ul>\n<li><a href=\"3._RecursionX/1._BackTracking/1._N_Queens_Problem_-_Exercise.html\">1. N Queens Problem - Exercise</a></li>\n<li><a href=\"3._RecursionX/1._BackTracking/2._Rat_And_Maze_problem.html\">2. Rat And Maze problem</a></li>\n<li><a href=\"3._RecursionX/1._BackTracking/3._Sudoku_Puzzle.html\">3. Sudoku Puzzle</a></li>\n<li><a href=\"3._RecursionX/1._BackTracking/4._Crossword_Problem.html\">4. Crossword Problem</a></li>\n</ul>\n</li>\n<li><a href=\"3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems.html\">2. BackTracking Assignment - BackTracking, Binary Search And Merge Sort Problems</a>\n<ul>\n<li><a href=\"3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/1._Find_Power_of_number.html\">1. Find Power of number</a></li>\n<li><a href=\"3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/2._Sorting_the_Skills.html\">2. Sorting the Skills</a></li>\n<li><a href=\"3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/3._Collecing_the_balls.html\">3. Collecing the balls</a></li>\n<li><a href=\"3._RecursionX/2._BackTracking_Assignment_-_BackTracking,_Binary_Search_And_Merge_Sort_Problems/4._Sudoku_Solver.html\">4. Sudoku Solver</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"4._Bit_Manipulation.html\">4. Bit Manipulation</a>\n<ul>\n<li><a href=\"4._Bit_Manipulation/1._Shift_Operators.html\">1. Shift Operators</a></li>\n<li><a href=\"4._Bit_Manipulation/2._Remaining_Bitwise_Operators.html\">2. Remaining Bitwise Operators</a></li>\n<li><a href=\"4._Bit_Manipulation/3._ith_bit.html\">3. ith bit</a></li>\n<li><a href=\"4._Bit_Manipulation/4._Flipping_a_specific_bit.html\">4. Flipping a specific bit</a></li>\n<li><a href=\"4._Bit_Manipulation/5._Check_if_oddeven.html\">5. Check if oddeven</a></li>\n<li><a href=\"4._Bit_Manipulation/6._Check_if_number_is_power_of_2.html\">6. Check if number is power of 2</a></li>\n<li><a href=\"4._Bit_Manipulation/7._First_Set_bit.html\">7. First Set bit</a></li>\n<li><a href=\"4._Bit_Manipulation/8._Clear_all_bits_from_the_LSB.html\">8. Clear all bits from the LSB</a></li>\n</ul>\n</li>\n<li><a href=\"5._Adhoc_Problems.html\">5. Adhoc Problems</a>\n<ul>\n<li><a href=\"5._Adhoc_Problems/1._Equalize_CodeForces.html\">1. Equalize CodeForces</a></li>\n<li><a href=\"5._Adhoc_Problems/2._Rectangular_Area.html\">2. Rectangular Area</a></li>\n<li><a href=\"5._Adhoc_Problems/3._Light_up_the_bulbs.html\">3. Light up the bulbs</a></li>\n<li><a href=\"5._Adhoc_Problems/4._Circular_List_of_students.html\">4. Circular List of students</a></li>\n<li><a href=\"5._Adhoc_Problems/5._Interesting_Sequences.html\">5. Interesting Sequences</a></li>\n<li><a href=\"5._Adhoc_Problems/6._Winning_Strategy.html\">6. Winning Strategy</a></li>\n</ul>\n</li>\n<li><a href=\"6._Dynamic_ProgrammingX.html\">6. Dynamic ProgrammingX</a>\n<ul>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems.html\">1. Classic problems</a>\n<ul>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/1._DP_Basics_-_Fibonacci_Number.html\">1. DP Basics - Fibonacci Number</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/2._AlphaCode.html\">2. AlphaCode</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/3._Longest_Increasing_subsequence.html\">3. Longest Increasing subsequence</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/4._Largest_Bitonic_Subsequence.html\">4. Largest Bitonic Subsequence</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/5._Coin_change_and_stair_case.html\">5. Coin change and stair case</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/6._Minimum_Cost.html\">6. Minimum Cost</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/7._Magic_Grid.html\">7. Magic Grid</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1.html\">Assignments 1</a>\n<ul>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/1._Loot_Houses_-_80.html\">1. Loot Houses - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/2._Maximum_Square_Matrix_With_All_Zeros_-_80.html\">2. Maximum Square Matrix With All Zeros - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/3._Count_BSTs_-_80.html\">3. Count BSTs - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/4._Boredom_-_80.html\">4. Boredom - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/5._Minimum_Number_of_Chocolates_-_80.html\">5. Minimum Number of Chocolates - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_1/6._Minimum_Count_-_80.html\">6. Minimum Count - 80</a></li>\n</ul>\n</li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2.html\">Assignments 2</a>\n<ul>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/1._Hasan_and_Trip_-_40.html\">1. Hasan and Trip - 40</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/2._Vanya_and_GCD_-_40.html\">2. Vanya and GCD - 40</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/3._Adjacent_Bit_Counts_-_80.html\">3. Adjacent Bit Counts - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/4._Roy_and_Coin_Boxes_-_80.html\">4. Roy and Coin Boxes - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/5._Jon_Snow_and_his_favourite_number_-_80.html\">5. Jon Snow and his favourite number - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/6._Alyona_and_Spreadsheet_-_80.html\">6. Alyona and Spreadsheet - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/1._Classic_problems/Assignments_2/7._Angry_Children_-_80.html\">7. Angry Children - 80</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems.html\">2. Practice Problems</a>\n<ul>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1.html\">Assignment 1</a>\n<ul>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/1._LCS_-_Problem_-_80.html\">1. LCS - Problem - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/2._Edit_Distance_-_Problem_-_80.html\">2. Edit Distance - Problem - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/3._Balika_Vadhu-_Problem_-_120.html\">3. Balika Vadhu- Problem - 120</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/4._Knapsnack_-_Problem_-_120.html\">4. Knapsnack - Problem - 120</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/5._PARTY_-_Problem_-_80.html\">5. PARTY - Problem - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_1/6._Subset_Sum_-_Problem_-_40.html\">6. Subset Sum - Problem - 40</a></li>\n</ul>\n</li>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2.html\">Assignment 2</a>\n<ul>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/1._Miser_Man_-_40.html\">1. Miser Man - 40</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/2._Trader_Profit_-_80.html\">2. Trader Profit - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/3._Charlie_and_Pilots_-_80.html\">3. Charlie and Pilots - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/4._Square_Brackets_-_80.html\">4. Square Brackets - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/5._Distinct_Subsequences_-_120.html\">5. Distinct Subsequences - 120</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/6._Smallest_Super-Sequence_-_80.html\">6. Smallest Super-Sequence - 80</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/2._Practice_Problems/Assignment_2/7._Shortest_Subsequence_-_80.html\">7. Shortest Subsequence - 80</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"6._Dynamic_ProgrammingX/3._DP_&amp;_Bitmasking.html\">3. DP &amp; Bitmasking</a>\n<ul>\n<li><a href=\"6._Dynamic_ProgrammingX/3._DP_&amp;_Bitmasking/1._What_is_bitmasking.html\">1. What is bitmasking</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/3._DP_&amp;_Bitmasking/2._More_about_Bitmasking.html\">2. More about Bitmasking</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/3._DP_&amp;_Bitmasking/3._Dynamic_Programming_with_Bitmasking.html\">3. Dynamic Programming with Bitmasking</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/3._DP_&amp;_Bitmasking/4._Code_Memoization_and_Recursion.html\">4. Code Memoization and Recursion</a></li>\n<li><a href=\"6._Dynamic_ProgrammingX/3._DP_&amp;_Bitmasking/5._Code_Iterative.html\">5. Code Iterative</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"7._Greedy_Method.html\">7. Greedy Method</a>\n<ul>\n<li><a href=\"7._Greedy_Method/1._Introduction_to_Greedy_technique.html\">1. Introduction to Greedy technique</a></li>\n<li><a href=\"7._Greedy_Method/2._Minimum_Absolute_difference_in_an_array.html\">2. Minimum Absolute difference in an array</a></li>\n<li><a href=\"7._Greedy_Method/Assignment_1.html\">Assignment 1</a>\n<ul>\n<li><a href=\"7._Greedy_Method/Assignment_1/1._Min._Absolute_Difference_In_Array_-_40.html\">1. Min. Absolute Difference In Array - 40</a></li>\n<li><a href=\"7._Greedy_Method/Assignment_1/2._Nikunj_and_Donuts_-_40.html\">2. Nikunj and Donuts - 40</a></li>\n<li><a href=\"7._Greedy_Method/Assignment_1/3._Activity_Selection_-_80.html\">3. Activity Selection - 80</a></li>\n<li><a href=\"7._Greedy_Method/Assignment_1/4._Fractional_Knapsack_-_40.html\">4. Fractional Knapsack - 40</a></li>\n<li><a href=\"7._Greedy_Method/Assignment_1/5._Weighted_Job_Scheduling_-_80.html\">5. Weighted Job Scheduling - 80</a></li>\n</ul>\n</li>\n<li><a href=\"7._Greedy_Method/Assignment_2.html\">Assignment 2</a>\n<ul>\n<li><a href=\"7._Greedy_Method/Assignment_2/1._Perimeter_with_conditions_-_40.html\">1. Perimeter with conditions - 40</a></li>\n<li><a href=\"7._Greedy_Method/Assignment_2/2._Problem_discussion_-_40.html\">2. Problem discussion - 40</a></li>\n<li><a href=\"7._Greedy_Method/Assignment_2/3._Winning_Lottery_-_40.html\">3. Winning Lottery - 40</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"8._GraphsX.html\">8. GraphsX</a>\n<ul>\n<li><a href=\"8._GraphsX/1._Connected_Components.html\">1. Connected Components</a></li>\n<li><a href=\"8._GraphsX/2._Permutation_Swaps.html\">2. Permutation Swaps</a></li>\n<li><a href=\"8._GraphsX/3._Connected_Horses.html\">3. Connected Horses</a></li>\n<li><a href=\"8._GraphsX/4._Strongly_connected_components.html\">4. Strongly connected components</a></li>\n<li><a href=\"8._GraphsX/5._Bottom_of_the_graph.html\">5. Bottom of the graph</a></li>\n<li><a href=\"8._GraphsX/6._Bipartite_Graph.html\">6. Bipartite Graph</a></li>\n<li><a href=\"8._GraphsX/7._Fill_Matrix.html\">7. Fill Matrix</a></li>\n</ul>\n</li>\n<li><a href=\"9._String_Algorithms.html\">9. String Algorithms</a>\n<ul>\n<li><a href=\"9._String_Algorithms/1._Pattern_Matching_Basics.html\">1. Pattern Matching Basics</a></li>\n<li><a href=\"9._String_Algorithms/2._KMP_algorithm.html\">2. KMP algorithm</a></li>\n<li><a href=\"9._String_Algorithms/3._Z-algorithm_for_pattern_matching.html\">3. Z-algorithm for pattern matching</a></li>\n</ul>\n</li>\n<li><a href=\"10._TreesX.html\">10. TreesX</a>\n<ul>\n<li><a href=\"10._TreesX/1._Tries.html\">1. Tries</a>\n<ul>\n<li><a href=\"10._TreesX/1._Tries/1._Tries_and_XOR.html\">1. Tries and XOR</a></li>\n<li><a href=\"10._TreesX/1._Tries/2._Maximum_XOR_value_of_subarray.html\">2. Maximum XOR value of subarray</a></li>\n</ul>\n</li>\n<li><a href=\"10._TreesX/2._Segment_Tree.html\">2. Segment Tree</a>\n<ul>\n<li><a href=\"10._TreesX/2._Segment_Tree/1._Introduction_To_Segment_Tree.html\">1. Introduction To Segment Tree</a></li>\n<li><a href=\"10._TreesX/2._Segment_Tree/2._Building_a_segment_tree.html\">2. Building a segment tree</a></li>\n<li><a href=\"10._TreesX/2._Segment_Tree/3._Update_on_a_segment_tree.html\">3. Update on a segment tree</a></li>\n<li><a href=\"10._TreesX/2._Segment_Tree/4._Query_on_a_Segment_Tree.html\">4. Query on a Segment Tree</a></li>\n<li><a href=\"10._TreesX/2._Segment_Tree/5._Size_of_a_segment_tree.html\">5. Size of a segment tree</a></li>\n<li><a href=\"10._TreesX/2._Segment_Tree/Assignments.html\">Assignments</a>\n<ul>\n<li><a href=\"10._TreesX/2._Segment_Tree/Assignments/1._Minimum_In_SubArray_-_40.html\">1. Minimum In SubArray - 40</a></li>\n<li><a href=\"10._TreesX/2._Segment_Tree/Assignments/2._Maximum_Pair_Sum_-_80.html\">2. Maximum Pair Sum - 80</a></li>\n<li><a href=\"10._TreesX/2._Segment_Tree/Assignments/3._Maximum_Sum_In_Subarray_-_120.html\">3. Maximum Sum In Subarray - 120</a></li>\n<li><a href=\"10._TreesX/2._Segment_Tree/Assignments/4._Sum_Of_Squares_-_120.html\">4. Sum Of Squares - 120</a></li>\n</ul>\n</li>\n<li><a href=\"10._TreesX/2._Segment_Tree/zAssignments.html\">zAssignments</a>\n<ul>\n<li><a href=\"10._TreesX/2._Segment_Tree/zAssignments/1._Counting_EvenOdd_-_40.html\">1. Counting EvenOdd - 40</a></li>\n<li><a href=\"10._TreesX/2._Segment_Tree/zAssignments/2._Vasya_vs_Rhezo_-_40.html\">2. Vasya vs Rhezo - 40</a></li>\n<li><a href=\"10._TreesX/2._Segment_Tree/zAssignments/3._2_vs_3_-_80.html\">3. 2 vs 3 - 80</a></li>\n<li><a href=\"10._TreesX/2._Segment_Tree/zAssignments/4._Horrible_Queries_-_120.html\">4. Horrible Queries - 120</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"10._TreesX/3._Fenwick_Tree.html\">3. Fenwick Tree</a></li>\n</ul>\n</li>\n<li><a href=\"11._Number_Theory.html\">11. Number Theory</a>\n<ul>\n<li><a href=\"11._Number_Theory/1._Modulo_Arithmetic.html\">1. Modulo Arithmetic</a>\n<ul>\n<li><a href=\"11._Number_Theory/1._Modulo_Arithmetic/1._Modulo_operation.html\">1. Modulo operation</a></li>\n<li><a href=\"11._Number_Theory/1._Modulo_Arithmetic/2._Modulo_properties.html\">2. Modulo properties</a></li>\n<li><a href=\"11._Number_Theory/1._Modulo_Arithmetic/3._Modulo_properties_continued.html\">3. Modulo properties continued</a></li>\n<li><a href=\"11._Number_Theory/1._Modulo_Arithmetic/4._Exercise_-_number_of_Binary_Trees.html\">4. Exercise - number of Binary Trees</a></li>\n</ul>\n</li>\n<li><a href=\"11._Number_Theory/2._Prime_generator_and_GCD.html\">2. Prime generator and GCD</a>\n<ul>\n<li><a href=\"11._Number_Theory/2._Prime_generator_and_GCD/1._Primes.html\">1. Primes</a>\n<ul>\n<li><a href=\"11._Number_Theory/2._Prime_generator_and_GCD/1._Primes/1._Find_prime_numbers_between_1_and_N.html\">1. Find prime numbers between 1 and N</a></li>\n<li><a href=\"11._Number_Theory/2._Prime_generator_and_GCD/1._Primes/2._Sieve_of_Eratosthenes.html\">2. Sieve of Eratosthenes</a></li>\n<li><a href=\"11._Number_Theory/2._Prime_generator_and_GCD/1._Primes/3._Complexity_of_Sieve_of_Eratosthenes.html\">3. Complexity of Sieve of Eratosthenes</a></li>\n</ul>\n</li>\n<li><a href=\"11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo.html\">2. Euclid’s Algo</a>\n<ul>\n<li><a href=\"11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/1._GCD_-_Euclid's_Algorithm.html\">1. GCD - Euclid’s Algorithm</a></li>\n<li><a href=\"11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/2._Complexity_of_Euclid's_GCD_algorithm.html\">2. Complexity of Euclid’s GCD algorithm</a></li>\n<li><a href=\"11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/3._Diophantine_Equations.html\">3. Diophantine Equations</a></li>\n<li><a href=\"11._Number_Theory/2._Prime_generator_and_GCD/2._Euclid's_Algo/4._Extended_Euclidean_Algorithm.html\">4. Extended Euclidean Algorithm</a></li>\n</ul>\n</li>\n<li><a href=\"11._Number_Theory/2._Prime_generator_and_GCD/3._Multiplicative_Modulo_Inverse.html\">3. Multiplicative Modulo Inverse</a></li>\n<li><a href=\"11._Number_Theory/2._Prime_generator_and_GCD/4._Applications_Of_NT_-_1.html\">4. Applications Of NT - 1</a>\n<ul>\n<li><a href=\"11._Number_Theory/2._Prime_generator_and_GCD/4._Applications_Of_NT_-_1/1._Sachin_and_Varun.html\">1. Sachin and Varun</a></li>\n<li><a href=\"11._Number_Theory/2._Prime_generator_and_GCD/4._Applications_Of_NT_-_1/2._Advanced_GCD.html\">2. Advanced GCD</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"11._Number_Theory/3._Totient_Function.html\">3. Totient Function</a>\n<ul>\n<li><a href=\"11._Number_Theory/3._Totient_Function/1._Euler's_Totient_Function.html\">1. Euler’s Totient Function</a></li>\n<li><a href=\"11._Number_Theory/3._Totient_Function/2._LCM_Sum.html\">2. LCM Sum</a></li>\n</ul>\n</li>\n<li><a href=\"11._Number_Theory/4._Solving_equations_using_NT.html\">4. Solving equations using NT</a>\n<ul>\n<li><a href=\"11._Number_Theory/4._Solving_equations_using_NT/1._Optimized_Power_Function.html\">1. Optimized Power Function</a></li>\n<li><a href=\"11._Number_Theory/4._Solving_equations_using_NT/2._Modular_exponentiation.html\">2. Modular exponentiation</a></li>\n<li><a href=\"11._Number_Theory/4._Solving_equations_using_NT/3._Matrix_Exponentiation.html\">3. Matrix Exponentiation</a>\n<ul>\n<li><a href=\"11._Number_Theory/4._Solving_equations_using_NT/3._Matrix_Exponentiation/1._Matrix_Exponentiation_-_More_Recurrence_Relation.html\">1. Matrix Exponentiation - More Recurrence Relation</a></li>\n<li><a href=\"11._Number_Theory/4._Solving_equations_using_NT/3._Matrix_Exponentiation/2._Matrix_Expo_Fibonacci_Sum.html\">2. Matrix Expo Fibonacci Sum</a></li>\n</ul>\n</li>\n<li><a href=\"11._Number_Theory/4._Solving_equations_using_NT/4._Fermat's_Little_Theorem.html\">4. Fermat’s Little Theorem</a></li>\n<li><a href=\"11._Number_Theory/4._Solving_equations_using_NT/5._Wilson's_Theorem.html\">5. Wilson’s Theorem</a></li>\n<li><a href=\"11._Number_Theory/4._Solving_equations_using_NT/6._Income_on_the_Nth_day.html\">6. Income on the Nth day</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"12._Game_Theory.html\">12. Game Theory</a>\n<ul>\n<li><a href=\"12._Game_Theory/1._Intro_to_Game_Theory.html\">1. Intro to Game Theory</a></li>\n<li><a href=\"12._Game_Theory/2._Game_of_Nim.html\">2. Game of Nim</a></li>\n<li><a href=\"12._Game_Theory/3._Proof_of_Nim_Formula.html\">3. Proof of Nim Formula</a></li>\n<li><a href=\"12._Game_Theory/4._Grundy_Numbers.html\">4. Grundy Numbers</a></li>\n<li><a href=\"12._Game_Theory/5._Sprague-Grundy_Theorem.html\">5. Sprague-Grundy Theorem</a></li>\n<li><a href=\"12._Game_Theory/6._MinMax_Algorithm.html\">6. MinMax Algorithm</a></li>\n</ul>\n</li>\n<li><a href=\"13._Computational_Geometry.html\">13. Computational Geometry</a>\n<ul>\n<li><a href=\"13._Computational_Geometry/1._Intro_to_Computational_Geometry.html\">1. Intro to Computational Geometry</a></li>\n<li><a href=\"13._Computational_Geometry/2._Distance_betwn_point_and_line.html\">2. Distance betwn point and line</a></li>\n<li><a href=\"13._Computational_Geometry/3._Area_of_a_polygon.html\">3. Area of a polygon</a></li>\n<li><a href=\"13._Computational_Geometry/4._Intersection_of_two_lines.html\">4. Intersection of two lines</a></li>\n<li><a href=\"13._Computational_Geometry/5._Convex_Hull.html\">5. Convex Hull</a></li>\n</ul>\n</li>\n<li><a href=\"14._FFT.html\">14. FFT</a></li>\n<li><a href=\"15._HLD.html\">15. HLD</a>\n<ul>\n<li><a href=\"15._HLD/1._Intro_to_HLD.html\">1. Intro to HLD</a></li>\n<li><a href=\"15._HLD/2._Basics_of_HLD.html\">2. Basics of HLD</a></li>\n<li><a href=\"15._HLD/3._Importance_of_HLD.html\">3. Importance of HLD</a></li>\n<li><a href=\"15._HLD/4._Complexity_of_operations.html\">4. Complexity of operations</a></li>\n</ul>\n</li>\n<li><a href=\"Home.html\">Home</a>\n<ul>\n<li><a href=\"Home/1._Motivation.html\">1. Motivation</a></li>\n<li><a href=\"Home/2._Roadmap.html\">2. Roadmap</a></li>\n<li><a href=\"Home/3._Resources.html\">3. Resources</a></li>\n<li><a href=\"Home/cpbook.net.html\">cpbook.net</a></li>\n</ul>\n</li>\n</ul>\n",
      "id": 499
    },
    {
      "path": "home/5_projects.md",
      "url": "home/5_projects.html",
      "content": "",
      "html": "",
      "id": 500
    },
    {
      "path": "home/6_setup.md",
      "url": "home/6_setup.html",
      "content": "",
      "html": "",
      "id": 501
    }
  ]
}